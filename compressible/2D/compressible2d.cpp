// This code conforms with the UFC specification version 2.0.5
// and was automatically generated by FFC version 1.0.0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   False
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'dolfin'
//   log_level:                      20
//   log_prefix:                     ''
//   optimize:                       False
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              'auto'
//   quadrature_rule:                'auto'
//   representation:                 'quadrature'
//   split:                          True
//   swig_binary:                    'swig'
//   swig_path:                      ''

#include "compressible2d.h"

/// Constructor
compressible2d_finite_element_0::compressible2d_finite_element_0() : ufc::finite_element()
{
    // Do nothing
}

/// Destructor
compressible2d_finite_element_0::~compressible2d_finite_element_0()
{
    // Do nothing
}

/// Return a string identifying the finite element
const char* compressible2d_finite_element_0::signature() const
{
    return "FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None)";
}

/// Return the cell shape
ufc::shape compressible2d_finite_element_0::cell_shape() const
{
    return ufc::triangle;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the cell shape
unsigned int compressible2d_finite_element_0::topological_dimension() const
{
    return 2;
}

/// Return the geometric dimension of the cell shape
unsigned int compressible2d_finite_element_0::geometric_dimension() const
{
    return 2;
}
#endif
/// Return the dimension of the finite element function space
unsigned int compressible2d_finite_element_0::space_dimension() const
{
    return 1;
}

/// Return the rank of the value space
unsigned int compressible2d_finite_element_0::value_rank() const
{
    return 0;
}

/// Return the dimension of the value space for axis i
unsigned int compressible2d_finite_element_0::value_dimension(unsigned int i) const
{
    return 1;
}

/// Evaluate basis function i at given point in cell
void compressible2d_finite_element_0::evaluate_basis(unsigned int i,
                                   double* values,
                                   const double* coordinates,
                                   const ufc::cell& c) const
{
    // Extract vertex coordinates
    
    // Compute Jacobian of affine map from reference cell
    
    // Compute determinant of Jacobian
    
    // Compute inverse of Jacobian
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    // Reset values.
    *values = 0.0;
    
    // Array of basisvalues.
    double basisvalues[1] = {0.0};
    
    // Declare helper variables.
    
    // Compute basisvalues.
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients.
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s).
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    }// end loop over 'r'
}

/// Evaluate all basis functions at given point in cell
void compressible2d_finite_element_0::evaluate_basis_all(double* values,
                                       const double* coordinates,
                                       const ufc::cell& c) const
{
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, coordinates, c);
}

/// Evaluate order n derivatives of basis function i at given point in cell
void compressible2d_finite_element_0::evaluate_basis_derivatives(unsigned int i,
                                               unsigned int n,
                                               double* values,
                                               const double* coordinates,
                                               const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K_00, K_01}, {K_10, K_11}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    
    // Array of basisvalues.
    double basisvalues[1] = {0.0};
    
    // Declare helper variables.
    
    // Compute basisvalues.
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients.
    static const double coefficients0[1] = \
    {1.0};
    
    // Tables of derivatives of the polynomial base (transpose).
    static const double dmats0[1][1] = \
    {{0.0}};
    
    static const double dmats1[1][1] = \
    {{0.0}};
    
    // Compute reference derivatives.
    // Declare pointer to array of derivatives on FIAT element.
    double *derivatives = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      derivatives[r] = 0.0;
    }// end loop over 'r'
    
    // Declare derivative matrix (of polynomial basis).
    double dmats[1][1] = \
    {{1.0}};
    
    // Declare (auxiliary) derivative matrix (of polynomial basis).
    double dmats_old[1][1] = \
    {{1.0}};
    
    // Loop possible derivatives.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      // Resetting dmats values to compute next derivative.
      for (unsigned int t = 0; t < 1; t++)
      {
        for (unsigned int u = 0; u < 1; u++)
        {
          dmats[t][u] = 0.0;
          if (t == u)
          {
          dmats[t][u] = 1.0;
          }
          
        }// end loop over 'u'
      }// end loop over 't'
      
      // Looping derivative order to generate dmats.
      for (unsigned int s = 0; s < n; s++)
      {
        // Updating dmats_old with new values and resetting dmats.
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            dmats_old[t][u] = dmats[t][u];
            dmats[t][u] = 0.0;
          }// end loop over 'u'
        }// end loop over 't'
        
        // Update dmats using an inner product.
        if (combinations[r][s] == 0)
        {
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            for (unsigned int tu = 0; tu < 1; tu++)
            {
              dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
            }// end loop over 'tu'
          }// end loop over 'u'
        }// end loop over 't'
        }
        
        if (combinations[r][s] == 1)
        {
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            for (unsigned int tu = 0; tu < 1; tu++)
            {
              dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
            }// end loop over 'tu'
          }// end loop over 'u'
        }// end loop over 't'
        }
        
      }// end loop over 's'
      for (unsigned int s = 0; s < 1; s++)
      {
        for (unsigned int t = 0; t < 1; t++)
        {
          derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
        }// end loop over 't'
      }// end loop over 's'
    }// end loop over 'r'
    
    // Transform derivatives back to physical element
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r] += transform[r][s]*derivatives[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      delete [] combinations[r];
    }// end loop over 'r'
    delete [] combinations;
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      delete [] transform[r];
    }// end loop over 'r'
    delete [] transform;
}

/// Evaluate order n derivatives of all basis functions at given point in cell
void compressible2d_finite_element_0::evaluate_basis_derivatives_all(unsigned int n,
                                                   double* values,
                                                   const double* coordinates,
                                                   const ufc::cell& c) const
{
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, coordinates, c);
}

/// Evaluate linear functional for dof i on the function f
double compressible2d_finite_element_0::evaluate_dof(unsigned int i,
                                   const ufc::function& f,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
      y[1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

/// Evaluate linear functionals for all dofs on the function f
void compressible2d_finite_element_0::evaluate_dofs(double* values,
                                  const ufc::function& f,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    y[1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
}

/// Interpolate vertex values from dof values
void compressible2d_finite_element_0::interpolate_vertex_values(double* vertex_values,
                                              const double* dof_values,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Map coordinate xhat from reference cell to coordinate x in cell
void compressible2d_finite_element_0::map_from_reference_cell(double* x,
                                            const double* xhat,
                                            const ufc::cell& c) const
{
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
}

/// Map from coordinate x in cell to coordinate xhat in reference cell
void compressible2d_finite_element_0::map_to_reference_cell(double* xhat,
                                          const double* x,
                                          const ufc::cell& c) const
{
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
}
#endif
/// Return the number of sub elements (for a mixed element)
unsigned int compressible2d_finite_element_0::num_sub_elements() const
{
    return 0;
}

/// Create a new finite element for sub element i (for a mixed element)
ufc::finite_element* compressible2d_finite_element_0::create_sub_element(unsigned int i) const
{
    return 0;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Create a new class instance
ufc::finite_element* compressible2d_finite_element_0::create() const
{
    return new compressible2d_finite_element_0();
}
#endif


/// Constructor
compressible2d_finite_element_1::compressible2d_finite_element_1() : ufc::finite_element()
{
    // Do nothing
}

/// Destructor
compressible2d_finite_element_1::~compressible2d_finite_element_1()
{
    // Do nothing
}

/// Return a string identifying the finite element
const char* compressible2d_finite_element_1::signature() const
{
    return "FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)";
}

/// Return the cell shape
ufc::shape compressible2d_finite_element_1::cell_shape() const
{
    return ufc::triangle;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the cell shape
unsigned int compressible2d_finite_element_1::topological_dimension() const
{
    return 2;
}

/// Return the geometric dimension of the cell shape
unsigned int compressible2d_finite_element_1::geometric_dimension() const
{
    return 2;
}
#endif
/// Return the dimension of the finite element function space
unsigned int compressible2d_finite_element_1::space_dimension() const
{
    return 3;
}

/// Return the rank of the value space
unsigned int compressible2d_finite_element_1::value_rank() const
{
    return 0;
}

/// Return the dimension of the value space for axis i
unsigned int compressible2d_finite_element_1::value_dimension(unsigned int i) const
{
    return 1;
}

/// Evaluate basis function i at given point in cell
void compressible2d_finite_element_1::evaluate_basis(unsigned int i,
                                   double* values,
                                   const double* coordinates,
                                   const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
}

/// Evaluate all basis functions at given point in cell
void compressible2d_finite_element_1::evaluate_basis_all(double* values,
                                       const double* coordinates,
                                       const ufc::cell& c) const
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
}

/// Evaluate order n derivatives of basis function i at given point in cell
void compressible2d_finite_element_1::evaluate_basis_derivatives(unsigned int i,
                                               unsigned int n,
                                               double* values,
                                               const double* coordinates,
                                               const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K_00, K_01}, {K_10, K_11}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
}

/// Evaluate order n derivatives of all basis functions at given point in cell
void compressible2d_finite_element_1::evaluate_basis_derivatives_all(unsigned int n,
                                                   double* values,
                                                   const double* coordinates,
                                                   const ufc::cell& c) const
{
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
}

/// Evaluate linear functional for dof i on the function f
double compressible2d_finite_element_1::evaluate_dof(unsigned int i,
                                   const ufc::function& f,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

/// Evaluate linear functionals for all dofs on the function f
void compressible2d_finite_element_1::evaluate_dofs(double* values,
                                  const ufc::function& f,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
}

/// Interpolate vertex values from dof values
void compressible2d_finite_element_1::interpolate_vertex_values(double* vertex_values,
                                              const double* dof_values,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Map coordinate xhat from reference cell to coordinate x in cell
void compressible2d_finite_element_1::map_from_reference_cell(double* x,
                                            const double* xhat,
                                            const ufc::cell& c) const
{
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
}

/// Map from coordinate x in cell to coordinate xhat in reference cell
void compressible2d_finite_element_1::map_to_reference_cell(double* xhat,
                                          const double* x,
                                          const ufc::cell& c) const
{
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
}
#endif
/// Return the number of sub elements (for a mixed element)
unsigned int compressible2d_finite_element_1::num_sub_elements() const
{
    return 0;
}

/// Create a new finite element for sub element i (for a mixed element)
ufc::finite_element* compressible2d_finite_element_1::create_sub_element(unsigned int i) const
{
    return 0;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Create a new class instance
ufc::finite_element* compressible2d_finite_element_1::create() const
{
    return new compressible2d_finite_element_1();
}
#endif


/// Constructor
compressible2d_finite_element_2::compressible2d_finite_element_2() : ufc::finite_element()
{
    // Do nothing
}

/// Destructor
compressible2d_finite_element_2::~compressible2d_finite_element_2()
{
    // Do nothing
}

/// Return a string identifying the finite element
const char* compressible2d_finite_element_2::signature() const
{
    return "VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None)";
}

/// Return the cell shape
ufc::shape compressible2d_finite_element_2::cell_shape() const
{
    return ufc::triangle;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the cell shape
unsigned int compressible2d_finite_element_2::topological_dimension() const
{
    return 2;
}

/// Return the geometric dimension of the cell shape
unsigned int compressible2d_finite_element_2::geometric_dimension() const
{
    return 2;
}
#endif
/// Return the dimension of the finite element function space
unsigned int compressible2d_finite_element_2::space_dimension() const
{
    return 12;
}

/// Return the rank of the value space
unsigned int compressible2d_finite_element_2::value_rank() const
{
    return 1;
}

/// Return the dimension of the value space for axis i
unsigned int compressible2d_finite_element_2::value_dimension(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return 4;
        break;
      }
    }
    
    return 0;
}

/// Evaluate basis function i at given point in cell
void compressible2d_finite_element_2::evaluate_basis(unsigned int i,
                                   double* values,
                                   const double* coordinates,
                                   const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    values[3] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
}

/// Evaluate all basis functions at given point in cell
void compressible2d_finite_element_2::evaluate_basis_all(double* values,
                                       const double* coordinates,
                                       const ufc::cell& c) const
{
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {0.0, 0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 12; r++)
    {
      evaluate_basis(r, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 4; s++)
      {
        values[r*4 + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
}

/// Evaluate order n derivatives of basis function i at given point in cell
void compressible2d_finite_element_2::evaluate_basis_derivatives(unsigned int i,
                                               unsigned int n,
                                               double* values,
                                               const double* coordinates,
                                               const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K_00, K_01}, {K_10, K_11}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 4*num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
}

/// Evaluate order n derivatives of all basis functions at given point in cell
void compressible2d_finite_element_2::evaluate_basis_derivatives_all(unsigned int n,
                                                   double* values,
                                                   const double* coordinates,
                                                   const ufc::cell& c) const
{
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[4*num_derivatives];
    for (unsigned int r = 0; r < 4*num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 4*num_derivatives; s++)
      {
        values[r*4*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
}

/// Evaluate linear functional for dof i on the function f
double compressible2d_finite_element_2::evaluate_dof(unsigned int i,
                                   const ufc::function& f,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[4];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 4:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 7:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 8:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 9:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 10:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 11:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    }
    
    return 0.0;
}

/// Evaluate linear functionals for all dofs on the function f
void compressible2d_finite_element_2::evaluate_dofs(double* values,
                                  const ufc::function& f,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[4];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[3] = vals[1];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[6] = vals[2];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[7] = vals[2];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[8] = vals[2];
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[9] = vals[3];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[10] = vals[3];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[11] = vals[3];
}

/// Interpolate vertex values from dof values
void compressible2d_finite_element_2::interpolate_vertex_values(double* vertex_values,
                                              const double* dof_values,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[4] = dof_values[1];
    vertex_values[8] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[3];
    vertex_values[5] = dof_values[4];
    vertex_values[9] = dof_values[5];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[6];
    vertex_values[6] = dof_values[7];
    vertex_values[10] = dof_values[8];
    // Evaluate function and change variables
    vertex_values[3] = dof_values[9];
    vertex_values[7] = dof_values[10];
    vertex_values[11] = dof_values[11];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Map coordinate xhat from reference cell to coordinate x in cell
void compressible2d_finite_element_2::map_from_reference_cell(double* x,
                                            const double* xhat,
                                            const ufc::cell& c) const
{
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
}

/// Map from coordinate x in cell to coordinate xhat in reference cell
void compressible2d_finite_element_2::map_to_reference_cell(double* xhat,
                                          const double* x,
                                          const ufc::cell& c) const
{
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
}
#endif
/// Return the number of sub elements (for a mixed element)
unsigned int compressible2d_finite_element_2::num_sub_elements() const
{
    return 4;
}

/// Create a new finite element for sub element i (for a mixed element)
ufc::finite_element* compressible2d_finite_element_2::create_sub_element(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new compressible2d_finite_element_1();
        break;
      }
    case 1:
      {
        return new compressible2d_finite_element_1();
        break;
      }
    case 2:
      {
        return new compressible2d_finite_element_1();
        break;
      }
    case 3:
      {
        return new compressible2d_finite_element_1();
        break;
      }
    }
    
    return 0;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Create a new class instance
ufc::finite_element* compressible2d_finite_element_2::create() const
{
    return new compressible2d_finite_element_2();
}
#endif

/// Constructor


#ifndef UFC_BACKWARD_COMPATIBILITY
compressible2d_dofmap_0::compressible2d_dofmap_0() : ufc::dofmap()
#else
compressible2d_dofmap_0::compressible2d_dofmap_0() : ufc::dof_map()
#endif
{
    _global_dimension = 0;
}

/// Destructor
compressible2d_dofmap_0::~compressible2d_dofmap_0()
{
    // Do nothing
}

/// Return a string identifying the dofmap
const char* compressible2d_dofmap_0::signature() const
{
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None)";
}

/// Return true iff mesh entities of topological dimension d are needed
bool compressible2d_dofmap_0::needs_mesh_entities(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
}

/// Initialize dofmap for mesh (return true iff init_cell() is needed)
bool compressible2d_dofmap_0::init_mesh(const ufc::mesh& m)
{
    _global_dimension = m.num_entities[2];
    return false;
}

/// Initialize dofmap for given cell
void compressible2d_dofmap_0::init_cell(const ufc::mesh& m,
                              const ufc::cell& c)
{
    // Do nothing
}

/// Finish initialization of dofmap for cells
void compressible2d_dofmap_0::init_cell_finalize()
{
    // Do nothing
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the associated cell shape
unsigned int compressible2d_dofmap_0::topological_dimension() const
{
    return 2;
}

/// Return the geometric dimension of the associated cell shape
unsigned int compressible2d_dofmap_0::geometric_dimension() const
{
    return 2;
}
#endif
/// Return the dimension of the global finite element function space
unsigned int compressible2d_dofmap_0::global_dimension() const
{
    return _global_dimension;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the dimension of the local finite element function space for a cell
unsigned int compressible2d_dofmap_0::local_dimension(const ufc::cell& c) const
{
    return 1;
}

/// Return the maximum dimension of the local finite element function space
unsigned int compressible2d_dofmap_0::max_local_dimension() const
{
    return 1;
}
#else

/// Return the dimension of the local finite element function space for a cell
unsigned int compressible2d_dofmap_0::local_dimension() const
{
    return 1;
}

/// Return the maximum dimension of the local finite element function space
unsigned int compressible2d_dofmap_0::geometric_dimension() const
{
    return 2;
}

#endif
/// Return the number of dofs on each cell facet
unsigned int compressible2d_dofmap_0::num_facet_dofs() const
{
    return 0;
}

/// Return the number of dofs associated with each cell entity of dimension d
unsigned int compressible2d_dofmap_0::num_entity_dofs(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    }
    
    return 0;
}

/// Tabulate the local-to-global mapping of dofs on a cell
void compressible2d_dofmap_0::tabulate_dofs(unsigned int* dofs,
                                  const ufc::mesh& m,
                                  const ufc::cell& c) const
{
    dofs[0] = c.entity_indices[2][0];
}

/// Tabulate the local-to-local mapping from facet dofs to cell dofs
void compressible2d_dofmap_0::tabulate_facet_dofs(unsigned int* dofs,
                                        unsigned int facet) const
{
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

/// Tabulate the local-to-local mapping of dofs on entity (d, i)
void compressible2d_dofmap_0::tabulate_entity_dofs(unsigned int* dofs,
                                  unsigned int d, unsigned int i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
}

/// Tabulate the coordinates of all dofs on a cell
void compressible2d_dofmap_0::tabulate_coordinates(double** coordinates,
                                         const ufc::cell& c) const
{
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[0][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the number of sub dofmaps (for a mixed element)
unsigned int compressible2d_dofmap_0::num_sub_dofmaps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dofmap* compressible2d_dofmap_0::create_sub_dofmap(unsigned int i) const
{
    return 0;
}

/// Create a new class instance
ufc::dofmap* compressible2d_dofmap_0::create() const
{
    return new compressible2d_dofmap_0();
}
#else

/// Return the number of sub dofmaps (for a mixed element)
unsigned int compressible2d_dofmap_0::num_sub_dof_maps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dof_map* compressible2d_dofmap_0::create_sub_dof_map(unsigned int i) const
{
    return 0;
}

#endif

/// Constructor


#ifndef UFC_BACKWARD_COMPATIBILITY
compressible2d_dofmap_1::compressible2d_dofmap_1() : ufc::dofmap()
#else
compressible2d_dofmap_1::compressible2d_dofmap_1() : ufc::dof_map()
#endif
{
    _global_dimension = 0;
}

/// Destructor
compressible2d_dofmap_1::~compressible2d_dofmap_1()
{
    // Do nothing
}

/// Return a string identifying the dofmap
const char* compressible2d_dofmap_1::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)";
}

/// Return true iff mesh entities of topological dimension d are needed
bool compressible2d_dofmap_1::needs_mesh_entities(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
}

/// Initialize dofmap for mesh (return true iff init_cell() is needed)
bool compressible2d_dofmap_1::init_mesh(const ufc::mesh& m)
{
    _global_dimension = m.num_entities[0];
    return false;
}

/// Initialize dofmap for given cell
void compressible2d_dofmap_1::init_cell(const ufc::mesh& m,
                              const ufc::cell& c)
{
    // Do nothing
}

/// Finish initialization of dofmap for cells
void compressible2d_dofmap_1::init_cell_finalize()
{
    // Do nothing
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the associated cell shape
unsigned int compressible2d_dofmap_1::topological_dimension() const
{
    return 2;
}

/// Return the geometric dimension of the associated cell shape
unsigned int compressible2d_dofmap_1::geometric_dimension() const
{
    return 2;
}
#endif
/// Return the dimension of the global finite element function space
unsigned int compressible2d_dofmap_1::global_dimension() const
{
    return _global_dimension;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the dimension of the local finite element function space for a cell
unsigned int compressible2d_dofmap_1::local_dimension(const ufc::cell& c) const
{
    return 3;
}

/// Return the maximum dimension of the local finite element function space
unsigned int compressible2d_dofmap_1::max_local_dimension() const
{
    return 3;
}
#else

/// Return the dimension of the local finite element function space for a cell
unsigned int compressible2d_dofmap_1::local_dimension() const
{
    return 3;
}

/// Return the maximum dimension of the local finite element function space
unsigned int compressible2d_dofmap_1::geometric_dimension() const
{
    return 2;
}

#endif
/// Return the number of dofs on each cell facet
unsigned int compressible2d_dofmap_1::num_facet_dofs() const
{
    return 2;
}

/// Return the number of dofs associated with each cell entity of dimension d
unsigned int compressible2d_dofmap_1::num_entity_dofs(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

/// Tabulate the local-to-global mapping of dofs on a cell
void compressible2d_dofmap_1::tabulate_dofs(unsigned int* dofs,
                                  const ufc::mesh& m,
                                  const ufc::cell& c) const
{
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
}

/// Tabulate the local-to-local mapping from facet dofs to cell dofs
void compressible2d_dofmap_1::tabulate_facet_dofs(unsigned int* dofs,
                                        unsigned int facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
        break;
      }
    }
    
}

/// Tabulate the local-to-local mapping of dofs on entity (d, i)
void compressible2d_dofmap_1::tabulate_entity_dofs(unsigned int* dofs,
                                  unsigned int d, unsigned int i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

/// Tabulate the coordinates of all dofs on a cell
void compressible2d_dofmap_1::tabulate_coordinates(double** coordinates,
                                         const ufc::cell& c) const
{
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the number of sub dofmaps (for a mixed element)
unsigned int compressible2d_dofmap_1::num_sub_dofmaps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dofmap* compressible2d_dofmap_1::create_sub_dofmap(unsigned int i) const
{
    return 0;
}

/// Create a new class instance
ufc::dofmap* compressible2d_dofmap_1::create() const
{
    return new compressible2d_dofmap_1();
}
#else

/// Return the number of sub dofmaps (for a mixed element)
unsigned int compressible2d_dofmap_1::num_sub_dof_maps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dof_map* compressible2d_dofmap_1::create_sub_dof_map(unsigned int i) const
{
    return 0;
}

#endif

/// Constructor


#ifndef UFC_BACKWARD_COMPATIBILITY
compressible2d_dofmap_2::compressible2d_dofmap_2() : ufc::dofmap()
#else
compressible2d_dofmap_2::compressible2d_dofmap_2() : ufc::dof_map()
#endif
{
    _global_dimension = 0;
}

/// Destructor
compressible2d_dofmap_2::~compressible2d_dofmap_2()
{
    // Do nothing
}

/// Return a string identifying the dofmap
const char* compressible2d_dofmap_2::signature() const
{
    return "FFC dofmap for VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None)";
}

/// Return true iff mesh entities of topological dimension d are needed
bool compressible2d_dofmap_2::needs_mesh_entities(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
}

/// Initialize dofmap for mesh (return true iff init_cell() is needed)
bool compressible2d_dofmap_2::init_mesh(const ufc::mesh& m)
{
    _global_dimension = 4*m.num_entities[0];
    return false;
}

/// Initialize dofmap for given cell
void compressible2d_dofmap_2::init_cell(const ufc::mesh& m,
                              const ufc::cell& c)
{
    // Do nothing
}

/// Finish initialization of dofmap for cells
void compressible2d_dofmap_2::init_cell_finalize()
{
    // Do nothing
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the associated cell shape
unsigned int compressible2d_dofmap_2::topological_dimension() const
{
    return 2;
}

/// Return the geometric dimension of the associated cell shape
unsigned int compressible2d_dofmap_2::geometric_dimension() const
{
    return 2;
}
#endif
/// Return the dimension of the global finite element function space
unsigned int compressible2d_dofmap_2::global_dimension() const
{
    return _global_dimension;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the dimension of the local finite element function space for a cell
unsigned int compressible2d_dofmap_2::local_dimension(const ufc::cell& c) const
{
    return 12;
}

/// Return the maximum dimension of the local finite element function space
unsigned int compressible2d_dofmap_2::max_local_dimension() const
{
    return 12;
}
#else

/// Return the dimension of the local finite element function space for a cell
unsigned int compressible2d_dofmap_2::local_dimension() const
{
    return 12;
}

/// Return the maximum dimension of the local finite element function space
unsigned int compressible2d_dofmap_2::geometric_dimension() const
{
    return 2;
}

#endif
/// Return the number of dofs on each cell facet
unsigned int compressible2d_dofmap_2::num_facet_dofs() const
{
    return 8;
}

/// Return the number of dofs associated with each cell entity of dimension d
unsigned int compressible2d_dofmap_2::num_entity_dofs(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return 4;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

/// Tabulate the local-to-global mapping of dofs on a cell
void compressible2d_dofmap_2::tabulate_dofs(unsigned int* dofs,
                                  const ufc::mesh& m,
                                  const ufc::cell& c) const
{
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[3] = offset + c.entity_indices[0][0];
    dofs[4] = offset + c.entity_indices[0][1];
    dofs[5] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[6] = offset + c.entity_indices[0][0];
    dofs[7] = offset + c.entity_indices[0][1];
    dofs[8] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[9] = offset + c.entity_indices[0][0];
    dofs[10] = offset + c.entity_indices[0][1];
    dofs[11] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
}

/// Tabulate the local-to-local mapping from facet dofs to cell dofs
void compressible2d_dofmap_2::tabulate_facet_dofs(unsigned int* dofs,
                                        unsigned int facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 5;
      dofs[4] = 7;
      dofs[5] = 8;
      dofs[6] = 10;
      dofs[7] = 11;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 8;
      dofs[6] = 9;
      dofs[7] = 11;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
        break;
      }
    }
    
}

/// Tabulate the local-to-local mapping of dofs on entity (d, i)
void compressible2d_dofmap_2::tabulate_entity_dofs(unsigned int* dofs,
                                  unsigned int d, unsigned int i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 3;
        dofs[2] = 6;
        dofs[3] = 9;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 4;
        dofs[2] = 7;
        dofs[3] = 10;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 5;
        dofs[2] = 8;
        dofs[3] = 11;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

/// Tabulate the coordinates of all dofs on a cell
void compressible2d_dofmap_2::tabulate_coordinates(double** coordinates,
                                         const ufc::cell& c) const
{
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = x[0][0];
    coordinates[3][1] = x[0][1];
    coordinates[4][0] = x[1][0];
    coordinates[4][1] = x[1][1];
    coordinates[5][0] = x[2][0];
    coordinates[5][1] = x[2][1];
    coordinates[6][0] = x[0][0];
    coordinates[6][1] = x[0][1];
    coordinates[7][0] = x[1][0];
    coordinates[7][1] = x[1][1];
    coordinates[8][0] = x[2][0];
    coordinates[8][1] = x[2][1];
    coordinates[9][0] = x[0][0];
    coordinates[9][1] = x[0][1];
    coordinates[10][0] = x[1][0];
    coordinates[10][1] = x[1][1];
    coordinates[11][0] = x[2][0];
    coordinates[11][1] = x[2][1];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the number of sub dofmaps (for a mixed element)
unsigned int compressible2d_dofmap_2::num_sub_dofmaps() const
{
    return 4;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dofmap* compressible2d_dofmap_2::create_sub_dofmap(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new compressible2d_dofmap_1();
        break;
      }
    case 1:
      {
        return new compressible2d_dofmap_1();
        break;
      }
    case 2:
      {
        return new compressible2d_dofmap_1();
        break;
      }
    case 3:
      {
        return new compressible2d_dofmap_1();
        break;
      }
    }
    
    return 0;
}

/// Create a new class instance
ufc::dofmap* compressible2d_dofmap_2::create() const
{
    return new compressible2d_dofmap_2();
}
#else

/// Return the number of sub dofmaps (for a mixed element)
unsigned int compressible2d_dofmap_2::num_sub_dof_maps() const
{
    return 4;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dof_map* compressible2d_dofmap_2::create_sub_dof_map(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new compressible2d_dofmap_1();
        break;
      }
    case 1:
      {
        return new compressible2d_dofmap_1();
        break;
      }
    case 2:
      {
        return new compressible2d_dofmap_1();
        break;
      }
    case 3:
      {
        return new compressible2d_dofmap_1();
        break;
      }
    }
    
    return 0;
}

#endif

/// Constructor
compressible2d_cell_integral_0_0::compressible2d_cell_integral_0_0() : ufc::cell_integral()
{
    // Do nothing
}

/// Destructor
compressible2d_cell_integral_0_0::~compressible2d_cell_integral_0_0()
{
    // Do nothing
}

/// Tabulate the tensor for the contribution from a local cell
void compressible2d_cell_integral_0_0::tabulate_tensor(double* A,
                                    const double * const * w,
                                    const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Cell Volume.
    
    // Compute circumradius, assuming triangle is embedded in 2D.
    
    
    // Facet Area.
    
    // Array of quadrature weights.
    static const double W3[3] = {0.166666666666667, 0.166666666666667, 0.166666666666667};
    // Quadrature points on the UFC reference element: (0.166666666666667, 0.166666666666667), (0.166666666666667, 0.666666666666667), (0.666666666666667, 0.166666666666667)
    
    // Value of basis functions at quadrature points.
    static const double FE0_C0[3][12] = \
    {{0.666666666666667, 0.166666666666667, 0.166666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.166666666666667, 0.166666666666667, 0.666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.166666666666667, 0.666666666666667, 0.166666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C1[3][12] = \
    {{0.0, 0.0, 0.0, 0.666666666666667, 0.166666666666667, 0.166666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.166666666666667, 0.166666666666667, 0.666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.166666666666667, 0.666666666666667, 0.166666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C2[3][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.666666666666667, 0.166666666666667, 0.166666666666667, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.166666666666667, 0.166666666666667, 0.666666666666667, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.166666666666667, 0.666666666666667, 0.166666666666667, 0.0, 0.0, 0.0}};
    
    static const double FE0_C3[3][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.666666666666667, 0.166666666666667, 0.166666666666667},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.166666666666667, 0.166666666666667, 0.666666666666667},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.166666666666667, 0.666666666666667, 0.166666666666667}};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 144; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', False), ('ignore ones', False), ('ignore zero tables', False), ('optimisation', False), ('remove zero terms', False)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 4320
    for (unsigned int ip = 0; ip < 3; ip++)
    {
      
      // Number of operations for primary indices: 1440
      for (unsigned int j = 0; j < 12; j++)
      {
        for (unsigned int k = 0; k < 12; k++)
        {
          // Number of operations to compute entry: 10
          A[j*12 + k] += (FE0_C3[ip][j]*FE0_C3[ip][k] + FE0_C2[ip][j]*FE0_C2[ip][k] + FE0_C1[ip][j]*FE0_C1[ip][k] + FE0_C0[ip][j]*FE0_C0[ip][k])*W3[ip]*det;
        }// end loop over 'k'
      }// end loop over 'j'
    }// end loop over 'ip'
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Tabulate the tensor for the contribution from a local cell
/// using the specified reference cell quadrature points/weights
void compressible2d_cell_integral_0_0::tabulate_tensor(double* A,
                     const double * const * w,
                     const ufc::cell& c,
                     unsigned int num_quadrature_points,
                     const double * const * quadrature_points,
                     const double* quadrature_weights) const
{
    throw std::runtime_error("Quadrature version of tabulate_tensor not yet implemented (introduced in UFC 2.0).");
}
#endif

/// Constructor
compressible2d_cell_integral_1_0::compressible2d_cell_integral_1_0() : ufc::cell_integral()
{
    // Do nothing
}

/// Destructor
compressible2d_cell_integral_1_0::~compressible2d_cell_integral_1_0()
{
    // Do nothing
}

/// Tabulate the tensor for the contribution from a local cell
void compressible2d_cell_integral_1_0::tabulate_tensor(double* A,
                                    const double * const * w,
                                    const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Cell Volume.
    
    // Compute circumradius, assuming triangle is embedded in 2D.
    
    
    // Facet Area.
    
    // Array of quadrature weights.
    static const double W100[100] = {0.00100338733149811, 0.00214305550645421, 0.00287391164244473, 0.00309011325737211, 0.00281876808697729, 0.00220192367176984, 0.00144683172286484, 0.000759206314136439, 0.000280663684048605, 4.99748596351734e-05, 0.00224920604148448, 0.00480390098722555, 0.00644219757013291, 0.00692683791111401, 0.00631858706179499, 0.00493586062925265, 0.00324323673413364, 0.00170184670952471, 0.000629139350249611, 0.000112024292798222, 0.00329719586325924, 0.00704221941896127, 0.00944386009408088, 0.0101543126262094, 0.00926265479353039, 0.00723566402909657, 0.00475438290050921, 0.00249480119964587, 0.000922279073057938, 0.000164220630740906, 0.0040523978892458, 0.00865519559423296, 0.0116069169981781, 0.012480094225436, 0.0113842077604123, 0.00889294747865494, 0.00584334447503674, 0.0030662197621282, 0.00113352130839481, 0.000201834335897545, 0.00444756688655733, 0.00949920574772376, 0.0127387638398271, 0.0136970888188116, 0.012494337142773, 0.0097601419729592, 0.00641315737106899, 0.00336522174121631, 0.00124405647574803, 0.000221516182132668, 0.00444756688655733, 0.00949920574772376, 0.0127387638398271, 0.0136970888188116, 0.012494337142773, 0.0097601419729592, 0.00641315737106899, 0.00336522174121631, 0.00124405647574803, 0.000221516182132668, 0.0040523978892458, 0.00865519559423296, 0.0116069169981781, 0.012480094225436, 0.0113842077604123, 0.00889294747865494, 0.00584334447503674, 0.0030662197621282, 0.00113352130839481, 0.000201834335897545, 0.00329719586325924, 0.00704221941896127, 0.00944386009408088, 0.0101543126262094, 0.00926265479353039, 0.00723566402909657, 0.00475438290050921, 0.00249480119964587, 0.000922279073057938, 0.000164220630740906, 0.00224920604148448, 0.00480390098722554, 0.0064421975701329, 0.006926837911114, 0.00631858706179498, 0.00493586062925264, 0.00324323673413364, 0.00170184670952471, 0.000629139350249611, 0.000112024292798222, 0.00100338733149811, 0.00214305550645421, 0.00287391164244473, 0.00309011325737211, 0.00281876808697729, 0.00220192367176984, 0.00144683172286484, 0.000759206314136439, 0.000280663684048605, 4.99748596351734e-05};
    // Quadrature points on the UFC reference element: (0.0128912497882931, 0.0119176134324156), (0.012241333712863, 0.0617320718771481), (0.0111274115333846, 0.14711144964307), (0.00963945446221848, 0.261159676008456), (0.00789797394606312, 0.394639846885787), (0.00604404690294913, 0.536738765715661), (0.00422786697404626, 0.675944461676665), (0.00259657542420272, 0.800978921036899), (0.00128235076858657, 0.901710987790147), (0.000391780847181333, 0.969970967838514), (0.0666642553386717, 0.0119176134324156), (0.0633033576822998, 0.0617320718771481), (0.0575429547873383, 0.14711144964307), (0.0498483129369194, 0.261159676008456), (0.0408426305009364, 0.394639846885787), (0.0312554556489172, 0.536738765715661), (0.0218634816735698, 0.675944461676665), (0.0134276171766033, 0.800978921036899), (0.00663139419953146, 0.901710987790147), (0.00202600825072957, 0.969970967838514), (0.158384879432916, 0.0119176134324156), (0.150399860064042, 0.0617320718771481), (0.136713954275874, 0.14711144964307), (0.118432569213269, 0.261159676008456), (0.0970363364107271, 0.394639846885787), (0.0742585595447716, 0.536738765715661), (0.051944552463085, 0.675944461676665), (0.0319021268111873, 0.800978921036899), (0.0157552584279096, 0.901710987790147), (0.00481351019210674, 0.969970967838514), (0.279926015604479, 0.0119176134324156), (0.265813464807608, 0.0617320718771481), (0.241625290463333, 0.14711144964307), (0.209315165288324, 0.261159676008456), (0.171499925482569, 0.394639846885787), (0.131242974533438, 0.536738765715661), (0.0918056802859639, 0.675944461676665), (0.0563831300029299, 0.800978921036899), (0.0278455035122948, 0.901710987790147), (0.00850729396626959, 0.969970967838514), (0.420491137203971, 0.0119176134324156), (0.399291955267949, 0.0617320718771481), (0.36295766559877, 0.14711144964307), (0.314422979572164, 0.261159676008456), (0.257618780236758, 0.394639846885787), (0.197146762127222, 0.536738765715661), (0.137905992131056, 0.675944461676665), (0.0846959736945292, 0.800978921036899), (0.041828150243977, 0.901710987790147), (0.0127792399240935, 0.969970967838514), (0.567591249363613, 0.0119176134324156), (0.538975972854903, 0.0617320718771481), (0.48993088475816, 0.14711144964307), (0.42441734441938, 0.261159676008456), (0.347741372877455, 0.394639846885787), (0.266114472157117, 0.536738765715661), (0.186149546192279, 0.675944461676665), (0.114325105268572, 0.800978921036899), (0.0564608619658763, 0.901710987790147), (0.017249792237393, 0.969970967838514), (0.708156370963105, 0.0119176134324156), (0.672454463315244, 0.0617320718771481), (0.611263259893597, 0.14711144964307), (0.52952515870322, 0.261159676008456), (0.433860227631644, 0.394639846885787), (0.332018259750901, 0.536738765715661), (0.232249858037371, 0.675944461676665), (0.142637948960171, 0.800978921036899), (0.0704435086975584, 0.901710987790147), (0.0215217381952169, 0.969970967838514), (0.829697507134668, 0.0119176134324156), (0.787868068058809, 0.0617320718771481), (0.716174596081056, 0.14711144964307), (0.620407754778275, 0.261159676008456), (0.508323816703486, 0.394639846885787), (0.389002674739568, 0.536738765715661), (0.27211098586025, 0.675944461676665), (0.167118952151914, 0.800978921036899), (0.0825337537819436, 0.901710987790147), (0.0252155219693798, 0.969970967838514), (0.921418131228913, 0.0119176134324156), (0.874964570440552, 0.0617320718771481), (0.795345595569591, 0.14711144964307), (0.688992011054624, 0.261159676008456), (0.564517522613277, 0.394639846885787), (0.432005778635422, 0.536738765715661), (0.302192056649765, 0.675944461676665), (0.185593461786498, 0.800978921036899), (0.0916576180103218, 0.901710987790147), (0.0280030239107569, 0.969970967838514), (0.975191136779291, 0.0119176134324156), (0.926026594409989, 0.0617320718771481), (0.841761138823545, 0.14711144964307), (0.729200869529325, 0.261159676008456), (0.59746217916815, 0.394639846885787), (0.45721718738139, 0.536738765715661), (0.319827671349289, 0.675944461676665), (0.196424503538899, 0.800978921036899), (0.0970066614412667, 0.901710987790147), (0.0296372513143052, 0.969970967838514)
    
    // Value of basis functions at quadrature points.
    static const double FE0[100][1] = \
    {{1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0}};
    
    static const double FE1_C0[100][12] = \
    {{0.975191136779291, 0.012891249788293, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.926026594409989, 0.012241333712863, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.841761138823545, 0.0111274115333846, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.729200869529325, 0.00963945446221846, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.59746217916815, 0.00789797394606313, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.45721718738139, 0.00604404690294914, 0.536738765715661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.319827671349289, 0.00422786697404632, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.196424503538898, 0.00259657542420279, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0970066614412666, 0.00128235076858662, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0296372513143051, 0.000391780847181388, 0.969970967838514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.921418131228913, 0.0666642553386715, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.874964570440552, 0.0633033576822997, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.795345595569592, 0.0575429547873383, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.688992011054624, 0.0498483129369194, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.564517522613277, 0.0408426305009364, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.432005778635422, 0.0312554556489172, 0.53673876571566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.302192056649765, 0.0218634816735698, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.185593461786498, 0.0134276171766034, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0916576180103217, 0.00663139419953151, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0280030239107569, 0.00202600825072963, 0.969970967838514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.829697507134668, 0.158384879432916, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.787868068058809, 0.150399860064042, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.716174596081056, 0.136713954275874, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.620407754778275, 0.118432569213269, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.508323816703486, 0.0970363364107271, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.389002674739568, 0.0742585595447716, 0.536738765715661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.27211098586025, 0.0519445524630851, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.167118952151914, 0.0319021268111873, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0825337537819436, 0.0157552584279097, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0252155219693797, 0.00481351019210679, 0.969970967838514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.708156370963105, 0.279926015604479, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.672454463315244, 0.265813464807608, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.611263259893597, 0.241625290463333, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.52952515870322, 0.209315165288324, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.433860227631645, 0.171499925482569, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.332018259750901, 0.131242974533438, 0.536738765715661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.232249858037371, 0.091805680285964, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.142637948960171, 0.05638313000293, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0704435086975585, 0.0278455035122948, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0215217381952169, 0.00850729396626965, 0.969970967838514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.567591249363613, 0.420491137203971, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.538975972854903, 0.399291955267949, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.48993088475816, 0.36295766559877, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.42441734441938, 0.314422979572164, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.347741372877455, 0.257618780236758, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.266114472157118, 0.197146762127222, 0.536738765715661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.186149546192279, 0.137905992131056, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.114325105268572, 0.0846959736945293, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0564608619658762, 0.041828150243977, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0172497922373929, 0.0127792399240936, 0.969970967838514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.420491137203971, 0.567591249363613, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.399291955267949, 0.538975972854903, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.36295766559877, 0.48993088475816, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.314422979572164, 0.42441734441938, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.257618780236758, 0.347741372877455, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.197146762127222, 0.266114472157117, 0.53673876571566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.137905992131056, 0.186149546192279, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0846959736945293, 0.114325105268572, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0418281502439769, 0.0564608619658764, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0127792399240935, 0.017249792237393, 0.969970967838514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.27992601560448, 0.708156370963105, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.265813464807608, 0.672454463315244, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.241625290463333, 0.611263259893597, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.209315165288324, 0.52952515870322, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.171499925482569, 0.433860227631644, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.131242974533438, 0.332018259750901, 0.536738765715661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.091805680285964, 0.232249858037371, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.05638313000293, 0.142637948960171, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0278455035122948, 0.0704435086975585, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00850729396626954, 0.021521738195217, 0.969970967838514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.158384879432916, 0.829697507134668, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.150399860064042, 0.787868068058809, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.136713954275874, 0.716174596081056, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.118432569213269, 0.620407754778275, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0970363364107271, 0.508323816703486, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0742585595447716, 0.389002674739568, 0.536738765715661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.051944552463085, 0.27211098586025, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0319021268111873, 0.167118952151914, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0157552584279096, 0.0825337537819437, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00481351019210668, 0.0252155219693798, 0.969970967838514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0666642553386714, 0.921418131228913, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0633033576822996, 0.874964570440552, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0575429547873382, 0.795345595569592, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0498483129369193, 0.688992011054624, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0408426305009364, 0.564517522613277, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0312554556489171, 0.432005778635422, 0.53673876571566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0218634816735698, 0.302192056649765, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0134276171766034, 0.185593461786498, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00663139419953142, 0.0916576180103219, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00202600825072952, 0.028003023910757, 0.969970967838514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0128912497882929, 0.975191136779291, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0122413337128629, 0.926026594409989, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0111274115333845, 0.841761138823545, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0096394544622184, 0.729200869529325, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00789797394606307, 0.59746217916815, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00604404690294914, 0.45721718738139, 0.536738765715661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00422786697404627, 0.319827671349289, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00259657542420268, 0.196424503538899, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00128235076858653, 0.0970066614412668, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.000391780847181295, 0.0296372513143052, 0.969970967838513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C0_D01[100][12] = \
    {{-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C0_D10[100][12] = \
    {{-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C1[100][12] = \
    {{0.0, 0.0, 0.0, 0.975191136779291, 0.012891249788293, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.926026594409989, 0.012241333712863, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.841761138823545, 0.0111274115333846, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.729200869529325, 0.00963945446221846, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.59746217916815, 0.00789797394606313, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.45721718738139, 0.00604404690294914, 0.536738765715661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.319827671349289, 0.00422786697404632, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.196424503538898, 0.00259657542420279, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0970066614412666, 0.00128235076858662, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0296372513143051, 0.000391780847181388, 0.969970967838514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.921418131228913, 0.0666642553386715, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.874964570440552, 0.0633033576822997, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.795345595569592, 0.0575429547873383, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.688992011054624, 0.0498483129369194, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.564517522613277, 0.0408426305009364, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.432005778635422, 0.0312554556489172, 0.53673876571566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.302192056649765, 0.0218634816735698, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.185593461786498, 0.0134276171766034, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0916576180103217, 0.00663139419953151, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0280030239107569, 0.00202600825072963, 0.969970967838514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.829697507134668, 0.158384879432916, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.787868068058809, 0.150399860064042, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.716174596081056, 0.136713954275874, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.620407754778275, 0.118432569213269, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.508323816703486, 0.0970363364107271, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.389002674739568, 0.0742585595447716, 0.536738765715661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.27211098586025, 0.0519445524630851, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.167118952151914, 0.0319021268111873, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0825337537819436, 0.0157552584279097, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0252155219693797, 0.00481351019210679, 0.969970967838514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.708156370963105, 0.279926015604479, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.672454463315244, 0.265813464807608, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.611263259893597, 0.241625290463333, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.52952515870322, 0.209315165288324, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.433860227631645, 0.171499925482569, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.332018259750901, 0.131242974533438, 0.536738765715661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.232249858037371, 0.091805680285964, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.142637948960171, 0.05638313000293, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0704435086975585, 0.0278455035122948, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0215217381952169, 0.00850729396626965, 0.969970967838514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.567591249363613, 0.420491137203971, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.538975972854903, 0.399291955267949, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.48993088475816, 0.36295766559877, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.42441734441938, 0.314422979572164, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.347741372877455, 0.257618780236758, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.266114472157118, 0.197146762127222, 0.536738765715661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.186149546192279, 0.137905992131056, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.114325105268572, 0.0846959736945293, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0564608619658762, 0.041828150243977, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0172497922373929, 0.0127792399240936, 0.969970967838514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.420491137203971, 0.567591249363613, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.399291955267949, 0.538975972854903, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.36295766559877, 0.48993088475816, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.314422979572164, 0.42441734441938, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.257618780236758, 0.347741372877455, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.197146762127222, 0.266114472157117, 0.53673876571566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.137905992131056, 0.186149546192279, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0846959736945293, 0.114325105268572, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0418281502439769, 0.0564608619658764, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0127792399240935, 0.017249792237393, 0.969970967838514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.27992601560448, 0.708156370963105, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.265813464807608, 0.672454463315244, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.241625290463333, 0.611263259893597, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.209315165288324, 0.52952515870322, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.171499925482569, 0.433860227631644, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.131242974533438, 0.332018259750901, 0.536738765715661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.091805680285964, 0.232249858037371, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.05638313000293, 0.142637948960171, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0278455035122948, 0.0704435086975585, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.00850729396626954, 0.021521738195217, 0.969970967838514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.158384879432916, 0.829697507134668, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.150399860064042, 0.787868068058809, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.136713954275874, 0.716174596081056, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.118432569213269, 0.620407754778275, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0970363364107271, 0.508323816703486, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0742585595447716, 0.389002674739568, 0.536738765715661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.051944552463085, 0.27211098586025, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0319021268111873, 0.167118952151914, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0157552584279096, 0.0825337537819437, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.00481351019210668, 0.0252155219693798, 0.969970967838514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0666642553386714, 0.921418131228913, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0633033576822996, 0.874964570440552, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0575429547873382, 0.795345595569592, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0498483129369193, 0.688992011054624, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0408426305009364, 0.564517522613277, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0312554556489171, 0.432005778635422, 0.53673876571566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0218634816735698, 0.302192056649765, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0134276171766034, 0.185593461786498, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.00663139419953142, 0.0916576180103219, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.00202600825072952, 0.028003023910757, 0.969970967838514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0128912497882929, 0.975191136779291, 0.0119176134324156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0122413337128629, 0.926026594409989, 0.0617320718771481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0111274115333845, 0.841761138823545, 0.14711144964307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0096394544622184, 0.729200869529325, 0.261159676008456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.00789797394606307, 0.59746217916815, 0.394639846885787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.00604404690294914, 0.45721718738139, 0.536738765715661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.00422786697404627, 0.319827671349289, 0.675944461676665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.00259657542420268, 0.196424503538899, 0.800978921036899, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.00128235076858653, 0.0970066614412668, 0.901710987790147, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.000391780847181295, 0.0296372513143052, 0.969970967838513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C1_D01[100][12] = \
    {{0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C1_D10[100][12] = \
    {{0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C2[100][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.975191136779291, 0.012891249788293, 0.0119176134324156, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.926026594409989, 0.012241333712863, 0.0617320718771481, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.841761138823545, 0.0111274115333846, 0.14711144964307, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.729200869529325, 0.00963945446221846, 0.261159676008456, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.59746217916815, 0.00789797394606313, 0.394639846885787, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.45721718738139, 0.00604404690294914, 0.536738765715661, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.319827671349289, 0.00422786697404632, 0.675944461676665, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.196424503538898, 0.00259657542420279, 0.800978921036899, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0970066614412666, 0.00128235076858662, 0.901710987790147, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0296372513143051, 0.000391780847181388, 0.969970967838514, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.921418131228913, 0.0666642553386715, 0.0119176134324156, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.874964570440552, 0.0633033576822997, 0.0617320718771481, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.795345595569592, 0.0575429547873383, 0.14711144964307, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.688992011054624, 0.0498483129369194, 0.261159676008456, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.564517522613277, 0.0408426305009364, 0.394639846885787, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.432005778635422, 0.0312554556489172, 0.53673876571566, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.302192056649765, 0.0218634816735698, 0.675944461676665, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.185593461786498, 0.0134276171766034, 0.800978921036899, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0916576180103217, 0.00663139419953151, 0.901710987790147, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0280030239107569, 0.00202600825072963, 0.969970967838514, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.829697507134668, 0.158384879432916, 0.0119176134324156, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.787868068058809, 0.150399860064042, 0.0617320718771481, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.716174596081056, 0.136713954275874, 0.14711144964307, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.620407754778275, 0.118432569213269, 0.261159676008456, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.508323816703486, 0.0970363364107271, 0.394639846885787, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.389002674739568, 0.0742585595447716, 0.536738765715661, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.27211098586025, 0.0519445524630851, 0.675944461676665, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.167118952151914, 0.0319021268111873, 0.800978921036899, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0825337537819436, 0.0157552584279097, 0.901710987790147, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0252155219693797, 0.00481351019210679, 0.969970967838514, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.708156370963105, 0.279926015604479, 0.0119176134324156, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.672454463315244, 0.265813464807608, 0.0617320718771481, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.611263259893597, 0.241625290463333, 0.14711144964307, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.52952515870322, 0.209315165288324, 0.261159676008456, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.433860227631645, 0.171499925482569, 0.394639846885787, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.332018259750901, 0.131242974533438, 0.536738765715661, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.232249858037371, 0.091805680285964, 0.675944461676665, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.142637948960171, 0.05638313000293, 0.800978921036899, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0704435086975585, 0.0278455035122948, 0.901710987790147, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0215217381952169, 0.00850729396626965, 0.969970967838514, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.567591249363613, 0.420491137203971, 0.0119176134324156, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.538975972854903, 0.399291955267949, 0.0617320718771481, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.48993088475816, 0.36295766559877, 0.14711144964307, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.42441734441938, 0.314422979572164, 0.261159676008456, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.347741372877455, 0.257618780236758, 0.394639846885787, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.266114472157118, 0.197146762127222, 0.536738765715661, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.186149546192279, 0.137905992131056, 0.675944461676665, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.114325105268572, 0.0846959736945293, 0.800978921036899, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0564608619658762, 0.041828150243977, 0.901710987790147, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0172497922373929, 0.0127792399240936, 0.969970967838514, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.420491137203971, 0.567591249363613, 0.0119176134324156, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.399291955267949, 0.538975972854903, 0.0617320718771481, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.36295766559877, 0.48993088475816, 0.14711144964307, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.314422979572164, 0.42441734441938, 0.261159676008456, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.257618780236758, 0.347741372877455, 0.394639846885787, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.197146762127222, 0.266114472157117, 0.53673876571566, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.137905992131056, 0.186149546192279, 0.675944461676665, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0846959736945293, 0.114325105268572, 0.800978921036899, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0418281502439769, 0.0564608619658764, 0.901710987790147, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0127792399240935, 0.017249792237393, 0.969970967838514, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.27992601560448, 0.708156370963105, 0.0119176134324156, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.265813464807608, 0.672454463315244, 0.0617320718771481, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.241625290463333, 0.611263259893597, 0.14711144964307, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.209315165288324, 0.52952515870322, 0.261159676008456, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.171499925482569, 0.433860227631644, 0.394639846885787, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.131242974533438, 0.332018259750901, 0.536738765715661, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.091805680285964, 0.232249858037371, 0.675944461676665, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05638313000293, 0.142637948960171, 0.800978921036899, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0278455035122948, 0.0704435086975585, 0.901710987790147, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00850729396626954, 0.021521738195217, 0.969970967838514, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.158384879432916, 0.829697507134668, 0.0119176134324156, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.150399860064042, 0.787868068058809, 0.0617320718771481, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.136713954275874, 0.716174596081056, 0.14711144964307, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.118432569213269, 0.620407754778275, 0.261159676008456, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0970363364107271, 0.508323816703486, 0.394639846885787, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0742585595447716, 0.389002674739568, 0.536738765715661, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.051944552463085, 0.27211098586025, 0.675944461676665, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0319021268111873, 0.167118952151914, 0.800978921036899, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0157552584279096, 0.0825337537819437, 0.901710987790147, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00481351019210668, 0.0252155219693798, 0.969970967838514, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0666642553386714, 0.921418131228913, 0.0119176134324156, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0633033576822996, 0.874964570440552, 0.0617320718771481, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0575429547873382, 0.795345595569592, 0.14711144964307, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0498483129369193, 0.688992011054624, 0.261159676008456, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0408426305009364, 0.564517522613277, 0.394639846885787, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0312554556489171, 0.432005778635422, 0.53673876571566, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0218634816735698, 0.302192056649765, 0.675944461676665, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0134276171766034, 0.185593461786498, 0.800978921036899, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00663139419953142, 0.0916576180103219, 0.901710987790147, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00202600825072952, 0.028003023910757, 0.969970967838514, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0128912497882929, 0.975191136779291, 0.0119176134324156, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0122413337128629, 0.926026594409989, 0.0617320718771481, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0111274115333845, 0.841761138823545, 0.14711144964307, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0096394544622184, 0.729200869529325, 0.261159676008456, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00789797394606307, 0.59746217916815, 0.394639846885787, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00604404690294914, 0.45721718738139, 0.536738765715661, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00422786697404627, 0.319827671349289, 0.675944461676665, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00259657542420268, 0.196424503538899, 0.800978921036899, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00128235076858653, 0.0970066614412668, 0.901710987790147, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000391780847181295, 0.0296372513143052, 0.969970967838513, 0.0, 0.0, 0.0}};
    
    static const double FE1_C2_D01[100][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C2_D10[100][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C3[100][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.975191136779291, 0.012891249788293, 0.0119176134324156},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.926026594409989, 0.012241333712863, 0.0617320718771481},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.841761138823545, 0.0111274115333846, 0.14711144964307},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.729200869529325, 0.00963945446221846, 0.261159676008456},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.59746217916815, 0.00789797394606313, 0.394639846885787},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.45721718738139, 0.00604404690294914, 0.536738765715661},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.319827671349289, 0.00422786697404632, 0.675944461676665},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.196424503538898, 0.00259657542420279, 0.800978921036899},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0970066614412666, 0.00128235076858662, 0.901710987790147},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0296372513143051, 0.000391780847181388, 0.969970967838514},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.921418131228913, 0.0666642553386715, 0.0119176134324156},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.874964570440552, 0.0633033576822997, 0.0617320718771481},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.795345595569592, 0.0575429547873383, 0.14711144964307},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.688992011054624, 0.0498483129369194, 0.261159676008456},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.564517522613277, 0.0408426305009364, 0.394639846885787},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.432005778635422, 0.0312554556489172, 0.53673876571566},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.302192056649765, 0.0218634816735698, 0.675944461676665},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.185593461786498, 0.0134276171766034, 0.800978921036899},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0916576180103217, 0.00663139419953151, 0.901710987790147},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0280030239107569, 0.00202600825072963, 0.969970967838514},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.829697507134668, 0.158384879432916, 0.0119176134324156},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.787868068058809, 0.150399860064042, 0.0617320718771481},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.716174596081056, 0.136713954275874, 0.14711144964307},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.620407754778275, 0.118432569213269, 0.261159676008456},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.508323816703486, 0.0970363364107271, 0.394639846885787},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.389002674739568, 0.0742585595447716, 0.536738765715661},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.27211098586025, 0.0519445524630851, 0.675944461676665},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.167118952151914, 0.0319021268111873, 0.800978921036899},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0825337537819436, 0.0157552584279097, 0.901710987790147},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0252155219693797, 0.00481351019210679, 0.969970967838514},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.708156370963105, 0.279926015604479, 0.0119176134324156},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.672454463315244, 0.265813464807608, 0.0617320718771481},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.611263259893597, 0.241625290463333, 0.14711144964307},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.52952515870322, 0.209315165288324, 0.261159676008456},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.433860227631645, 0.171499925482569, 0.394639846885787},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.332018259750901, 0.131242974533438, 0.536738765715661},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.232249858037371, 0.091805680285964, 0.675944461676665},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.142637948960171, 0.05638313000293, 0.800978921036899},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0704435086975585, 0.0278455035122948, 0.901710987790147},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0215217381952169, 0.00850729396626965, 0.969970967838514},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.567591249363613, 0.420491137203971, 0.0119176134324156},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.538975972854903, 0.399291955267949, 0.0617320718771481},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.48993088475816, 0.36295766559877, 0.14711144964307},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.42441734441938, 0.314422979572164, 0.261159676008456},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.347741372877455, 0.257618780236758, 0.394639846885787},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.266114472157118, 0.197146762127222, 0.536738765715661},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.186149546192279, 0.137905992131056, 0.675944461676665},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.114325105268572, 0.0846959736945293, 0.800978921036899},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0564608619658762, 0.041828150243977, 0.901710987790147},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0172497922373929, 0.0127792399240936, 0.969970967838514},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.420491137203971, 0.567591249363613, 0.0119176134324156},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.399291955267949, 0.538975972854903, 0.0617320718771481},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.36295766559877, 0.48993088475816, 0.14711144964307},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.314422979572164, 0.42441734441938, 0.261159676008456},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.257618780236758, 0.347741372877455, 0.394639846885787},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.197146762127222, 0.266114472157117, 0.53673876571566},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.137905992131056, 0.186149546192279, 0.675944461676665},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0846959736945293, 0.114325105268572, 0.800978921036899},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0418281502439769, 0.0564608619658764, 0.901710987790147},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0127792399240935, 0.017249792237393, 0.969970967838514},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.27992601560448, 0.708156370963105, 0.0119176134324156},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.265813464807608, 0.672454463315244, 0.0617320718771481},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.241625290463333, 0.611263259893597, 0.14711144964307},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.209315165288324, 0.52952515870322, 0.261159676008456},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.171499925482569, 0.433860227631644, 0.394639846885787},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.131242974533438, 0.332018259750901, 0.536738765715661},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.091805680285964, 0.232249858037371, 0.675944461676665},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05638313000293, 0.142637948960171, 0.800978921036899},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0278455035122948, 0.0704435086975585, 0.901710987790147},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00850729396626954, 0.021521738195217, 0.969970967838514},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.158384879432916, 0.829697507134668, 0.0119176134324156},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.150399860064042, 0.787868068058809, 0.0617320718771481},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.136713954275874, 0.716174596081056, 0.14711144964307},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.118432569213269, 0.620407754778275, 0.261159676008456},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0970363364107271, 0.508323816703486, 0.394639846885787},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0742585595447716, 0.389002674739568, 0.536738765715661},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.051944552463085, 0.27211098586025, 0.675944461676665},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0319021268111873, 0.167118952151914, 0.800978921036899},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0157552584279096, 0.0825337537819437, 0.901710987790147},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00481351019210668, 0.0252155219693798, 0.969970967838514},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0666642553386714, 0.921418131228913, 0.0119176134324156},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0633033576822996, 0.874964570440552, 0.0617320718771481},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0575429547873382, 0.795345595569592, 0.14711144964307},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0498483129369193, 0.688992011054624, 0.261159676008456},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0408426305009364, 0.564517522613277, 0.394639846885787},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0312554556489171, 0.432005778635422, 0.53673876571566},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0218634816735698, 0.302192056649765, 0.675944461676665},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0134276171766034, 0.185593461786498, 0.800978921036899},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00663139419953142, 0.0916576180103219, 0.901710987790147},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00202600825072952, 0.028003023910757, 0.969970967838514},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0128912497882929, 0.975191136779291, 0.0119176134324156},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0122413337128629, 0.926026594409989, 0.0617320718771481},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0111274115333845, 0.841761138823545, 0.14711144964307},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0096394544622184, 0.729200869529325, 0.261159676008456},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00789797394606307, 0.59746217916815, 0.394639846885787},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00604404690294914, 0.45721718738139, 0.536738765715661},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00422786697404627, 0.319827671349289, 0.675944461676665},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00259657542420268, 0.196424503538899, 0.800978921036899},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00128235076858653, 0.0970066614412668, 0.901710987790147},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000391780847181295, 0.0296372513143052, 0.969970967838513}};
    
    static const double FE1_C3_D01[100][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0}};
    
    static const double FE1_C3_D10[100][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0}};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 12; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', False), ('ignore ones', False), ('ignore zero tables', False), ('optimisation', False), ('remove zero terms', False)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 1986000
    for (unsigned int ip = 0; ip < 100; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      double F13 = 0.0;
      double F14 = 0.0;
      double F15 = 0.0;
      
      // Total number of operations to compute function values = 8
      for (unsigned int r = 0; r < 1; r++)
      {
        F0 += FE0[ip][r]*w[4][r];
        F1 += FE0[ip][r]*w[1][r];
        F2 += FE0[ip][r]*w[2][r];
        F3 += FE0[ip][r]*w[3][r];
      }// end loop over 'r'
      
      // Total number of operations to compute function values = 288
      for (unsigned int r = 0; r < 12; r++)
      {
        F4 += FE1_C3[ip][r]*w[0][r];
        F5 += FE1_C0[ip][r]*w[0][r];
        F6 += FE1_C1[ip][r]*w[0][r];
        F7 += FE1_C2[ip][r]*w[0][r];
        F8 += FE1_C0_D10[ip][r]*w[0][r];
        F9 += FE1_C0_D01[ip][r]*w[0][r];
        F10 += FE1_C1_D10[ip][r]*w[0][r];
        F11 += FE1_C1_D01[ip][r]*w[0][r];
        F12 += FE1_C2_D10[ip][r]*w[0][r];
        F13 += FE1_C2_D01[ip][r]*w[0][r];
        F14 += FE1_C3_D10[ip][r]*w[0][r];
        F15 += FE1_C3_D01[ip][r]*w[0][r];
      }// end loop over 'r'
      double C[1];
      // Compute conditional, operations: 16.
      C[0] = ((F2/(F3)*F4 + (-1.0)*(0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7))) > 0.0) ? (F2/(F3)*F4 + (-1.0)*(0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7))) : 0.0;
      
      // Number of operations for primary indices: 19548
      for (unsigned int j = 0; j < 12; j++)
      {
        // Number of operations to compute entry: 1629
        A[j] += ((((((K_00*FE1_C3_D10[ip][j] + K_10*FE1_C3_D01[ip][j]))*((((0.5*F1/((std::sqrt((F5/(F7)*F5/(F7) + F6/(F7)*F6/(F7))) + std::sqrt(C[0]*((1.0 + F2/(F3)))/(F7)))))*(((C[0] + F4) + (-1.0)*F5*F2/(F3)*F5/(F7))/(F7)))*((-1.0)*((((((-1.0)*F5/(F7)*F5/(F7) + 0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)/(F7)))*((K_00*F12 + K_10*F13)) + (F6/(F7)*((-1.0)*F2/(F3)))*((K_00*F10 + K_10*F11)) + (F5/(F7)*(((-1.0)*F2/(F3) + 2.0)))*((K_00*F8 + K_10*F9)) + F2/(F3)*((K_00*F14 + K_10*F15))) + (F5/(F7)*((K_01*F10 + K_11*F11)) + (F5/(F7)*((-1.0)*F6/(F7)))*((K_01*F12 + K_11*F13)) + F6/(F7)*((K_01*F8 + K_11*F9)))))) + ((0.5*F1/((std::sqrt((F5/(F7)*F5/(F7) + F6/(F7)*F6/(F7))) + std::sqrt(C[0]*((1.0 + F2/(F3)))/(F7)))))*(F6/(F7)*(F5/(F7)*((-1.0)*F2/(F3)))))*((-1.0)*((((F6/(F7)*(((-1.0)*F2/(F3) + 2.0)))*((K_01*F10 + K_11*F11)) + ((0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)/(F7) + (-1.0)*F6/(F7)*F6/(F7)))*((K_01*F12 + K_11*F13)) + (F5/(F7)*((-1.0)*F2/(F3)))*((K_01*F8 + K_11*F9)) + F2/(F3)*((K_01*F14 + K_11*F15))) + ((F6/(F7)*((-1.0)*F5/(F7)))*((K_00*F12 + K_10*F13)) + F5/(F7)*((K_00*F10 + K_10*F11)) + F6/(F7)*((K_00*F8 + K_10*F9)))))) + ((0.5*F1/((std::sqrt((F5/(F7)*F5/(F7) + F6/(F7)*F6/(F7))) + std::sqrt(C[0]*((1.0 + F2/(F3)))/(F7)))))*(((-1.0)*F5/(F7))*(((-1.0)*(0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)) + (C[0] + F4)))/(F7)))*((-1.0)*((1.0*((K_00*F8 + K_10*F9)) + 1.0*((K_01*F10 + K_11*F11))))) + ((0.5*F1/((std::sqrt((F5/(F7)*F5/(F7) + F6/(F7)*F6/(F7))) + std::sqrt(C[0]*((1.0 + F2/(F3)))/(F7)))))*(F5/(F7)*((1.0 + F2/(F3)))))*((-1.0)*((((((-1.0)*F6/(F7))*(((-1.0)*(0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)) + (C[0] + F4)))/(F7))*((K_01*F12 + K_11*F13)) + (F5/(F7)*(F6/(F7)*((-1.0)*F2/(F3))))*((K_01*F8 + K_11*F9)) + (((-1.0)*F6*F2/(F3)*F6/(F7) + (C[0] + F4))/(F7))*((K_01*F10 + K_11*F11)) + (F6/(F7)*((1.0 + F2/(F3))))*((K_01*F14 + K_11*F15))) + ((((-1.0)*F5/(F7))*(((-1.0)*(0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)) + (C[0] + F4)))/(F7))*((K_00*F12 + K_10*F13)) + (F5/(F7)*((1.0 + F2/(F3))))*((K_00*F14 + K_10*F15)) + (F6/(F7)*(F5/(F7)*((-1.0)*F2/(F3))))*((K_00*F10 + K_10*F11)) + (((C[0] + F4) + (-1.0)*F5*F2/(F3)*F5/(F7))/(F7))*((K_00*F8 + K_10*F9)))))))) + ((K_00*FE1_C0_D10[ip][j] + K_10*FE1_C0_D01[ip][j]))*((((0.5*F1/((std::sqrt((F5/(F7)*F5/(F7) + F6/(F7)*F6/(F7))) + std::sqrt(C[0]*((1.0 + F2/(F3)))/(F7)))))*F2/(F3))*((-1.0)*((((((-1.0)*F6/(F7))*(((-1.0)*(0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)) + (C[0] + F4)))/(F7))*((K_01*F12 + K_11*F13)) + (F5/(F7)*(F6/(F7)*((-1.0)*F2/(F3))))*((K_01*F8 + K_11*F9)) + (((-1.0)*F6*F2/(F3)*F6/(F7) + (C[0] + F4))/(F7))*((K_01*F10 + K_11*F11)) + (F6/(F7)*((1.0 + F2/(F3))))*((K_01*F14 + K_11*F15))) + ((((-1.0)*F5/(F7))*(((-1.0)*(0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)) + (C[0] + F4)))/(F7))*((K_00*F12 + K_10*F13)) + (F5/(F7)*((1.0 + F2/(F3))))*((K_00*F14 + K_10*F15)) + (F6/(F7)*(F5/(F7)*((-1.0)*F2/(F3))))*((K_00*F10 + K_10*F11)) + (((C[0] + F4) + (-1.0)*F5*F2/(F3)*F5/(F7))/(F7))*((K_00*F8 + K_10*F9)))))) + ((0.5*F1/((std::sqrt((F5/(F7)*F5/(F7) + F6/(F7)*F6/(F7))) + std::sqrt(C[0]*((1.0 + F2/(F3)))/(F7)))))*(F6/(F7)*((-1.0)*F2/(F3))))*((-1.0)*((((F6/(F7)*(((-1.0)*F2/(F3) + 2.0)))*((K_01*F10 + K_11*F11)) + ((0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)/(F7) + (-1.0)*F6/(F7)*F6/(F7)))*((K_01*F12 + K_11*F13)) + (F5/(F7)*((-1.0)*F2/(F3)))*((K_01*F8 + K_11*F9)) + F2/(F3)*((K_01*F14 + K_11*F15))) + ((F6/(F7)*((-1.0)*F5/(F7)))*((K_00*F12 + K_10*F13)) + F5/(F7)*((K_00*F10 + K_10*F11)) + F6/(F7)*((K_00*F8 + K_10*F9)))))) + ((0.5*F1/((std::sqrt((F5/(F7)*F5/(F7) + F6/(F7)*F6/(F7))) + std::sqrt(C[0]*((1.0 + F2/(F3)))/(F7)))))*(F5/(F7)*(((-1.0)*F2/(F3) + 2.0))))*((-1.0)*((((((-1.0)*F5/(F7)*F5/(F7) + 0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)/(F7)))*((K_00*F12 + K_10*F13)) + (F6/(F7)*((-1.0)*F2/(F3)))*((K_00*F10 + K_10*F11)) + (F5/(F7)*(((-1.0)*F2/(F3) + 2.0)))*((K_00*F8 + K_10*F9)) + F2/(F3)*((K_00*F14 + K_10*F15))) + (F5/(F7)*((K_01*F10 + K_11*F11)) + (F5/(F7)*((-1.0)*F6/(F7)))*((K_01*F12 + K_11*F13)) + F6/(F7)*((K_01*F8 + K_11*F9)))))) + ((0.5*F1/((std::sqrt((F5/(F7)*F5/(F7) + F6/(F7)*F6/(F7))) + std::sqrt(C[0]*((1.0 + F2/(F3)))/(F7)))))*(((-1.0)*F5/(F7)*F5/(F7) + 0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)/(F7))))*((-1.0)*((1.0*((K_00*F8 + K_10*F9)) + 1.0*((K_01*F10 + K_11*F11))))))) + ((K_00*FE1_C1_D10[ip][j] + K_10*FE1_C1_D01[ip][j]))*((((0.5*F1/((std::sqrt((F5/(F7)*F5/(F7) + F6/(F7)*F6/(F7))) + std::sqrt(C[0]*((1.0 + F2/(F3)))/(F7)))))*F6/(F7))*((-1.0)*((((((-1.0)*F5/(F7)*F5/(F7) + 0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)/(F7)))*((K_00*F12 + K_10*F13)) + (F6/(F7)*((-1.0)*F2/(F3)))*((K_00*F10 + K_10*F11)) + (F5/(F7)*(((-1.0)*F2/(F3) + 2.0)))*((K_00*F8 + K_10*F9)) + F2/(F3)*((K_00*F14 + K_10*F15))) + (F5/(F7)*((K_01*F10 + K_11*F11)) + (F5/(F7)*((-1.0)*F6/(F7)))*((K_01*F12 + K_11*F13)) + F6/(F7)*((K_01*F8 + K_11*F9)))))) + ((0.5*F1/((std::sqrt((F5/(F7)*F5/(F7) + F6/(F7)*F6/(F7))) + std::sqrt(C[0]*((1.0 + F2/(F3)))/(F7)))))*(F6/(F7)*((-1.0)*F5/(F7))))*((-1.0)*((1.0*((K_00*F8 + K_10*F9)) + 1.0*((K_01*F10 + K_11*F11))))) + ((0.5*F1/((std::sqrt((F5/(F7)*F5/(F7) + F6/(F7)*F6/(F7))) + std::sqrt(C[0]*((1.0 + F2/(F3)))/(F7)))))*F5/(F7))*((-1.0)*((((F6/(F7)*(((-1.0)*F2/(F3) + 2.0)))*((K_01*F10 + K_11*F11)) + ((0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)/(F7) + (-1.0)*F6/(F7)*F6/(F7)))*((K_01*F12 + K_11*F13)) + (F5/(F7)*((-1.0)*F2/(F3)))*((K_01*F8 + K_11*F9)) + F2/(F3)*((K_01*F14 + K_11*F15))) + ((F6/(F7)*((-1.0)*F5/(F7)))*((K_00*F12 + K_10*F13)) + F5/(F7)*((K_00*F10 + K_10*F11)) + F6/(F7)*((K_00*F8 + K_10*F9)))))))) + ((K_00*FE1_C2_D10[ip][j] + K_10*FE1_C2_D01[ip][j]))*(((0.5*F1/((std::sqrt((F5/(F7)*F5/(F7) + F6/(F7)*F6/(F7))) + std::sqrt(C[0]*((1.0 + F2/(F3)))/(F7)))))*1.0)*((-1.0)*((((((-1.0)*F5/(F7)*F5/(F7) + 0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)/(F7)))*((K_00*F12 + K_10*F13)) + (F6/(F7)*((-1.0)*F2/(F3)))*((K_00*F10 + K_10*F11)) + (F5/(F7)*(((-1.0)*F2/(F3) + 2.0)))*((K_00*F8 + K_10*F9)) + F2/(F3)*((K_00*F14 + K_10*F15))) + (F5/(F7)*((K_01*F10 + K_11*F11)) + (F5/(F7)*((-1.0)*F6/(F7)))*((K_01*F12 + K_11*F13)) + F6/(F7)*((K_01*F8 + K_11*F9)))))))) + (((K_01*FE1_C0_D10[ip][j] + K_11*FE1_C0_D01[ip][j]))*((((0.5*F1/((std::sqrt((F5/(F7)*F5/(F7) + F6/(F7)*F6/(F7))) + std::sqrt(C[0]*((1.0 + F2/(F3)))/(F7)))))*F6/(F7))*((-1.0)*((((((-1.0)*F5/(F7)*F5/(F7) + 0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)/(F7)))*((K_00*F12 + K_10*F13)) + (F6/(F7)*((-1.0)*F2/(F3)))*((K_00*F10 + K_10*F11)) + (F5/(F7)*(((-1.0)*F2/(F3) + 2.0)))*((K_00*F8 + K_10*F9)) + F2/(F3)*((K_00*F14 + K_10*F15))) + (F5/(F7)*((K_01*F10 + K_11*F11)) + (F5/(F7)*((-1.0)*F6/(F7)))*((K_01*F12 + K_11*F13)) + F6/(F7)*((K_01*F8 + K_11*F9)))))) + ((0.5*F1/((std::sqrt((F5/(F7)*F5/(F7) + F6/(F7)*F6/(F7))) + std::sqrt(C[0]*((1.0 + F2/(F3)))/(F7)))))*(F5/(F7)*((-1.0)*F6/(F7))))*((-1.0)*((1.0*((K_00*F8 + K_10*F9)) + 1.0*((K_01*F10 + K_11*F11))))) + ((0.5*F1/((std::sqrt((F5/(F7)*F5/(F7) + F6/(F7)*F6/(F7))) + std::sqrt(C[0]*((1.0 + F2/(F3)))/(F7)))))*F5/(F7))*((-1.0)*((((F6/(F7)*(((-1.0)*F2/(F3) + 2.0)))*((K_01*F10 + K_11*F11)) + ((0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)/(F7) + (-1.0)*F6/(F7)*F6/(F7)))*((K_01*F12 + K_11*F13)) + (F5/(F7)*((-1.0)*F2/(F3)))*((K_01*F8 + K_11*F9)) + F2/(F3)*((K_01*F14 + K_11*F15))) + ((F6/(F7)*((-1.0)*F5/(F7)))*((K_00*F12 + K_10*F13)) + F5/(F7)*((K_00*F10 + K_10*F11)) + F6/(F7)*((K_00*F8 + K_10*F9)))))))) + ((K_01*FE1_C1_D10[ip][j] + K_11*FE1_C1_D01[ip][j]))*((((0.5*F1/((std::sqrt((F5/(F7)*F5/(F7) + F6/(F7)*F6/(F7))) + std::sqrt(C[0]*((1.0 + F2/(F3)))/(F7)))))*(F6/(F7)*(((-1.0)*F2/(F3) + 2.0))))*((-1.0)*((((F6/(F7)*(((-1.0)*F2/(F3) + 2.0)))*((K_01*F10 + K_11*F11)) + ((0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)/(F7) + (-1.0)*F6/(F7)*F6/(F7)))*((K_01*F12 + K_11*F13)) + (F5/(F7)*((-1.0)*F2/(F3)))*((K_01*F8 + K_11*F9)) + F2/(F3)*((K_01*F14 + K_11*F15))) + ((F6/(F7)*((-1.0)*F5/(F7)))*((K_00*F12 + K_10*F13)) + F5/(F7)*((K_00*F10 + K_10*F11)) + F6/(F7)*((K_00*F8 + K_10*F9)))))) + ((0.5*F1/((std::sqrt((F5/(F7)*F5/(F7) + F6/(F7)*F6/(F7))) + std::sqrt(C[0]*((1.0 + F2/(F3)))/(F7)))))*(F5/(F7)*((-1.0)*F2/(F3))))*((-1.0)*((((((-1.0)*F5/(F7)*F5/(F7) + 0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)/(F7)))*((K_00*F12 + K_10*F13)) + (F6/(F7)*((-1.0)*F2/(F3)))*((K_00*F10 + K_10*F11)) + (F5/(F7)*(((-1.0)*F2/(F3) + 2.0)))*((K_00*F8 + K_10*F9)) + F2/(F3)*((K_00*F14 + K_10*F15))) + (F5/(F7)*((K_01*F10 + K_11*F11)) + (F5/(F7)*((-1.0)*F6/(F7)))*((K_01*F12 + K_11*F13)) + F6/(F7)*((K_01*F8 + K_11*F9)))))) + ((0.5*F1/((std::sqrt((F5/(F7)*F5/(F7) + F6/(F7)*F6/(F7))) + std::sqrt(C[0]*((1.0 + F2/(F3)))/(F7)))))*((0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)/(F7) + (-1.0)*F6/(F7)*F6/(F7))))*((-1.0)*((1.0*((K_00*F8 + K_10*F9)) + 1.0*((K_01*F10 + K_11*F11))))) + ((0.5*F1/((std::sqrt((F5/(F7)*F5/(F7) + F6/(F7)*F6/(F7))) + std::sqrt(C[0]*((1.0 + F2/(F3)))/(F7)))))*F2/(F3))*((-1.0)*((((((-1.0)*F6/(F7))*(((-1.0)*(0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)) + (C[0] + F4)))/(F7))*((K_01*F12 + K_11*F13)) + (F5/(F7)*(F6/(F7)*((-1.0)*F2/(F3))))*((K_01*F8 + K_11*F9)) + (((-1.0)*F6*F2/(F3)*F6/(F7) + (C[0] + F4))/(F7))*((K_01*F10 + K_11*F11)) + (F6/(F7)*((1.0 + F2/(F3))))*((K_01*F14 + K_11*F15))) + ((((-1.0)*F5/(F7))*(((-1.0)*(0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)) + (C[0] + F4)))/(F7))*((K_00*F12 + K_10*F13)) + (F5/(F7)*((1.0 + F2/(F3))))*((K_00*F14 + K_10*F15)) + (F6/(F7)*(F5/(F7)*((-1.0)*F2/(F3))))*((K_00*F10 + K_10*F11)) + (((C[0] + F4) + (-1.0)*F5*F2/(F3)*F5/(F7))/(F7))*((K_00*F8 + K_10*F9)))))))) + ((K_01*FE1_C3_D10[ip][j] + K_11*FE1_C3_D01[ip][j]))*((((0.5*F1/((std::sqrt((F5/(F7)*F5/(F7) + F6/(F7)*F6/(F7))) + std::sqrt(C[0]*((1.0 + F2/(F3)))/(F7)))))*(((-1.0)*F6*F2/(F3)*F6/(F7) + (C[0] + F4))/(F7)))*((-1.0)*((((F6/(F7)*(((-1.0)*F2/(F3) + 2.0)))*((K_01*F10 + K_11*F11)) + ((0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)/(F7) + (-1.0)*F6/(F7)*F6/(F7)))*((K_01*F12 + K_11*F13)) + (F5/(F7)*((-1.0)*F2/(F3)))*((K_01*F8 + K_11*F9)) + F2/(F3)*((K_01*F14 + K_11*F15))) + ((F6/(F7)*((-1.0)*F5/(F7)))*((K_00*F12 + K_10*F13)) + F5/(F7)*((K_00*F10 + K_10*F11)) + F6/(F7)*((K_00*F8 + K_10*F9)))))) + ((0.5*F1/((std::sqrt((F5/(F7)*F5/(F7) + F6/(F7)*F6/(F7))) + std::sqrt(C[0]*((1.0 + F2/(F3)))/(F7)))))*(F5/(F7)*(F6/(F7)*((-1.0)*F2/(F3)))))*((-1.0)*((((((-1.0)*F5/(F7)*F5/(F7) + 0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)/(F7)))*((K_00*F12 + K_10*F13)) + (F6/(F7)*((-1.0)*F2/(F3)))*((K_00*F10 + K_10*F11)) + (F5/(F7)*(((-1.0)*F2/(F3) + 2.0)))*((K_00*F8 + K_10*F9)) + F2/(F3)*((K_00*F14 + K_10*F15))) + (F5/(F7)*((K_01*F10 + K_11*F11)) + (F5/(F7)*((-1.0)*F6/(F7)))*((K_01*F12 + K_11*F13)) + F6/(F7)*((K_01*F8 + K_11*F9)))))) + ((0.5*F1/((std::sqrt((F5/(F7)*F5/(F7) + F6/(F7)*F6/(F7))) + std::sqrt(C[0]*((1.0 + F2/(F3)))/(F7)))))*(F6/(F7)*((1.0 + F2/(F3)))))*((-1.0)*((((((-1.0)*F6/(F7))*(((-1.0)*(0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)) + (C[0] + F4)))/(F7))*((K_01*F12 + K_11*F13)) + (F5/(F7)*(F6/(F7)*((-1.0)*F2/(F3))))*((K_01*F8 + K_11*F9)) + (((-1.0)*F6*F2/(F3)*F6/(F7) + (C[0] + F4))/(F7))*((K_01*F10 + K_11*F11)) + (F6/(F7)*((1.0 + F2/(F3))))*((K_01*F14 + K_11*F15))) + ((((-1.0)*F5/(F7))*(((-1.0)*(0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)) + (C[0] + F4)))/(F7))*((K_00*F12 + K_10*F13)) + (F5/(F7)*((1.0 + F2/(F3))))*((K_00*F14 + K_10*F15)) + (F6/(F7)*(F5/(F7)*((-1.0)*F2/(F3))))*((K_00*F10 + K_10*F11)) + (((C[0] + F4) + (-1.0)*F5*F2/(F3)*F5/(F7))/(F7))*((K_00*F8 + K_10*F9)))))) + ((0.5*F1/((std::sqrt((F5/(F7)*F5/(F7) + F6/(F7)*F6/(F7))) + std::sqrt(C[0]*((1.0 + F2/(F3)))/(F7)))))*(((-1.0)*F6/(F7))*(((-1.0)*(0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)) + (C[0] + F4)))/(F7)))*((-1.0)*((1.0*((K_00*F8 + K_10*F9)) + 1.0*((K_01*F10 + K_11*F11))))))) + ((K_01*FE1_C2_D10[ip][j] + K_11*FE1_C2_D01[ip][j]))*(((0.5*F1/((std::sqrt((F5/(F7)*F5/(F7) + F6/(F7)*F6/(F7))) + std::sqrt(C[0]*((1.0 + F2/(F3)))/(F7)))))*1.0)*((-1.0)*((((F6/(F7)*(((-1.0)*F2/(F3) + 2.0)))*((K_01*F10 + K_11*F11)) + ((0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)/(F7) + (-1.0)*F6/(F7)*F6/(F7)))*((K_01*F12 + K_11*F13)) + (F5/(F7)*((-1.0)*F2/(F3)))*((K_01*F8 + K_11*F9)) + F2/(F3)*((K_01*F14 + K_11*F15))) + ((F6/(F7)*((-1.0)*F5/(F7)))*((K_00*F12 + K_10*F13)) + F5/(F7)*((K_00*F10 + K_10*F11)) + F6/(F7)*((K_00*F8 + K_10*F9))))))))))*F0 + ((FE1_C3[ip][j]*F4 + FE1_C2[ip][j]*F7 + FE1_C1[ip][j]*F6 + FE1_C0[ip][j]*F5) + (((FE1_C0[ip][j]*((((((-1.0)*F5/(F7)*F5/(F7) + 0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)/(F7)))*((K_00*F12 + K_10*F13)) + (F6/(F7)*((-1.0)*F2/(F3)))*((K_00*F10 + K_10*F11)) + (F5/(F7)*(((-1.0)*F2/(F3) + 2.0)))*((K_00*F8 + K_10*F9)) + F2/(F3)*((K_00*F14 + K_10*F15))) + (F5/(F7)*((K_01*F10 + K_11*F11)) + (F5/(F7)*((-1.0)*F6/(F7)))*((K_01*F12 + K_11*F13)) + F6/(F7)*((K_01*F8 + K_11*F9))))) + FE1_C3[ip][j]*((((((-1.0)*F6/(F7))*(((-1.0)*(0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)) + (C[0] + F4)))/(F7))*((K_01*F12 + K_11*F13)) + (F5/(F7)*(F6/(F7)*((-1.0)*F2/(F3))))*((K_01*F8 + K_11*F9)) + (((-1.0)*F6*F2/(F3)*F6/(F7) + (C[0] + F4))/(F7))*((K_01*F10 + K_11*F11)) + (F6/(F7)*((1.0 + F2/(F3))))*((K_01*F14 + K_11*F15))) + ((((-1.0)*F5/(F7))*(((-1.0)*(0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)) + (C[0] + F4)))/(F7))*((K_00*F12 + K_10*F13)) + (F5/(F7)*((1.0 + F2/(F3))))*((K_00*F14 + K_10*F15)) + (F6/(F7)*(F5/(F7)*((-1.0)*F2/(F3))))*((K_00*F10 + K_10*F11)) + (((C[0] + F4) + (-1.0)*F5*F2/(F3)*F5/(F7))/(F7))*((K_00*F8 + K_10*F9))))) + FE1_C1[ip][j]*((((F6/(F7)*(((-1.0)*F2/(F3) + 2.0)))*((K_01*F10 + K_11*F11)) + ((0.5*F2/(F3)*((F5*F5 + F6*F6))/(F7)/(F7) + (-1.0)*F6/(F7)*F6/(F7)))*((K_01*F12 + K_11*F13)) + (F5/(F7)*((-1.0)*F2/(F3)))*((K_01*F8 + K_11*F9)) + F2/(F3)*((K_01*F14 + K_11*F15))) + ((F6/(F7)*((-1.0)*F5/(F7)))*((K_00*F12 + K_10*F13)) + F5/(F7)*((K_00*F10 + K_10*F11)) + F6/(F7)*((K_00*F8 + K_10*F9))))) + FE1_C2[ip][j]*((1.0*((K_00*F8 + K_10*F9)) + 1.0*((K_01*F10 + K_11*F11))))))*F0)*(-1.0)))*W100[ip]*det;
      }// end loop over 'j'
    }// end loop over 'ip'
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Tabulate the tensor for the contribution from a local cell
/// using the specified reference cell quadrature points/weights
void compressible2d_cell_integral_1_0::tabulate_tensor(double* A,
                     const double * const * w,
                     const ufc::cell& c,
                     unsigned int num_quadrature_points,
                     const double * const * quadrature_points,
                     const double* quadrature_weights) const
{
    throw std::runtime_error("Quadrature version of tabulate_tensor not yet implemented (introduced in UFC 2.0).");
}
#endif

/// Constructor
compressible2d_form_0::compressible2d_form_0() : ufc::form()
{
    // Do nothing
}

/// Destructor
compressible2d_form_0::~compressible2d_form_0()
{
    // Do nothing
}

/// Return a string identifying the form
const char* compressible2d_form_0::signature() const
{
    return "Form([Integral(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((Index(0),), {Index(0): 4})), Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 1), MultiIndex((Index(0),), {Index(0): 4}))), MultiIndex((Index(0),), {Index(0): 4})), Measure('cell', 0, None))])";
}

/// Return the rank of the global tensor (r)
unsigned int compressible2d_form_0::rank() const
{
    return 2;
}

/// Return the number of coefficients (n)
unsigned int compressible2d_form_0::num_coefficients() const
{
    return 0;
}
 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Return the number of cell domains
unsigned int compressible2d_form_0::num_cell_domains() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int compressible2d_form_0::num_exterior_facet_domains() const
{
    return 0;
}

/// Return the number of interior facet domains
unsigned int compressible2d_form_0::num_interior_facet_domains() const
{
    return 0;
}
#else

/// Return the number of cell domains
unsigned int compressible2d_form_0::num_cell_integrals() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int compressible2d_form_0::num_exterior_facet_integrals() const
{
    return 0;
}

/// Return the number of interior facet domains
unsigned int compressible2d_form_0::num_interior_facet_integrals() const
{
    return 0;
}

#endif

/// Create a new finite element for argument function i
ufc::finite_element* compressible2d_form_0::create_finite_element(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new compressible2d_finite_element_2();
        break;
      }
    case 1:
      {
        return new compressible2d_finite_element_2();
        break;
      }
    }
    
    return 0;
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Create a new dofmap for argument function i
ufc::dofmap* compressible2d_form_0::create_dofmap(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new compressible2d_dofmap_2();
        break;
      }
    case 1:
      {
        return new compressible2d_dofmap_2();
        break;
      }
    }
    
    return 0;
}
#else

/// Create a new dofmap for argument function i
ufc::dof_map* compressible2d_form_0::create_dof_map(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new compressible2d_dofmap_2();
        break;
      }
    case 1:
      {
        return new compressible2d_dofmap_2();
        break;
      }
    }
    
    return 0;
}
#endif
/// Create a new cell integral on sub domain i
ufc::cell_integral* compressible2d_form_0::create_cell_integral(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new compressible2d_cell_integral_0_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new exterior facet integral on sub domain i
ufc::exterior_facet_integral* compressible2d_form_0::create_exterior_facet_integral(unsigned int i) const
{
    return 0;
}

/// Create a new interior facet integral on sub domain i
ufc::interior_facet_integral* compressible2d_form_0::create_interior_facet_integral(unsigned int i) const
{
    return 0;
}

/// Constructor
compressible2d_form_1::compressible2d_form_1() : ufc::form()
{
    // Do nothing
}

/// Destructor
compressible2d_form_1::~compressible2d_form_1()
{
    // Do nothing
}

/// Return a string identifying the form
const char* compressible2d_form_1::signature() const
{
    return "Form([Integral(Sum(Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 4), Sum(IndexSum(Product(Indexed(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Product(Division(Product(FloatValue(0.5, (), (), {}), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 1)), Sum(sqrt(Division(Product(Conditional(GT(Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Sum(FloatValue(1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {})))), sqrt(Sum(Power(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), IntValue(2, (), (), {})), Power(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), IntValue(2, (), (), {})))))), Indexed(ListTensor(ListTensor(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), ListTensor(Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Sum(FloatValue(2, (), (), {}), Product(IntValue(-1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))))), Sum(Division(Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Power(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), IntValue(2, (), (), {})))), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), ListTensor(Zero((), (), {}), FloatValue(1, (), (), {}), Zero((), (), {}), Zero((), (), {})), ListTensor(Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))))), Division(Sum(Product(IntValue(-1, (), (), {}), Division(Product(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {})))), Sum(Conditional(GT(Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Division(Product(Product(IntValue(-1, (), (), {}), Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {})))), Sum(Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {})))), Sum(Conditional(GT(Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Sum(FloatValue(1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)))))), MultiIndex((Index(0), Index(1)), {Index(0): 4, Index(1): 4}))), MultiIndex((Index(0), Index(1)), {Index(0): 4, Index(1): 4})), MultiIndex((Index(2), Index(3)), {Index(2): 4, Index(3): 4})), Indexed(ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(Sum(ComponentTensor(IndexSum(Product(Indexed(ListTensor(ListTensor(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), ListTensor(Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Sum(FloatValue(2, (), (), {}), Product(IntValue(-1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))))), Sum(Division(Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Power(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), IntValue(2, (), (), {})))), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), ListTensor(Zero((), (), {}), FloatValue(1, (), (), {}), Zero((), (), {}), Zero((), (), {})), ListTensor(Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))))), Division(Sum(Product(IntValue(-1, (), (), {}), Division(Product(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {})))), Sum(Conditional(GT(Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Division(Product(Product(IntValue(-1, (), (), {}), Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {})))), Sum(Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {})))), Sum(Conditional(GT(Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Sum(FloatValue(1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)))))), MultiIndex((Index(4), Index(5)), {Index(4): 4, Index(5): 4})), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), MultiIndex((Index(5),), {Index(5): 4}))), MultiIndex((Index(5),), {Index(5): 4})), MultiIndex((Index(4),), {Index(4): 4})), ComponentTensor(IndexSum(Product(Indexed(ListTensor(ListTensor(Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Sum(FloatValue(2, (), (), {}), Product(IntValue(-1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)))), Sum(Division(Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Power(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), IntValue(2, (), (), {})))), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), ListTensor(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), ListTensor(FloatValue(1, (), (), {}), Zero((), (), {}), Zero((), (), {}), Zero((), (), {})), ListTensor(Division(Sum(Product(IntValue(-1, (), (), {}), Division(Product(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {})))), Sum(Conditional(GT(Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))))), Division(Product(Product(IntValue(-1, (), (), {}), Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {})))), Sum(Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {})))), Sum(Conditional(GT(Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Sum(FloatValue(1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)))))), MultiIndex((Index(6), Index(7)), {Index(7): 4, Index(6): 4})), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), MultiIndex((Index(7),), {Index(7): 4}))), MultiIndex((Index(7),), {Index(7): 4})), MultiIndex((Index(6),), {Index(6): 4}))), MultiIndex((Index(8),), {Index(8): 4}))), MultiIndex((Index(8),), {Index(8): 4})), MultiIndex((Index(3),), {Index(3): 4}))), MultiIndex((Index(3),), {Index(3): 4})), MultiIndex((Index(2),), {Index(2): 4})), MultiIndex((Index(9),), {Index(9): 4})), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), MultiIndex((Index(9),), {Index(9): 4}))), MultiIndex((Index(9),), {Index(9): 4})), IndexSum(Product(Indexed(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Product(Division(Product(FloatValue(0.5, (), (), {}), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 1)), Sum(sqrt(Division(Product(Conditional(GT(Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Sum(FloatValue(1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {})))), sqrt(Sum(Power(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), IntValue(2, (), (), {})), Power(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), IntValue(2, (), (), {})))))), Indexed(ListTensor(ListTensor(Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Sum(FloatValue(2, (), (), {}), Product(IntValue(-1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)))), Sum(Division(Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Power(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), IntValue(2, (), (), {})))), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), ListTensor(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), ListTensor(FloatValue(1, (), (), {}), Zero((), (), {}), Zero((), (), {}), Zero((), (), {})), ListTensor(Division(Sum(Product(IntValue(-1, (), (), {}), Division(Product(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {})))), Sum(Conditional(GT(Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))))), Division(Product(Product(IntValue(-1, (), (), {}), Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {})))), Sum(Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {})))), Sum(Conditional(GT(Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Sum(FloatValue(1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)))))), MultiIndex((Index(10), Index(11)), {Index(11): 4, Index(10): 4}))), MultiIndex((Index(10), Index(11)), {Index(11): 4, Index(10): 4})), MultiIndex((Index(12), Index(13)), {Index(13): 4, Index(12): 4})), Indexed(ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(Sum(ComponentTensor(IndexSum(Product(Indexed(ListTensor(ListTensor(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), ListTensor(Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Sum(FloatValue(2, (), (), {}), Product(IntValue(-1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))))), Sum(Division(Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Power(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), IntValue(2, (), (), {})))), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), ListTensor(Zero((), (), {}), FloatValue(1, (), (), {}), Zero((), (), {}), Zero((), (), {})), ListTensor(Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))))), Division(Sum(Product(IntValue(-1, (), (), {}), Division(Product(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {})))), Sum(Conditional(GT(Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Division(Product(Product(IntValue(-1, (), (), {}), Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {})))), Sum(Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {})))), Sum(Conditional(GT(Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Sum(FloatValue(1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)))))), MultiIndex((Index(4), Index(5)), {Index(4): 4, Index(5): 4})), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), MultiIndex((Index(5),), {Index(5): 4}))), MultiIndex((Index(5),), {Index(5): 4})), MultiIndex((Index(4),), {Index(4): 4})), ComponentTensor(IndexSum(Product(Indexed(ListTensor(ListTensor(Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Sum(FloatValue(2, (), (), {}), Product(IntValue(-1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)))), Sum(Division(Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Power(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), IntValue(2, (), (), {})))), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), ListTensor(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), ListTensor(FloatValue(1, (), (), {}), Zero((), (), {}), Zero((), (), {}), Zero((), (), {})), ListTensor(Division(Sum(Product(IntValue(-1, (), (), {}), Division(Product(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {})))), Sum(Conditional(GT(Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))))), Division(Product(Product(IntValue(-1, (), (), {}), Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {})))), Sum(Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {})))), Sum(Conditional(GT(Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Sum(FloatValue(1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)))))), MultiIndex((Index(6), Index(7)), {Index(7): 4, Index(6): 4})), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), MultiIndex((Index(7),), {Index(7): 4}))), MultiIndex((Index(7),), {Index(7): 4})), MultiIndex((Index(6),), {Index(6): 4}))), MultiIndex((Index(8),), {Index(8): 4}))), MultiIndex((Index(8),), {Index(8): 4})), MultiIndex((Index(13),), {Index(13): 4}))), MultiIndex((Index(13),), {Index(13): 4})), MultiIndex((Index(12),), {Index(12): 4})), MultiIndex((Index(14),), {Index(14): 4})), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), MultiIndex((Index(14),), {Index(14): 4}))), MultiIndex((Index(14),), {Index(14): 4})))), Sum(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((Index(15),), {Index(15): 4})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((Index(15),), {Index(15): 4}))), MultiIndex((Index(15),), {Index(15): 4})), Product(IntValue(-1, (), (), {}), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 4), IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((Index(16),), {Index(16): 4})), Indexed(Sum(ComponentTensor(IndexSum(Product(Indexed(ListTensor(ListTensor(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), ListTensor(Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Sum(FloatValue(2, (), (), {}), Product(IntValue(-1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))))), Sum(Division(Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Power(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), IntValue(2, (), (), {})))), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), ListTensor(Zero((), (), {}), FloatValue(1, (), (), {}), Zero((), (), {}), Zero((), (), {})), ListTensor(Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))))), Division(Sum(Product(IntValue(-1, (), (), {}), Division(Product(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {})))), Sum(Conditional(GT(Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Division(Product(Product(IntValue(-1, (), (), {}), Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {})))), Sum(Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {})))), Sum(Conditional(GT(Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Sum(FloatValue(1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)))))), MultiIndex((Index(4), Index(5)), {Index(4): 4, Index(5): 4})), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), MultiIndex((Index(5),), {Index(5): 4}))), MultiIndex((Index(5),), {Index(5): 4})), MultiIndex((Index(4),), {Index(4): 4})), ComponentTensor(IndexSum(Product(Indexed(ListTensor(ListTensor(Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Sum(FloatValue(2, (), (), {}), Product(IntValue(-1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)))), Sum(Division(Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Power(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), IntValue(2, (), (), {})))), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), ListTensor(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), ListTensor(FloatValue(1, (), (), {}), Zero((), (), {}), Zero((), (), {}), Zero((), (), {})), ListTensor(Division(Sum(Product(IntValue(-1, (), (), {}), Division(Product(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {})))), Sum(Conditional(GT(Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(IntValue(-1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))))), Division(Product(Product(IntValue(-1, (), (), {}), Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {})))), Sum(Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {})))), Sum(Conditional(GT(Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Sum(Product(Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))), Product(IntValue(-1, (), (), {}), Division(Product(Product(FloatValue(0.5, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), IntValue(2, (), (), {})), Power(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(1),), {})), IntValue(2, (), (), {})))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))))), Zero((), (), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(3),), {}))))), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(2),), {}))), Sum(FloatValue(1, (), (), {}), Division(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 2), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3)))))), MultiIndex((Index(6), Index(7)), {Index(7): 4, Index(6): 4})), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 4, None), 0), MultiIndex((FixedIndex(0),), {})), MultiIndex((Index(7),), {Index(7): 4}))), MultiIndex((Index(7),), {Index(7): 4})), MultiIndex((Index(6),), {Index(6): 4}))), MultiIndex((Index(16),), {Index(16): 4}))), MultiIndex((Index(16),), {Index(16): 4})))))), Measure('cell', 0, None))])";
}

/// Return the rank of the global tensor (r)
unsigned int compressible2d_form_1::rank() const
{
    return 1;
}

/// Return the number of coefficients (n)
unsigned int compressible2d_form_1::num_coefficients() const
{
    return 5;
}
 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Return the number of cell domains
unsigned int compressible2d_form_1::num_cell_domains() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int compressible2d_form_1::num_exterior_facet_domains() const
{
    return 0;
}

/// Return the number of interior facet domains
unsigned int compressible2d_form_1::num_interior_facet_domains() const
{
    return 0;
}
#else

/// Return the number of cell domains
unsigned int compressible2d_form_1::num_cell_integrals() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int compressible2d_form_1::num_exterior_facet_integrals() const
{
    return 0;
}

/// Return the number of interior facet domains
unsigned int compressible2d_form_1::num_interior_facet_integrals() const
{
    return 0;
}

#endif

/// Create a new finite element for argument function i
ufc::finite_element* compressible2d_form_1::create_finite_element(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new compressible2d_finite_element_2();
        break;
      }
    case 1:
      {
        return new compressible2d_finite_element_2();
        break;
      }
    case 2:
      {
        return new compressible2d_finite_element_0();
        break;
      }
    case 3:
      {
        return new compressible2d_finite_element_0();
        break;
      }
    case 4:
      {
        return new compressible2d_finite_element_0();
        break;
      }
    case 5:
      {
        return new compressible2d_finite_element_0();
        break;
      }
    }
    
    return 0;
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Create a new dofmap for argument function i
ufc::dofmap* compressible2d_form_1::create_dofmap(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new compressible2d_dofmap_2();
        break;
      }
    case 1:
      {
        return new compressible2d_dofmap_2();
        break;
      }
    case 2:
      {
        return new compressible2d_dofmap_0();
        break;
      }
    case 3:
      {
        return new compressible2d_dofmap_0();
        break;
      }
    case 4:
      {
        return new compressible2d_dofmap_0();
        break;
      }
    case 5:
      {
        return new compressible2d_dofmap_0();
        break;
      }
    }
    
    return 0;
}
#else

/// Create a new dofmap for argument function i
ufc::dof_map* compressible2d_form_1::create_dof_map(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new compressible2d_dofmap_2();
        break;
      }
    case 1:
      {
        return new compressible2d_dofmap_2();
        break;
      }
    case 2:
      {
        return new compressible2d_dofmap_0();
        break;
      }
    case 3:
      {
        return new compressible2d_dofmap_0();
        break;
      }
    case 4:
      {
        return new compressible2d_dofmap_0();
        break;
      }
    case 5:
      {
        return new compressible2d_dofmap_0();
        break;
      }
    }
    
    return 0;
}
#endif
/// Create a new cell integral on sub domain i
ufc::cell_integral* compressible2d_form_1::create_cell_integral(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new compressible2d_cell_integral_1_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new exterior facet integral on sub domain i
ufc::exterior_facet_integral* compressible2d_form_1::create_exterior_facet_integral(unsigned int i) const
{
    return 0;
}

/// Create a new interior facet integral on sub domain i
ufc::interior_facet_integral* compressible2d_form_1::create_interior_facet_integral(unsigned int i) const
{
    return 0;
}

