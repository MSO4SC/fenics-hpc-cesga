// This code conforms with the UFC specification version 2.0.5
// and was automatically generated by FFC version 1.0.0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   False
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'dolfin'
//   log_level:                      20
//   log_prefix:                     ''
//   optimize:                       True
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              'auto'
//   quadrature_rule:                'auto'
//   representation:                 'quadrature'
//   split:                          True
//   swig_binary:                    'swig'
//   swig_path:                      ''

#include "NSEMomentum2D.h"

/// Constructor
nsemomentum2d_finite_element_0::nsemomentum2d_finite_element_0() : ufc::finite_element()
{
    // Do nothing
}

/// Destructor
nsemomentum2d_finite_element_0::~nsemomentum2d_finite_element_0()
{
    // Do nothing
}

/// Return a string identifying the finite element
const char* nsemomentum2d_finite_element_0::signature() const
{
    return "FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None)";
}

/// Return the cell shape
ufc::shape nsemomentum2d_finite_element_0::cell_shape() const
{
    return ufc::triangle;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the cell shape
unsigned int nsemomentum2d_finite_element_0::topological_dimension() const
{
    return 2;
}

/// Return the geometric dimension of the cell shape
unsigned int nsemomentum2d_finite_element_0::geometric_dimension() const
{
    return 2;
}
#endif
/// Return the dimension of the finite element function space
unsigned int nsemomentum2d_finite_element_0::space_dimension() const
{
    return 1;
}

/// Return the rank of the value space
unsigned int nsemomentum2d_finite_element_0::value_rank() const
{
    return 0;
}

/// Return the dimension of the value space for axis i
unsigned int nsemomentum2d_finite_element_0::value_dimension(unsigned int i) const
{
    return 1;
}

/// Evaluate basis function i at given point in cell
void nsemomentum2d_finite_element_0::evaluate_basis(unsigned int i,
                                   double* values,
                                   const double* coordinates,
                                   const ufc::cell& c) const
{
    // Extract vertex coordinates
    
    // Compute Jacobian of affine map from reference cell
    
    // Compute determinant of Jacobian
    
    // Compute inverse of Jacobian
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    // Reset values.
    *values = 0.0;
    
    // Array of basisvalues.
    double basisvalues[1] = {0.0};
    
    // Declare helper variables.
    
    // Compute basisvalues.
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients.
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s).
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    }// end loop over 'r'
}

/// Evaluate all basis functions at given point in cell
void nsemomentum2d_finite_element_0::evaluate_basis_all(double* values,
                                       const double* coordinates,
                                       const ufc::cell& c) const
{
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, coordinates, c);
}

/// Evaluate order n derivatives of basis function i at given point in cell
void nsemomentum2d_finite_element_0::evaluate_basis_derivatives(unsigned int i,
                                               unsigned int n,
                                               double* values,
                                               const double* coordinates,
                                               const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K_00, K_01}, {K_10, K_11}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    
    // Array of basisvalues.
    double basisvalues[1] = {0.0};
    
    // Declare helper variables.
    
    // Compute basisvalues.
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients.
    static const double coefficients0[1] = \
    {1.0};
    
    // Tables of derivatives of the polynomial base (transpose).
    static const double dmats0[1][1] = \
    {{0.0}};
    
    static const double dmats1[1][1] = \
    {{0.0}};
    
    // Compute reference derivatives.
    // Declare pointer to array of derivatives on FIAT element.
    double *derivatives = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      derivatives[r] = 0.0;
    }// end loop over 'r'
    
    // Declare derivative matrix (of polynomial basis).
    double dmats[1][1] = \
    {{1.0}};
    
    // Declare (auxiliary) derivative matrix (of polynomial basis).
    double dmats_old[1][1] = \
    {{1.0}};
    
    // Loop possible derivatives.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      // Resetting dmats values to compute next derivative.
      for (unsigned int t = 0; t < 1; t++)
      {
        for (unsigned int u = 0; u < 1; u++)
        {
          dmats[t][u] = 0.0;
          if (t == u)
          {
          dmats[t][u] = 1.0;
          }
          
        }// end loop over 'u'
      }// end loop over 't'
      
      // Looping derivative order to generate dmats.
      for (unsigned int s = 0; s < n; s++)
      {
        // Updating dmats_old with new values and resetting dmats.
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            dmats_old[t][u] = dmats[t][u];
            dmats[t][u] = 0.0;
          }// end loop over 'u'
        }// end loop over 't'
        
        // Update dmats using an inner product.
        if (combinations[r][s] == 0)
        {
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            for (unsigned int tu = 0; tu < 1; tu++)
            {
              dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
            }// end loop over 'tu'
          }// end loop over 'u'
        }// end loop over 't'
        }
        
        if (combinations[r][s] == 1)
        {
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            for (unsigned int tu = 0; tu < 1; tu++)
            {
              dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
            }// end loop over 'tu'
          }// end loop over 'u'
        }// end loop over 't'
        }
        
      }// end loop over 's'
      for (unsigned int s = 0; s < 1; s++)
      {
        for (unsigned int t = 0; t < 1; t++)
        {
          derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
        }// end loop over 't'
      }// end loop over 's'
    }// end loop over 'r'
    
    // Transform derivatives back to physical element
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r] += transform[r][s]*derivatives[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      delete [] combinations[r];
    }// end loop over 'r'
    delete [] combinations;
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      delete [] transform[r];
    }// end loop over 'r'
    delete [] transform;
}

/// Evaluate order n derivatives of all basis functions at given point in cell
void nsemomentum2d_finite_element_0::evaluate_basis_derivatives_all(unsigned int n,
                                                   double* values,
                                                   const double* coordinates,
                                                   const ufc::cell& c) const
{
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, coordinates, c);
}

/// Evaluate linear functional for dof i on the function f
double nsemomentum2d_finite_element_0::evaluate_dof(unsigned int i,
                                   const ufc::function& f,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
      y[1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

/// Evaluate linear functionals for all dofs on the function f
void nsemomentum2d_finite_element_0::evaluate_dofs(double* values,
                                  const ufc::function& f,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    y[1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
}

/// Interpolate vertex values from dof values
void nsemomentum2d_finite_element_0::interpolate_vertex_values(double* vertex_values,
                                              const double* dof_values,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Map coordinate xhat from reference cell to coordinate x in cell
void nsemomentum2d_finite_element_0::map_from_reference_cell(double* x,
                                            const double* xhat,
                                            const ufc::cell& c) const
{
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
}

/// Map from coordinate x in cell to coordinate xhat in reference cell
void nsemomentum2d_finite_element_0::map_to_reference_cell(double* xhat,
                                          const double* x,
                                          const ufc::cell& c) const
{
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
}
#endif
/// Return the number of sub elements (for a mixed element)
unsigned int nsemomentum2d_finite_element_0::num_sub_elements() const
{
    return 0;
}

/// Create a new finite element for sub element i (for a mixed element)
ufc::finite_element* nsemomentum2d_finite_element_0::create_sub_element(unsigned int i) const
{
    return 0;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Create a new class instance
ufc::finite_element* nsemomentum2d_finite_element_0::create() const
{
    return new nsemomentum2d_finite_element_0();
}
#endif


/// Constructor
nsemomentum2d_finite_element_1::nsemomentum2d_finite_element_1() : ufc::finite_element()
{
    // Do nothing
}

/// Destructor
nsemomentum2d_finite_element_1::~nsemomentum2d_finite_element_1()
{
    // Do nothing
}

/// Return a string identifying the finite element
const char* nsemomentum2d_finite_element_1::signature() const
{
    return "FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)";
}

/// Return the cell shape
ufc::shape nsemomentum2d_finite_element_1::cell_shape() const
{
    return ufc::triangle;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the cell shape
unsigned int nsemomentum2d_finite_element_1::topological_dimension() const
{
    return 2;
}

/// Return the geometric dimension of the cell shape
unsigned int nsemomentum2d_finite_element_1::geometric_dimension() const
{
    return 2;
}
#endif
/// Return the dimension of the finite element function space
unsigned int nsemomentum2d_finite_element_1::space_dimension() const
{
    return 3;
}

/// Return the rank of the value space
unsigned int nsemomentum2d_finite_element_1::value_rank() const
{
    return 0;
}

/// Return the dimension of the value space for axis i
unsigned int nsemomentum2d_finite_element_1::value_dimension(unsigned int i) const
{
    return 1;
}

/// Evaluate basis function i at given point in cell
void nsemomentum2d_finite_element_1::evaluate_basis(unsigned int i,
                                   double* values,
                                   const double* coordinates,
                                   const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
}

/// Evaluate all basis functions at given point in cell
void nsemomentum2d_finite_element_1::evaluate_basis_all(double* values,
                                       const double* coordinates,
                                       const ufc::cell& c) const
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
}

/// Evaluate order n derivatives of basis function i at given point in cell
void nsemomentum2d_finite_element_1::evaluate_basis_derivatives(unsigned int i,
                                               unsigned int n,
                                               double* values,
                                               const double* coordinates,
                                               const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K_00, K_01}, {K_10, K_11}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
}

/// Evaluate order n derivatives of all basis functions at given point in cell
void nsemomentum2d_finite_element_1::evaluate_basis_derivatives_all(unsigned int n,
                                                   double* values,
                                                   const double* coordinates,
                                                   const ufc::cell& c) const
{
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
}

/// Evaluate linear functional for dof i on the function f
double nsemomentum2d_finite_element_1::evaluate_dof(unsigned int i,
                                   const ufc::function& f,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

/// Evaluate linear functionals for all dofs on the function f
void nsemomentum2d_finite_element_1::evaluate_dofs(double* values,
                                  const ufc::function& f,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
}

/// Interpolate vertex values from dof values
void nsemomentum2d_finite_element_1::interpolate_vertex_values(double* vertex_values,
                                              const double* dof_values,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Map coordinate xhat from reference cell to coordinate x in cell
void nsemomentum2d_finite_element_1::map_from_reference_cell(double* x,
                                            const double* xhat,
                                            const ufc::cell& c) const
{
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
}

/// Map from coordinate x in cell to coordinate xhat in reference cell
void nsemomentum2d_finite_element_1::map_to_reference_cell(double* xhat,
                                          const double* x,
                                          const ufc::cell& c) const
{
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
}
#endif
/// Return the number of sub elements (for a mixed element)
unsigned int nsemomentum2d_finite_element_1::num_sub_elements() const
{
    return 0;
}

/// Create a new finite element for sub element i (for a mixed element)
ufc::finite_element* nsemomentum2d_finite_element_1::create_sub_element(unsigned int i) const
{
    return 0;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Create a new class instance
ufc::finite_element* nsemomentum2d_finite_element_1::create() const
{
    return new nsemomentum2d_finite_element_1();
}
#endif


/// Constructor
nsemomentum2d_finite_element_2::nsemomentum2d_finite_element_2() : ufc::finite_element()
{
    // Do nothing
}

/// Destructor
nsemomentum2d_finite_element_2::~nsemomentum2d_finite_element_2()
{
    // Do nothing
}

/// Return a string identifying the finite element
const char* nsemomentum2d_finite_element_2::signature() const
{
    return "VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None)";
}

/// Return the cell shape
ufc::shape nsemomentum2d_finite_element_2::cell_shape() const
{
    return ufc::triangle;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the cell shape
unsigned int nsemomentum2d_finite_element_2::topological_dimension() const
{
    return 2;
}

/// Return the geometric dimension of the cell shape
unsigned int nsemomentum2d_finite_element_2::geometric_dimension() const
{
    return 2;
}
#endif
/// Return the dimension of the finite element function space
unsigned int nsemomentum2d_finite_element_2::space_dimension() const
{
    return 6;
}

/// Return the rank of the value space
unsigned int nsemomentum2d_finite_element_2::value_rank() const
{
    return 1;
}

/// Return the dimension of the value space for axis i
unsigned int nsemomentum2d_finite_element_2::value_dimension(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
}

/// Evaluate basis function i at given point in cell
void nsemomentum2d_finite_element_2::evaluate_basis(unsigned int i,
                                   double* values,
                                   const double* coordinates,
                                   const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
}

/// Evaluate all basis functions at given point in cell
void nsemomentum2d_finite_element_2::evaluate_basis_all(double* values,
                                       const double* coordinates,
                                       const ufc::cell& c) const
{
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 6; r++)
    {
      evaluate_basis(r, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
}

/// Evaluate order n derivatives of basis function i at given point in cell
void nsemomentum2d_finite_element_2::evaluate_basis_derivatives(unsigned int i,
                                               unsigned int n,
                                               double* values,
                                               const double* coordinates,
                                               const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K_00, K_01}, {K_10, K_11}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 2*num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
}

/// Evaluate order n derivatives of all basis functions at given point in cell
void nsemomentum2d_finite_element_2::evaluate_basis_derivatives_all(unsigned int n,
                                                   double* values,
                                                   const double* coordinates,
                                                   const ufc::cell& c) const
{
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[2*num_derivatives];
    for (unsigned int r = 0; r < 2*num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 6; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
}

/// Evaluate linear functional for dof i on the function f
double nsemomentum2d_finite_element_2::evaluate_dof(unsigned int i,
                                   const ufc::function& f,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[2];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 4:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
}

/// Evaluate linear functionals for all dofs on the function f
void nsemomentum2d_finite_element_2::evaluate_dofs(double* values,
                                  const ufc::function& f,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[2];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[3] = vals[1];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
}

/// Interpolate vertex values from dof values
void nsemomentum2d_finite_element_2::interpolate_vertex_values(double* vertex_values,
                                              const double* dof_values,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[3];
    vertex_values[3] = dof_values[4];
    vertex_values[5] = dof_values[5];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Map coordinate xhat from reference cell to coordinate x in cell
void nsemomentum2d_finite_element_2::map_from_reference_cell(double* x,
                                            const double* xhat,
                                            const ufc::cell& c) const
{
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
}

/// Map from coordinate x in cell to coordinate xhat in reference cell
void nsemomentum2d_finite_element_2::map_to_reference_cell(double* xhat,
                                          const double* x,
                                          const ufc::cell& c) const
{
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
}
#endif
/// Return the number of sub elements (for a mixed element)
unsigned int nsemomentum2d_finite_element_2::num_sub_elements() const
{
    return 2;
}

/// Create a new finite element for sub element i (for a mixed element)
ufc::finite_element* nsemomentum2d_finite_element_2::create_sub_element(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum2d_finite_element_1();
        break;
      }
    case 1:
      {
        return new nsemomentum2d_finite_element_1();
        break;
      }
    }
    
    return 0;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Create a new class instance
ufc::finite_element* nsemomentum2d_finite_element_2::create() const
{
    return new nsemomentum2d_finite_element_2();
}
#endif

/// Constructor


#ifndef UFC_BACKWARD_COMPATIBILITY
nsemomentum2d_dofmap_0::nsemomentum2d_dofmap_0() : ufc::dofmap()
#else
nsemomentum2d_dofmap_0::nsemomentum2d_dofmap_0() : ufc::dof_map()
#endif
{
    _global_dimension = 0;
}

/// Destructor
nsemomentum2d_dofmap_0::~nsemomentum2d_dofmap_0()
{
    // Do nothing
}

/// Return a string identifying the dofmap
const char* nsemomentum2d_dofmap_0::signature() const
{
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None)";
}

/// Return true iff mesh entities of topological dimension d are needed
bool nsemomentum2d_dofmap_0::needs_mesh_entities(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
}

/// Initialize dofmap for mesh (return true iff init_cell() is needed)
bool nsemomentum2d_dofmap_0::init_mesh(const ufc::mesh& m)
{
    _global_dimension = m.num_entities[2];
    return false;
}

/// Initialize dofmap for given cell
void nsemomentum2d_dofmap_0::init_cell(const ufc::mesh& m,
                              const ufc::cell& c)
{
    // Do nothing
}

/// Finish initialization of dofmap for cells
void nsemomentum2d_dofmap_0::init_cell_finalize()
{
    // Do nothing
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the associated cell shape
unsigned int nsemomentum2d_dofmap_0::topological_dimension() const
{
    return 2;
}

/// Return the geometric dimension of the associated cell shape
unsigned int nsemomentum2d_dofmap_0::geometric_dimension() const
{
    return 2;
}
#endif
/// Return the dimension of the global finite element function space
unsigned int nsemomentum2d_dofmap_0::global_dimension() const
{
    return _global_dimension;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the dimension of the local finite element function space for a cell
unsigned int nsemomentum2d_dofmap_0::local_dimension(const ufc::cell& c) const
{
    return 1;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsemomentum2d_dofmap_0::max_local_dimension() const
{
    return 1;
}
#else

/// Return the dimension of the local finite element function space for a cell
unsigned int nsemomentum2d_dofmap_0::local_dimension() const
{
    return 1;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsemomentum2d_dofmap_0::geometric_dimension() const
{
    return 2;
}

#endif
/// Return the number of dofs on each cell facet
unsigned int nsemomentum2d_dofmap_0::num_facet_dofs() const
{
    return 0;
}

/// Return the number of dofs associated with each cell entity of dimension d
unsigned int nsemomentum2d_dofmap_0::num_entity_dofs(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    }
    
    return 0;
}

/// Tabulate the local-to-global mapping of dofs on a cell
void nsemomentum2d_dofmap_0::tabulate_dofs(unsigned int* dofs,
                                  const ufc::mesh& m,
                                  const ufc::cell& c) const
{
    dofs[0] = c.entity_indices[2][0];
}

/// Tabulate the local-to-local mapping from facet dofs to cell dofs
void nsemomentum2d_dofmap_0::tabulate_facet_dofs(unsigned int* dofs,
                                        unsigned int facet) const
{
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

/// Tabulate the local-to-local mapping of dofs on entity (d, i)
void nsemomentum2d_dofmap_0::tabulate_entity_dofs(unsigned int* dofs,
                                  unsigned int d, unsigned int i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
}

/// Tabulate the coordinates of all dofs on a cell
void nsemomentum2d_dofmap_0::tabulate_coordinates(double** coordinates,
                                         const ufc::cell& c) const
{
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[0][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsemomentum2d_dofmap_0::num_sub_dofmaps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dofmap* nsemomentum2d_dofmap_0::create_sub_dofmap(unsigned int i) const
{
    return 0;
}

/// Create a new class instance
ufc::dofmap* nsemomentum2d_dofmap_0::create() const
{
    return new nsemomentum2d_dofmap_0();
}
#else

/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsemomentum2d_dofmap_0::num_sub_dof_maps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dof_map* nsemomentum2d_dofmap_0::create_sub_dof_map(unsigned int i) const
{
    return 0;
}

#endif

/// Constructor


#ifndef UFC_BACKWARD_COMPATIBILITY
nsemomentum2d_dofmap_1::nsemomentum2d_dofmap_1() : ufc::dofmap()
#else
nsemomentum2d_dofmap_1::nsemomentum2d_dofmap_1() : ufc::dof_map()
#endif
{
    _global_dimension = 0;
}

/// Destructor
nsemomentum2d_dofmap_1::~nsemomentum2d_dofmap_1()
{
    // Do nothing
}

/// Return a string identifying the dofmap
const char* nsemomentum2d_dofmap_1::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)";
}

/// Return true iff mesh entities of topological dimension d are needed
bool nsemomentum2d_dofmap_1::needs_mesh_entities(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
}

/// Initialize dofmap for mesh (return true iff init_cell() is needed)
bool nsemomentum2d_dofmap_1::init_mesh(const ufc::mesh& m)
{
    _global_dimension = m.num_entities[0];
    return false;
}

/// Initialize dofmap for given cell
void nsemomentum2d_dofmap_1::init_cell(const ufc::mesh& m,
                              const ufc::cell& c)
{
    // Do nothing
}

/// Finish initialization of dofmap for cells
void nsemomentum2d_dofmap_1::init_cell_finalize()
{
    // Do nothing
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the associated cell shape
unsigned int nsemomentum2d_dofmap_1::topological_dimension() const
{
    return 2;
}

/// Return the geometric dimension of the associated cell shape
unsigned int nsemomentum2d_dofmap_1::geometric_dimension() const
{
    return 2;
}
#endif
/// Return the dimension of the global finite element function space
unsigned int nsemomentum2d_dofmap_1::global_dimension() const
{
    return _global_dimension;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the dimension of the local finite element function space for a cell
unsigned int nsemomentum2d_dofmap_1::local_dimension(const ufc::cell& c) const
{
    return 3;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsemomentum2d_dofmap_1::max_local_dimension() const
{
    return 3;
}
#else

/// Return the dimension of the local finite element function space for a cell
unsigned int nsemomentum2d_dofmap_1::local_dimension() const
{
    return 3;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsemomentum2d_dofmap_1::geometric_dimension() const
{
    return 2;
}

#endif
/// Return the number of dofs on each cell facet
unsigned int nsemomentum2d_dofmap_1::num_facet_dofs() const
{
    return 2;
}

/// Return the number of dofs associated with each cell entity of dimension d
unsigned int nsemomentum2d_dofmap_1::num_entity_dofs(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

/// Tabulate the local-to-global mapping of dofs on a cell
void nsemomentum2d_dofmap_1::tabulate_dofs(unsigned int* dofs,
                                  const ufc::mesh& m,
                                  const ufc::cell& c) const
{
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
}

/// Tabulate the local-to-local mapping from facet dofs to cell dofs
void nsemomentum2d_dofmap_1::tabulate_facet_dofs(unsigned int* dofs,
                                        unsigned int facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
        break;
      }
    }
    
}

/// Tabulate the local-to-local mapping of dofs on entity (d, i)
void nsemomentum2d_dofmap_1::tabulate_entity_dofs(unsigned int* dofs,
                                  unsigned int d, unsigned int i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

/// Tabulate the coordinates of all dofs on a cell
void nsemomentum2d_dofmap_1::tabulate_coordinates(double** coordinates,
                                         const ufc::cell& c) const
{
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsemomentum2d_dofmap_1::num_sub_dofmaps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dofmap* nsemomentum2d_dofmap_1::create_sub_dofmap(unsigned int i) const
{
    return 0;
}

/// Create a new class instance
ufc::dofmap* nsemomentum2d_dofmap_1::create() const
{
    return new nsemomentum2d_dofmap_1();
}
#else

/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsemomentum2d_dofmap_1::num_sub_dof_maps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dof_map* nsemomentum2d_dofmap_1::create_sub_dof_map(unsigned int i) const
{
    return 0;
}

#endif

/// Constructor


#ifndef UFC_BACKWARD_COMPATIBILITY
nsemomentum2d_dofmap_2::nsemomentum2d_dofmap_2() : ufc::dofmap()
#else
nsemomentum2d_dofmap_2::nsemomentum2d_dofmap_2() : ufc::dof_map()
#endif
{
    _global_dimension = 0;
}

/// Destructor
nsemomentum2d_dofmap_2::~nsemomentum2d_dofmap_2()
{
    // Do nothing
}

/// Return a string identifying the dofmap
const char* nsemomentum2d_dofmap_2::signature() const
{
    return "FFC dofmap for VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None)";
}

/// Return true iff mesh entities of topological dimension d are needed
bool nsemomentum2d_dofmap_2::needs_mesh_entities(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
}

/// Initialize dofmap for mesh (return true iff init_cell() is needed)
bool nsemomentum2d_dofmap_2::init_mesh(const ufc::mesh& m)
{
    _global_dimension = 2*m.num_entities[0];
    return false;
}

/// Initialize dofmap for given cell
void nsemomentum2d_dofmap_2::init_cell(const ufc::mesh& m,
                              const ufc::cell& c)
{
    // Do nothing
}

/// Finish initialization of dofmap for cells
void nsemomentum2d_dofmap_2::init_cell_finalize()
{
    // Do nothing
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the associated cell shape
unsigned int nsemomentum2d_dofmap_2::topological_dimension() const
{
    return 2;
}

/// Return the geometric dimension of the associated cell shape
unsigned int nsemomentum2d_dofmap_2::geometric_dimension() const
{
    return 2;
}
#endif
/// Return the dimension of the global finite element function space
unsigned int nsemomentum2d_dofmap_2::global_dimension() const
{
    return _global_dimension;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the dimension of the local finite element function space for a cell
unsigned int nsemomentum2d_dofmap_2::local_dimension(const ufc::cell& c) const
{
    return 6;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsemomentum2d_dofmap_2::max_local_dimension() const
{
    return 6;
}
#else

/// Return the dimension of the local finite element function space for a cell
unsigned int nsemomentum2d_dofmap_2::local_dimension() const
{
    return 6;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsemomentum2d_dofmap_2::geometric_dimension() const
{
    return 2;
}

#endif
/// Return the number of dofs on each cell facet
unsigned int nsemomentum2d_dofmap_2::num_facet_dofs() const
{
    return 4;
}

/// Return the number of dofs associated with each cell entity of dimension d
unsigned int nsemomentum2d_dofmap_2::num_entity_dofs(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

/// Tabulate the local-to-global mapping of dofs on a cell
void nsemomentum2d_dofmap_2::tabulate_dofs(unsigned int* dofs,
                                  const ufc::mesh& m,
                                  const ufc::cell& c) const
{
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[3] = offset + c.entity_indices[0][0];
    dofs[4] = offset + c.entity_indices[0][1];
    dofs[5] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
}

/// Tabulate the local-to-local mapping from facet dofs to cell dofs
void nsemomentum2d_dofmap_2::tabulate_facet_dofs(unsigned int* dofs,
                                        unsigned int facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 5;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
        break;
      }
    }
    
}

/// Tabulate the local-to-local mapping of dofs on entity (d, i)
void nsemomentum2d_dofmap_2::tabulate_entity_dofs(unsigned int* dofs,
                                  unsigned int d, unsigned int i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 4;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 5;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

/// Tabulate the coordinates of all dofs on a cell
void nsemomentum2d_dofmap_2::tabulate_coordinates(double** coordinates,
                                         const ufc::cell& c) const
{
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = x[0][0];
    coordinates[3][1] = x[0][1];
    coordinates[4][0] = x[1][0];
    coordinates[4][1] = x[1][1];
    coordinates[5][0] = x[2][0];
    coordinates[5][1] = x[2][1];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsemomentum2d_dofmap_2::num_sub_dofmaps() const
{
    return 2;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dofmap* nsemomentum2d_dofmap_2::create_sub_dofmap(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum2d_dofmap_1();
        break;
      }
    case 1:
      {
        return new nsemomentum2d_dofmap_1();
        break;
      }
    }
    
    return 0;
}

/// Create a new class instance
ufc::dofmap* nsemomentum2d_dofmap_2::create() const
{
    return new nsemomentum2d_dofmap_2();
}
#else

/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsemomentum2d_dofmap_2::num_sub_dof_maps() const
{
    return 2;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dof_map* nsemomentum2d_dofmap_2::create_sub_dof_map(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum2d_dofmap_1();
        break;
      }
    case 1:
      {
        return new nsemomentum2d_dofmap_1();
        break;
      }
    }
    
    return 0;
}

#endif

/// Constructor
nsemomentum2d_cell_integral_0_0::nsemomentum2d_cell_integral_0_0() : ufc::cell_integral()
{
    // Do nothing
}

/// Destructor
nsemomentum2d_cell_integral_0_0::~nsemomentum2d_cell_integral_0_0()
{
    // Do nothing
}

/// Tabulate the tensor for the contribution from a local cell
void nsemomentum2d_cell_integral_0_0::tabulate_tensor(double* A,
                                    const double * const * w,
                                    const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Cell Volume.
    
    // Compute circumradius, assuming triangle is embedded in 2D.
    
    
    // Facet Area.
    
    // Array of quadrature weights.
    static const double W3[3] = {0.166666666666667, 0.166666666666667, 0.166666666666667};
    // Quadrature points on the UFC reference element: (0.166666666666667, 0.166666666666667), (0.166666666666667, 0.666666666666667), (0.666666666666667, 0.166666666666667)
    
    // Value of basis functions at quadrature points.
    static const double FE0[3][3] = \
    {{0.666666666666667, 0.166666666666667, 0.166666666666667},
    {0.166666666666667, 0.166666666666667, 0.666666666666667},
    {0.166666666666667, 0.666666666666667, 0.166666666666667}};
    
    // Array of non-zero columns
    static const unsigned int nzc2[3] = {0, 1, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc5[3] = {3, 4, 5};
    
    static const double FE0_D01[3][2] = \
    {{-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc6[2] = {3, 5};
    
    // Array of non-zero columns
    static const unsigned int nzc0[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc7[2] = {3, 4};
    
    // Array of non-zero columns
    static const unsigned int nzc3[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc4[2] = {0, 1};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 36; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    // Number of operations to compute geometry constants: 149.
    double G[32];
    G[0] = 2.0*K_10*K_10*det*w[3][0]*w[4][0];
    G[1] = 0.5*det*w[4][0]*(K_10*K_10 + K_11*K_11);
    G[2] = 2.0*K_00*K_10*det*w[3][0]*w[4][0];
    G[3] = 0.5*det*w[4][0]*(K_00*K_10 + K_01*K_11);
    G[4] = 2.0*K_10*K_11*det*w[3][0]*w[4][0];
    G[5] = 2.0*K_01*K_10*det*w[3][0]*w[4][0];
    G[6] = 2.0*K_00*K_00*det*w[3][0]*w[4][0];
    G[7] = 0.5*det*w[4][0]*(K_00*K_00 + K_01*K_01);
    G[8] = 2.0*K_00*K_11*det*w[3][0]*w[4][0];
    G[9] = 2.0*K_00*K_01*det*w[3][0]*w[4][0];
    G[10] = 2.0*K_11*K_11*det*w[3][0]*w[4][0];
    G[11] = 2.0*K_01*K_11*det*w[3][0]*w[4][0];
    G[12] = 2.0*K_01*K_01*det*w[3][0]*w[4][0];
    G[13] = K_00*K_10*det*w[3][0]*w[4][0];
    G[14] = 0.5*det*w[3][0]*w[4][0]*(K_00*K_11 + K_01*K_10);
    G[15] = K_10*K_10*det*w[3][0]*w[4][0];
    G[16] = K_10*K_11*det*w[3][0]*w[4][0];
    G[17] = 0.25*K_10*det*w[4][0];
    G[18] = 0.25*K_11*det*w[4][0];
    G[19] = K_00*K_00*det*w[3][0]*w[4][0];
    G[20] = K_00*K_01*det*w[3][0]*w[4][0];
    G[21] = 0.25*K_00*det*w[4][0];
    G[22] = 0.25*K_01*det*w[4][0];
    G[23] = K_01*K_11*det*w[3][0]*w[4][0];
    G[24] = K_11*K_11*det*w[3][0]*w[4][0];
    G[25] = K_01*K_01*det*w[3][0]*w[4][0];
    G[26] = 0.5*K_00*K_00*det*w[3][0]*w[4][0];
    G[27] = 0.5*K_10*K_10*det*w[3][0]*w[4][0];
    G[28] = 0.5*K_00*K_01*det*w[3][0]*w[4][0];
    G[29] = 0.5*K_10*K_11*det*w[3][0]*w[4][0];
    G[30] = 0.5*K_01*K_01*det*w[3][0]*w[4][0];
    G[31] = 0.5*K_11*K_11*det*w[3][0]*w[4][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 2994
    for (unsigned int ip = 0; ip < 3; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      double F13 = 0.0;
      double F14 = 0.0;
      
      // Total number of operations to compute function values = 40
      for (unsigned int r = 0; r < 2; r++)
      {
        F0 += FE0_D01[ip][r]*w[0][nzc4[r]];
        F1 += FE0_D01[ip][r]*w[0][nzc3[r]];
        F2 += FE0_D01[ip][r]*w[5][nzc4[r]];
        F3 += FE0_D01[ip][r]*w[5][nzc3[r]];
        F8 += FE0_D01[ip][r]*w[1][nzc1[r]];
        F9 += FE0_D01[ip][r]*w[1][nzc0[r]];
        F10 += FE0_D01[ip][r]*w[0][nzc7[r]];
        F11 += FE0_D01[ip][r]*w[0][nzc6[r]];
        F12 += FE0_D01[ip][r]*w[5][nzc7[r]];
        F13 += FE0_D01[ip][r]*w[5][nzc6[r]];
      }// end loop over 'r'
      
      // Total number of operations to compute function values = 30
      for (unsigned int r = 0; r < 3; r++)
      {
        F4 += FE0[ip][r]*w[0][nzc2[r]];
        F5 += FE0[ip][r]*w[5][nzc2[r]];
        F6 += FE0[ip][r]*w[0][nzc5[r]];
        F7 += FE0[ip][r]*w[5][nzc5[r]];
        F14 += FE0[ip][r]*w[2][r];
      }// end loop over 'r'
      
      // Number of operations to compute ip constants: 484
      double I[22];
      // Number of operations: 3
      I[0] = W3[ip]*(G[0] + F14*G[1]);
      
      // Number of operations: 3
      I[1] = W3[ip]*(G[2] + F14*G[3]);
      
      // Number of operations: 1
      I[2] = G[4]*W3[ip];
      
      // Number of operations: 1
      I[3] = G[5]*W3[ip];
      
      // Number of operations: 3
      I[4] = W3[ip]*(G[6] + F14*G[7]);
      
      // Number of operations: 1
      I[5] = G[8]*W3[ip];
      
      // Number of operations: 1
      I[6] = G[9]*W3[ip];
      
      // Number of operations: 3
      I[7] = W3[ip]*(G[10] + F14*G[1]);
      
      // Number of operations: 3
      I[8] = W3[ip]*(G[11] + F14*G[3]);
      
      // Number of operations: 3
      I[9] = W3[ip]*(G[12] + F14*G[7]);
      
      // Number of operations: 36
      I[10] = W3[ip]*(F4*(G[17] + G[13]*(F0 + F2) + G[15]*(F1 + F3)) + F5*(G[17] + G[13]*(F0 + F2) + G[15]*(F1 + F3)) + F6*(G[18] + G[14]*(F0 + F2) + G[16]*(F1 + F3)) + F7*(G[18] + G[14]*(F0 + F2) + G[16]*(F1 + F3)) + F8*G[2] + F9*G[0]);
      
      // Number of operations: 36
      I[11] = W3[ip]*(F4*(G[21] + G[13]*(F1 + F3) + G[19]*(F0 + F2)) + F5*(G[21] + G[13]*(F1 + F3) + G[19]*(F0 + F2)) + F6*(G[22] + G[14]*(F1 + F3) + G[20]*(F0 + F2)) + F7*(G[22] + G[14]*(F1 + F3) + G[20]*(F0 + F2)) + F8*G[6] + F9*G[2]);
      
      // Number of operations: 32
      I[12] = W3[ip]*(F8*G[5] + F9*G[4] + G[13]*(F4*(F10 + F12) + F5*(F10 + F12)) + G[14]*(F6*(F10 + F12) + F7*(F10 + F12)) + G[15]*(F4*(F11 + F13) + F5*(F11 + F13)) + G[16]*(F6*(F11 + F13) + F7*(F11 + F13)));
      
      // Number of operations: 32
      I[13] = W3[ip]*(F8*G[9] + F9*G[8] + G[13]*(F4*(F11 + F13) + F5*(F11 + F13)) + G[14]*(F6*(F11 + F13) + F7*(F11 + F13)) + G[19]*(F4*(F10 + F12) + F5*(F10 + F12)) + G[20]*(F6*(F10 + F12) + F7*(F10 + F12)));
      
      // Number of operations: 32
      I[14] = W3[ip]*(F8*G[8] + F9*G[4] + G[14]*(F4*(F0 + F2) + F5*(F0 + F2)) + G[16]*(F4*(F1 + F3) + F5*(F1 + F3)) + G[23]*(F6*(F0 + F2) + F7*(F0 + F2)) + G[24]*(F6*(F1 + F3) + F7*(F1 + F3)));
      
      // Number of operations: 32
      I[15] = W3[ip]*(F8*G[9] + F9*G[5] + G[14]*(F4*(F1 + F3) + F5*(F1 + F3)) + G[20]*(F4*(F0 + F2) + F5*(F0 + F2)) + G[23]*(F6*(F1 + F3) + F7*(F1 + F3)) + G[25]*(F6*(F0 + F2) + F7*(F0 + F2)));
      
      // Number of operations: 36
      I[16] = W3[ip]*(F4*(G[17] + G[14]*(F10 + F12) + G[16]*(F11 + F13)) + F5*(G[17] + G[14]*(F10 + F12) + G[16]*(F11 + F13)) + F6*(G[18] + G[23]*(F10 + F12) + G[24]*(F11 + F13)) + F7*(G[18] + G[23]*(F10 + F12) + G[24]*(F11 + F13)) + F8*G[11] + F9*G[10]);
      
      // Number of operations: 36
      I[17] = W3[ip]*(F4*(G[21] + G[14]*(F11 + F13) + G[20]*(F10 + F12)) + F5*(G[21] + G[14]*(F11 + F13) + G[20]*(F10 + F12)) + F6*(G[22] + G[23]*(F11 + F13) + G[25]*(F10 + F12)) + F7*(G[22] + G[23]*(F11 + F13) + G[25]*(F10 + F12)) + F8*G[12] + F9*G[11]);
      
      // Number of operations: 48
      I[18] = W3[ip]*(det + G[13]*(F1*(F0 + F2) + F11*(F10 + F12) + F13*(F10 + F12) + F3*(F0 + F2)) + G[15]*(F1*F3 + F11*F13) + G[17]*(F1 + F3) + G[19]*(F0*F2 + F10*F12) + G[21]*(F0 + F2) + G[26]*(F0*F0 + F10*F10 + F12*F12 + F2*F2) + G[27]*(F1*F1 + F11*F11 + F13*F13 + F3*F3));
      
      // Number of operations: 47
      I[19] = W3[ip]*(G[14]*(F1*(F0 + F2) + F11*(F10 + F12) + F13*(F10 + F12) + F3*(F0 + F2)) + G[16]*(F1*F3 + F11*F13) + G[18]*(F1 + F3) + G[20]*(F0*F2 + F10*F12) + G[22]*(F0 + F2) + G[28]*(F0*F0 + F10*F10 + F12*F12 + F2*F2) + G[29]*(F1*F1 + F11*F11 + F13*F13 + F3*F3));
      
      // Number of operations: 47
      I[20] = W3[ip]*(G[14]*(F1*(F0 + F2) + F11*(F10 + F12) + F13*(F10 + F12) + F3*(F0 + F2)) + G[16]*(F1*F3 + F11*F13) + G[17]*(F11 + F13) + G[20]*(F0*F2 + F10*F12) + G[21]*(F10 + F12) + G[28]*(F0*F0 + F10*F10 + F12*F12 + F2*F2) + G[29]*(F1*F1 + F11*F11 + F13*F13 + F3*F3));
      
      // Number of operations: 48
      I[21] = W3[ip]*(det + G[18]*(F11 + F13) + G[22]*(F10 + F12) + G[23]*(F1*(F0 + F2) + F11*(F10 + F12) + F13*(F10 + F12) + F3*(F0 + F2)) + G[24]*(F1*F3 + F11*F13) + G[25]*(F0*F2 + F10*F12) + G[30]*(F0*F0 + F10*F10 + F12*F12 + F2*F2) + G[31]*(F1*F1 + F11*F11 + F13*F13 + F3*F3));
      
      
      // Number of operations for primary indices: 108
      for (unsigned int j = 0; j < 3; j++)
      {
        for (unsigned int k = 0; k < 3; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc2[j]*6 + nzc2[k]] += FE0[ip][j]*FE0[ip][k]*I[18];
          // Number of operations to compute entry: 3
          A[nzc2[j]*6 + nzc5[k]] += FE0[ip][j]*FE0[ip][k]*I[19];
          // Number of operations to compute entry: 3
          A[nzc5[j]*6 + nzc2[k]] += FE0[ip][j]*FE0[ip][k]*I[20];
          // Number of operations to compute entry: 3
          A[nzc5[j]*6 + nzc5[k]] += FE0[ip][j]*FE0[ip][k]*I[21];
        }// end loop over 'k'
      }// end loop over 'j'
      
      // Number of operations for primary indices: 144
      for (unsigned int j = 0; j < 3; j++)
      {
        for (unsigned int k = 0; k < 2; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc2[j]*6 + nzc3[k]] += FE0[ip][j]*FE0_D01[ip][k]*I[10];
          // Number of operations to compute entry: 3
          A[nzc2[j]*6 + nzc4[k]] += FE0[ip][j]*FE0_D01[ip][k]*I[11];
          // Number of operations to compute entry: 3
          A[nzc2[j]*6 + nzc6[k]] += FE0[ip][j]*FE0_D01[ip][k]*I[12];
          // Number of operations to compute entry: 3
          A[nzc2[j]*6 + nzc7[k]] += FE0[ip][j]*FE0_D01[ip][k]*I[13];
          // Number of operations to compute entry: 3
          A[nzc5[j]*6 + nzc3[k]] += FE0[ip][j]*FE0_D01[ip][k]*I[14];
          // Number of operations to compute entry: 3
          A[nzc5[j]*6 + nzc4[k]] += FE0[ip][j]*FE0_D01[ip][k]*I[15];
          // Number of operations to compute entry: 3
          A[nzc5[j]*6 + nzc6[k]] += FE0[ip][j]*FE0_D01[ip][k]*I[16];
          // Number of operations to compute entry: 3
          A[nzc5[j]*6 + nzc7[k]] += FE0[ip][j]*FE0_D01[ip][k]*I[17];
        }// end loop over 'k'
      }// end loop over 'j'
      
      // Number of operations for primary indices: 192
      for (unsigned int j = 0; j < 2; j++)
      {
        for (unsigned int k = 0; k < 2; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc3[j]*6 + nzc3[k]] += FE0_D01[ip][j]*FE0_D01[ip][k]*I[0];
          // Number of operations to compute entry: 3
          A[nzc3[j]*6 + nzc4[k]] += FE0_D01[ip][j]*FE0_D01[ip][k]*I[1];
          // Number of operations to compute entry: 3
          A[nzc3[j]*6 + nzc6[k]] += FE0_D01[ip][j]*FE0_D01[ip][k]*I[2];
          // Number of operations to compute entry: 3
          A[nzc3[j]*6 + nzc7[k]] += FE0_D01[ip][j]*FE0_D01[ip][k]*I[3];
          // Number of operations to compute entry: 3
          A[nzc4[j]*6 + nzc3[k]] += FE0_D01[ip][j]*FE0_D01[ip][k]*I[1];
          // Number of operations to compute entry: 3
          A[nzc4[j]*6 + nzc4[k]] += FE0_D01[ip][j]*FE0_D01[ip][k]*I[4];
          // Number of operations to compute entry: 3
          A[nzc4[j]*6 + nzc6[k]] += FE0_D01[ip][j]*FE0_D01[ip][k]*I[5];
          // Number of operations to compute entry: 3
          A[nzc4[j]*6 + nzc7[k]] += FE0_D01[ip][j]*FE0_D01[ip][k]*I[6];
          // Number of operations to compute entry: 3
          A[nzc6[j]*6 + nzc3[k]] += FE0_D01[ip][j]*FE0_D01[ip][k]*I[2];
          // Number of operations to compute entry: 3
          A[nzc6[j]*6 + nzc4[k]] += FE0_D01[ip][j]*FE0_D01[ip][k]*I[5];
          // Number of operations to compute entry: 3
          A[nzc6[j]*6 + nzc6[k]] += FE0_D01[ip][j]*FE0_D01[ip][k]*I[7];
          // Number of operations to compute entry: 3
          A[nzc6[j]*6 + nzc7[k]] += FE0_D01[ip][j]*FE0_D01[ip][k]*I[8];
          // Number of operations to compute entry: 3
          A[nzc7[j]*6 + nzc3[k]] += FE0_D01[ip][j]*FE0_D01[ip][k]*I[3];
          // Number of operations to compute entry: 3
          A[nzc7[j]*6 + nzc4[k]] += FE0_D01[ip][j]*FE0_D01[ip][k]*I[6];
          // Number of operations to compute entry: 3
          A[nzc7[j]*6 + nzc6[k]] += FE0_D01[ip][j]*FE0_D01[ip][k]*I[8];
          // Number of operations to compute entry: 3
          A[nzc7[j]*6 + nzc7[k]] += FE0_D01[ip][j]*FE0_D01[ip][k]*I[9];
        }// end loop over 'k'
      }// end loop over 'j'
    }// end loop over 'ip'
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Tabulate the tensor for the contribution from a local cell
/// using the specified reference cell quadrature points/weights
void nsemomentum2d_cell_integral_0_0::tabulate_tensor(double* A,
                     const double * const * w,
                     const ufc::cell& c,
                     unsigned int num_quadrature_points,
                     const double * const * quadrature_points,
                     const double* quadrature_weights) const
{
    throw std::runtime_error("Quadrature version of tabulate_tensor not yet implemented (introduced in UFC 2.0).");
}
#endif

/// Constructor
nsemomentum2d_cell_integral_1_0::nsemomentum2d_cell_integral_1_0() : ufc::cell_integral()
{
    // Do nothing
}

/// Destructor
nsemomentum2d_cell_integral_1_0::~nsemomentum2d_cell_integral_1_0()
{
    // Do nothing
}

/// Tabulate the tensor for the contribution from a local cell
void nsemomentum2d_cell_integral_1_0::tabulate_tensor(double* A,
                                    const double * const * w,
                                    const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Cell Volume.
    
    // Compute circumradius, assuming triangle is embedded in 2D.
    
    
    // Facet Area.
    
    // Array of quadrature weights.
    static const double W3[3] = {0.166666666666667, 0.166666666666667, 0.166666666666667};
    // Quadrature points on the UFC reference element: (0.166666666666667, 0.166666666666667), (0.166666666666667, 0.666666666666667), (0.666666666666667, 0.166666666666667)
    
    // Value of basis functions at quadrature points.
    static const double FE0[3][3] = \
    {{0.666666666666667, 0.166666666666667, 0.166666666666667},
    {0.166666666666667, 0.166666666666667, 0.666666666666667},
    {0.166666666666667, 0.666666666666667, 0.166666666666667}};
    
    // Array of non-zero columns
    static const unsigned int nzc2[3] = {0, 1, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc5[3] = {3, 4, 5};
    
    static const double FE0_D01[3][2] = \
    {{-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc6[2] = {3, 5};
    
    // Array of non-zero columns
    static const unsigned int nzc0[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc7[2] = {3, 4};
    
    // Array of non-zero columns
    static const unsigned int nzc3[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc4[2] = {0, 1};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 6; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    // Number of operations to compute geometry constants: 230.
    double G[52];
    G[0] = -2.0*K_01*K_10*det*w[3][0]*w[4][0];
    G[1] = -2.0*K_10*K_11*det*w[3][0]*w[4][0];
    G[2] = -0.5*det*w[4][0]*(K_00*K_10 + K_01*K_11);
    G[3] = -0.5*det*w[4][0]*(K_10*K_10 + K_11*K_11);
    G[4] = -2.0*K_00*K_10*det*w[3][0]*w[4][0];
    G[5] = -2.0*K_10*K_10*det*w[3][0]*w[4][0];
    G[6] = -2.0*K_00*K_01*det*w[3][0]*w[4][0];
    G[7] = -2.0*K_00*K_11*det*w[3][0]*w[4][0];
    G[8] = -0.5*det*w[4][0]*(K_00*K_00 + K_01*K_01);
    G[9] = -2.0*K_00*K_00*det*w[3][0]*w[4][0];
    G[10] = -2.0*K_01*K_11*det*w[3][0]*w[4][0];
    G[11] = -2.0*K_11*K_11*det*w[3][0]*w[4][0];
    G[12] = -2.0*K_01*K_01*det*w[3][0]*w[4][0];
    G[13] = K_00*K_00*det*w[3][0]*w[4][0];
    G[14] = K_00*K_10*det*w[3][0]*w[4][0];
    G[15] = K_10*K_10*det*w[3][0]*w[4][0];
    G[16] = 2.0*K_00*K_10*det*w[3][0]*w[4][0];
    G[17] = 0.25*K_00*det*w[4][0];
    G[18] = 0.25*K_10*det*w[4][0];
    G[19] = -0.5*K_00*K_00*det*w[3][0]*w[4][0];
    G[20] =  - K_00*K_10*det*w[3][0]*w[4][0];
    G[21] = -0.5*K_10*K_10*det*w[3][0]*w[4][0];
    G[22] = 0.5*K_00*K_00*det*w[3][0]*w[4][0];
    G[23] = 0.5*K_10*K_10*det*w[3][0]*w[4][0];
    G[24] = -0.25*K_00*det*w[4][0];
    G[25] = -0.25*K_10*det*w[4][0];
    G[26] = -0.5*K_00*K_01*det*w[3][0]*w[4][0];
    G[27] = -0.5*det*w[3][0]*w[4][0]*(K_00*K_11 + K_01*K_10);
    G[28] = K_00*K_01*det*w[3][0]*w[4][0];
    G[29] = 0.5*det*w[3][0]*w[4][0]*(K_00*K_11 + K_01*K_10);
    G[30] = -0.5*K_10*K_11*det*w[3][0]*w[4][0];
    G[31] = K_10*K_11*det*w[3][0]*w[4][0];
    G[32] =  - K_00*det*w[4][0];
    G[33] =  - K_10*det*w[4][0];
    G[34] = det*w[3][0]*w[4][0]*(K_00*K_11 + K_01*K_10);
    G[35] = 0.25*K_01*det*w[4][0];
    G[36] = 0.25*K_11*det*w[4][0];
    G[37] = 0.5*K_00*K_01*det*w[3][0]*w[4][0];
    G[38] = 0.5*K_10*K_11*det*w[3][0]*w[4][0];
    G[39] = -0.25*K_01*det*w[4][0];
    G[40] = -0.25*K_11*det*w[4][0];
    G[41] = -0.5*K_01*K_01*det*w[3][0]*w[4][0];
    G[42] =  - K_01*K_11*det*w[3][0]*w[4][0];
    G[43] = K_01*K_01*det*w[3][0]*w[4][0];
    G[44] = K_01*K_11*det*w[3][0]*w[4][0];
    G[45] = -0.5*K_11*K_11*det*w[3][0]*w[4][0];
    G[46] = K_11*K_11*det*w[3][0]*w[4][0];
    G[47] =  - K_01*det*w[4][0];
    G[48] =  - K_11*det*w[4][0];
    G[49] = 2.0*K_01*K_11*det*w[3][0]*w[4][0];
    G[50] = 0.5*K_01*K_01*det*w[3][0]*w[4][0];
    G[51] = 0.5*K_11*K_11*det*w[3][0]*w[4][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 1362
    for (unsigned int ip = 0; ip < 3; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      double F13 = 0.0;
      double F14 = 0.0;
      
      // Total number of operations to compute function values = 40
      for (unsigned int r = 0; r < 2; r++)
      {
        F4 += FE0_D01[ip][r]*w[0][nzc4[r]];
        F5 += FE0_D01[ip][r]*w[0][nzc3[r]];
        F6 += FE0_D01[ip][r]*w[5][nzc4[r]];
        F7 += FE0_D01[ip][r]*w[5][nzc3[r]];
        F8 += FE0_D01[ip][r]*w[0][nzc7[r]];
        F9 += FE0_D01[ip][r]*w[0][nzc6[r]];
        F10 += FE0_D01[ip][r]*w[5][nzc7[r]];
        F11 += FE0_D01[ip][r]*w[5][nzc6[r]];
        F12 += FE0_D01[ip][r]*w[1][nzc1[r]];
        F13 += FE0_D01[ip][r]*w[1][nzc0[r]];
      }// end loop over 'r'
      
      // Total number of operations to compute function values = 30
      for (unsigned int r = 0; r < 3; r++)
      {
        F0 += FE0[ip][r]*w[0][nzc2[r]];
        F1 += FE0[ip][r]*w[5][nzc2[r]];
        F2 += FE0[ip][r]*w[0][nzc5[r]];
        F3 += FE0[ip][r]*w[5][nzc5[r]];
        F14 += FE0[ip][r]*w[2][r];
      }// end loop over 'r'
      
      // Number of operations to compute ip constants: 356
      double I[6];
      // Number of operations: 12
      I[0] = W3[ip]*(F10*G[0] + F11*G[1] + F6*(G[4] + F14*G[2]) + F7*(G[5] + F14*G[3]));
      
      // Number of operations: 12
      I[1] = W3[ip]*(F10*G[6] + F11*G[7] + F6*(G[9] + F14*G[8]) + F7*(G[4] + F14*G[2]));
      
      // Number of operations: 13
      I[2] = W3[ip]*(F10*G[10] + F11*G[11] + F14*(F10*G[2] + F11*G[3]) + F6*G[7] + F7*G[1]);
      
      // Number of operations: 13
      I[3] = W3[ip]*(F10*G[12] + F11*G[10] + F14*(F10*G[8] + F11*G[2]) + F6*G[6] + F7*G[0]);
      
      // Number of operations: 153
      I[4] = W3[ip]*(F0*(F4*G[17] + F5*(G[18] + F4*G[16] + F6*G[14] + G[15]*(F5 + F7)) + F9*(F10*G[14] + F8*G[16] + G[15]*(F11 + F9)) + G[13]*(F4*(F4 + F6) + F8*(F10 + F8)) + G[14]*(F11*F8 + F4*F7)) + F1*(det + F11*(F10*G[20] + F11*G[21]) + F6*G[24] + F7*(G[25] + F6*G[20] + F7*G[21]) + G[14]*(F4*F5 + F8*F9) + G[19]*(F10*F10 + F6*F6) + G[22]*(F4*F4 + F8*F8) + G[23]*(F5*F5 + F9*F9)) + F12*(G[32] + F10*G[6] + F11*G[0] + F6*G[9] + F7*G[4]) + F13*(G[33] + F10*G[7] + F11*G[1] + F6*G[4] + F7*G[5]) + F2*(F4*G[35] + F5*(G[36] + F4*G[34] + F6*G[29] + G[31]*(F5 + F7)) + F9*(F10*G[29] + F8*G[34] + G[31]*(F11 + F9)) + G[28]*(F4*(F4 + F6) + F8*(F10 + F8)) + G[29]*(F11*F8 + F4*F7)) + F3*(F11*(F10*G[27] + F11*G[30]) + F6*G[39] + F7*(G[40] + F6*G[27] + F7*G[30]) + G[26]*(F10*F10 + F6*F6) + G[29]*(F4*F5 + F8*F9) + G[37]*(F4*F4 + F8*F8) + G[38]*(F5*F5 + F9*F9)));
      
      // Number of operations: 153
      I[5] = W3[ip]*(F0*(F5*(F4*G[34] + F6*G[29] + G[31]*(F5 + F7)) + F8*G[17] + F9*(G[18] + F10*G[29] + F8*G[34] + G[31]*(F11 + F9)) + G[28]*(F4*(F4 + F6) + F8*(F10 + F8)) + G[29]*(F11*F8 + F4*F7)) + F1*(F10*G[24] + F11*(G[25] + F10*G[27] + F11*G[30]) + F7*(F6*G[27] + F7*G[30]) + G[26]*(F10*F10 + F6*F6) + G[29]*(F4*F5 + F8*F9) + G[37]*(F4*F4 + F8*F8) + G[38]*(F5*F5 + F9*F9)) + F12*(G[47] + F10*G[12] + F11*G[10] + F6*G[6] + F7*G[7]) + F13*(G[48] + F10*G[10] + F11*G[11] + F6*G[0] + F7*G[1]) + F2*(F5*(F4*G[49] + F6*G[44] + G[46]*(F5 + F7)) + F8*G[35] + F9*(G[36] + F10*G[44] + F8*G[49] + G[46]*(F11 + F9)) + G[43]*(F4*(F4 + F6) + F8*(F10 + F8)) + G[44]*(F11*F8 + F4*F7)) + F3*(det + F10*G[39] + F11*(G[40] + F10*G[42] + F11*G[45]) + F7*(F6*G[42] + F7*G[45]) + G[41]*(F10*F10 + F6*F6) + G[44]*(F4*F5 + F8*F9) + G[50]*(F4*F4 + F8*F8) + G[51]*(F5*F5 + F9*F9)));
      
      
      // Number of operations for primary indices: 12
      for (unsigned int j = 0; j < 3; j++)
      {
        // Number of operations to compute entry: 2
        A[nzc2[j]] += FE0[ip][j]*I[4];
        // Number of operations to compute entry: 2
        A[nzc5[j]] += FE0[ip][j]*I[5];
      }// end loop over 'j'
      
      // Number of operations for primary indices: 16
      for (unsigned int j = 0; j < 2; j++)
      {
        // Number of operations to compute entry: 2
        A[nzc3[j]] += FE0_D01[ip][j]*I[0];
        // Number of operations to compute entry: 2
        A[nzc4[j]] += FE0_D01[ip][j]*I[1];
        // Number of operations to compute entry: 2
        A[nzc6[j]] += FE0_D01[ip][j]*I[2];
        // Number of operations to compute entry: 2
        A[nzc7[j]] += FE0_D01[ip][j]*I[3];
      }// end loop over 'j'
    }// end loop over 'ip'
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Tabulate the tensor for the contribution from a local cell
/// using the specified reference cell quadrature points/weights
void nsemomentum2d_cell_integral_1_0::tabulate_tensor(double* A,
                     const double * const * w,
                     const ufc::cell& c,
                     unsigned int num_quadrature_points,
                     const double * const * quadrature_points,
                     const double* quadrature_weights) const
{
    throw std::runtime_error("Quadrature version of tabulate_tensor not yet implemented (introduced in UFC 2.0).");
}
#endif

/// Constructor
nsemomentum2d_form_0::nsemomentum2d_form_0() : ufc::form()
{
    // Do nothing
}

/// Destructor
nsemomentum2d_form_0::~nsemomentum2d_form_0()
{
    // Do nothing
}

/// Return a string identifying the form
const char* nsemomentum2d_form_0::signature() const
{
    return "Form([Integral(Sum(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(0),), {Index(0): 2})), Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 1), MultiIndex((Index(0),), {Index(0): 2}))), MultiIndex((Index(0),), {Index(0): 2})), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 4), Sum(Product(Product(IndexSum(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 1), MultiIndex((Index(1),), {Index(1): 2})), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(1),), {Index(1): 2})), MultiIndex((Index(1),), {Index(1): 2})), IndexSum(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(3),), {Index(3): 2}))), Product(IntValue(4, (), (), {}), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Product(IndexSum(Sum(Product(Indexed(ComponentTensor(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(4),), {Index(4): 2})), Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 1), MultiIndex((Index(5),), {Index(5): 2})), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(6),), {Index(6): 2})), MultiIndex((Index(6), Index(5)), {Index(5): 2, Index(6): 2})), MultiIndex((Index(7), Index(4)), {Index(7): 2, Index(4): 2}))), MultiIndex((Index(4),), {Index(4): 2})), MultiIndex((Index(7),), {Index(7): 2})), MultiIndex((Index(8),), {Index(8): 2})), Indexed(Sum(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(9),), {Index(9): 2})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(9),), {Index(9): 2}))), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(10),), {Index(10): 2})), MultiIndex((Index(10), Index(9)), {Index(10): 2, Index(9): 2})), MultiIndex((Index(11), Index(12)), {Index(11): 2, Index(12): 2})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5)), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(12),), {Index(12): 2}))), MultiIndex((Index(12),), {Index(12): 2})), MultiIndex((Index(11),), {Index(11): 2})), ComponentTensor(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None), 1), MultiIndex((Index(13),), {Index(13): 2})), MultiIndex((Index(13),), {Index(13): 2}))), MultiIndex((Index(8),), {Index(8): 2}))), Product(Indexed(ComponentTensor(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(4),), {Index(4): 2})), Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(5),), {Index(5): 2})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(5),), {Index(5): 2}))), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(6),), {Index(6): 2})), MultiIndex((Index(6), Index(5)), {Index(5): 2, Index(6): 2})), MultiIndex((Index(7), Index(4)), {Index(7): 2, Index(4): 2}))), MultiIndex((Index(4),), {Index(4): 2})), MultiIndex((Index(7),), {Index(7): 2})), MultiIndex((Index(8),), {Index(8): 2})), Indexed(ComponentTensor(IndexSum(Sum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 1), MultiIndex((Index(9),), {Index(9): 2})), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(10),), {Index(10): 2})), MultiIndex((Index(10), Index(9)), {Index(10): 2, Index(9): 2})), MultiIndex((Index(11), Index(12)), {Index(11): 2, Index(12): 2})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5)), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(12),), {Index(12): 2}))), Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(9),), {Index(9): 2})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(9),), {Index(9): 2}))), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(10),), {Index(10): 2})), MultiIndex((Index(10), Index(9)), {Index(10): 2, Index(9): 2})), MultiIndex((Index(11), Index(12)), {Index(11): 2, Index(12): 2})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 1), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(12),), {Index(12): 2})))), MultiIndex((Index(12),), {Index(12): 2})), MultiIndex((Index(11),), {Index(11): 2})), MultiIndex((Index(8),), {Index(8): 2})))), MultiIndex((Index(8),), {Index(8): 2})), Product(IntValue(4, (), (), {}), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(14),), {Index(14): 2})), Indexed(ComponentTensor(IndexSum(Sum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 1), MultiIndex((Index(15),), {Index(15): 2})), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(16),), {Index(16): 2})), MultiIndex((Index(16), Index(15)), {Index(16): 2, Index(15): 2})), MultiIndex((Index(17), Index(18)), {Index(17): 2, Index(18): 2})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5)), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(18),), {Index(18): 2}))), Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(15),), {Index(15): 2})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(15),), {Index(15): 2}))), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(16),), {Index(16): 2})), MultiIndex((Index(16), Index(15)), {Index(16): 2, Index(15): 2})), MultiIndex((Index(17), Index(18)), {Index(17): 2, Index(18): 2})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 1), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(18),), {Index(18): 2})))), MultiIndex((Index(18),), {Index(18): 2})), MultiIndex((Index(17),), {Index(17): 2})), MultiIndex((Index(14),), {Index(14): 2}))), MultiIndex((Index(14),), {Index(14): 2})), Product(Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None), 2), IndexSum(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 1), MultiIndex((Index(19),), {Index(19): 2})), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(20),), {Index(20): 2})), MultiIndex((Index(20), Index(19)), {Index(19): 2, Index(20): 2})), MultiIndex((Index(21), Index(22)), {Index(22): 2, Index(21): 2})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(23),), {Index(23): 2})), MultiIndex((Index(24),), {Index(24): 2})), MultiIndex((Index(24), Index(23)), {Index(24): 2, Index(23): 2})), MultiIndex((Index(21), Index(22)), {Index(22): 2, Index(21): 2}))), MultiIndex((Index(21),), {Index(21): 2})), MultiIndex((Index(22),), {Index(22): 2})))))))), Measure('cell', 0, None))])";
}

/// Return the rank of the global tensor (r)
unsigned int nsemomentum2d_form_0::rank() const
{
    return 2;
}

/// Return the number of coefficients (n)
unsigned int nsemomentum2d_form_0::num_coefficients() const
{
    return 6;
}
 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Return the number of cell domains
unsigned int nsemomentum2d_form_0::num_cell_domains() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int nsemomentum2d_form_0::num_exterior_facet_domains() const
{
    return 0;
}

/// Return the number of interior facet domains
unsigned int nsemomentum2d_form_0::num_interior_facet_domains() const
{
    return 0;
}
#else

/// Return the number of cell domains
unsigned int nsemomentum2d_form_0::num_cell_integrals() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int nsemomentum2d_form_0::num_exterior_facet_integrals() const
{
    return 0;
}

/// Return the number of interior facet domains
unsigned int nsemomentum2d_form_0::num_interior_facet_integrals() const
{
    return 0;
}

#endif

/// Create a new finite element for argument function i
ufc::finite_element* nsemomentum2d_form_0::create_finite_element(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum2d_finite_element_2();
        break;
      }
    case 1:
      {
        return new nsemomentum2d_finite_element_2();
        break;
      }
    case 2:
      {
        return new nsemomentum2d_finite_element_2();
        break;
      }
    case 3:
      {
        return new nsemomentum2d_finite_element_1();
        break;
      }
    case 4:
      {
        return new nsemomentum2d_finite_element_1();
        break;
      }
    case 5:
      {
        return new nsemomentum2d_finite_element_0();
        break;
      }
    case 6:
      {
        return new nsemomentum2d_finite_element_0();
        break;
      }
    case 7:
      {
        return new nsemomentum2d_finite_element_2();
        break;
      }
    }
    
    return 0;
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Create a new dofmap for argument function i
ufc::dofmap* nsemomentum2d_form_0::create_dofmap(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    case 1:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    case 2:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    case 3:
      {
        return new nsemomentum2d_dofmap_1();
        break;
      }
    case 4:
      {
        return new nsemomentum2d_dofmap_1();
        break;
      }
    case 5:
      {
        return new nsemomentum2d_dofmap_0();
        break;
      }
    case 6:
      {
        return new nsemomentum2d_dofmap_0();
        break;
      }
    case 7:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    }
    
    return 0;
}
#else

/// Create a new dofmap for argument function i
ufc::dof_map* nsemomentum2d_form_0::create_dof_map(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    case 1:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    case 2:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    case 3:
      {
        return new nsemomentum2d_dofmap_1();
        break;
      }
    case 4:
      {
        return new nsemomentum2d_dofmap_1();
        break;
      }
    case 5:
      {
        return new nsemomentum2d_dofmap_0();
        break;
      }
    case 6:
      {
        return new nsemomentum2d_dofmap_0();
        break;
      }
    case 7:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    }
    
    return 0;
}
#endif
/// Create a new cell integral on sub domain i
ufc::cell_integral* nsemomentum2d_form_0::create_cell_integral(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum2d_cell_integral_0_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new exterior facet integral on sub domain i
ufc::exterior_facet_integral* nsemomentum2d_form_0::create_exterior_facet_integral(unsigned int i) const
{
    return 0;
}

/// Create a new interior facet integral on sub domain i
ufc::interior_facet_integral* nsemomentum2d_form_0::create_interior_facet_integral(unsigned int i) const
{
    return 0;
}

/// Constructor
nsemomentum2d_form_1::nsemomentum2d_form_1() : ufc::form()
{
    // Do nothing
}

/// Destructor
nsemomentum2d_form_1::~nsemomentum2d_form_1()
{
    // Do nothing
}

/// Return a string identifying the form
const char* nsemomentum2d_form_1::signature() const
{
    return "Form([Integral(Sum(Product(IntValue(-1, (), (), {}), Sum(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(0),), {Index(0): 2})), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(1),), {Index(1): 2}))), MultiIndex((Index(1),), {Index(1): 2}))), MultiIndex((Index(0),), {Index(0): 2}))), MultiIndex((Index(0),), {Index(0): 2})), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 4), Sum(Product(Product(IndexSum(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(2),), {Index(2): 2})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(2),), {Index(2): 2})), IndexSum(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(4),), {Index(4): 2})), MultiIndex((Index(4),), {Index(4): 2})), MultiIndex((Index(4),), {Index(4): 2}))), Product(IntValue(4, (), (), {}), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Product(IndexSum(Product(Indexed(ComponentTensor(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(5),), {Index(5): 2})), Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(6),), {Index(6): 2})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(6),), {Index(6): 2}))), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(7),), {Index(7): 2})), MultiIndex((Index(7), Index(6)), {Index(7): 2, Index(6): 2})), MultiIndex((Index(8), Index(5)), {Index(5): 2, Index(8): 2}))), MultiIndex((Index(5),), {Index(5): 2})), MultiIndex((Index(8),), {Index(8): 2})), MultiIndex((Index(9),), {Index(9): 2})), Indexed(Sum(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(10),), {Index(10): 2})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(10),), {Index(10): 2}))), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(11),), {Index(11): 2})), MultiIndex((Index(11), Index(10)), {Index(11): 2, Index(10): 2})), MultiIndex((Index(12), Index(13)), {Index(13): 2, Index(12): 2})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5)), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(13),), {Index(13): 2}))), MultiIndex((Index(13),), {Index(13): 2})), MultiIndex((Index(12),), {Index(12): 2})), ComponentTensor(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None), 1), MultiIndex((Index(14),), {Index(14): 2})), MultiIndex((Index(14),), {Index(14): 2}))), MultiIndex((Index(9),), {Index(9): 2}))), MultiIndex((Index(9),), {Index(9): 2})), Product(IntValue(4, (), (), {}), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(15),), {Index(15): 2})), Indexed(Sum(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(16),), {Index(16): 2})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(16),), {Index(16): 2}))), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(17),), {Index(17): 2})), MultiIndex((Index(17), Index(16)), {Index(17): 2, Index(16): 2})), MultiIndex((Index(18), Index(19)), {Index(19): 2, Index(18): 2})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5)), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(19),), {Index(19): 2}))), MultiIndex((Index(19),), {Index(19): 2})), MultiIndex((Index(18),), {Index(18): 2})), ComponentTensor(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 2})), MultiIndex((Index(20),), {Index(20): 2}))), MultiIndex((Index(15),), {Index(15): 2}))), MultiIndex((Index(15),), {Index(15): 2})), Product(Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None), 2), IndexSum(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(21),), {Index(21): 2})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(21),), {Index(21): 2}))), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(22),), {Index(22): 2})), MultiIndex((Index(22), Index(21)), {Index(22): 2, Index(21): 2})), MultiIndex((Index(23), Index(24)), {Index(24): 2, Index(23): 2})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(25),), {Index(25): 2})), MultiIndex((Index(26),), {Index(26): 2})), MultiIndex((Index(26), Index(25)), {Index(26): 2, Index(25): 2})), MultiIndex((Index(23), Index(24)), {Index(24): 2, Index(23): 2}))), MultiIndex((Index(23),), {Index(23): 2})), MultiIndex((Index(24),), {Index(24): 2}))))))))), Sum(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(27),), {Index(27): 2})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(27),), {Index(27): 2}))), MultiIndex((Index(27),), {Index(27): 2})), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 4), Sum(Product(Product(IndexSum(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(28),), {Index(28): 2})), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(28),), {Index(28): 2})), MultiIndex((Index(28),), {Index(28): 2})), IndexSum(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(29),), {Index(29): 2})), MultiIndex((Index(29),), {Index(29): 2})), MultiIndex((Index(29),), {Index(29): 2}))), Product(IntValue(4, (), (), {}), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Product(IndexSum(Sum(Product(Indexed(ComponentTensor(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(5),), {Index(5): 2})), Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(30),), {Index(30): 2})), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(31),), {Index(31): 2})), MultiIndex((Index(31), Index(30)), {Index(31): 2, Index(30): 2})), MultiIndex((Index(8), Index(5)), {Index(5): 2, Index(8): 2}))), MultiIndex((Index(5),), {Index(5): 2})), MultiIndex((Index(8),), {Index(8): 2})), MultiIndex((Index(32),), {Index(32): 2})), Indexed(Sum(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(33),), {Index(33): 2})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(33),), {Index(33): 2}))), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(34),), {Index(34): 2})), MultiIndex((Index(34), Index(33)), {Index(33): 2, Index(34): 2})), MultiIndex((Index(12), Index(13)), {Index(13): 2, Index(12): 2})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5)), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(13),), {Index(13): 2}))), MultiIndex((Index(13),), {Index(13): 2})), MultiIndex((Index(12),), {Index(12): 2})), ComponentTensor(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None), 1), MultiIndex((Index(35),), {Index(35): 2})), MultiIndex((Index(35),), {Index(35): 2}))), MultiIndex((Index(32),), {Index(32): 2}))), Product(Indexed(ComponentTensor(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(5),), {Index(5): 2})), Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(30),), {Index(30): 2})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(30),), {Index(30): 2}))), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(31),), {Index(31): 2})), MultiIndex((Index(31), Index(30)), {Index(31): 2, Index(30): 2})), MultiIndex((Index(8), Index(5)), {Index(5): 2, Index(8): 2}))), MultiIndex((Index(5),), {Index(5): 2})), MultiIndex((Index(8),), {Index(8): 2})), MultiIndex((Index(32),), {Index(32): 2})), Indexed(ComponentTensor(IndexSum(Sum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(33),), {Index(33): 2})), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(34),), {Index(34): 2})), MultiIndex((Index(34), Index(33)), {Index(33): 2, Index(34): 2})), MultiIndex((Index(12), Index(13)), {Index(13): 2, Index(12): 2})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5)), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(13),), {Index(13): 2}))), Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(33),), {Index(33): 2})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(33),), {Index(33): 2}))), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(34),), {Index(34): 2})), MultiIndex((Index(34), Index(33)), {Index(33): 2, Index(34): 2})), MultiIndex((Index(12), Index(13)), {Index(13): 2, Index(12): 2})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(13),), {Index(13): 2})))), MultiIndex((Index(13),), {Index(13): 2})), MultiIndex((Index(12),), {Index(12): 2})), MultiIndex((Index(32),), {Index(32): 2})))), MultiIndex((Index(32),), {Index(32): 2})), Product(IntValue(4, (), (), {}), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(36),), {Index(36): 2})), Indexed(ComponentTensor(IndexSum(Sum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(37),), {Index(37): 2})), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(38),), {Index(38): 2})), MultiIndex((Index(38), Index(37)), {Index(37): 2, Index(38): 2})), MultiIndex((Index(18), Index(19)), {Index(19): 2, Index(18): 2})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5)), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(19),), {Index(19): 2}))), Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(37),), {Index(37): 2})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(37),), {Index(37): 2}))), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(38),), {Index(38): 2})), MultiIndex((Index(38), Index(37)), {Index(37): 2, Index(38): 2})), MultiIndex((Index(18), Index(19)), {Index(19): 2, Index(18): 2})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(19),), {Index(19): 2})))), MultiIndex((Index(19),), {Index(19): 2})), MultiIndex((Index(18),), {Index(18): 2})), MultiIndex((Index(36),), {Index(36): 2}))), MultiIndex((Index(36),), {Index(36): 2})), Product(Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None), 2), IndexSum(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(39),), {Index(39): 2})), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(40),), {Index(40): 2})), MultiIndex((Index(40), Index(39)), {Index(40): 2, Index(39): 2})), MultiIndex((Index(41), Index(42)), {Index(41): 2, Index(42): 2})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(43),), {Index(43): 2})), MultiIndex((Index(44),), {Index(44): 2})), MultiIndex((Index(44), Index(43)), {Index(43): 2, Index(44): 2})), MultiIndex((Index(41), Index(42)), {Index(41): 2, Index(42): 2}))), MultiIndex((Index(41),), {Index(41): 2})), MultiIndex((Index(42),), {Index(42): 2}))))))))), Measure('cell', 0, None))])";
}

/// Return the rank of the global tensor (r)
unsigned int nsemomentum2d_form_1::rank() const
{
    return 1;
}

/// Return the number of coefficients (n)
unsigned int nsemomentum2d_form_1::num_coefficients() const
{
    return 6;
}
 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Return the number of cell domains
unsigned int nsemomentum2d_form_1::num_cell_domains() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int nsemomentum2d_form_1::num_exterior_facet_domains() const
{
    return 0;
}

/// Return the number of interior facet domains
unsigned int nsemomentum2d_form_1::num_interior_facet_domains() const
{
    return 0;
}
#else

/// Return the number of cell domains
unsigned int nsemomentum2d_form_1::num_cell_integrals() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int nsemomentum2d_form_1::num_exterior_facet_integrals() const
{
    return 0;
}

/// Return the number of interior facet domains
unsigned int nsemomentum2d_form_1::num_interior_facet_integrals() const
{
    return 0;
}

#endif

/// Create a new finite element for argument function i
ufc::finite_element* nsemomentum2d_form_1::create_finite_element(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum2d_finite_element_2();
        break;
      }
    case 1:
      {
        return new nsemomentum2d_finite_element_2();
        break;
      }
    case 2:
      {
        return new nsemomentum2d_finite_element_1();
        break;
      }
    case 3:
      {
        return new nsemomentum2d_finite_element_1();
        break;
      }
    case 4:
      {
        return new nsemomentum2d_finite_element_0();
        break;
      }
    case 5:
      {
        return new nsemomentum2d_finite_element_0();
        break;
      }
    case 6:
      {
        return new nsemomentum2d_finite_element_2();
        break;
      }
    }
    
    return 0;
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Create a new dofmap for argument function i
ufc::dofmap* nsemomentum2d_form_1::create_dofmap(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    case 1:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    case 2:
      {
        return new nsemomentum2d_dofmap_1();
        break;
      }
    case 3:
      {
        return new nsemomentum2d_dofmap_1();
        break;
      }
    case 4:
      {
        return new nsemomentum2d_dofmap_0();
        break;
      }
    case 5:
      {
        return new nsemomentum2d_dofmap_0();
        break;
      }
    case 6:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    }
    
    return 0;
}
#else

/// Create a new dofmap for argument function i
ufc::dof_map* nsemomentum2d_form_1::create_dof_map(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    case 1:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    case 2:
      {
        return new nsemomentum2d_dofmap_1();
        break;
      }
    case 3:
      {
        return new nsemomentum2d_dofmap_1();
        break;
      }
    case 4:
      {
        return new nsemomentum2d_dofmap_0();
        break;
      }
    case 5:
      {
        return new nsemomentum2d_dofmap_0();
        break;
      }
    case 6:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    }
    
    return 0;
}
#endif
/// Create a new cell integral on sub domain i
ufc::cell_integral* nsemomentum2d_form_1::create_cell_integral(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum2d_cell_integral_1_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new exterior facet integral on sub domain i
ufc::exterior_facet_integral* nsemomentum2d_form_1::create_exterior_facet_integral(unsigned int i) const
{
    return 0;
}

/// Create a new interior facet integral on sub domain i
ufc::interior_facet_integral* nsemomentum2d_form_1::create_interior_facet_integral(unsigned int i) const
{
    return 0;
}

