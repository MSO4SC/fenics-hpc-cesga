// This code conforms with the UFC specification version 2.0.5
// and was automatically generated by FFC version 1.0.0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   False
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'dolfin'
//   log_level:                      20
//   log_prefix:                     ''
//   optimize:                       True
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              'auto'
//   quadrature_rule:                'auto'
//   representation:                 'quadrature'
//   split:                          True
//   swig_binary:                    'swig'
//   swig_path:                      ''

#include "NSEMomentum3D.h"

/// Constructor
nsemomentum3d_finite_element_0::nsemomentum3d_finite_element_0() : ufc::finite_element()
{
    // Do nothing
}

/// Destructor
nsemomentum3d_finite_element_0::~nsemomentum3d_finite_element_0()
{
    // Do nothing
}

/// Return a string identifying the finite element
const char* nsemomentum3d_finite_element_0::signature() const
{
    return "FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None)";
}

/// Return the cell shape
ufc::shape nsemomentum3d_finite_element_0::cell_shape() const
{
    return ufc::tetrahedron;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the cell shape
unsigned int nsemomentum3d_finite_element_0::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the cell shape
unsigned int nsemomentum3d_finite_element_0::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the finite element function space
unsigned int nsemomentum3d_finite_element_0::space_dimension() const
{
    return 1;
}

/// Return the rank of the value space
unsigned int nsemomentum3d_finite_element_0::value_rank() const
{
    return 0;
}

/// Return the dimension of the value space for axis i
unsigned int nsemomentum3d_finite_element_0::value_dimension(unsigned int i) const
{
    return 1;
}

/// Evaluate basis function i at given point in cell
void nsemomentum3d_finite_element_0::evaluate_basis(unsigned int i,
                                   double* values,
                                   const double* coordinates,
                                   const ufc::cell& c) const
{
    // Extract vertex coordinates
    
    // Compute Jacobian of affine map from reference cell
    
    // Compute sub determinants
    
    // Compute determinant of Jacobian
    
    // Compute inverse of Jacobian
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Reset values.
    *values = 0.0;
    
    // Array of basisvalues.
    double basisvalues[1] = {0.0};
    
    // Declare helper variables.
    
    // Compute basisvalues.
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients.
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s).
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    }// end loop over 'r'
}

/// Evaluate all basis functions at given point in cell
void nsemomentum3d_finite_element_0::evaluate_basis_all(double* values,
                                       const double* coordinates,
                                       const ufc::cell& c) const
{
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, coordinates, c);
}

/// Evaluate order n derivatives of basis function i at given point in cell
void nsemomentum3d_finite_element_0::evaluate_basis_derivatives(unsigned int i,
                                               unsigned int n,
                                               double* values,
                                               const double* coordinates,
                                               const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K_00, K_01, K_02}, {K_10, K_11, K_12}, {K_20, K_21, K_22}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    
    // Array of basisvalues.
    double basisvalues[1] = {0.0};
    
    // Declare helper variables.
    
    // Compute basisvalues.
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients.
    static const double coefficients0[1] = \
    {1.0};
    
    // Tables of derivatives of the polynomial base (transpose).
    static const double dmats0[1][1] = \
    {{0.0}};
    
    static const double dmats1[1][1] = \
    {{0.0}};
    
    static const double dmats2[1][1] = \
    {{0.0}};
    
    // Compute reference derivatives.
    // Declare pointer to array of derivatives on FIAT element.
    double *derivatives = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      derivatives[r] = 0.0;
    }// end loop over 'r'
    
    // Declare derivative matrix (of polynomial basis).
    double dmats[1][1] = \
    {{1.0}};
    
    // Declare (auxiliary) derivative matrix (of polynomial basis).
    double dmats_old[1][1] = \
    {{1.0}};
    
    // Loop possible derivatives.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      // Resetting dmats values to compute next derivative.
      for (unsigned int t = 0; t < 1; t++)
      {
        for (unsigned int u = 0; u < 1; u++)
        {
          dmats[t][u] = 0.0;
          if (t == u)
          {
          dmats[t][u] = 1.0;
          }
          
        }// end loop over 'u'
      }// end loop over 't'
      
      // Looping derivative order to generate dmats.
      for (unsigned int s = 0; s < n; s++)
      {
        // Updating dmats_old with new values and resetting dmats.
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            dmats_old[t][u] = dmats[t][u];
            dmats[t][u] = 0.0;
          }// end loop over 'u'
        }// end loop over 't'
        
        // Update dmats using an inner product.
        if (combinations[r][s] == 0)
        {
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            for (unsigned int tu = 0; tu < 1; tu++)
            {
              dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
            }// end loop over 'tu'
          }// end loop over 'u'
        }// end loop over 't'
        }
        
        if (combinations[r][s] == 1)
        {
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            for (unsigned int tu = 0; tu < 1; tu++)
            {
              dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
            }// end loop over 'tu'
          }// end loop over 'u'
        }// end loop over 't'
        }
        
        if (combinations[r][s] == 2)
        {
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            for (unsigned int tu = 0; tu < 1; tu++)
            {
              dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
            }// end loop over 'tu'
          }// end loop over 'u'
        }// end loop over 't'
        }
        
      }// end loop over 's'
      for (unsigned int s = 0; s < 1; s++)
      {
        for (unsigned int t = 0; t < 1; t++)
        {
          derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
        }// end loop over 't'
      }// end loop over 's'
    }// end loop over 'r'
    
    // Transform derivatives back to physical element
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r] += transform[r][s]*derivatives[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      delete [] combinations[r];
    }// end loop over 'r'
    delete [] combinations;
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      delete [] transform[r];
    }// end loop over 'r'
    delete [] transform;
}

/// Evaluate order n derivatives of all basis functions at given point in cell
void nsemomentum3d_finite_element_0::evaluate_basis_derivatives_all(unsigned int n,
                                                   double* values,
                                                   const double* coordinates,
                                                   const ufc::cell& c) const
{
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, coordinates, c);
}

/// Evaluate linear functional for dof i on the function f
double nsemomentum3d_finite_element_0::evaluate_dof(unsigned int i,
                                   const ufc::function& f,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
      y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
      y[2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

/// Evaluate linear functionals for all dofs on the function f
void nsemomentum3d_finite_element_0::evaluate_dofs(double* values,
                                  const ufc::function& f,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    y[2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
}

/// Interpolate vertex values from dof values
void nsemomentum3d_finite_element_0::interpolate_vertex_values(double* vertex_values,
                                              const double* dof_values,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Map coordinate xhat from reference cell to coordinate x in cell
void nsemomentum3d_finite_element_0::map_from_reference_cell(double* x,
                                            const double* xhat,
                                            const ufc::cell& c) const
{
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
}

/// Map from coordinate x in cell to coordinate xhat in reference cell
void nsemomentum3d_finite_element_0::map_to_reference_cell(double* xhat,
                                          const double* x,
                                          const ufc::cell& c) const
{
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
}
#endif
/// Return the number of sub elements (for a mixed element)
unsigned int nsemomentum3d_finite_element_0::num_sub_elements() const
{
    return 0;
}

/// Create a new finite element for sub element i (for a mixed element)
ufc::finite_element* nsemomentum3d_finite_element_0::create_sub_element(unsigned int i) const
{
    return 0;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Create a new class instance
ufc::finite_element* nsemomentum3d_finite_element_0::create() const
{
    return new nsemomentum3d_finite_element_0();
}
#endif


/// Constructor
nsemomentum3d_finite_element_1::nsemomentum3d_finite_element_1() : ufc::finite_element()
{
    // Do nothing
}

/// Destructor
nsemomentum3d_finite_element_1::~nsemomentum3d_finite_element_1()
{
    // Do nothing
}

/// Return a string identifying the finite element
const char* nsemomentum3d_finite_element_1::signature() const
{
    return "FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)";
}

/// Return the cell shape
ufc::shape nsemomentum3d_finite_element_1::cell_shape() const
{
    return ufc::tetrahedron;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the cell shape
unsigned int nsemomentum3d_finite_element_1::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the cell shape
unsigned int nsemomentum3d_finite_element_1::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the finite element function space
unsigned int nsemomentum3d_finite_element_1::space_dimension() const
{
    return 4;
}

/// Return the rank of the value space
unsigned int nsemomentum3d_finite_element_1::value_rank() const
{
    return 0;
}

/// Return the dimension of the value space for axis i
unsigned int nsemomentum3d_finite_element_1::value_dimension(unsigned int i) const
{
    return 1;
}

/// Evaluate basis function i at given point in cell
void nsemomentum3d_finite_element_1::evaluate_basis(unsigned int i,
                                   double* values,
                                   const double* coordinates,
                                   const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[3][0] + x[2][0] + x[1][0] - x[0][0];
    const double C1 = x[3][1] + x[2][1] + x[1][1] - x[0][1];
    const double C2 = x[3][2] + x[2][2] + x[1][2] - x[0][2];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*coordinates[0] - C0) + d_10*(2.0*coordinates[1] - C1) + d_20*(2.0*coordinates[2] - C2)) / detJ;
    double Y = (d_01*(2.0*coordinates[0] - C0) + d_11*(2.0*coordinates[1] - C1) + d_21*(2.0*coordinates[2] - C2)) / detJ;
    double Z = (d_02*(2.0*coordinates[0] - C0) + d_12*(2.0*coordinates[1] - C1) + d_22*(2.0*coordinates[2] - C2)) / detJ;
    
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
}

/// Evaluate all basis functions at given point in cell
void nsemomentum3d_finite_element_1::evaluate_basis_all(double* values,
                                       const double* coordinates,
                                       const ufc::cell& c) const
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 4; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
}

/// Evaluate order n derivatives of basis function i at given point in cell
void nsemomentum3d_finite_element_1::evaluate_basis_derivatives(unsigned int i,
                                               unsigned int n,
                                               double* values,
                                               const double* coordinates,
                                               const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Compute constants
    const double C0 = x[3][0] + x[2][0] + x[1][0] - x[0][0];
    const double C1 = x[3][1] + x[2][1] + x[1][1] - x[0][1];
    const double C2 = x[3][2] + x[2][2] + x[1][2] - x[0][2];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*coordinates[0] - C0) + d_10*(2.0*coordinates[1] - C1) + d_20*(2.0*coordinates[2] - C2)) / detJ;
    double Y = (d_01*(2.0*coordinates[0] - C0) + d_11*(2.0*coordinates[1] - C1) + d_21*(2.0*coordinates[2] - C2)) / detJ;
    double Z = (d_02*(2.0*coordinates[0] - C0) + d_12*(2.0*coordinates[1] - C1) + d_22*(2.0*coordinates[2] - C2)) / detJ;
    
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K_00, K_01, K_02}, {K_10, K_11, K_12}, {K_20, K_21, K_22}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
}

/// Evaluate order n derivatives of all basis functions at given point in cell
void nsemomentum3d_finite_element_1::evaluate_basis_derivatives_all(unsigned int n,
                                                   double* values,
                                                   const double* coordinates,
                                                   const ufc::cell& c) const
{
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
}

/// Evaluate linear functional for dof i on the function f
double nsemomentum3d_finite_element_1::evaluate_dof(unsigned int i,
                                   const ufc::function& f,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

/// Evaluate linear functionals for all dofs on the function f
void nsemomentum3d_finite_element_1::evaluate_dofs(double* values,
                                  const ufc::function& f,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
}

/// Interpolate vertex values from dof values
void nsemomentum3d_finite_element_1::interpolate_vertex_values(double* vertex_values,
                                              const double* dof_values,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Map coordinate xhat from reference cell to coordinate x in cell
void nsemomentum3d_finite_element_1::map_from_reference_cell(double* x,
                                            const double* xhat,
                                            const ufc::cell& c) const
{
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
}

/// Map from coordinate x in cell to coordinate xhat in reference cell
void nsemomentum3d_finite_element_1::map_to_reference_cell(double* xhat,
                                          const double* x,
                                          const ufc::cell& c) const
{
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
}
#endif
/// Return the number of sub elements (for a mixed element)
unsigned int nsemomentum3d_finite_element_1::num_sub_elements() const
{
    return 0;
}

/// Create a new finite element for sub element i (for a mixed element)
ufc::finite_element* nsemomentum3d_finite_element_1::create_sub_element(unsigned int i) const
{
    return 0;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Create a new class instance
ufc::finite_element* nsemomentum3d_finite_element_1::create() const
{
    return new nsemomentum3d_finite_element_1();
}
#endif


/// Constructor
nsemomentum3d_finite_element_2::nsemomentum3d_finite_element_2() : ufc::finite_element()
{
    // Do nothing
}

/// Destructor
nsemomentum3d_finite_element_2::~nsemomentum3d_finite_element_2()
{
    // Do nothing
}

/// Return a string identifying the finite element
const char* nsemomentum3d_finite_element_2::signature() const
{
    return "VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None)";
}

/// Return the cell shape
ufc::shape nsemomentum3d_finite_element_2::cell_shape() const
{
    return ufc::tetrahedron;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the cell shape
unsigned int nsemomentum3d_finite_element_2::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the cell shape
unsigned int nsemomentum3d_finite_element_2::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the finite element function space
unsigned int nsemomentum3d_finite_element_2::space_dimension() const
{
    return 12;
}

/// Return the rank of the value space
unsigned int nsemomentum3d_finite_element_2::value_rank() const
{
    return 1;
}

/// Return the dimension of the value space for axis i
unsigned int nsemomentum3d_finite_element_2::value_dimension(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
}

/// Evaluate basis function i at given point in cell
void nsemomentum3d_finite_element_2::evaluate_basis(unsigned int i,
                                   double* values,
                                   const double* coordinates,
                                   const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[3][0] + x[2][0] + x[1][0] - x[0][0];
    const double C1 = x[3][1] + x[2][1] + x[1][1] - x[0][1];
    const double C2 = x[3][2] + x[2][2] + x[1][2] - x[0][2];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*coordinates[0] - C0) + d_10*(2.0*coordinates[1] - C1) + d_20*(2.0*coordinates[2] - C2)) / detJ;
    double Y = (d_01*(2.0*coordinates[0] - C0) + d_11*(2.0*coordinates[1] - C1) + d_21*(2.0*coordinates[2] - C2)) / detJ;
    double Z = (d_02*(2.0*coordinates[0] - C0) + d_12*(2.0*coordinates[1] - C1) + d_22*(2.0*coordinates[2] - C2)) / detJ;
    
    
    // Reset values.
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
}

/// Evaluate all basis functions at given point in cell
void nsemomentum3d_finite_element_2::evaluate_basis_all(double* values,
                                       const double* coordinates,
                                       const ufc::cell& c) const
{
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 12; r++)
    {
      evaluate_basis(r, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
}

/// Evaluate order n derivatives of basis function i at given point in cell
void nsemomentum3d_finite_element_2::evaluate_basis_derivatives(unsigned int i,
                                               unsigned int n,
                                               double* values,
                                               const double* coordinates,
                                               const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Compute constants
    const double C0 = x[3][0] + x[2][0] + x[1][0] - x[0][0];
    const double C1 = x[3][1] + x[2][1] + x[1][1] - x[0][1];
    const double C2 = x[3][2] + x[2][2] + x[1][2] - x[0][2];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*coordinates[0] - C0) + d_10*(2.0*coordinates[1] - C1) + d_20*(2.0*coordinates[2] - C2)) / detJ;
    double Y = (d_01*(2.0*coordinates[0] - C0) + d_11*(2.0*coordinates[1] - C1) + d_21*(2.0*coordinates[2] - C2)) / detJ;
    double Z = (d_02*(2.0*coordinates[0] - C0) + d_12*(2.0*coordinates[1] - C1) + d_22*(2.0*coordinates[2] - C2)) / detJ;
    
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K_00, K_01, K_02}, {K_10, K_11, K_12}, {K_20, K_21, K_22}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
}

/// Evaluate order n derivatives of all basis functions at given point in cell
void nsemomentum3d_finite_element_2::evaluate_basis_derivatives_all(unsigned int n,
                                                   double* values,
                                                   const double* coordinates,
                                                   const ufc::cell& c) const
{
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[3*num_derivatives];
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
}

/// Evaluate linear functional for dof i on the function f
double nsemomentum3d_finite_element_2::evaluate_dof(unsigned int i,
                                   const ufc::function& f,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[3];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 9:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 10:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 11:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
}

/// Evaluate linear functionals for all dofs on the function f
void nsemomentum3d_finite_element_2::evaluate_dofs(double* values,
                                  const ufc::function& f,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[3];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[8] = vals[2];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[9] = vals[2];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[10] = vals[2];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[11] = vals[2];
}

/// Interpolate vertex values from dof values
void nsemomentum3d_finite_element_2::interpolate_vertex_values(double* vertex_values,
                                              const double* dof_values,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[4] = dof_values[5];
    vertex_values[7] = dof_values[6];
    vertex_values[10] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[5] = dof_values[9];
    vertex_values[8] = dof_values[10];
    vertex_values[11] = dof_values[11];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Map coordinate xhat from reference cell to coordinate x in cell
void nsemomentum3d_finite_element_2::map_from_reference_cell(double* x,
                                            const double* xhat,
                                            const ufc::cell& c) const
{
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
}

/// Map from coordinate x in cell to coordinate xhat in reference cell
void nsemomentum3d_finite_element_2::map_to_reference_cell(double* xhat,
                                          const double* x,
                                          const ufc::cell& c) const
{
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
}
#endif
/// Return the number of sub elements (for a mixed element)
unsigned int nsemomentum3d_finite_element_2::num_sub_elements() const
{
    return 3;
}

/// Create a new finite element for sub element i (for a mixed element)
ufc::finite_element* nsemomentum3d_finite_element_2::create_sub_element(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum3d_finite_element_1();
        break;
      }
    case 1:
      {
        return new nsemomentum3d_finite_element_1();
        break;
      }
    case 2:
      {
        return new nsemomentum3d_finite_element_1();
        break;
      }
    }
    
    return 0;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Create a new class instance
ufc::finite_element* nsemomentum3d_finite_element_2::create() const
{
    return new nsemomentum3d_finite_element_2();
}
#endif

/// Constructor


#ifndef UFC_BACKWARD_COMPATIBILITY
nsemomentum3d_dofmap_0::nsemomentum3d_dofmap_0() : ufc::dofmap()
#else
nsemomentum3d_dofmap_0::nsemomentum3d_dofmap_0() : ufc::dof_map()
#endif
{
    _global_dimension = 0;
}

/// Destructor
nsemomentum3d_dofmap_0::~nsemomentum3d_dofmap_0()
{
    // Do nothing
}

/// Return a string identifying the dofmap
const char* nsemomentum3d_dofmap_0::signature() const
{
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None)";
}

/// Return true iff mesh entities of topological dimension d are needed
bool nsemomentum3d_dofmap_0::needs_mesh_entities(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return true;
        break;
      }
    }
    
    return false;
}

/// Initialize dofmap for mesh (return true iff init_cell() is needed)
bool nsemomentum3d_dofmap_0::init_mesh(const ufc::mesh& m)
{
    _global_dimension = m.num_entities[3];
    return false;
}

/// Initialize dofmap for given cell
void nsemomentum3d_dofmap_0::init_cell(const ufc::mesh& m,
                              const ufc::cell& c)
{
    // Do nothing
}

/// Finish initialization of dofmap for cells
void nsemomentum3d_dofmap_0::init_cell_finalize()
{
    // Do nothing
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the associated cell shape
unsigned int nsemomentum3d_dofmap_0::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the associated cell shape
unsigned int nsemomentum3d_dofmap_0::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the global finite element function space
unsigned int nsemomentum3d_dofmap_0::global_dimension() const
{
    return _global_dimension;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the dimension of the local finite element function space for a cell
unsigned int nsemomentum3d_dofmap_0::local_dimension(const ufc::cell& c) const
{
    return 1;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsemomentum3d_dofmap_0::max_local_dimension() const
{
    return 1;
}
#else

/// Return the dimension of the local finite element function space for a cell
unsigned int nsemomentum3d_dofmap_0::local_dimension() const
{
    return 1;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsemomentum3d_dofmap_0::geometric_dimension() const
{
    return 3;
}

#endif
/// Return the number of dofs on each cell facet
unsigned int nsemomentum3d_dofmap_0::num_facet_dofs() const
{
    return 0;
}

/// Return the number of dofs associated with each cell entity of dimension d
unsigned int nsemomentum3d_dofmap_0::num_entity_dofs(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
}

/// Tabulate the local-to-global mapping of dofs on a cell
void nsemomentum3d_dofmap_0::tabulate_dofs(unsigned int* dofs,
                                  const ufc::mesh& m,
                                  const ufc::cell& c) const
{
    dofs[0] = c.entity_indices[3][0];
}

/// Tabulate the local-to-local mapping from facet dofs to cell dofs
void nsemomentum3d_dofmap_0::tabulate_facet_dofs(unsigned int* dofs,
                                        unsigned int facet) const
{
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
}

/// Tabulate the local-to-local mapping of dofs on entity (d, i)
void nsemomentum3d_dofmap_0::tabulate_entity_dofs(unsigned int* dofs,
                                  unsigned int d, unsigned int i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
}

/// Tabulate the coordinates of all dofs on a cell
void nsemomentum3d_dofmap_0::tabulate_coordinates(double** coordinates,
                                         const ufc::cell& c) const
{
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[0][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[0][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsemomentum3d_dofmap_0::num_sub_dofmaps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dofmap* nsemomentum3d_dofmap_0::create_sub_dofmap(unsigned int i) const
{
    return 0;
}

/// Create a new class instance
ufc::dofmap* nsemomentum3d_dofmap_0::create() const
{
    return new nsemomentum3d_dofmap_0();
}
#else

/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsemomentum3d_dofmap_0::num_sub_dof_maps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dof_map* nsemomentum3d_dofmap_0::create_sub_dof_map(unsigned int i) const
{
    return 0;
}

#endif

/// Constructor


#ifndef UFC_BACKWARD_COMPATIBILITY
nsemomentum3d_dofmap_1::nsemomentum3d_dofmap_1() : ufc::dofmap()
#else
nsemomentum3d_dofmap_1::nsemomentum3d_dofmap_1() : ufc::dof_map()
#endif
{
    _global_dimension = 0;
}

/// Destructor
nsemomentum3d_dofmap_1::~nsemomentum3d_dofmap_1()
{
    // Do nothing
}

/// Return a string identifying the dofmap
const char* nsemomentum3d_dofmap_1::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)";
}

/// Return true iff mesh entities of topological dimension d are needed
bool nsemomentum3d_dofmap_1::needs_mesh_entities(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
}

/// Initialize dofmap for mesh (return true iff init_cell() is needed)
bool nsemomentum3d_dofmap_1::init_mesh(const ufc::mesh& m)
{
    _global_dimension = m.num_entities[0];
    return false;
}

/// Initialize dofmap for given cell
void nsemomentum3d_dofmap_1::init_cell(const ufc::mesh& m,
                              const ufc::cell& c)
{
    // Do nothing
}

/// Finish initialization of dofmap for cells
void nsemomentum3d_dofmap_1::init_cell_finalize()
{
    // Do nothing
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the associated cell shape
unsigned int nsemomentum3d_dofmap_1::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the associated cell shape
unsigned int nsemomentum3d_dofmap_1::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the global finite element function space
unsigned int nsemomentum3d_dofmap_1::global_dimension() const
{
    return _global_dimension;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the dimension of the local finite element function space for a cell
unsigned int nsemomentum3d_dofmap_1::local_dimension(const ufc::cell& c) const
{
    return 4;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsemomentum3d_dofmap_1::max_local_dimension() const
{
    return 4;
}
#else

/// Return the dimension of the local finite element function space for a cell
unsigned int nsemomentum3d_dofmap_1::local_dimension() const
{
    return 4;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsemomentum3d_dofmap_1::geometric_dimension() const
{
    return 3;
}

#endif
/// Return the number of dofs on each cell facet
unsigned int nsemomentum3d_dofmap_1::num_facet_dofs() const
{
    return 3;
}

/// Return the number of dofs associated with each cell entity of dimension d
unsigned int nsemomentum3d_dofmap_1::num_entity_dofs(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

/// Tabulate the local-to-global mapping of dofs on a cell
void nsemomentum3d_dofmap_1::tabulate_dofs(unsigned int* dofs,
                                  const ufc::mesh& m,
                                  const ufc::cell& c) const
{
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
}

/// Tabulate the local-to-local mapping from facet dofs to cell dofs
void nsemomentum3d_dofmap_1::tabulate_facet_dofs(unsigned int* dofs,
                                        unsigned int facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
        break;
      }
    }
    
}

/// Tabulate the local-to-local mapping of dofs on entity (d, i)
void nsemomentum3d_dofmap_1::tabulate_entity_dofs(unsigned int* dofs,
                                  unsigned int d, unsigned int i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
}

/// Tabulate the coordinates of all dofs on a cell
void nsemomentum3d_dofmap_1::tabulate_coordinates(double** coordinates,
                                         const ufc::cell& c) const
{
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsemomentum3d_dofmap_1::num_sub_dofmaps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dofmap* nsemomentum3d_dofmap_1::create_sub_dofmap(unsigned int i) const
{
    return 0;
}

/// Create a new class instance
ufc::dofmap* nsemomentum3d_dofmap_1::create() const
{
    return new nsemomentum3d_dofmap_1();
}
#else

/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsemomentum3d_dofmap_1::num_sub_dof_maps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dof_map* nsemomentum3d_dofmap_1::create_sub_dof_map(unsigned int i) const
{
    return 0;
}

#endif

/// Constructor


#ifndef UFC_BACKWARD_COMPATIBILITY
nsemomentum3d_dofmap_2::nsemomentum3d_dofmap_2() : ufc::dofmap()
#else
nsemomentum3d_dofmap_2::nsemomentum3d_dofmap_2() : ufc::dof_map()
#endif
{
    _global_dimension = 0;
}

/// Destructor
nsemomentum3d_dofmap_2::~nsemomentum3d_dofmap_2()
{
    // Do nothing
}

/// Return a string identifying the dofmap
const char* nsemomentum3d_dofmap_2::signature() const
{
    return "FFC dofmap for VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None)";
}

/// Return true iff mesh entities of topological dimension d are needed
bool nsemomentum3d_dofmap_2::needs_mesh_entities(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
}

/// Initialize dofmap for mesh (return true iff init_cell() is needed)
bool nsemomentum3d_dofmap_2::init_mesh(const ufc::mesh& m)
{
    _global_dimension = 3*m.num_entities[0];
    return false;
}

/// Initialize dofmap for given cell
void nsemomentum3d_dofmap_2::init_cell(const ufc::mesh& m,
                              const ufc::cell& c)
{
    // Do nothing
}

/// Finish initialization of dofmap for cells
void nsemomentum3d_dofmap_2::init_cell_finalize()
{
    // Do nothing
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the associated cell shape
unsigned int nsemomentum3d_dofmap_2::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the associated cell shape
unsigned int nsemomentum3d_dofmap_2::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the global finite element function space
unsigned int nsemomentum3d_dofmap_2::global_dimension() const
{
    return _global_dimension;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the dimension of the local finite element function space for a cell
unsigned int nsemomentum3d_dofmap_2::local_dimension(const ufc::cell& c) const
{
    return 12;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsemomentum3d_dofmap_2::max_local_dimension() const
{
    return 12;
}
#else

/// Return the dimension of the local finite element function space for a cell
unsigned int nsemomentum3d_dofmap_2::local_dimension() const
{
    return 12;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsemomentum3d_dofmap_2::geometric_dimension() const
{
    return 3;
}

#endif
/// Return the number of dofs on each cell facet
unsigned int nsemomentum3d_dofmap_2::num_facet_dofs() const
{
    return 9;
}

/// Return the number of dofs associated with each cell entity of dimension d
unsigned int nsemomentum3d_dofmap_2::num_entity_dofs(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

/// Tabulate the local-to-global mapping of dofs on a cell
void nsemomentum3d_dofmap_2::tabulate_dofs(unsigned int* dofs,
                                  const ufc::mesh& m,
                                  const ufc::cell& c) const
{
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    dofs[3] = offset + c.entity_indices[0][3];
    offset += m.num_entities[0];
    dofs[4] = offset + c.entity_indices[0][0];
    dofs[5] = offset + c.entity_indices[0][1];
    dofs[6] = offset + c.entity_indices[0][2];
    dofs[7] = offset + c.entity_indices[0][3];
    offset += m.num_entities[0];
    dofs[8] = offset + c.entity_indices[0][0];
    dofs[9] = offset + c.entity_indices[0][1];
    dofs[10] = offset + c.entity_indices[0][2];
    dofs[11] = offset + c.entity_indices[0][3];
    offset += m.num_entities[0];
}

/// Tabulate the local-to-local mapping from facet dofs to cell dofs
void nsemomentum3d_dofmap_2::tabulate_facet_dofs(unsigned int* dofs,
                                        unsigned int facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
        break;
      }
    }
    
}

/// Tabulate the local-to-local mapping of dofs on entity (d, i)
void nsemomentum3d_dofmap_2::tabulate_entity_dofs(unsigned int* dofs,
                                  unsigned int d, unsigned int i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
}

/// Tabulate the coordinates of all dofs on a cell
void nsemomentum3d_dofmap_2::tabulate_coordinates(double** coordinates,
                                         const ufc::cell& c) const
{
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = x[0][0];
    coordinates[4][1] = x[0][1];
    coordinates[4][2] = x[0][2];
    coordinates[5][0] = x[1][0];
    coordinates[5][1] = x[1][1];
    coordinates[5][2] = x[1][2];
    coordinates[6][0] = x[2][0];
    coordinates[6][1] = x[2][1];
    coordinates[6][2] = x[2][2];
    coordinates[7][0] = x[3][0];
    coordinates[7][1] = x[3][1];
    coordinates[7][2] = x[3][2];
    coordinates[8][0] = x[0][0];
    coordinates[8][1] = x[0][1];
    coordinates[8][2] = x[0][2];
    coordinates[9][0] = x[1][0];
    coordinates[9][1] = x[1][1];
    coordinates[9][2] = x[1][2];
    coordinates[10][0] = x[2][0];
    coordinates[10][1] = x[2][1];
    coordinates[10][2] = x[2][2];
    coordinates[11][0] = x[3][0];
    coordinates[11][1] = x[3][1];
    coordinates[11][2] = x[3][2];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsemomentum3d_dofmap_2::num_sub_dofmaps() const
{
    return 3;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dofmap* nsemomentum3d_dofmap_2::create_sub_dofmap(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 1:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 2:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    }
    
    return 0;
}

/// Create a new class instance
ufc::dofmap* nsemomentum3d_dofmap_2::create() const
{
    return new nsemomentum3d_dofmap_2();
}
#else

/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsemomentum3d_dofmap_2::num_sub_dof_maps() const
{
    return 3;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dof_map* nsemomentum3d_dofmap_2::create_sub_dof_map(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 1:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 2:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    }
    
    return 0;
}

#endif

/// Constructor
nsemomentum3d_cell_integral_0_0::nsemomentum3d_cell_integral_0_0() : ufc::cell_integral()
{
    // Do nothing
}

/// Destructor
nsemomentum3d_cell_integral_0_0::~nsemomentum3d_cell_integral_0_0()
{
    // Do nothing
}

/// Tabulate the tensor for the contribution from a local cell
void nsemomentum3d_cell_integral_0_0::tabulate_tensor(double* A,
                                    const double * const * w,
                                    const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Cell Volume.
    
    // Compute circumradius.
    
    
    // Facet Area (divide by two because 'det' is scaled by area of reference triangle).
    
    // Array of quadrature weights.
    static const double W14[14] = {0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.0147649707904968, 0.0147649707904968, 0.0147649707904968, 0.0147649707904968, 0.0221397911142651, 0.0221397911142651, 0.0221397911142651, 0.0221397911142651};
    // Quadrature points on the UFC reference element: (0.0, 0.5, 0.5), (0.5, 0.0, 0.5), (0.5, 0.5, 0.0), (0.5, 0.0, 0.0), (0.0, 0.5, 0.0), (0.0, 0.0, 0.5), (0.698419704324387, 0.100526765225204, 0.100526765225204), (0.100526765225204, 0.100526765225204, 0.100526765225204), (0.100526765225204, 0.100526765225204, 0.698419704324387), (0.100526765225204, 0.698419704324387, 0.100526765225204), (0.0568813795204234, 0.314372873493192, 0.314372873493192), (0.314372873493192, 0.314372873493192, 0.314372873493192), (0.314372873493192, 0.314372873493192, 0.0568813795204234), (0.314372873493192, 0.0568813795204234, 0.314372873493192)
    
    // Value of basis functions at quadrature points.
    static const double FE0[14][4] = \
    {{0.0, 0.0, 0.5, 0.5},
    {0.0, 0.5, 0.0, 0.5},
    {0.0, 0.5, 0.5, 0.0},
    {0.5, 0.5, 0.0, 0.0},
    {0.5, 0.0, 0.5, 0.0},
    {0.5, 0.0, 0.0, 0.5},
    {0.100526765225205, 0.698419704324386, 0.100526765225205, 0.100526765225205},
    {0.698419704324387, 0.100526765225204, 0.100526765225205, 0.100526765225205},
    {0.100526765225205, 0.100526765225204, 0.100526765225205, 0.698419704324386},
    {0.100526765225205, 0.100526765225204, 0.698419704324386, 0.100526765225205},
    {0.314372873493192, 0.0568813795204234, 0.314372873493192, 0.314372873493192},
    {0.0568813795204235, 0.314372873493192, 0.314372873493192, 0.314372873493192},
    {0.314372873493192, 0.314372873493192, 0.314372873493192, 0.0568813795204234},
    {0.314372873493192, 0.314372873493192, 0.0568813795204235, 0.314372873493192}};
    
    // Array of non-zero columns
    static const unsigned int nzc7[4] = {4, 5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc3[4] = {0, 1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc11[4] = {8, 9, 10, 11};
    
    static const double FE0_D001[14][2] = \
    {{-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc10[2] = {4, 5};
    
    // Array of non-zero columns
    static const unsigned int nzc5[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc6[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc2[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc14[2] = {8, 9};
    
    // Array of non-zero columns
    static const unsigned int nzc4[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc0[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc12[2] = {8, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc13[2] = {8, 10};
    
    // Array of non-zero columns
    static const unsigned int nzc8[2] = {4, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc9[2] = {4, 6};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 144; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    // Number of operations to compute geometry constants: 1558.
    double G[220];
    G[0] = 0.5*std::pow(w[3][0], 0.5)*K_01*K_01*det*w[3][0]*w[5][0];
    G[1] = 0.5*det*w[3][0]*(std::pow(w[3][0], 0.5)*w[7][0]*(K_00*K_00 + K_01*K_01 + K_02*K_02) + w[11][0]*w[3][0]*w[6][0]*(K_00*K_00 + K_01*K_01 + K_02*K_02));
    G[2] = 0.03125*std::pow(w[3][0], 0.5)*K_02*K_02*det*w[3][0]*w[5][0];
    G[3] = 0.0625*std::pow(w[3][0], 0.5)*K_02*K_02*det*w[3][0]*w[5][0];
    G[4] = 0.0625*std::pow(w[3][0], 0.5)*K_00*K_02*det*w[3][0]*w[5][0];
    G[5] = 0.125*std::pow(w[3][0], 0.5)*K_00*K_02*det*w[3][0]*w[5][0];
    G[6] = 0.0625*std::pow(w[3][0], 0.5)*K_01*K_02*det*w[3][0]*w[5][0];
    G[7] = 0.125*std::pow(w[3][0], 0.5)*K_01*K_02*det*w[3][0]*w[5][0];
    G[8] = 0.125*std::pow(w[3][0], 0.5)*K_02*K_02*det*w[3][0]*w[5][0];
    G[9] = 0.03125*std::pow(w[3][0], 0.5)*K_00*K_00*det*w[3][0]*w[5][0];
    G[10] = 0.0625*std::pow(w[3][0], 0.5)*K_00*K_00*det*w[3][0]*w[5][0];
    G[11] = 0.0625*std::pow(w[3][0], 0.5)*K_00*K_01*det*w[3][0]*w[5][0];
    G[12] = 0.125*std::pow(w[3][0], 0.5)*K_00*K_01*det*w[3][0]*w[5][0];
    G[13] = 0.125*std::pow(w[3][0], 0.5)*K_00*K_00*det*w[3][0]*w[5][0];
    G[14] = 0.03125*std::pow(w[3][0], 0.5)*K_01*K_01*det*w[3][0]*w[5][0];
    G[15] = 0.0625*std::pow(w[3][0], 0.5)*K_01*K_01*det*w[3][0]*w[5][0];
    G[16] = 0.125*std::pow(w[3][0], 0.5)*K_01*K_01*det*w[3][0]*w[5][0];
    G[17] = 0.5*det*(K_00*K_00 + K_01*K_01 + K_02*K_02);
    G[18] = 0.5*std::pow(w[3][0], 0.5)*K_01*K_22*det*w[3][0]*w[5][0];
    G[19] = 0.5*std::pow(w[3][0], 0.5)*K_01*K_12*det*w[3][0]*w[5][0];
    G[20] = 0.5*std::pow(w[3][0], 0.5)*K_01*K_02*det*w[3][0]*w[5][0];
    G[21] = 0.5*std::pow(w[3][0], 0.5)*K_01*K_20*det*w[3][0]*w[5][0];
    G[22] = 0.5*std::pow(w[3][0], 0.5)*K_01*K_10*det*w[3][0]*w[5][0];
    G[23] = 0.5*std::pow(w[3][0], 0.5)*K_00*K_01*det*w[3][0]*w[5][0];
    G[24] = 0.5*std::pow(w[3][0], 0.5)*K_01*K_21*det*w[3][0]*w[5][0];
    G[25] = 0.5*det*w[3][0]*(std::pow(w[3][0], 0.5)*w[7][0]*(K_00*K_20 + K_01*K_21 + K_02*K_22) + w[11][0]*w[3][0]*w[6][0]*(K_00*K_20 + K_01*K_21 + K_02*K_22));
    G[26] = 0.03125*std::pow(w[3][0], 0.5)*K_02*K_22*det*w[3][0]*w[5][0];
    G[27] = 0.0625*std::pow(w[3][0], 0.5)*K_02*K_22*det*w[3][0]*w[5][0];
    G[28] = 0.03125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_00*K_22 + K_02*K_20);
    G[29] = 0.0625*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_00*K_22 + K_02*K_20);
    G[30] = 0.03125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_01*K_22 + K_02*K_21);
    G[31] = 0.0625*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_01*K_22 + K_02*K_21);
    G[32] = 0.125*std::pow(w[3][0], 0.5)*K_02*K_22*det*w[3][0]*w[5][0];
    G[33] = 0.03125*std::pow(w[3][0], 0.5)*K_00*K_20*det*w[3][0]*w[5][0];
    G[34] = 0.0625*std::pow(w[3][0], 0.5)*K_00*K_20*det*w[3][0]*w[5][0];
    G[35] = 0.03125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_00*K_21 + K_01*K_20);
    G[36] = 0.0625*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_00*K_21 + K_01*K_20);
    G[37] = 0.125*std::pow(w[3][0], 0.5)*K_00*K_20*det*w[3][0]*w[5][0];
    G[38] = 0.03125*std::pow(w[3][0], 0.5)*K_01*K_21*det*w[3][0]*w[5][0];
    G[39] = 0.0625*std::pow(w[3][0], 0.5)*K_01*K_21*det*w[3][0]*w[5][0];
    G[40] = 0.125*std::pow(w[3][0], 0.5)*K_01*K_21*det*w[3][0]*w[5][0];
    G[41] = 0.5*det*(K_00*K_20 + K_01*K_21 + K_02*K_22);
    G[42] = 0.5*std::pow(w[3][0], 0.5)*K_01*K_11*det*w[3][0]*w[5][0];
    G[43] = 0.5*det*w[3][0]*(std::pow(w[3][0], 0.5)*w[7][0]*(K_00*K_10 + K_01*K_11 + K_02*K_12) + w[11][0]*w[3][0]*w[6][0]*(K_00*K_10 + K_01*K_11 + K_02*K_12));
    G[44] = 0.03125*std::pow(w[3][0], 0.5)*K_02*K_12*det*w[3][0]*w[5][0];
    G[45] = 0.0625*std::pow(w[3][0], 0.5)*K_02*K_12*det*w[3][0]*w[5][0];
    G[46] = 0.03125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_00*K_12 + K_02*K_10);
    G[47] = 0.0625*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_00*K_12 + K_02*K_10);
    G[48] = 0.03125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_01*K_12 + K_02*K_11);
    G[49] = 0.0625*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_01*K_12 + K_02*K_11);
    G[50] = 0.125*std::pow(w[3][0], 0.5)*K_02*K_12*det*w[3][0]*w[5][0];
    G[51] = 0.03125*std::pow(w[3][0], 0.5)*K_00*K_10*det*w[3][0]*w[5][0];
    G[52] = 0.0625*std::pow(w[3][0], 0.5)*K_00*K_10*det*w[3][0]*w[5][0];
    G[53] = 0.03125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_00*K_11 + K_01*K_10);
    G[54] = 0.0625*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_00*K_11 + K_01*K_10);
    G[55] = 0.125*std::pow(w[3][0], 0.5)*K_00*K_10*det*w[3][0]*w[5][0];
    G[56] = 0.03125*std::pow(w[3][0], 0.5)*K_01*K_11*det*w[3][0]*w[5][0];
    G[57] = 0.0625*std::pow(w[3][0], 0.5)*K_01*K_11*det*w[3][0]*w[5][0];
    G[58] = 0.125*std::pow(w[3][0], 0.5)*K_01*K_11*det*w[3][0]*w[5][0];
    G[59] = 0.5*det*(K_00*K_10 + K_01*K_11 + K_02*K_12);
    G[60] = 0.5*std::pow(w[3][0], 0.5)*K_22*K_22*det*w[3][0]*w[5][0];
    G[61] = 0.5*det*w[3][0]*(std::pow(w[3][0], 0.5)*w[7][0]*(K_20*K_20 + K_21*K_21 + K_22*K_22) + w[11][0]*w[3][0]*w[6][0]*(K_20*K_20 + K_21*K_21 + K_22*K_22));
    G[62] = 0.03125*std::pow(w[3][0], 0.5)*K_22*K_22*det*w[3][0]*w[5][0];
    G[63] = 0.0625*std::pow(w[3][0], 0.5)*K_22*K_22*det*w[3][0]*w[5][0];
    G[64] = 0.0625*std::pow(w[3][0], 0.5)*K_20*K_22*det*w[3][0]*w[5][0];
    G[65] = 0.125*std::pow(w[3][0], 0.5)*K_20*K_22*det*w[3][0]*w[5][0];
    G[66] = 0.0625*std::pow(w[3][0], 0.5)*K_21*K_22*det*w[3][0]*w[5][0];
    G[67] = 0.125*std::pow(w[3][0], 0.5)*K_21*K_22*det*w[3][0]*w[5][0];
    G[68] = 0.125*std::pow(w[3][0], 0.5)*K_22*K_22*det*w[3][0]*w[5][0];
    G[69] = 0.03125*std::pow(w[3][0], 0.5)*K_20*K_20*det*w[3][0]*w[5][0];
    G[70] = 0.0625*std::pow(w[3][0], 0.5)*K_20*K_20*det*w[3][0]*w[5][0];
    G[71] = 0.0625*std::pow(w[3][0], 0.5)*K_20*K_21*det*w[3][0]*w[5][0];
    G[72] = 0.125*std::pow(w[3][0], 0.5)*K_20*K_21*det*w[3][0]*w[5][0];
    G[73] = 0.125*std::pow(w[3][0], 0.5)*K_20*K_20*det*w[3][0]*w[5][0];
    G[74] = 0.03125*std::pow(w[3][0], 0.5)*K_21*K_21*det*w[3][0]*w[5][0];
    G[75] = 0.0625*std::pow(w[3][0], 0.5)*K_21*K_21*det*w[3][0]*w[5][0];
    G[76] = 0.125*std::pow(w[3][0], 0.5)*K_21*K_21*det*w[3][0]*w[5][0];
    G[77] = 0.5*det*(K_20*K_20 + K_21*K_21 + K_22*K_22);
    G[78] = 0.5*std::pow(w[3][0], 0.5)*K_12*K_22*det*w[3][0]*w[5][0];
    G[79] = 0.5*det*w[3][0]*(std::pow(w[3][0], 0.5)*w[7][0]*(K_10*K_20 + K_11*K_21 + K_12*K_22) + w[11][0]*w[3][0]*w[6][0]*(K_10*K_20 + K_11*K_21 + K_12*K_22));
    G[80] = 0.03125*std::pow(w[3][0], 0.5)*K_12*K_22*det*w[3][0]*w[5][0];
    G[81] = 0.0625*std::pow(w[3][0], 0.5)*K_12*K_22*det*w[3][0]*w[5][0];
    G[82] = 0.03125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_10*K_22 + K_12*K_20);
    G[83] = 0.0625*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_10*K_22 + K_12*K_20);
    G[84] = 0.03125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_11*K_22 + K_12*K_21);
    G[85] = 0.0625*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_11*K_22 + K_12*K_21);
    G[86] = 0.125*std::pow(w[3][0], 0.5)*K_12*K_22*det*w[3][0]*w[5][0];
    G[87] = 0.03125*std::pow(w[3][0], 0.5)*K_10*K_20*det*w[3][0]*w[5][0];
    G[88] = 0.0625*std::pow(w[3][0], 0.5)*K_10*K_20*det*w[3][0]*w[5][0];
    G[89] = 0.03125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_10*K_21 + K_11*K_20);
    G[90] = 0.0625*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_10*K_21 + K_11*K_20);
    G[91] = 0.125*std::pow(w[3][0], 0.5)*K_10*K_20*det*w[3][0]*w[5][0];
    G[92] = 0.03125*std::pow(w[3][0], 0.5)*K_11*K_21*det*w[3][0]*w[5][0];
    G[93] = 0.0625*std::pow(w[3][0], 0.5)*K_11*K_21*det*w[3][0]*w[5][0];
    G[94] = 0.125*std::pow(w[3][0], 0.5)*K_11*K_21*det*w[3][0]*w[5][0];
    G[95] = 0.5*det*(K_10*K_20 + K_11*K_21 + K_12*K_22);
    G[96] = 0.5*std::pow(w[3][0], 0.5)*K_02*K_22*det*w[3][0]*w[5][0];
    G[97] = 0.5*std::pow(w[3][0], 0.5)*K_20*K_22*det*w[3][0]*w[5][0];
    G[98] = 0.5*std::pow(w[3][0], 0.5)*K_10*K_22*det*w[3][0]*w[5][0];
    G[99] = 0.5*std::pow(w[3][0], 0.5)*K_00*K_22*det*w[3][0]*w[5][0];
    G[100] = 0.5*std::pow(w[3][0], 0.5)*K_21*K_22*det*w[3][0]*w[5][0];
    G[101] = 0.5*std::pow(w[3][0], 0.5)*K_11*K_22*det*w[3][0]*w[5][0];
    G[102] = 0.5*std::pow(w[3][0], 0.5)*K_12*K_12*det*w[3][0]*w[5][0];
    G[103] = 0.5*det*w[3][0]*(std::pow(w[3][0], 0.5)*w[7][0]*(K_10*K_10 + K_11*K_11 + K_12*K_12) + w[11][0]*w[3][0]*w[6][0]*(K_10*K_10 + K_11*K_11 + K_12*K_12));
    G[104] = 0.03125*std::pow(w[3][0], 0.5)*K_12*K_12*det*w[3][0]*w[5][0];
    G[105] = 0.0625*std::pow(w[3][0], 0.5)*K_12*K_12*det*w[3][0]*w[5][0];
    G[106] = 0.0625*std::pow(w[3][0], 0.5)*K_10*K_12*det*w[3][0]*w[5][0];
    G[107] = 0.125*std::pow(w[3][0], 0.5)*K_10*K_12*det*w[3][0]*w[5][0];
    G[108] = 0.0625*std::pow(w[3][0], 0.5)*K_11*K_12*det*w[3][0]*w[5][0];
    G[109] = 0.125*std::pow(w[3][0], 0.5)*K_11*K_12*det*w[3][0]*w[5][0];
    G[110] = 0.125*std::pow(w[3][0], 0.5)*K_12*K_12*det*w[3][0]*w[5][0];
    G[111] = 0.03125*std::pow(w[3][0], 0.5)*K_10*K_10*det*w[3][0]*w[5][0];
    G[112] = 0.0625*std::pow(w[3][0], 0.5)*K_10*K_10*det*w[3][0]*w[5][0];
    G[113] = 0.0625*std::pow(w[3][0], 0.5)*K_10*K_11*det*w[3][0]*w[5][0];
    G[114] = 0.125*std::pow(w[3][0], 0.5)*K_10*K_11*det*w[3][0]*w[5][0];
    G[115] = 0.125*std::pow(w[3][0], 0.5)*K_10*K_10*det*w[3][0]*w[5][0];
    G[116] = 0.03125*std::pow(w[3][0], 0.5)*K_11*K_11*det*w[3][0]*w[5][0];
    G[117] = 0.0625*std::pow(w[3][0], 0.5)*K_11*K_11*det*w[3][0]*w[5][0];
    G[118] = 0.125*std::pow(w[3][0], 0.5)*K_11*K_11*det*w[3][0]*w[5][0];
    G[119] = 0.5*det*(K_10*K_10 + K_11*K_11 + K_12*K_12);
    G[120] = 0.5*std::pow(w[3][0], 0.5)*K_02*K_12*det*w[3][0]*w[5][0];
    G[121] = 0.5*std::pow(w[3][0], 0.5)*K_12*K_20*det*w[3][0]*w[5][0];
    G[122] = 0.5*std::pow(w[3][0], 0.5)*K_10*K_12*det*w[3][0]*w[5][0];
    G[123] = 0.5*std::pow(w[3][0], 0.5)*K_00*K_12*det*w[3][0]*w[5][0];
    G[124] = 0.5*std::pow(w[3][0], 0.5)*K_12*K_21*det*w[3][0]*w[5][0];
    G[125] = 0.5*std::pow(w[3][0], 0.5)*K_11*K_12*det*w[3][0]*w[5][0];
    G[126] = 0.5*std::pow(w[3][0], 0.5)*K_02*K_02*det*w[3][0]*w[5][0];
    G[127] = 0.5*std::pow(w[3][0], 0.5)*K_02*K_20*det*w[3][0]*w[5][0];
    G[128] = 0.5*std::pow(w[3][0], 0.5)*K_02*K_10*det*w[3][0]*w[5][0];
    G[129] = 0.5*std::pow(w[3][0], 0.5)*K_00*K_02*det*w[3][0]*w[5][0];
    G[130] = 0.5*std::pow(w[3][0], 0.5)*K_02*K_21*det*w[3][0]*w[5][0];
    G[131] = 0.5*std::pow(w[3][0], 0.5)*K_02*K_11*det*w[3][0]*w[5][0];
    G[132] = 0.5*std::pow(w[3][0], 0.5)*K_20*K_20*det*w[3][0]*w[5][0];
    G[133] = 0.5*std::pow(w[3][0], 0.5)*K_10*K_20*det*w[3][0]*w[5][0];
    G[134] = 0.5*std::pow(w[3][0], 0.5)*K_00*K_20*det*w[3][0]*w[5][0];
    G[135] = 0.5*std::pow(w[3][0], 0.5)*K_20*K_21*det*w[3][0]*w[5][0];
    G[136] = 0.5*std::pow(w[3][0], 0.5)*K_11*K_20*det*w[3][0]*w[5][0];
    G[137] = 0.5*std::pow(w[3][0], 0.5)*K_10*K_10*det*w[3][0]*w[5][0];
    G[138] = 0.5*std::pow(w[3][0], 0.5)*K_00*K_10*det*w[3][0]*w[5][0];
    G[139] = 0.5*std::pow(w[3][0], 0.5)*K_10*K_21*det*w[3][0]*w[5][0];
    G[140] = 0.5*std::pow(w[3][0], 0.5)*K_10*K_11*det*w[3][0]*w[5][0];
    G[141] = 0.5*std::pow(w[3][0], 0.5)*K_00*K_00*det*w[3][0]*w[5][0];
    G[142] = 0.5*std::pow(w[3][0], 0.5)*K_00*K_21*det*w[3][0]*w[5][0];
    G[143] = 0.5*std::pow(w[3][0], 0.5)*K_00*K_11*det*w[3][0]*w[5][0];
    G[144] = 0.5*std::pow(w[3][0], 0.5)*K_21*K_21*det*w[3][0]*w[5][0];
    G[145] = 0.5*std::pow(w[3][0], 0.5)*K_11*K_21*det*w[3][0]*w[5][0];
    G[146] = 0.5*std::pow(w[3][0], 0.5)*K_11*K_11*det*w[3][0]*w[5][0];
    G[147] = -0.125*std::pow(w[3][0], 0.5)*K_02*det*w[3][0]*w[5][0];
    G[148] = -0.25*std::pow(w[3][0], 0.5)*K_02*det*w[3][0]*w[5][0];
    G[149] = -0.125*std::pow(w[3][0], 0.5)*K_00*det*w[3][0]*w[5][0];
    G[150] = -0.25*std::pow(w[3][0], 0.5)*K_00*det*w[3][0]*w[5][0];
    G[151] = -0.125*std::pow(w[3][0], 0.5)*K_01*det*w[3][0]*w[5][0];
    G[152] = -0.25*std::pow(w[3][0], 0.5)*K_01*det*w[3][0]*w[5][0];
    G[153] = -0.125*std::pow(w[3][0], 0.5)*K_22*det*w[3][0]*w[5][0];
    G[154] = -0.25*std::pow(w[3][0], 0.5)*K_22*det*w[3][0]*w[5][0];
    G[155] = -0.125*std::pow(w[3][0], 0.5)*K_20*det*w[3][0]*w[5][0];
    G[156] = -0.25*std::pow(w[3][0], 0.5)*K_20*det*w[3][0]*w[5][0];
    G[157] = -0.125*std::pow(w[3][0], 0.5)*K_21*det*w[3][0]*w[5][0];
    G[158] = -0.25*std::pow(w[3][0], 0.5)*K_21*det*w[3][0]*w[5][0];
    G[159] = -0.125*std::pow(w[3][0], 0.5)*K_12*det*w[3][0]*w[5][0];
    G[160] = -0.25*std::pow(w[3][0], 0.5)*K_12*det*w[3][0]*w[5][0];
    G[161] = -0.125*std::pow(w[3][0], 0.5)*K_10*det*w[3][0]*w[5][0];
    G[162] = -0.25*std::pow(w[3][0], 0.5)*K_10*det*w[3][0]*w[5][0];
    G[163] = -0.125*std::pow(w[3][0], 0.5)*K_11*det*w[3][0]*w[5][0];
    G[164] = -0.25*std::pow(w[3][0], 0.5)*K_11*det*w[3][0]*w[5][0];
    G[165] = 0.125*K_22*det;
    G[166] = 0.125*K_20*det;
    G[167] = 0.125*K_21*det;
    G[168] = -0.125*K_20*det;
    G[169] = -0.125*K_21*det;
    G[170] = -0.125*K_22*det;
    G[171] = 0.125*K_12*det;
    G[172] = 0.125*K_10*det;
    G[173] = 0.125*K_11*det;
    G[174] = -0.125*K_10*det;
    G[175] = -0.125*K_11*det;
    G[176] = -0.125*K_12*det;
    G[177] = 0.125*K_02*det;
    G[178] = 0.125*K_00*det;
    G[179] = 0.125*K_01*det;
    G[180] = -0.125*K_00*det;
    G[181] = -0.125*K_01*det;
    G[182] = -0.125*K_02*det;
    G[183] = det/w[4][0];
    G[184] = 0.25*std::pow(w[3][0], 0.5)*K_02*K_12*det*w[3][0]*w[5][0];
    G[185] = 0.25*std::pow(w[3][0], 0.5)*K_02*K_22*det*w[3][0]*w[5][0];
    G[186] = 0.25*std::pow(w[3][0], 0.5)*K_02*K_02*det*w[3][0]*w[5][0];
    G[187] = 0.25*std::pow(w[3][0], 0.5)*K_12*K_22*det*w[3][0]*w[5][0];
    G[188] = 0.25*std::pow(w[3][0], 0.5)*K_12*K_12*det*w[3][0]*w[5][0];
    G[189] = 0.25*std::pow(w[3][0], 0.5)*K_22*K_22*det*w[3][0]*w[5][0];
    G[190] = 0.125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_00*K_12 + K_02*K_10);
    G[191] = 0.125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_00*K_22 + K_02*K_20);
    G[192] = 0.25*std::pow(w[3][0], 0.5)*K_00*K_02*det*w[3][0]*w[5][0];
    G[193] = 0.125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_10*K_22 + K_12*K_20);
    G[194] = 0.25*std::pow(w[3][0], 0.5)*K_10*K_12*det*w[3][0]*w[5][0];
    G[195] = 0.25*std::pow(w[3][0], 0.5)*K_20*K_22*det*w[3][0]*w[5][0];
    G[196] = 0.125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_01*K_12 + K_02*K_11);
    G[197] = 0.125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_01*K_22 + K_02*K_21);
    G[198] = 0.25*std::pow(w[3][0], 0.5)*K_01*K_02*det*w[3][0]*w[5][0];
    G[199] = 0.125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_11*K_22 + K_12*K_21);
    G[200] = 0.25*std::pow(w[3][0], 0.5)*K_11*K_12*det*w[3][0]*w[5][0];
    G[201] = 0.25*std::pow(w[3][0], 0.5)*K_21*K_22*det*w[3][0]*w[5][0];
    G[202] = 0.25*std::pow(w[3][0], 0.5)*K_00*K_10*det*w[3][0]*w[5][0];
    G[203] = 0.25*std::pow(w[3][0], 0.5)*K_00*K_20*det*w[3][0]*w[5][0];
    G[204] = 0.25*std::pow(w[3][0], 0.5)*K_00*K_00*det*w[3][0]*w[5][0];
    G[205] = 0.25*std::pow(w[3][0], 0.5)*K_10*K_20*det*w[3][0]*w[5][0];
    G[206] = 0.25*std::pow(w[3][0], 0.5)*K_10*K_10*det*w[3][0]*w[5][0];
    G[207] = 0.25*std::pow(w[3][0], 0.5)*K_20*K_20*det*w[3][0]*w[5][0];
    G[208] = 0.125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_00*K_11 + K_01*K_10);
    G[209] = 0.125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_00*K_21 + K_01*K_20);
    G[210] = 0.25*std::pow(w[3][0], 0.5)*K_00*K_01*det*w[3][0]*w[5][0];
    G[211] = 0.125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_10*K_21 + K_11*K_20);
    G[212] = 0.25*std::pow(w[3][0], 0.5)*K_10*K_11*det*w[3][0]*w[5][0];
    G[213] = 0.25*std::pow(w[3][0], 0.5)*K_20*K_21*det*w[3][0]*w[5][0];
    G[214] = 0.25*std::pow(w[3][0], 0.5)*K_01*K_11*det*w[3][0]*w[5][0];
    G[215] = 0.25*std::pow(w[3][0], 0.5)*K_01*K_21*det*w[3][0]*w[5][0];
    G[216] = 0.25*std::pow(w[3][0], 0.5)*K_01*K_01*det*w[3][0]*w[5][0];
    G[217] = 0.25*std::pow(w[3][0], 0.5)*K_11*K_21*det*w[3][0]*w[5][0];
    G[218] = 0.25*std::pow(w[3][0], 0.5)*K_11*K_11*det*w[3][0]*w[5][0];
    G[219] = 0.25*std::pow(w[3][0], 0.5)*K_21*K_21*det*w[3][0]*w[5][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 159348
    for (unsigned int ip = 0; ip < 14; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      double F13 = 0.0;
      double F14 = 0.0;
      double F15 = 0.0;
      double F16 = 0.0;
      double F17 = 0.0;
      double F18 = 0.0;
      double F19 = 0.0;
      double F20 = 0.0;
      double F21 = 0.0;
      double F22 = 0.0;
      double F23 = 0.0;
      double F24 = 0.0;
      double F25 = 0.0;
      double F26 = 0.0;
      double F27 = 0.0;
      double F28 = 0.0;
      double F29 = 0.0;
      double F30 = 0.0;
      double F31 = 0.0;
      double F32 = 0.0;
      double F33 = 0.0;
      double F34 = 0.0;
      double F35 = 0.0;
      double F36 = 0.0;
      double F37 = 0.0;
      double F38 = 0.0;
      double F39 = 0.0;
      double F40 = 0.0;
      double F41 = 0.0;
      
      // Total number of operations to compute function values = 96
      for (unsigned int r = 0; r < 2; r++)
      {
        F3 += FE0_D001[ip][r]*w[0][nzc6[r]];
        F4 += FE0_D001[ip][r]*w[0][nzc5[r]];
        F5 += FE0_D001[ip][r]*w[0][nzc4[r]];
        F6 += FE0_D001[ip][r]*w[8][nzc6[r]];
        F7 += FE0_D001[ip][r]*w[8][nzc5[r]];
        F8 += FE0_D001[ip][r]*w[8][nzc4[r]];
        F9 += FE0_D001[ip][r]*w[0][nzc10[r]];
        F10 += FE0_D001[ip][r]*w[0][nzc9[r]];
        F11 += FE0_D001[ip][r]*w[0][nzc8[r]];
        F12 += FE0_D001[ip][r]*w[8][nzc10[r]];
        F13 += FE0_D001[ip][r]*w[8][nzc9[r]];
        F14 += FE0_D001[ip][r]*w[8][nzc8[r]];
        F15 += FE0_D001[ip][r]*w[0][nzc14[r]];
        F16 += FE0_D001[ip][r]*w[0][nzc13[r]];
        F17 += FE0_D001[ip][r]*w[0][nzc12[r]];
        F18 += FE0_D001[ip][r]*w[8][nzc14[r]];
        F19 += FE0_D001[ip][r]*w[8][nzc13[r]];
        F20 += FE0_D001[ip][r]*w[8][nzc12[r]];
        F29 += FE0_D001[ip][r]*w[1][nzc2[r]];
        F30 += FE0_D001[ip][r]*w[1][nzc1[r]];
        F31 += FE0_D001[ip][r]*w[1][nzc0[r]];
        F32 += FE0_D001[ip][r]*w[9][nzc2[r]];
        F33 += FE0_D001[ip][r]*w[9][nzc1[r]];
        F34 += FE0_D001[ip][r]*w[9][nzc0[r]];
      }// end loop over 'r'
      
      // Total number of operations to compute function values = 144
      for (unsigned int r = 0; r < 4; r++)
      {
        F0 += FE0[ip][r]*w[0][nzc11[r]];
        F1 += FE0[ip][r]*w[0][nzc3[r]];
        F2 += FE0[ip][r]*w[0][nzc7[r]];
        F21 += FE0[ip][r]*w[1][r];
        F22 += FE0[ip][r]*w[9][r];
        F23 += FE0[ip][r]*w[8][nzc3[r]];
        F24 += FE0[ip][r]*w[8][nzc7[r]];
        F25 += FE0[ip][r]*w[8][nzc11[r]];
        F26 += FE0[ip][r]*w[10][nzc3[r]];
        F27 += FE0[ip][r]*w[10][nzc7[r]];
        F28 += FE0[ip][r]*w[10][nzc11[r]];
        F35 += FE0[ip][r]*w[12][nzc3[r]];
        F36 += FE0[ip][r]*w[13][nzc3[r]];
        F37 += FE0[ip][r]*w[12][nzc7[r]];
        F38 += FE0[ip][r]*w[13][nzc7[r]];
        F39 += FE0[ip][r]*w[12][nzc11[r]];
        F40 += FE0[ip][r]*w[13][nzc11[r]];
        F41 += FE0[ip][r]*w[2][r];
      }// end loop over 'r'
      double C[6];
      // Compute conditional, operations: 1.
      C[0] = (F0 < 0.0) ? -1.0 : 1.0;
      // Compute conditional, operations: 1.
      C[1] = (F0 == 0.0) ? 0.0 : C[0];
      // Compute conditional, operations: 1.
      C[2] = (F1 < 0.0) ? -1.0 : 1.0;
      // Compute conditional, operations: 1.
      C[3] = (F1 == 0.0) ? 0.0 : C[2];
      // Compute conditional, operations: 1.
      C[4] = (F2 < 0.0) ? -1.0 : 1.0;
      // Compute conditional, operations: 1.
      C[5] = (F2 == 0.0) ? 0.0 : C[4];
      
      // Number of operations to compute ip constants: 8868
      double I[84];
      // Number of operations: 150
      I[0] = W14[ip]*(G[0] + F21*F21*(F0*F0*G[2] + F1*(F0*G[4] + F1*G[9]) + F2*(F0*G[6] + F1*G[11] + F2*G[14]) + F23*(F0*G[4] + F1*G[10] + F2*G[11] + F23*G[9]) + F24*(F0*G[6] + F2*G[15] + F24*G[14] + G[11]*(F1 + F23)) + F25*(F0*G[3] + F25*G[2] + G[4]*(F1 + F23) + G[6]*(F2 + F24))) + F22*(F21*(F0*F0*G[3] + F1*(F0*G[5] + F1*G[10]) + F2*(F0*G[7] + F1*G[12] + F2*G[15]) + F23*(F0*G[5] + F1*G[13] + F2*G[12] + F23*G[10]) + F24*(F0*G[7] + F2*G[16] + F24*G[15] + G[12]*(F1 + F23)) + F25*(F0*G[8] + F25*G[3] + G[5]*(F1 + F23) + G[7]*(F2 + F24))) + F22*(F0*F0*G[2] + F1*(F0*G[4] + F1*G[9]) + F2*(F0*G[6] + F1*G[11] + F2*G[14]) + F23*(F0*G[4] + F1*G[10] + F2*G[11] + F23*G[9]) + F24*(F0*G[6] + F2*G[15] + F24*G[14] + G[11]*(F1 + F23)) + F25*(F0*G[3] + F25*G[2] + G[4]*(F1 + F23) + G[6]*(F2 + F24)))) + F41*G[17] + G[1]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 1
      I[1] = G[18]*W14[ip];
      
      // Number of operations: 1
      I[2] = G[19]*W14[ip];
      
      // Number of operations: 1
      I[3] = G[20]*W14[ip];
      
      // Number of operations: 1
      I[4] = G[21]*W14[ip];
      
      // Number of operations: 1
      I[5] = G[22]*W14[ip];
      
      // Number of operations: 1
      I[6] = G[23]*W14[ip];
      
      // Number of operations: 150
      I[7] = W14[ip]*(G[24] + F21*F21*(F0*F0*G[26] + F1*(F0*G[28] + F1*G[33]) + F2*(F0*G[30] + F1*G[35] + F2*G[38]) + F23*(F0*G[28] + F1*G[34] + F2*G[35] + F23*G[33]) + F24*(F0*G[30] + F2*G[39] + F24*G[38] + G[35]*(F1 + F23)) + F25*(F0*G[27] + F25*G[26] + G[28]*(F1 + F23) + G[30]*(F2 + F24))) + F22*(F21*(F0*F0*G[27] + F1*(F0*G[29] + F1*G[34]) + F2*(F0*G[31] + F1*G[36] + F2*G[39]) + F23*(F0*G[29] + F1*G[37] + F2*G[36] + F23*G[34]) + F24*(F0*G[31] + F2*G[40] + F24*G[39] + G[36]*(F1 + F23)) + F25*(F0*G[32] + F25*G[27] + G[29]*(F1 + F23) + G[31]*(F2 + F24))) + F22*(F0*F0*G[26] + F1*(F0*G[28] + F1*G[33]) + F2*(F0*G[30] + F1*G[35] + F2*G[38]) + F23*(F0*G[28] + F1*G[34] + F2*G[35] + F23*G[33]) + F24*(F0*G[30] + F2*G[39] + F24*G[38] + G[35]*(F1 + F23)) + F25*(F0*G[27] + F25*G[26] + G[28]*(F1 + F23) + G[30]*(F2 + F24)))) + F41*G[41] + G[25]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 150
      I[8] = W14[ip]*(G[42] + F21*F21*(F0*F0*G[44] + F1*(F0*G[46] + F1*G[51]) + F2*(F0*G[48] + F1*G[53] + F2*G[56]) + F23*(F0*G[46] + F1*G[52] + F2*G[53] + F23*G[51]) + F24*(F0*G[48] + F2*G[57] + F24*G[56] + G[53]*(F1 + F23)) + F25*(F0*G[45] + F25*G[44] + G[46]*(F1 + F23) + G[48]*(F2 + F24))) + F22*(F21*(F0*F0*G[45] + F1*(F0*G[47] + F1*G[52]) + F2*(F0*G[49] + F1*G[54] + F2*G[57]) + F23*(F0*G[47] + F1*G[55] + F2*G[54] + F23*G[52]) + F24*(F0*G[49] + F2*G[58] + F24*G[57] + G[54]*(F1 + F23)) + F25*(F0*G[50] + F25*G[45] + G[47]*(F1 + F23) + G[49]*(F2 + F24))) + F22*(F0*F0*G[44] + F1*(F0*G[46] + F1*G[51]) + F2*(F0*G[48] + F1*G[53] + F2*G[56]) + F23*(F0*G[46] + F1*G[52] + F2*G[53] + F23*G[51]) + F24*(F0*G[48] + F2*G[57] + F24*G[56] + G[53]*(F1 + F23)) + F25*(F0*G[45] + F25*G[44] + G[46]*(F1 + F23) + G[48]*(F2 + F24)))) + F41*G[59] + G[43]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 150
      I[9] = W14[ip]*(G[60] + F21*F21*(F0*F0*G[62] + F1*(F0*G[64] + F1*G[69]) + F2*(F0*G[66] + F1*G[71] + F2*G[74]) + F23*(F0*G[64] + F1*G[70] + F2*G[71] + F23*G[69]) + F24*(F0*G[66] + F2*G[75] + F24*G[74] + G[71]*(F1 + F23)) + F25*(F0*G[63] + F25*G[62] + G[64]*(F1 + F23) + G[66]*(F2 + F24))) + F22*(F21*(F0*F0*G[63] + F1*(F0*G[65] + F1*G[70]) + F2*(F0*G[67] + F1*G[72] + F2*G[75]) + F23*(F0*G[65] + F1*G[73] + F2*G[72] + F23*G[70]) + F24*(F0*G[67] + F2*G[76] + F24*G[75] + G[72]*(F1 + F23)) + F25*(F0*G[68] + F25*G[63] + G[65]*(F1 + F23) + G[67]*(F2 + F24))) + F22*(F0*F0*G[62] + F1*(F0*G[64] + F1*G[69]) + F2*(F0*G[66] + F1*G[71] + F2*G[74]) + F23*(F0*G[64] + F1*G[70] + F2*G[71] + F23*G[69]) + F24*(F0*G[66] + F2*G[75] + F24*G[74] + G[71]*(F1 + F23)) + F25*(F0*G[63] + F25*G[62] + G[64]*(F1 + F23) + G[66]*(F2 + F24)))) + F41*G[77] + G[61]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 150
      I[10] = W14[ip]*(G[78] + F21*F21*(F0*F0*G[80] + F1*(F0*G[82] + F1*G[87]) + F2*(F0*G[84] + F1*G[89] + F2*G[92]) + F23*(F0*G[82] + F1*G[88] + F2*G[89] + F23*G[87]) + F24*(F0*G[84] + F2*G[93] + F24*G[92] + G[89]*(F1 + F23)) + F25*(F0*G[81] + F25*G[80] + G[82]*(F1 + F23) + G[84]*(F2 + F24))) + F22*(F21*(F0*F0*G[81] + F1*(F0*G[83] + F1*G[88]) + F2*(F0*G[85] + F1*G[90] + F2*G[93]) + F23*(F0*G[83] + F1*G[91] + F2*G[90] + F23*G[88]) + F24*(F0*G[85] + F2*G[94] + F24*G[93] + G[90]*(F1 + F23)) + F25*(F0*G[86] + F25*G[81] + G[83]*(F1 + F23) + G[85]*(F2 + F24))) + F22*(F0*F0*G[80] + F1*(F0*G[82] + F1*G[87]) + F2*(F0*G[84] + F1*G[89] + F2*G[92]) + F23*(F0*G[82] + F1*G[88] + F2*G[89] + F23*G[87]) + F24*(F0*G[84] + F2*G[93] + F24*G[92] + G[89]*(F1 + F23)) + F25*(F0*G[81] + F25*G[80] + G[82]*(F1 + F23) + G[84]*(F2 + F24)))) + F41*G[95] + G[79]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 150
      I[11] = W14[ip]*(G[96] + F21*F21*(F0*F0*G[26] + F1*(F0*G[28] + F1*G[33]) + F2*(F0*G[30] + F1*G[35] + F2*G[38]) + F23*(F0*G[28] + F1*G[34] + F2*G[35] + F23*G[33]) + F24*(F0*G[30] + F2*G[39] + F24*G[38] + G[35]*(F1 + F23)) + F25*(F0*G[27] + F25*G[26] + G[28]*(F1 + F23) + G[30]*(F2 + F24))) + F22*(F21*(F0*F0*G[27] + F1*(F0*G[29] + F1*G[34]) + F2*(F0*G[31] + F1*G[36] + F2*G[39]) + F23*(F0*G[29] + F1*G[37] + F2*G[36] + F23*G[34]) + F24*(F0*G[31] + F2*G[40] + F24*G[39] + G[36]*(F1 + F23)) + F25*(F0*G[32] + F25*G[27] + G[29]*(F1 + F23) + G[31]*(F2 + F24))) + F22*(F0*F0*G[26] + F1*(F0*G[28] + F1*G[33]) + F2*(F0*G[30] + F1*G[35] + F2*G[38]) + F23*(F0*G[28] + F1*G[34] + F2*G[35] + F23*G[33]) + F24*(F0*G[30] + F2*G[39] + F24*G[38] + G[35]*(F1 + F23)) + F25*(F0*G[27] + F25*G[26] + G[28]*(F1 + F23) + G[30]*(F2 + F24)))) + F41*G[41] + G[25]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 1
      I[12] = G[97]*W14[ip];
      
      // Number of operations: 1
      I[13] = G[98]*W14[ip];
      
      // Number of operations: 1
      I[14] = G[99]*W14[ip];
      
      // Number of operations: 1
      I[15] = G[100]*W14[ip];
      
      // Number of operations: 1
      I[16] = G[101]*W14[ip];
      
      // Number of operations: 150
      I[17] = W14[ip]*(G[102] + F21*F21*(F0*F0*G[104] + F1*(F0*G[106] + F1*G[111]) + F2*(F0*G[108] + F1*G[113] + F2*G[116]) + F23*(F0*G[106] + F1*G[112] + F2*G[113] + F23*G[111]) + F24*(F0*G[108] + F2*G[117] + F24*G[116] + G[113]*(F1 + F23)) + F25*(F0*G[105] + F25*G[104] + G[106]*(F1 + F23) + G[108]*(F2 + F24))) + F22*(F21*(F0*F0*G[105] + F1*(F0*G[107] + F1*G[112]) + F2*(F0*G[109] + F1*G[114] + F2*G[117]) + F23*(F0*G[107] + F1*G[115] + F2*G[114] + F23*G[112]) + F24*(F0*G[109] + F2*G[118] + F24*G[117] + G[114]*(F1 + F23)) + F25*(F0*G[110] + F25*G[105] + G[107]*(F1 + F23) + G[109]*(F2 + F24))) + F22*(F0*F0*G[104] + F1*(F0*G[106] + F1*G[111]) + F2*(F0*G[108] + F1*G[113] + F2*G[116]) + F23*(F0*G[106] + F1*G[112] + F2*G[113] + F23*G[111]) + F24*(F0*G[108] + F2*G[117] + F24*G[116] + G[113]*(F1 + F23)) + F25*(F0*G[105] + F25*G[104] + G[106]*(F1 + F23) + G[108]*(F2 + F24)))) + F41*G[119] + G[103]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 150
      I[18] = W14[ip]*(G[120] + F21*F21*(F0*F0*G[44] + F1*(F0*G[46] + F1*G[51]) + F2*(F0*G[48] + F1*G[53] + F2*G[56]) + F23*(F0*G[46] + F1*G[52] + F2*G[53] + F23*G[51]) + F24*(F0*G[48] + F2*G[57] + F24*G[56] + G[53]*(F1 + F23)) + F25*(F0*G[45] + F25*G[44] + G[46]*(F1 + F23) + G[48]*(F2 + F24))) + F22*(F21*(F0*F0*G[45] + F1*(F0*G[47] + F1*G[52]) + F2*(F0*G[49] + F1*G[54] + F2*G[57]) + F23*(F0*G[47] + F1*G[55] + F2*G[54] + F23*G[52]) + F24*(F0*G[49] + F2*G[58] + F24*G[57] + G[54]*(F1 + F23)) + F25*(F0*G[50] + F25*G[45] + G[47]*(F1 + F23) + G[49]*(F2 + F24))) + F22*(F0*F0*G[44] + F1*(F0*G[46] + F1*G[51]) + F2*(F0*G[48] + F1*G[53] + F2*G[56]) + F23*(F0*G[46] + F1*G[52] + F2*G[53] + F23*G[51]) + F24*(F0*G[48] + F2*G[57] + F24*G[56] + G[53]*(F1 + F23)) + F25*(F0*G[45] + F25*G[44] + G[46]*(F1 + F23) + G[48]*(F2 + F24)))) + F41*G[59] + G[43]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 1
      I[19] = G[121]*W14[ip];
      
      // Number of operations: 1
      I[20] = G[122]*W14[ip];
      
      // Number of operations: 1
      I[21] = G[123]*W14[ip];
      
      // Number of operations: 1
      I[22] = G[124]*W14[ip];
      
      // Number of operations: 1
      I[23] = G[125]*W14[ip];
      
      // Number of operations: 150
      I[24] = W14[ip]*(G[126] + F21*F21*(F0*F0*G[2] + F1*(F0*G[4] + F1*G[9]) + F2*(F0*G[6] + F1*G[11] + F2*G[14]) + F23*(F0*G[4] + F1*G[10] + F2*G[11] + F23*G[9]) + F24*(F0*G[6] + F2*G[15] + F24*G[14] + G[11]*(F1 + F23)) + F25*(F0*G[3] + F25*G[2] + G[4]*(F1 + F23) + G[6]*(F2 + F24))) + F22*(F21*(F0*F0*G[3] + F1*(F0*G[5] + F1*G[10]) + F2*(F0*G[7] + F1*G[12] + F2*G[15]) + F23*(F0*G[5] + F1*G[13] + F2*G[12] + F23*G[10]) + F24*(F0*G[7] + F2*G[16] + F24*G[15] + G[12]*(F1 + F23)) + F25*(F0*G[8] + F25*G[3] + G[5]*(F1 + F23) + G[7]*(F2 + F24))) + F22*(F0*F0*G[2] + F1*(F0*G[4] + F1*G[9]) + F2*(F0*G[6] + F1*G[11] + F2*G[14]) + F23*(F0*G[4] + F1*G[10] + F2*G[11] + F23*G[9]) + F24*(F0*G[6] + F2*G[15] + F24*G[14] + G[11]*(F1 + F23)) + F25*(F0*G[3] + F25*G[2] + G[4]*(F1 + F23) + G[6]*(F2 + F24)))) + F41*G[17] + G[1]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 1
      I[25] = G[127]*W14[ip];
      
      // Number of operations: 1
      I[26] = G[128]*W14[ip];
      
      // Number of operations: 1
      I[27] = G[129]*W14[ip];
      
      // Number of operations: 1
      I[28] = G[130]*W14[ip];
      
      // Number of operations: 1
      I[29] = G[131]*W14[ip];
      
      // Number of operations: 150
      I[30] = W14[ip]*(G[132] + F21*F21*(F0*F0*G[62] + F1*(F0*G[64] + F1*G[69]) + F2*(F0*G[66] + F1*G[71] + F2*G[74]) + F23*(F0*G[64] + F1*G[70] + F2*G[71] + F23*G[69]) + F24*(F0*G[66] + F2*G[75] + F24*G[74] + G[71]*(F1 + F23)) + F25*(F0*G[63] + F25*G[62] + G[64]*(F1 + F23) + G[66]*(F2 + F24))) + F22*(F21*(F0*F0*G[63] + F1*(F0*G[65] + F1*G[70]) + F2*(F0*G[67] + F1*G[72] + F2*G[75]) + F23*(F0*G[65] + F1*G[73] + F2*G[72] + F23*G[70]) + F24*(F0*G[67] + F2*G[76] + F24*G[75] + G[72]*(F1 + F23)) + F25*(F0*G[68] + F25*G[63] + G[65]*(F1 + F23) + G[67]*(F2 + F24))) + F22*(F0*F0*G[62] + F1*(F0*G[64] + F1*G[69]) + F2*(F0*G[66] + F1*G[71] + F2*G[74]) + F23*(F0*G[64] + F1*G[70] + F2*G[71] + F23*G[69]) + F24*(F0*G[66] + F2*G[75] + F24*G[74] + G[71]*(F1 + F23)) + F25*(F0*G[63] + F25*G[62] + G[64]*(F1 + F23) + G[66]*(F2 + F24)))) + F41*G[77] + G[61]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 150
      I[31] = W14[ip]*(G[133] + F21*F21*(F0*F0*G[80] + F1*(F0*G[82] + F1*G[87]) + F2*(F0*G[84] + F1*G[89] + F2*G[92]) + F23*(F0*G[82] + F1*G[88] + F2*G[89] + F23*G[87]) + F24*(F0*G[84] + F2*G[93] + F24*G[92] + G[89]*(F1 + F23)) + F25*(F0*G[81] + F25*G[80] + G[82]*(F1 + F23) + G[84]*(F2 + F24))) + F22*(F21*(F0*F0*G[81] + F1*(F0*G[83] + F1*G[88]) + F2*(F0*G[85] + F1*G[90] + F2*G[93]) + F23*(F0*G[83] + F1*G[91] + F2*G[90] + F23*G[88]) + F24*(F0*G[85] + F2*G[94] + F24*G[93] + G[90]*(F1 + F23)) + F25*(F0*G[86] + F25*G[81] + G[83]*(F1 + F23) + G[85]*(F2 + F24))) + F22*(F0*F0*G[80] + F1*(F0*G[82] + F1*G[87]) + F2*(F0*G[84] + F1*G[89] + F2*G[92]) + F23*(F0*G[82] + F1*G[88] + F2*G[89] + F23*G[87]) + F24*(F0*G[84] + F2*G[93] + F24*G[92] + G[89]*(F1 + F23)) + F25*(F0*G[81] + F25*G[80] + G[82]*(F1 + F23) + G[84]*(F2 + F24)))) + F41*G[95] + G[79]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 150
      I[32] = W14[ip]*(G[134] + F21*F21*(F0*F0*G[26] + F1*(F0*G[28] + F1*G[33]) + F2*(F0*G[30] + F1*G[35] + F2*G[38]) + F23*(F0*G[28] + F1*G[34] + F2*G[35] + F23*G[33]) + F24*(F0*G[30] + F2*G[39] + F24*G[38] + G[35]*(F1 + F23)) + F25*(F0*G[27] + F25*G[26] + G[28]*(F1 + F23) + G[30]*(F2 + F24))) + F22*(F21*(F0*F0*G[27] + F1*(F0*G[29] + F1*G[34]) + F2*(F0*G[31] + F1*G[36] + F2*G[39]) + F23*(F0*G[29] + F1*G[37] + F2*G[36] + F23*G[34]) + F24*(F0*G[31] + F2*G[40] + F24*G[39] + G[36]*(F1 + F23)) + F25*(F0*G[32] + F25*G[27] + G[29]*(F1 + F23) + G[31]*(F2 + F24))) + F22*(F0*F0*G[26] + F1*(F0*G[28] + F1*G[33]) + F2*(F0*G[30] + F1*G[35] + F2*G[38]) + F23*(F0*G[28] + F1*G[34] + F2*G[35] + F23*G[33]) + F24*(F0*G[30] + F2*G[39] + F24*G[38] + G[35]*(F1 + F23)) + F25*(F0*G[27] + F25*G[26] + G[28]*(F1 + F23) + G[30]*(F2 + F24)))) + F41*G[41] + G[25]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 1
      I[33] = G[135]*W14[ip];
      
      // Number of operations: 1
      I[34] = G[136]*W14[ip];
      
      // Number of operations: 150
      I[35] = W14[ip]*(G[137] + F21*F21*(F0*F0*G[104] + F1*(F0*G[106] + F1*G[111]) + F2*(F0*G[108] + F1*G[113] + F2*G[116]) + F23*(F0*G[106] + F1*G[112] + F2*G[113] + F23*G[111]) + F24*(F0*G[108] + F2*G[117] + F24*G[116] + G[113]*(F1 + F23)) + F25*(F0*G[105] + F25*G[104] + G[106]*(F1 + F23) + G[108]*(F2 + F24))) + F22*(F21*(F0*F0*G[105] + F1*(F0*G[107] + F1*G[112]) + F2*(F0*G[109] + F1*G[114] + F2*G[117]) + F23*(F0*G[107] + F1*G[115] + F2*G[114] + F23*G[112]) + F24*(F0*G[109] + F2*G[118] + F24*G[117] + G[114]*(F1 + F23)) + F25*(F0*G[110] + F25*G[105] + G[107]*(F1 + F23) + G[109]*(F2 + F24))) + F22*(F0*F0*G[104] + F1*(F0*G[106] + F1*G[111]) + F2*(F0*G[108] + F1*G[113] + F2*G[116]) + F23*(F0*G[106] + F1*G[112] + F2*G[113] + F23*G[111]) + F24*(F0*G[108] + F2*G[117] + F24*G[116] + G[113]*(F1 + F23)) + F25*(F0*G[105] + F25*G[104] + G[106]*(F1 + F23) + G[108]*(F2 + F24)))) + F41*G[119] + G[103]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 150
      I[36] = W14[ip]*(G[138] + F21*F21*(F0*F0*G[44] + F1*(F0*G[46] + F1*G[51]) + F2*(F0*G[48] + F1*G[53] + F2*G[56]) + F23*(F0*G[46] + F1*G[52] + F2*G[53] + F23*G[51]) + F24*(F0*G[48] + F2*G[57] + F24*G[56] + G[53]*(F1 + F23)) + F25*(F0*G[45] + F25*G[44] + G[46]*(F1 + F23) + G[48]*(F2 + F24))) + F22*(F21*(F0*F0*G[45] + F1*(F0*G[47] + F1*G[52]) + F2*(F0*G[49] + F1*G[54] + F2*G[57]) + F23*(F0*G[47] + F1*G[55] + F2*G[54] + F23*G[52]) + F24*(F0*G[49] + F2*G[58] + F24*G[57] + G[54]*(F1 + F23)) + F25*(F0*G[50] + F25*G[45] + G[47]*(F1 + F23) + G[49]*(F2 + F24))) + F22*(F0*F0*G[44] + F1*(F0*G[46] + F1*G[51]) + F2*(F0*G[48] + F1*G[53] + F2*G[56]) + F23*(F0*G[46] + F1*G[52] + F2*G[53] + F23*G[51]) + F24*(F0*G[48] + F2*G[57] + F24*G[56] + G[53]*(F1 + F23)) + F25*(F0*G[45] + F25*G[44] + G[46]*(F1 + F23) + G[48]*(F2 + F24)))) + F41*G[59] + G[43]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 1
      I[37] = G[139]*W14[ip];
      
      // Number of operations: 1
      I[38] = G[140]*W14[ip];
      
      // Number of operations: 150
      I[39] = W14[ip]*(G[141] + F21*F21*(F0*F0*G[2] + F1*(F0*G[4] + F1*G[9]) + F2*(F0*G[6] + F1*G[11] + F2*G[14]) + F23*(F0*G[4] + F1*G[10] + F2*G[11] + F23*G[9]) + F24*(F0*G[6] + F2*G[15] + F24*G[14] + G[11]*(F1 + F23)) + F25*(F0*G[3] + F25*G[2] + G[4]*(F1 + F23) + G[6]*(F2 + F24))) + F22*(F21*(F0*F0*G[3] + F1*(F0*G[5] + F1*G[10]) + F2*(F0*G[7] + F1*G[12] + F2*G[15]) + F23*(F0*G[5] + F1*G[13] + F2*G[12] + F23*G[10]) + F24*(F0*G[7] + F2*G[16] + F24*G[15] + G[12]*(F1 + F23)) + F25*(F0*G[8] + F25*G[3] + G[5]*(F1 + F23) + G[7]*(F2 + F24))) + F22*(F0*F0*G[2] + F1*(F0*G[4] + F1*G[9]) + F2*(F0*G[6] + F1*G[11] + F2*G[14]) + F23*(F0*G[4] + F1*G[10] + F2*G[11] + F23*G[9]) + F24*(F0*G[6] + F2*G[15] + F24*G[14] + G[11]*(F1 + F23)) + F25*(F0*G[3] + F25*G[2] + G[4]*(F1 + F23) + G[6]*(F2 + F24)))) + F41*G[17] + G[1]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 1
      I[40] = G[142]*W14[ip];
      
      // Number of operations: 1
      I[41] = G[143]*W14[ip];
      
      // Number of operations: 150
      I[42] = W14[ip]*(G[144] + F21*F21*(F0*F0*G[62] + F1*(F0*G[64] + F1*G[69]) + F2*(F0*G[66] + F1*G[71] + F2*G[74]) + F23*(F0*G[64] + F1*G[70] + F2*G[71] + F23*G[69]) + F24*(F0*G[66] + F2*G[75] + F24*G[74] + G[71]*(F1 + F23)) + F25*(F0*G[63] + F25*G[62] + G[64]*(F1 + F23) + G[66]*(F2 + F24))) + F22*(F21*(F0*F0*G[63] + F1*(F0*G[65] + F1*G[70]) + F2*(F0*G[67] + F1*G[72] + F2*G[75]) + F23*(F0*G[65] + F1*G[73] + F2*G[72] + F23*G[70]) + F24*(F0*G[67] + F2*G[76] + F24*G[75] + G[72]*(F1 + F23)) + F25*(F0*G[68] + F25*G[63] + G[65]*(F1 + F23) + G[67]*(F2 + F24))) + F22*(F0*F0*G[62] + F1*(F0*G[64] + F1*G[69]) + F2*(F0*G[66] + F1*G[71] + F2*G[74]) + F23*(F0*G[64] + F1*G[70] + F2*G[71] + F23*G[69]) + F24*(F0*G[66] + F2*G[75] + F24*G[74] + G[71]*(F1 + F23)) + F25*(F0*G[63] + F25*G[62] + G[64]*(F1 + F23) + G[66]*(F2 + F24)))) + F41*G[77] + G[61]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 150
      I[43] = W14[ip]*(G[145] + F21*F21*(F0*F0*G[80] + F1*(F0*G[82] + F1*G[87]) + F2*(F0*G[84] + F1*G[89] + F2*G[92]) + F23*(F0*G[82] + F1*G[88] + F2*G[89] + F23*G[87]) + F24*(F0*G[84] + F2*G[93] + F24*G[92] + G[89]*(F1 + F23)) + F25*(F0*G[81] + F25*G[80] + G[82]*(F1 + F23) + G[84]*(F2 + F24))) + F22*(F21*(F0*F0*G[81] + F1*(F0*G[83] + F1*G[88]) + F2*(F0*G[85] + F1*G[90] + F2*G[93]) + F23*(F0*G[83] + F1*G[91] + F2*G[90] + F23*G[88]) + F24*(F0*G[85] + F2*G[94] + F24*G[93] + G[90]*(F1 + F23)) + F25*(F0*G[86] + F25*G[81] + G[83]*(F1 + F23) + G[85]*(F2 + F24))) + F22*(F0*F0*G[80] + F1*(F0*G[82] + F1*G[87]) + F2*(F0*G[84] + F1*G[89] + F2*G[92]) + F23*(F0*G[82] + F1*G[88] + F2*G[89] + F23*G[87]) + F24*(F0*G[84] + F2*G[93] + F24*G[92] + G[89]*(F1 + F23)) + F25*(F0*G[81] + F25*G[80] + G[82]*(F1 + F23) + G[84]*(F2 + F24)))) + F41*G[95] + G[79]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 150
      I[44] = W14[ip]*(G[146] + F21*F21*(F0*F0*G[104] + F1*(F0*G[106] + F1*G[111]) + F2*(F0*G[108] + F1*G[113] + F2*G[116]) + F23*(F0*G[106] + F1*G[112] + F2*G[113] + F23*G[111]) + F24*(F0*G[108] + F2*G[117] + F24*G[116] + G[113]*(F1 + F23)) + F25*(F0*G[105] + F25*G[104] + G[106]*(F1 + F23) + G[108]*(F2 + F24))) + F22*(F21*(F0*F0*G[105] + F1*(F0*G[107] + F1*G[112]) + F2*(F0*G[109] + F1*G[114] + F2*G[117]) + F23*(F0*G[107] + F1*G[115] + F2*G[114] + F23*G[112]) + F24*(F0*G[109] + F2*G[118] + F24*G[117] + G[114]*(F1 + F23)) + F25*(F0*G[110] + F25*G[105] + G[107]*(F1 + F23) + G[109]*(F2 + F24))) + F22*(F0*F0*G[104] + F1*(F0*G[106] + F1*G[111]) + F2*(F0*G[108] + F1*G[113] + F2*G[116]) + F23*(F0*G[106] + F1*G[112] + F2*G[113] + F23*G[111]) + F24*(F0*G[108] + F2*G[117] + F24*G[116] + G[113]*(F1 + F23)) + F25*(F0*G[105] + F25*G[104] + G[106]*(F1 + F23) + G[108]*(F2 + F24)))) + F41*G[119] + G[103]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 201
      I[45] = W14[ip]*(C[1]*(G[1]*(F12 + F9) + G[25]*(F11 + F14) + G[43]*(F10 + F13)) + F21*F21*(F10*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F11*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)) + F12*(G[3]*(F0 + F25) + G[4]*(F1 + F23) + G[6]*(F2 + F24)) + F13*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F14*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)) + F27*G[147] + F9*(G[3]*(F0 + F25) + G[4]*(F1 + F23) + G[6]*(F2 + F24))) + F22*(F21*(F10*(G[47]*(F1 + F23) + G[49]*(F2 + F24) + G[50]*(F0 + F25)) + F11*(G[29]*(F1 + F23) + G[31]*(F2 + F24) + G[32]*(F0 + F25)) + F12*(G[5]*(F1 + F23) + G[7]*(F2 + F24) + G[8]*(F0 + F25)) + F13*(G[47]*(F1 + F23) + G[49]*(F2 + F24) + G[50]*(F0 + F25)) + F14*(G[29]*(F1 + F23) + G[31]*(F2 + F24) + G[32]*(F0 + F25)) + F27*G[148] + F9*(G[5]*(F1 + F23) + G[7]*(F2 + F24) + G[8]*(F0 + F25))) + F22*(F10*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F11*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)) + F12*(G[3]*(F0 + F25) + G[4]*(F1 + F23) + G[6]*(F2 + F24)) + F13*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F14*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)) + F27*G[147] + F9*(G[3]*(F0 + F25) + G[4]*(F1 + F23) + G[6]*(F2 + F24)))));
      
      // Number of operations: 201
      I[46] = W14[ip]*(C[3]*(G[1]*(F12 + F9) + G[25]*(F11 + F14) + G[43]*(F10 + F13)) + F21*F21*(F10*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F11*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)) + F12*(G[10]*(F1 + F23) + G[11]*(F2 + F24) + G[4]*(F0 + F25)) + F13*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F14*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)) + F27*G[149] + F9*(G[10]*(F1 + F23) + G[11]*(F2 + F24) + G[4]*(F0 + F25))) + F22*(F21*(F10*(G[47]*(F0 + F25) + G[54]*(F2 + F24) + G[55]*(F1 + F23)) + F11*(G[29]*(F0 + F25) + G[36]*(F2 + F24) + G[37]*(F1 + F23)) + F12*(G[12]*(F2 + F24) + G[13]*(F1 + F23) + G[5]*(F0 + F25)) + F13*(G[47]*(F0 + F25) + G[54]*(F2 + F24) + G[55]*(F1 + F23)) + F14*(G[29]*(F0 + F25) + G[36]*(F2 + F24) + G[37]*(F1 + F23)) + F27*G[150] + F9*(G[12]*(F2 + F24) + G[13]*(F1 + F23) + G[5]*(F0 + F25))) + F22*(F10*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F11*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)) + F12*(G[10]*(F1 + F23) + G[11]*(F2 + F24) + G[4]*(F0 + F25)) + F13*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F14*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)) + F27*G[149] + F9*(G[10]*(F1 + F23) + G[11]*(F2 + F24) + G[4]*(F0 + F25)))));
      
      // Number of operations: 201
      I[47] = W14[ip]*(C[5]*(G[1]*(F12 + F9) + G[25]*(F11 + F14) + G[43]*(F10 + F13)) + F21*F21*(F10*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F11*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)) + F12*(G[11]*(F1 + F23) + G[15]*(F2 + F24) + G[6]*(F0 + F25)) + F13*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F14*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)) + F27*G[151] + F9*(G[11]*(F1 + F23) + G[15]*(F2 + F24) + G[6]*(F0 + F25))) + F22*(F21*(F10*(G[49]*(F0 + F25) + G[54]*(F1 + F23) + G[58]*(F2 + F24)) + F11*(G[31]*(F0 + F25) + G[36]*(F1 + F23) + G[40]*(F2 + F24)) + F12*(G[12]*(F1 + F23) + G[16]*(F2 + F24) + G[7]*(F0 + F25)) + F13*(G[49]*(F0 + F25) + G[54]*(F1 + F23) + G[58]*(F2 + F24)) + F14*(G[31]*(F0 + F25) + G[36]*(F1 + F23) + G[40]*(F2 + F24)) + F27*G[152] + F9*(G[12]*(F1 + F23) + G[16]*(F2 + F24) + G[7]*(F0 + F25))) + F22*(F10*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F11*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)) + F12*(G[11]*(F1 + F23) + G[15]*(F2 + F24) + G[6]*(F0 + F25)) + F13*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F14*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)) + F27*G[151] + F9*(G[11]*(F1 + F23) + G[15]*(F2 + F24) + G[6]*(F0 + F25)))));
      
      // Number of operations: 201
      I[48] = W14[ip]*(C[1]*(G[25]*(F15 + F18) + G[61]*(F17 + F20) + G[79]*(F16 + F19)) + F21*F21*(F0*(G[27]*(F15 + F18) + G[63]*(F17 + F20) + G[81]*(F16 + F19)) + F1*(G[28]*(F15 + F18) + G[64]*(F17 + F20) + G[82]*(F16 + F19)) + F2*(G[30]*(F15 + F18) + G[66]*(F17 + F20) + G[84]*(F16 + F19)) + F23*(G[28]*(F15 + F18) + G[64]*(F17 + F20) + G[82]*(F16 + F19)) + F24*(G[30]*(F15 + F18) + G[66]*(F17 + F20) + G[84]*(F16 + F19)) + F25*(G[27]*(F15 + F18) + G[63]*(F17 + F20) + G[81]*(F16 + F19)) + F28*G[153]) + F22*(F21*(F0*(G[32]*(F15 + F18) + G[68]*(F17 + F20) + G[86]*(F16 + F19)) + F1*(G[29]*(F15 + F18) + G[65]*(F17 + F20) + G[83]*(F16 + F19)) + F2*(G[31]*(F15 + F18) + G[67]*(F17 + F20) + G[85]*(F16 + F19)) + F23*(G[29]*(F15 + F18) + G[65]*(F17 + F20) + G[83]*(F16 + F19)) + F24*(G[31]*(F15 + F18) + G[67]*(F17 + F20) + G[85]*(F16 + F19)) + F25*(G[32]*(F15 + F18) + G[68]*(F17 + F20) + G[86]*(F16 + F19)) + F28*G[154]) + F22*(F0*(G[27]*(F15 + F18) + G[63]*(F17 + F20) + G[81]*(F16 + F19)) + F1*(G[28]*(F15 + F18) + G[64]*(F17 + F20) + G[82]*(F16 + F19)) + F2*(G[30]*(F15 + F18) + G[66]*(F17 + F20) + G[84]*(F16 + F19)) + F23*(G[28]*(F15 + F18) + G[64]*(F17 + F20) + G[82]*(F16 + F19)) + F24*(G[30]*(F15 + F18) + G[66]*(F17 + F20) + G[84]*(F16 + F19)) + F25*(G[27]*(F15 + F18) + G[63]*(F17 + F20) + G[81]*(F16 + F19)) + F28*G[153])));
      
      // Number of operations: 201
      I[49] = W14[ip]*(C[3]*(G[25]*(F15 + F18) + G[61]*(F17 + F20) + G[79]*(F16 + F19)) + F21*F21*(F0*(G[28]*(F15 + F18) + G[64]*(F17 + F20) + G[82]*(F16 + F19)) + F1*(G[34]*(F15 + F18) + G[70]*(F17 + F20) + G[88]*(F16 + F19)) + F2*(G[35]*(F15 + F18) + G[71]*(F17 + F20) + G[89]*(F16 + F19)) + F23*(G[34]*(F15 + F18) + G[70]*(F17 + F20) + G[88]*(F16 + F19)) + F24*(G[35]*(F15 + F18) + G[71]*(F17 + F20) + G[89]*(F16 + F19)) + F25*(G[28]*(F15 + F18) + G[64]*(F17 + F20) + G[82]*(F16 + F19)) + F28*G[155]) + F22*(F21*(F0*(G[29]*(F15 + F18) + G[65]*(F17 + F20) + G[83]*(F16 + F19)) + F1*(G[37]*(F15 + F18) + G[73]*(F17 + F20) + G[91]*(F16 + F19)) + F2*(G[36]*(F15 + F18) + G[72]*(F17 + F20) + G[90]*(F16 + F19)) + F23*(G[37]*(F15 + F18) + G[73]*(F17 + F20) + G[91]*(F16 + F19)) + F24*(G[36]*(F15 + F18) + G[72]*(F17 + F20) + G[90]*(F16 + F19)) + F25*(G[29]*(F15 + F18) + G[65]*(F17 + F20) + G[83]*(F16 + F19)) + F28*G[156]) + F22*(F0*(G[28]*(F15 + F18) + G[64]*(F17 + F20) + G[82]*(F16 + F19)) + F1*(G[34]*(F15 + F18) + G[70]*(F17 + F20) + G[88]*(F16 + F19)) + F2*(G[35]*(F15 + F18) + G[71]*(F17 + F20) + G[89]*(F16 + F19)) + F23*(G[34]*(F15 + F18) + G[70]*(F17 + F20) + G[88]*(F16 + F19)) + F24*(G[35]*(F15 + F18) + G[71]*(F17 + F20) + G[89]*(F16 + F19)) + F25*(G[28]*(F15 + F18) + G[64]*(F17 + F20) + G[82]*(F16 + F19)) + F28*G[155])));
      
      // Number of operations: 201
      I[50] = W14[ip]*(C[5]*(G[25]*(F15 + F18) + G[61]*(F17 + F20) + G[79]*(F16 + F19)) + F21*F21*(F0*(G[30]*(F15 + F18) + G[66]*(F17 + F20) + G[84]*(F16 + F19)) + F1*(G[35]*(F15 + F18) + G[71]*(F17 + F20) + G[89]*(F16 + F19)) + F2*(G[39]*(F15 + F18) + G[75]*(F17 + F20) + G[93]*(F16 + F19)) + F23*(G[35]*(F15 + F18) + G[71]*(F17 + F20) + G[89]*(F16 + F19)) + F24*(G[39]*(F15 + F18) + G[75]*(F17 + F20) + G[93]*(F16 + F19)) + F25*(G[30]*(F15 + F18) + G[66]*(F17 + F20) + G[84]*(F16 + F19)) + F28*G[157]) + F22*(F21*(F0*(G[31]*(F15 + F18) + G[67]*(F17 + F20) + G[85]*(F16 + F19)) + F1*(G[36]*(F15 + F18) + G[72]*(F17 + F20) + G[90]*(F16 + F19)) + F2*(G[40]*(F15 + F18) + G[76]*(F17 + F20) + G[94]*(F16 + F19)) + F23*(G[36]*(F15 + F18) + G[72]*(F17 + F20) + G[90]*(F16 + F19)) + F24*(G[40]*(F15 + F18) + G[76]*(F17 + F20) + G[94]*(F16 + F19)) + F25*(G[31]*(F15 + F18) + G[67]*(F17 + F20) + G[85]*(F16 + F19)) + F28*G[158]) + F22*(F0*(G[30]*(F15 + F18) + G[66]*(F17 + F20) + G[84]*(F16 + F19)) + F1*(G[35]*(F15 + F18) + G[71]*(F17 + F20) + G[89]*(F16 + F19)) + F2*(G[39]*(F15 + F18) + G[75]*(F17 + F20) + G[93]*(F16 + F19)) + F23*(G[35]*(F15 + F18) + G[71]*(F17 + F20) + G[89]*(F16 + F19)) + F24*(G[39]*(F15 + F18) + G[75]*(F17 + F20) + G[93]*(F16 + F19)) + F25*(G[30]*(F15 + F18) + G[66]*(F17 + F20) + G[84]*(F16 + F19)) + F28*G[157])));
      
      // Number of operations: 201
      I[51] = W14[ip]*(C[1]*(G[103]*(F16 + F19) + G[43]*(F15 + F18) + G[79]*(F17 + F20)) + F21*F21*(F0*(G[105]*(F16 + F19) + G[45]*(F15 + F18) + G[81]*(F17 + F20)) + F1*(G[106]*(F16 + F19) + G[46]*(F15 + F18) + G[82]*(F17 + F20)) + F2*(G[108]*(F16 + F19) + G[48]*(F15 + F18) + G[84]*(F17 + F20)) + F23*(G[106]*(F16 + F19) + G[46]*(F15 + F18) + G[82]*(F17 + F20)) + F24*(G[108]*(F16 + F19) + G[48]*(F15 + F18) + G[84]*(F17 + F20)) + F25*(G[105]*(F16 + F19) + G[45]*(F15 + F18) + G[81]*(F17 + F20)) + F28*G[159]) + F22*(F21*(F0*(G[110]*(F16 + F19) + G[50]*(F15 + F18) + G[86]*(F17 + F20)) + F1*(G[107]*(F16 + F19) + G[47]*(F15 + F18) + G[83]*(F17 + F20)) + F2*(G[109]*(F16 + F19) + G[49]*(F15 + F18) + G[85]*(F17 + F20)) + F23*(G[107]*(F16 + F19) + G[47]*(F15 + F18) + G[83]*(F17 + F20)) + F24*(G[109]*(F16 + F19) + G[49]*(F15 + F18) + G[85]*(F17 + F20)) + F25*(G[110]*(F16 + F19) + G[50]*(F15 + F18) + G[86]*(F17 + F20)) + F28*G[160]) + F22*(F0*(G[105]*(F16 + F19) + G[45]*(F15 + F18) + G[81]*(F17 + F20)) + F1*(G[106]*(F16 + F19) + G[46]*(F15 + F18) + G[82]*(F17 + F20)) + F2*(G[108]*(F16 + F19) + G[48]*(F15 + F18) + G[84]*(F17 + F20)) + F23*(G[106]*(F16 + F19) + G[46]*(F15 + F18) + G[82]*(F17 + F20)) + F24*(G[108]*(F16 + F19) + G[48]*(F15 + F18) + G[84]*(F17 + F20)) + F25*(G[105]*(F16 + F19) + G[45]*(F15 + F18) + G[81]*(F17 + F20)) + F28*G[159])));
      
      // Number of operations: 201
      I[52] = W14[ip]*(C[3]*(G[103]*(F16 + F19) + G[43]*(F15 + F18) + G[79]*(F17 + F20)) + F21*F21*(F0*(G[106]*(F16 + F19) + G[46]*(F15 + F18) + G[82]*(F17 + F20)) + F1*(G[112]*(F16 + F19) + G[52]*(F15 + F18) + G[88]*(F17 + F20)) + F2*(G[113]*(F16 + F19) + G[53]*(F15 + F18) + G[89]*(F17 + F20)) + F23*(G[112]*(F16 + F19) + G[52]*(F15 + F18) + G[88]*(F17 + F20)) + F24*(G[113]*(F16 + F19) + G[53]*(F15 + F18) + G[89]*(F17 + F20)) + F25*(G[106]*(F16 + F19) + G[46]*(F15 + F18) + G[82]*(F17 + F20)) + F28*G[161]) + F22*(F21*(F0*(G[107]*(F16 + F19) + G[47]*(F15 + F18) + G[83]*(F17 + F20)) + F1*(G[115]*(F16 + F19) + G[55]*(F15 + F18) + G[91]*(F17 + F20)) + F2*(G[114]*(F16 + F19) + G[54]*(F15 + F18) + G[90]*(F17 + F20)) + F23*(G[115]*(F16 + F19) + G[55]*(F15 + F18) + G[91]*(F17 + F20)) + F24*(G[114]*(F16 + F19) + G[54]*(F15 + F18) + G[90]*(F17 + F20)) + F25*(G[107]*(F16 + F19) + G[47]*(F15 + F18) + G[83]*(F17 + F20)) + F28*G[162]) + F22*(F0*(G[106]*(F16 + F19) + G[46]*(F15 + F18) + G[82]*(F17 + F20)) + F1*(G[112]*(F16 + F19) + G[52]*(F15 + F18) + G[88]*(F17 + F20)) + F2*(G[113]*(F16 + F19) + G[53]*(F15 + F18) + G[89]*(F17 + F20)) + F23*(G[112]*(F16 + F19) + G[52]*(F15 + F18) + G[88]*(F17 + F20)) + F24*(G[113]*(F16 + F19) + G[53]*(F15 + F18) + G[89]*(F17 + F20)) + F25*(G[106]*(F16 + F19) + G[46]*(F15 + F18) + G[82]*(F17 + F20)) + F28*G[161])));
      
      // Number of operations: 201
      I[53] = W14[ip]*(C[5]*(G[103]*(F16 + F19) + G[43]*(F15 + F18) + G[79]*(F17 + F20)) + F21*F21*(F0*(G[108]*(F16 + F19) + G[48]*(F15 + F18) + G[84]*(F17 + F20)) + F1*(G[113]*(F16 + F19) + G[53]*(F15 + F18) + G[89]*(F17 + F20)) + F2*(G[117]*(F16 + F19) + G[57]*(F15 + F18) + G[93]*(F17 + F20)) + F23*(G[113]*(F16 + F19) + G[53]*(F15 + F18) + G[89]*(F17 + F20)) + F24*(G[117]*(F16 + F19) + G[57]*(F15 + F18) + G[93]*(F17 + F20)) + F25*(G[108]*(F16 + F19) + G[48]*(F15 + F18) + G[84]*(F17 + F20)) + F28*G[163]) + F22*(F21*(F0*(G[109]*(F16 + F19) + G[49]*(F15 + F18) + G[85]*(F17 + F20)) + F1*(G[114]*(F16 + F19) + G[54]*(F15 + F18) + G[90]*(F17 + F20)) + F2*(G[118]*(F16 + F19) + G[58]*(F15 + F18) + G[94]*(F17 + F20)) + F23*(G[114]*(F16 + F19) + G[54]*(F15 + F18) + G[90]*(F17 + F20)) + F24*(G[118]*(F16 + F19) + G[58]*(F15 + F18) + G[94]*(F17 + F20)) + F25*(G[109]*(F16 + F19) + G[49]*(F15 + F18) + G[85]*(F17 + F20)) + F28*G[164]) + F22*(F0*(G[108]*(F16 + F19) + G[48]*(F15 + F18) + G[84]*(F17 + F20)) + F1*(G[113]*(F16 + F19) + G[53]*(F15 + F18) + G[89]*(F17 + F20)) + F2*(G[117]*(F16 + F19) + G[57]*(F15 + F18) + G[93]*(F17 + F20)) + F23*(G[113]*(F16 + F19) + G[53]*(F15 + F18) + G[89]*(F17 + F20)) + F24*(G[117]*(F16 + F19) + G[57]*(F15 + F18) + G[93]*(F17 + F20)) + F25*(G[108]*(F16 + F19) + G[48]*(F15 + F18) + G[84]*(F17 + F20)) + F28*G[163])));
      
      // Number of operations: 201
      I[54] = W14[ip]*(C[1]*(G[1]*(F15 + F18) + G[25]*(F17 + F20) + G[43]*(F16 + F19)) + F21*F21*(F0*(G[27]*(F17 + F20) + G[3]*(F15 + F18) + G[45]*(F16 + F19)) + F1*(G[28]*(F17 + F20) + G[46]*(F16 + F19) + G[4]*(F15 + F18)) + F2*(G[30]*(F17 + F20) + G[48]*(F16 + F19) + G[6]*(F15 + F18)) + F23*(G[28]*(F17 + F20) + G[46]*(F16 + F19) + G[4]*(F15 + F18)) + F24*(G[30]*(F17 + F20) + G[48]*(F16 + F19) + G[6]*(F15 + F18)) + F25*(G[27]*(F17 + F20) + G[3]*(F15 + F18) + G[45]*(F16 + F19)) + F28*G[147]) + F22*(F21*(F0*(G[32]*(F17 + F20) + G[50]*(F16 + F19) + G[8]*(F15 + F18)) + F1*(G[29]*(F17 + F20) + G[47]*(F16 + F19) + G[5]*(F15 + F18)) + F2*(G[31]*(F17 + F20) + G[49]*(F16 + F19) + G[7]*(F15 + F18)) + F23*(G[29]*(F17 + F20) + G[47]*(F16 + F19) + G[5]*(F15 + F18)) + F24*(G[31]*(F17 + F20) + G[49]*(F16 + F19) + G[7]*(F15 + F18)) + F25*(G[32]*(F17 + F20) + G[50]*(F16 + F19) + G[8]*(F15 + F18)) + F28*G[148]) + F22*(F0*(G[27]*(F17 + F20) + G[3]*(F15 + F18) + G[45]*(F16 + F19)) + F1*(G[28]*(F17 + F20) + G[46]*(F16 + F19) + G[4]*(F15 + F18)) + F2*(G[30]*(F17 + F20) + G[48]*(F16 + F19) + G[6]*(F15 + F18)) + F23*(G[28]*(F17 + F20) + G[46]*(F16 + F19) + G[4]*(F15 + F18)) + F24*(G[30]*(F17 + F20) + G[48]*(F16 + F19) + G[6]*(F15 + F18)) + F25*(G[27]*(F17 + F20) + G[3]*(F15 + F18) + G[45]*(F16 + F19)) + F28*G[147])));
      
      // Number of operations: 201
      I[55] = W14[ip]*(C[3]*(G[1]*(F15 + F18) + G[25]*(F17 + F20) + G[43]*(F16 + F19)) + F21*F21*(F0*(G[28]*(F17 + F20) + G[46]*(F16 + F19) + G[4]*(F15 + F18)) + F1*(G[10]*(F15 + F18) + G[34]*(F17 + F20) + G[52]*(F16 + F19)) + F2*(G[11]*(F15 + F18) + G[35]*(F17 + F20) + G[53]*(F16 + F19)) + F23*(G[10]*(F15 + F18) + G[34]*(F17 + F20) + G[52]*(F16 + F19)) + F24*(G[11]*(F15 + F18) + G[35]*(F17 + F20) + G[53]*(F16 + F19)) + F25*(G[28]*(F17 + F20) + G[46]*(F16 + F19) + G[4]*(F15 + F18)) + F28*G[149]) + F22*(F21*(F0*(G[29]*(F17 + F20) + G[47]*(F16 + F19) + G[5]*(F15 + F18)) + F1*(G[13]*(F15 + F18) + G[37]*(F17 + F20) + G[55]*(F16 + F19)) + F2*(G[12]*(F15 + F18) + G[36]*(F17 + F20) + G[54]*(F16 + F19)) + F23*(G[13]*(F15 + F18) + G[37]*(F17 + F20) + G[55]*(F16 + F19)) + F24*(G[12]*(F15 + F18) + G[36]*(F17 + F20) + G[54]*(F16 + F19)) + F25*(G[29]*(F17 + F20) + G[47]*(F16 + F19) + G[5]*(F15 + F18)) + F28*G[150]) + F22*(F0*(G[28]*(F17 + F20) + G[46]*(F16 + F19) + G[4]*(F15 + F18)) + F1*(G[10]*(F15 + F18) + G[34]*(F17 + F20) + G[52]*(F16 + F19)) + F2*(G[11]*(F15 + F18) + G[35]*(F17 + F20) + G[53]*(F16 + F19)) + F23*(G[10]*(F15 + F18) + G[34]*(F17 + F20) + G[52]*(F16 + F19)) + F24*(G[11]*(F15 + F18) + G[35]*(F17 + F20) + G[53]*(F16 + F19)) + F25*(G[28]*(F17 + F20) + G[46]*(F16 + F19) + G[4]*(F15 + F18)) + F28*G[149])));
      
      // Number of operations: 201
      I[56] = W14[ip]*(C[5]*(G[1]*(F15 + F18) + G[25]*(F17 + F20) + G[43]*(F16 + F19)) + F21*F21*(F0*(G[30]*(F17 + F20) + G[48]*(F16 + F19) + G[6]*(F15 + F18)) + F1*(G[11]*(F15 + F18) + G[35]*(F17 + F20) + G[53]*(F16 + F19)) + F2*(G[15]*(F15 + F18) + G[39]*(F17 + F20) + G[57]*(F16 + F19)) + F23*(G[11]*(F15 + F18) + G[35]*(F17 + F20) + G[53]*(F16 + F19)) + F24*(G[15]*(F15 + F18) + G[39]*(F17 + F20) + G[57]*(F16 + F19)) + F25*(G[30]*(F17 + F20) + G[48]*(F16 + F19) + G[6]*(F15 + F18)) + F28*G[151]) + F22*(F21*(F0*(G[31]*(F17 + F20) + G[49]*(F16 + F19) + G[7]*(F15 + F18)) + F1*(G[12]*(F15 + F18) + G[36]*(F17 + F20) + G[54]*(F16 + F19)) + F2*(G[16]*(F15 + F18) + G[40]*(F17 + F20) + G[58]*(F16 + F19)) + F23*(G[12]*(F15 + F18) + G[36]*(F17 + F20) + G[54]*(F16 + F19)) + F24*(G[16]*(F15 + F18) + G[40]*(F17 + F20) + G[58]*(F16 + F19)) + F25*(G[31]*(F17 + F20) + G[49]*(F16 + F19) + G[7]*(F15 + F18)) + F28*G[152]) + F22*(F0*(G[30]*(F17 + F20) + G[48]*(F16 + F19) + G[6]*(F15 + F18)) + F1*(G[11]*(F15 + F18) + G[35]*(F17 + F20) + G[53]*(F16 + F19)) + F2*(G[15]*(F15 + F18) + G[39]*(F17 + F20) + G[57]*(F16 + F19)) + F23*(G[11]*(F15 + F18) + G[35]*(F17 + F20) + G[53]*(F16 + F19)) + F24*(G[15]*(F15 + F18) + G[39]*(F17 + F20) + G[57]*(F16 + F19)) + F25*(G[30]*(F17 + F20) + G[48]*(F16 + F19) + G[6]*(F15 + F18)) + F28*G[151])));
      
      // Number of operations: 201
      I[57] = W14[ip]*(C[1]*(G[25]*(F3 + F6) + G[61]*(F5 + F8) + G[79]*(F4 + F7)) + F21*F21*(F26*G[153] + F3*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)) + F4*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F5*(G[63]*(F0 + F25) + G[64]*(F1 + F23) + G[66]*(F2 + F24)) + F6*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)) + F7*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F8*(G[63]*(F0 + F25) + G[64]*(F1 + F23) + G[66]*(F2 + F24))) + F22*(F21*(F26*G[154] + F3*(G[29]*(F1 + F23) + G[31]*(F2 + F24) + G[32]*(F0 + F25)) + F4*(G[83]*(F1 + F23) + G[85]*(F2 + F24) + G[86]*(F0 + F25)) + F5*(G[65]*(F1 + F23) + G[67]*(F2 + F24) + G[68]*(F0 + F25)) + F6*(G[29]*(F1 + F23) + G[31]*(F2 + F24) + G[32]*(F0 + F25)) + F7*(G[83]*(F1 + F23) + G[85]*(F2 + F24) + G[86]*(F0 + F25)) + F8*(G[65]*(F1 + F23) + G[67]*(F2 + F24) + G[68]*(F0 + F25))) + F22*(F26*G[153] + F3*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)) + F4*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F5*(G[63]*(F0 + F25) + G[64]*(F1 + F23) + G[66]*(F2 + F24)) + F6*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)) + F7*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F8*(G[63]*(F0 + F25) + G[64]*(F1 + F23) + G[66]*(F2 + F24)))));
      
      // Number of operations: 201
      I[58] = W14[ip]*(C[3]*(G[25]*(F3 + F6) + G[61]*(F5 + F8) + G[79]*(F4 + F7)) + F21*F21*(F26*G[155] + F3*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)) + F4*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F5*(G[64]*(F0 + F25) + G[70]*(F1 + F23) + G[71]*(F2 + F24)) + F6*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)) + F7*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F8*(G[64]*(F0 + F25) + G[70]*(F1 + F23) + G[71]*(F2 + F24))) + F22*(F21*(F26*G[156] + F3*(G[29]*(F0 + F25) + G[36]*(F2 + F24) + G[37]*(F1 + F23)) + F4*(G[83]*(F0 + F25) + G[90]*(F2 + F24) + G[91]*(F1 + F23)) + F5*(G[65]*(F0 + F25) + G[72]*(F2 + F24) + G[73]*(F1 + F23)) + F6*(G[29]*(F0 + F25) + G[36]*(F2 + F24) + G[37]*(F1 + F23)) + F7*(G[83]*(F0 + F25) + G[90]*(F2 + F24) + G[91]*(F1 + F23)) + F8*(G[65]*(F0 + F25) + G[72]*(F2 + F24) + G[73]*(F1 + F23))) + F22*(F26*G[155] + F3*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)) + F4*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F5*(G[64]*(F0 + F25) + G[70]*(F1 + F23) + G[71]*(F2 + F24)) + F6*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)) + F7*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F8*(G[64]*(F0 + F25) + G[70]*(F1 + F23) + G[71]*(F2 + F24)))));
      
      // Number of operations: 201
      I[59] = W14[ip]*(C[5]*(G[25]*(F3 + F6) + G[61]*(F5 + F8) + G[79]*(F4 + F7)) + F21*F21*(F26*G[157] + F3*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)) + F4*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F5*(G[66]*(F0 + F25) + G[71]*(F1 + F23) + G[75]*(F2 + F24)) + F6*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)) + F7*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F8*(G[66]*(F0 + F25) + G[71]*(F1 + F23) + G[75]*(F2 + F24))) + F22*(F21*(F26*G[158] + F3*(G[31]*(F0 + F25) + G[36]*(F1 + F23) + G[40]*(F2 + F24)) + F4*(G[85]*(F0 + F25) + G[90]*(F1 + F23) + G[94]*(F2 + F24)) + F5*(G[67]*(F0 + F25) + G[72]*(F1 + F23) + G[76]*(F2 + F24)) + F6*(G[31]*(F0 + F25) + G[36]*(F1 + F23) + G[40]*(F2 + F24)) + F7*(G[85]*(F0 + F25) + G[90]*(F1 + F23) + G[94]*(F2 + F24)) + F8*(G[67]*(F0 + F25) + G[72]*(F1 + F23) + G[76]*(F2 + F24))) + F22*(F26*G[157] + F3*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)) + F4*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F5*(G[66]*(F0 + F25) + G[71]*(F1 + F23) + G[75]*(F2 + F24)) + F6*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)) + F7*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F8*(G[66]*(F0 + F25) + G[71]*(F1 + F23) + G[75]*(F2 + F24)))));
      
      // Number of operations: 201
      I[60] = W14[ip]*(C[1]*(G[103]*(F4 + F7) + G[43]*(F3 + F6) + G[79]*(F5 + F8)) + F21*F21*(F26*G[159] + F3*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F4*(G[105]*(F0 + F25) + G[106]*(F1 + F23) + G[108]*(F2 + F24)) + F5*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F6*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F7*(G[105]*(F0 + F25) + G[106]*(F1 + F23) + G[108]*(F2 + F24)) + F8*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24))) + F22*(F21*(F26*G[160] + F3*(G[47]*(F1 + F23) + G[49]*(F2 + F24) + G[50]*(F0 + F25)) + F4*(G[107]*(F1 + F23) + G[109]*(F2 + F24) + G[110]*(F0 + F25)) + F5*(G[83]*(F1 + F23) + G[85]*(F2 + F24) + G[86]*(F0 + F25)) + F6*(G[47]*(F1 + F23) + G[49]*(F2 + F24) + G[50]*(F0 + F25)) + F7*(G[107]*(F1 + F23) + G[109]*(F2 + F24) + G[110]*(F0 + F25)) + F8*(G[83]*(F1 + F23) + G[85]*(F2 + F24) + G[86]*(F0 + F25))) + F22*(F26*G[159] + F3*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F4*(G[105]*(F0 + F25) + G[106]*(F1 + F23) + G[108]*(F2 + F24)) + F5*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F6*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F7*(G[105]*(F0 + F25) + G[106]*(F1 + F23) + G[108]*(F2 + F24)) + F8*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)))));
      
      // Number of operations: 201
      I[61] = W14[ip]*(C[3]*(G[103]*(F4 + F7) + G[43]*(F3 + F6) + G[79]*(F5 + F8)) + F21*F21*(F26*G[161] + F3*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F4*(G[106]*(F0 + F25) + G[112]*(F1 + F23) + G[113]*(F2 + F24)) + F5*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F6*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F7*(G[106]*(F0 + F25) + G[112]*(F1 + F23) + G[113]*(F2 + F24)) + F8*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24))) + F22*(F21*(F26*G[162] + F3*(G[47]*(F0 + F25) + G[54]*(F2 + F24) + G[55]*(F1 + F23)) + F4*(G[107]*(F0 + F25) + G[114]*(F2 + F24) + G[115]*(F1 + F23)) + F5*(G[83]*(F0 + F25) + G[90]*(F2 + F24) + G[91]*(F1 + F23)) + F6*(G[47]*(F0 + F25) + G[54]*(F2 + F24) + G[55]*(F1 + F23)) + F7*(G[107]*(F0 + F25) + G[114]*(F2 + F24) + G[115]*(F1 + F23)) + F8*(G[83]*(F0 + F25) + G[90]*(F2 + F24) + G[91]*(F1 + F23))) + F22*(F26*G[161] + F3*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F4*(G[106]*(F0 + F25) + G[112]*(F1 + F23) + G[113]*(F2 + F24)) + F5*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F6*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F7*(G[106]*(F0 + F25) + G[112]*(F1 + F23) + G[113]*(F2 + F24)) + F8*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)))));
      
      // Number of operations: 201
      I[62] = W14[ip]*(C[5]*(G[103]*(F4 + F7) + G[43]*(F3 + F6) + G[79]*(F5 + F8)) + F21*F21*(F26*G[163] + F3*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F4*(G[108]*(F0 + F25) + G[113]*(F1 + F23) + G[117]*(F2 + F24)) + F5*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F6*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F7*(G[108]*(F0 + F25) + G[113]*(F1 + F23) + G[117]*(F2 + F24)) + F8*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24))) + F22*(F21*(F26*G[164] + F3*(G[49]*(F0 + F25) + G[54]*(F1 + F23) + G[58]*(F2 + F24)) + F4*(G[109]*(F0 + F25) + G[114]*(F1 + F23) + G[118]*(F2 + F24)) + F5*(G[85]*(F0 + F25) + G[90]*(F1 + F23) + G[94]*(F2 + F24)) + F6*(G[49]*(F0 + F25) + G[54]*(F1 + F23) + G[58]*(F2 + F24)) + F7*(G[109]*(F0 + F25) + G[114]*(F1 + F23) + G[118]*(F2 + F24)) + F8*(G[85]*(F0 + F25) + G[90]*(F1 + F23) + G[94]*(F2 + F24))) + F22*(F26*G[163] + F3*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F4*(G[108]*(F0 + F25) + G[113]*(F1 + F23) + G[117]*(F2 + F24)) + F5*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F6*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F7*(G[108]*(F0 + F25) + G[113]*(F1 + F23) + G[117]*(F2 + F24)) + F8*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)))));
      
      // Number of operations: 201
      I[63] = W14[ip]*(C[1]*(G[1]*(F3 + F6) + G[25]*(F5 + F8) + G[43]*(F4 + F7)) + F21*F21*(F26*G[147] + F3*(G[3]*(F0 + F25) + G[4]*(F1 + F23) + G[6]*(F2 + F24)) + F4*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F5*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)) + F6*(G[3]*(F0 + F25) + G[4]*(F1 + F23) + G[6]*(F2 + F24)) + F7*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F8*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24))) + F22*(F21*(F26*G[148] + F3*(G[5]*(F1 + F23) + G[7]*(F2 + F24) + G[8]*(F0 + F25)) + F4*(G[47]*(F1 + F23) + G[49]*(F2 + F24) + G[50]*(F0 + F25)) + F5*(G[29]*(F1 + F23) + G[31]*(F2 + F24) + G[32]*(F0 + F25)) + F6*(G[5]*(F1 + F23) + G[7]*(F2 + F24) + G[8]*(F0 + F25)) + F7*(G[47]*(F1 + F23) + G[49]*(F2 + F24) + G[50]*(F0 + F25)) + F8*(G[29]*(F1 + F23) + G[31]*(F2 + F24) + G[32]*(F0 + F25))) + F22*(F26*G[147] + F3*(G[3]*(F0 + F25) + G[4]*(F1 + F23) + G[6]*(F2 + F24)) + F4*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F5*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)) + F6*(G[3]*(F0 + F25) + G[4]*(F1 + F23) + G[6]*(F2 + F24)) + F7*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F8*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)))));
      
      // Number of operations: 201
      I[64] = W14[ip]*(C[3]*(G[1]*(F3 + F6) + G[25]*(F5 + F8) + G[43]*(F4 + F7)) + F21*F21*(F26*G[149] + F3*(G[10]*(F1 + F23) + G[11]*(F2 + F24) + G[4]*(F0 + F25)) + F4*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F5*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)) + F6*(G[10]*(F1 + F23) + G[11]*(F2 + F24) + G[4]*(F0 + F25)) + F7*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F8*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24))) + F22*(F21*(F26*G[150] + F3*(G[12]*(F2 + F24) + G[13]*(F1 + F23) + G[5]*(F0 + F25)) + F4*(G[47]*(F0 + F25) + G[54]*(F2 + F24) + G[55]*(F1 + F23)) + F5*(G[29]*(F0 + F25) + G[36]*(F2 + F24) + G[37]*(F1 + F23)) + F6*(G[12]*(F2 + F24) + G[13]*(F1 + F23) + G[5]*(F0 + F25)) + F7*(G[47]*(F0 + F25) + G[54]*(F2 + F24) + G[55]*(F1 + F23)) + F8*(G[29]*(F0 + F25) + G[36]*(F2 + F24) + G[37]*(F1 + F23))) + F22*(F26*G[149] + F3*(G[10]*(F1 + F23) + G[11]*(F2 + F24) + G[4]*(F0 + F25)) + F4*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F5*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)) + F6*(G[10]*(F1 + F23) + G[11]*(F2 + F24) + G[4]*(F0 + F25)) + F7*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F8*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)))));
      
      // Number of operations: 201
      I[65] = W14[ip]*(C[5]*(G[1]*(F3 + F6) + G[25]*(F5 + F8) + G[43]*(F4 + F7)) + F21*F21*(F26*G[151] + F3*(G[11]*(F1 + F23) + G[15]*(F2 + F24) + G[6]*(F0 + F25)) + F4*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F5*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)) + F6*(G[11]*(F1 + F23) + G[15]*(F2 + F24) + G[6]*(F0 + F25)) + F7*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F8*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24))) + F22*(F21*(F26*G[152] + F3*(G[12]*(F1 + F23) + G[16]*(F2 + F24) + G[7]*(F0 + F25)) + F4*(G[49]*(F0 + F25) + G[54]*(F1 + F23) + G[58]*(F2 + F24)) + F5*(G[31]*(F0 + F25) + G[36]*(F1 + F23) + G[40]*(F2 + F24)) + F6*(G[12]*(F1 + F23) + G[16]*(F2 + F24) + G[7]*(F0 + F25)) + F7*(G[49]*(F0 + F25) + G[54]*(F1 + F23) + G[58]*(F2 + F24)) + F8*(G[31]*(F0 + F25) + G[36]*(F1 + F23) + G[40]*(F2 + F24))) + F22*(F26*G[151] + F3*(G[11]*(F1 + F23) + G[15]*(F2 + F24) + G[6]*(F0 + F25)) + F4*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F5*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)) + F6*(G[11]*(F1 + F23) + G[15]*(F2 + F24) + G[6]*(F0 + F25)) + F7*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F8*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)))));
      
      // Number of operations: 201
      I[66] = W14[ip]*(C[1]*(G[25]*(F12 + F9) + G[61]*(F11 + F14) + G[79]*(F10 + F13)) + F21*F21*(F10*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F11*(G[63]*(F0 + F25) + G[64]*(F1 + F23) + G[66]*(F2 + F24)) + F12*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)) + F13*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F14*(G[63]*(F0 + F25) + G[64]*(F1 + F23) + G[66]*(F2 + F24)) + F27*G[153] + F9*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24))) + F22*(F21*(F10*(G[83]*(F1 + F23) + G[85]*(F2 + F24) + G[86]*(F0 + F25)) + F11*(G[65]*(F1 + F23) + G[67]*(F2 + F24) + G[68]*(F0 + F25)) + F12*(G[29]*(F1 + F23) + G[31]*(F2 + F24) + G[32]*(F0 + F25)) + F13*(G[83]*(F1 + F23) + G[85]*(F2 + F24) + G[86]*(F0 + F25)) + F14*(G[65]*(F1 + F23) + G[67]*(F2 + F24) + G[68]*(F0 + F25)) + F27*G[154] + F9*(G[29]*(F1 + F23) + G[31]*(F2 + F24) + G[32]*(F0 + F25))) + F22*(F10*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F11*(G[63]*(F0 + F25) + G[64]*(F1 + F23) + G[66]*(F2 + F24)) + F12*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)) + F13*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F14*(G[63]*(F0 + F25) + G[64]*(F1 + F23) + G[66]*(F2 + F24)) + F27*G[153] + F9*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)))));
      
      // Number of operations: 201
      I[67] = W14[ip]*(C[3]*(G[25]*(F12 + F9) + G[61]*(F11 + F14) + G[79]*(F10 + F13)) + F21*F21*(F10*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F11*(G[64]*(F0 + F25) + G[70]*(F1 + F23) + G[71]*(F2 + F24)) + F12*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)) + F13*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F14*(G[64]*(F0 + F25) + G[70]*(F1 + F23) + G[71]*(F2 + F24)) + F27*G[155] + F9*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24))) + F22*(F21*(F10*(G[83]*(F0 + F25) + G[90]*(F2 + F24) + G[91]*(F1 + F23)) + F11*(G[65]*(F0 + F25) + G[72]*(F2 + F24) + G[73]*(F1 + F23)) + F12*(G[29]*(F0 + F25) + G[36]*(F2 + F24) + G[37]*(F1 + F23)) + F13*(G[83]*(F0 + F25) + G[90]*(F2 + F24) + G[91]*(F1 + F23)) + F14*(G[65]*(F0 + F25) + G[72]*(F2 + F24) + G[73]*(F1 + F23)) + F27*G[156] + F9*(G[29]*(F0 + F25) + G[36]*(F2 + F24) + G[37]*(F1 + F23))) + F22*(F10*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F11*(G[64]*(F0 + F25) + G[70]*(F1 + F23) + G[71]*(F2 + F24)) + F12*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)) + F13*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F14*(G[64]*(F0 + F25) + G[70]*(F1 + F23) + G[71]*(F2 + F24)) + F27*G[155] + F9*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)))));
      
      // Number of operations: 201
      I[68] = W14[ip]*(C[5]*(G[25]*(F12 + F9) + G[61]*(F11 + F14) + G[79]*(F10 + F13)) + F21*F21*(F10*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F11*(G[66]*(F0 + F25) + G[71]*(F1 + F23) + G[75]*(F2 + F24)) + F12*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)) + F13*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F14*(G[66]*(F0 + F25) + G[71]*(F1 + F23) + G[75]*(F2 + F24)) + F27*G[157] + F9*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24))) + F22*(F21*(F10*(G[85]*(F0 + F25) + G[90]*(F1 + F23) + G[94]*(F2 + F24)) + F11*(G[67]*(F0 + F25) + G[72]*(F1 + F23) + G[76]*(F2 + F24)) + F12*(G[31]*(F0 + F25) + G[36]*(F1 + F23) + G[40]*(F2 + F24)) + F13*(G[85]*(F0 + F25) + G[90]*(F1 + F23) + G[94]*(F2 + F24)) + F14*(G[67]*(F0 + F25) + G[72]*(F1 + F23) + G[76]*(F2 + F24)) + F27*G[158] + F9*(G[31]*(F0 + F25) + G[36]*(F1 + F23) + G[40]*(F2 + F24))) + F22*(F10*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F11*(G[66]*(F0 + F25) + G[71]*(F1 + F23) + G[75]*(F2 + F24)) + F12*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)) + F13*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F14*(G[66]*(F0 + F25) + G[71]*(F1 + F23) + G[75]*(F2 + F24)) + F27*G[157] + F9*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)))));
      
      // Number of operations: 201
      I[69] = W14[ip]*(C[1]*(G[103]*(F10 + F13) + G[43]*(F12 + F9) + G[79]*(F11 + F14)) + F21*F21*(F10*(G[105]*(F0 + F25) + G[106]*(F1 + F23) + G[108]*(F2 + F24)) + F11*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F12*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F13*(G[105]*(F0 + F25) + G[106]*(F1 + F23) + G[108]*(F2 + F24)) + F14*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F27*G[159] + F9*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24))) + F22*(F21*(F10*(G[107]*(F1 + F23) + G[109]*(F2 + F24) + G[110]*(F0 + F25)) + F11*(G[83]*(F1 + F23) + G[85]*(F2 + F24) + G[86]*(F0 + F25)) + F12*(G[47]*(F1 + F23) + G[49]*(F2 + F24) + G[50]*(F0 + F25)) + F13*(G[107]*(F1 + F23) + G[109]*(F2 + F24) + G[110]*(F0 + F25)) + F14*(G[83]*(F1 + F23) + G[85]*(F2 + F24) + G[86]*(F0 + F25)) + F27*G[160] + F9*(G[47]*(F1 + F23) + G[49]*(F2 + F24) + G[50]*(F0 + F25))) + F22*(F10*(G[105]*(F0 + F25) + G[106]*(F1 + F23) + G[108]*(F2 + F24)) + F11*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F12*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F13*(G[105]*(F0 + F25) + G[106]*(F1 + F23) + G[108]*(F2 + F24)) + F14*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F27*G[159] + F9*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)))));
      
      // Number of operations: 201
      I[70] = W14[ip]*(C[3]*(G[103]*(F10 + F13) + G[43]*(F12 + F9) + G[79]*(F11 + F14)) + F21*F21*(F10*(G[106]*(F0 + F25) + G[112]*(F1 + F23) + G[113]*(F2 + F24)) + F11*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F12*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F13*(G[106]*(F0 + F25) + G[112]*(F1 + F23) + G[113]*(F2 + F24)) + F14*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F27*G[161] + F9*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24))) + F22*(F21*(F10*(G[107]*(F0 + F25) + G[114]*(F2 + F24) + G[115]*(F1 + F23)) + F11*(G[83]*(F0 + F25) + G[90]*(F2 + F24) + G[91]*(F1 + F23)) + F12*(G[47]*(F0 + F25) + G[54]*(F2 + F24) + G[55]*(F1 + F23)) + F13*(G[107]*(F0 + F25) + G[114]*(F2 + F24) + G[115]*(F1 + F23)) + F14*(G[83]*(F0 + F25) + G[90]*(F2 + F24) + G[91]*(F1 + F23)) + F27*G[162] + F9*(G[47]*(F0 + F25) + G[54]*(F2 + F24) + G[55]*(F1 + F23))) + F22*(F10*(G[106]*(F0 + F25) + G[112]*(F1 + F23) + G[113]*(F2 + F24)) + F11*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F12*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F13*(G[106]*(F0 + F25) + G[112]*(F1 + F23) + G[113]*(F2 + F24)) + F14*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F27*G[161] + F9*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)))));
      
      // Number of operations: 201
      I[71] = W14[ip]*(C[5]*(G[103]*(F10 + F13) + G[43]*(F12 + F9) + G[79]*(F11 + F14)) + F21*F21*(F10*(G[108]*(F0 + F25) + G[113]*(F1 + F23) + G[117]*(F2 + F24)) + F11*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F12*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F13*(G[108]*(F0 + F25) + G[113]*(F1 + F23) + G[117]*(F2 + F24)) + F14*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F27*G[163] + F9*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24))) + F22*(F21*(F10*(G[109]*(F0 + F25) + G[114]*(F1 + F23) + G[118]*(F2 + F24)) + F11*(G[85]*(F0 + F25) + G[90]*(F1 + F23) + G[94]*(F2 + F24)) + F12*(G[49]*(F0 + F25) + G[54]*(F1 + F23) + G[58]*(F2 + F24)) + F13*(G[109]*(F0 + F25) + G[114]*(F1 + F23) + G[118]*(F2 + F24)) + F14*(G[85]*(F0 + F25) + G[90]*(F1 + F23) + G[94]*(F2 + F24)) + F27*G[164] + F9*(G[49]*(F0 + F25) + G[54]*(F1 + F23) + G[58]*(F2 + F24))) + F22*(F10*(G[108]*(F0 + F25) + G[113]*(F1 + F23) + G[117]*(F2 + F24)) + F11*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F12*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F13*(G[108]*(F0 + F25) + G[113]*(F1 + F23) + G[117]*(F2 + F24)) + F14*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F27*G[163] + F9*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)))));
      
      // Number of operations: 38
      I[72] = W14[ip]*(F21*(G[165]*(F0 + F25) + G[166]*(F1 + F23) + G[167]*(F2 + F24) + G[168]*(F35 + F36) + G[169]*(F37 + F38) + G[170]*(F39 + F40)) + F22*(G[165]*(F0 + F25) + G[166]*(F1 + F23) + G[167]*(F2 + F24) + G[168]*(F35 + F36) + G[169]*(F37 + F38) + G[170]*(F39 + F40)));
      
      // Number of operations: 38
      I[73] = W14[ip]*(F21*(G[171]*(F0 + F25) + G[172]*(F1 + F23) + G[173]*(F2 + F24) + G[174]*(F35 + F36) + G[175]*(F37 + F38) + G[176]*(F39 + F40)) + F22*(G[171]*(F0 + F25) + G[172]*(F1 + F23) + G[173]*(F2 + F24) + G[174]*(F35 + F36) + G[175]*(F37 + F38) + G[176]*(F39 + F40)));
      
      // Number of operations: 38
      I[74] = W14[ip]*(F21*(G[177]*(F0 + F25) + G[178]*(F1 + F23) + G[179]*(F2 + F24) + G[180]*(F35 + F36) + G[181]*(F37 + F38) + G[182]*(F39 + F40)) + F22*(G[177]*(F0 + F25) + G[178]*(F1 + F23) + G[179]*(F2 + F24) + G[180]*(F35 + F36) + G[181]*(F37 + F38) + G[182]*(F39 + F40)));
      
      // Number of operations: 70
      I[75] = W14[ip]*(std::abs(0.5*(F21 + F22))*G[183] + F21*(G[165]*(F17 + F20) + G[171]*(F16 + F19) + G[177]*(F15 + F18)) + F22*(G[165]*(F17 + F20) + G[171]*(F16 + F19) + G[177]*(F15 + F18)) + F29*F29*G[8] + F30*(F29*G[184] + F30*G[110]) + F31*(F29*G[185] + F30*G[187] + F31*G[68]) + F32*(F29*G[186] + F30*G[184] + F31*G[185] + F32*G[8]) + F33*(F30*G[188] + F31*G[187] + F33*G[110] + G[184]*(F29 + F32)) + F34*(F31*G[189] + F34*G[68] + G[185]*(F29 + F32) + G[187]*(F30 + F33)));
      
      // Number of operations: 65
      I[76] = W14[ip]*(F21*(G[166]*(F17 + F20) + G[172]*(F16 + F19) + G[178]*(F15 + F18)) + F22*(G[166]*(F17 + F20) + G[172]*(F16 + F19) + G[178]*(F15 + F18)) + F29*F29*G[5] + F30*(F29*G[190] + F30*G[107]) + F31*(F29*G[191] + F30*G[193] + F31*G[65]) + F32*(F29*G[192] + F30*G[190] + F31*G[191] + F32*G[5]) + F33*(F30*G[194] + F31*G[193] + F33*G[107] + G[190]*(F29 + F32)) + F34*(F31*G[195] + F34*G[65] + G[191]*(F29 + F32) + G[193]*(F30 + F33)));
      
      // Number of operations: 65
      I[77] = W14[ip]*(F21*(G[167]*(F17 + F20) + G[173]*(F16 + F19) + G[179]*(F15 + F18)) + F22*(G[167]*(F17 + F20) + G[173]*(F16 + F19) + G[179]*(F15 + F18)) + F29*F29*G[7] + F30*(F29*G[196] + F30*G[109]) + F31*(F29*G[197] + F30*G[199] + F31*G[67]) + F32*(F29*G[198] + F30*G[196] + F31*G[197] + F32*G[7]) + F33*(F30*G[200] + F31*G[199] + F33*G[109] + G[196]*(F29 + F32)) + F34*(F31*G[201] + F34*G[67] + G[197]*(F29 + F32) + G[199]*(F30 + F33)));
      
      // Number of operations: 65
      I[78] = W14[ip]*(F21*(G[165]*(F5 + F8) + G[171]*(F4 + F7) + G[177]*(F3 + F6)) + F22*(G[165]*(F5 + F8) + G[171]*(F4 + F7) + G[177]*(F3 + F6)) + F29*F29*G[5] + F30*(F29*G[190] + F30*G[107]) + F31*(F29*G[191] + F30*G[193] + F31*G[65]) + F32*(F29*G[192] + F30*G[190] + F31*G[191] + F32*G[5]) + F33*(F30*G[194] + F31*G[193] + F33*G[107] + G[190]*(F29 + F32)) + F34*(F31*G[195] + F34*G[65] + G[191]*(F29 + F32) + G[193]*(F30 + F33)));
      
      // Number of operations: 70
      I[79] = W14[ip]*(std::abs(0.5*(F21 + F22))*G[183] + F21*(G[166]*(F5 + F8) + G[172]*(F4 + F7) + G[178]*(F3 + F6)) + F22*(G[166]*(F5 + F8) + G[172]*(F4 + F7) + G[178]*(F3 + F6)) + F29*F29*G[13] + F30*(F29*G[202] + F30*G[115]) + F31*(F29*G[203] + F30*G[205] + F31*G[73]) + F32*(F29*G[204] + F30*G[202] + F31*G[203] + F32*G[13]) + F33*(F30*G[206] + F31*G[205] + F33*G[115] + G[202]*(F29 + F32)) + F34*(F31*G[207] + F34*G[73] + G[203]*(F29 + F32) + G[205]*(F30 + F33)));
      
      // Number of operations: 65
      I[80] = W14[ip]*(F21*(G[167]*(F5 + F8) + G[173]*(F4 + F7) + G[179]*(F3 + F6)) + F22*(G[167]*(F5 + F8) + G[173]*(F4 + F7) + G[179]*(F3 + F6)) + F29*F29*G[12] + F30*(F29*G[208] + F30*G[114]) + F31*(F29*G[209] + F30*G[211] + F31*G[72]) + F32*(F29*G[210] + F30*G[208] + F31*G[209] + F32*G[12]) + F33*(F30*G[212] + F31*G[211] + F33*G[114] + G[208]*(F29 + F32)) + F34*(F31*G[213] + F34*G[72] + G[209]*(F29 + F32) + G[211]*(F30 + F33)));
      
      // Number of operations: 65
      I[81] = W14[ip]*(F21*(G[165]*(F11 + F14) + G[171]*(F10 + F13) + G[177]*(F12 + F9)) + F22*(G[165]*(F11 + F14) + G[171]*(F10 + F13) + G[177]*(F12 + F9)) + F29*F29*G[7] + F30*(F29*G[196] + F30*G[109]) + F31*(F29*G[197] + F30*G[199] + F31*G[67]) + F32*(F29*G[198] + F30*G[196] + F31*G[197] + F32*G[7]) + F33*(F30*G[200] + F31*G[199] + F33*G[109] + G[196]*(F29 + F32)) + F34*(F31*G[201] + F34*G[67] + G[197]*(F29 + F32) + G[199]*(F30 + F33)));
      
      // Number of operations: 65
      I[82] = W14[ip]*(F21*(G[166]*(F11 + F14) + G[172]*(F10 + F13) + G[178]*(F12 + F9)) + F22*(G[166]*(F11 + F14) + G[172]*(F10 + F13) + G[178]*(F12 + F9)) + F29*F29*G[12] + F30*(F29*G[208] + F30*G[114]) + F31*(F29*G[209] + F30*G[211] + F31*G[72]) + F32*(F29*G[210] + F30*G[208] + F31*G[209] + F32*G[12]) + F33*(F30*G[212] + F31*G[211] + F33*G[114] + G[208]*(F29 + F32)) + F34*(F31*G[213] + F34*G[72] + G[209]*(F29 + F32) + G[211]*(F30 + F33)));
      
      // Number of operations: 70
      I[83] = W14[ip]*(std::abs(0.5*(F21 + F22))*G[183] + F21*(G[167]*(F11 + F14) + G[173]*(F10 + F13) + G[179]*(F12 + F9)) + F22*(G[167]*(F11 + F14) + G[173]*(F10 + F13) + G[179]*(F12 + F9)) + F29*F29*G[16] + F30*(F29*G[214] + F30*G[118]) + F31*(F29*G[215] + F30*G[217] + F31*G[76]) + F32*(F29*G[216] + F30*G[214] + F31*G[215] + F32*G[16]) + F33*(F30*G[218] + F31*G[217] + F33*G[118] + G[214]*(F29 + F32)) + F34*(F31*G[219] + F34*G[76] + G[215]*(F29 + F32) + G[217]*(F30 + F33)));
      
      
      // Number of operations for primary indices: 648
      for (unsigned int j = 0; j < 2; j++)
      {
        for (unsigned int k = 0; k < 4; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc11[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[45];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[46];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[47];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc11[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[48];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[49];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[50];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc11[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[51];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[52];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[53];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc11[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[54];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[55];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[56];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc11[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[57];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[58];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[59];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc11[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[60];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[61];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[62];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc11[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[63];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[64];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[65];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc11[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[66];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[67];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[68];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc11[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[69];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[70];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[71];
        }// end loop over 'k'
      }// end loop over 'j'
      
      // Number of operations for primary indices: 216
      for (unsigned int j = 0; j < 4; j++)
      {
        for (unsigned int k = 0; k < 2; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc12[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[72];
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc13[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[73];
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc14[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[74];
          // Number of operations to compute entry: 3
          A[nzc3[j]*12 + nzc4[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[72];
          // Number of operations to compute entry: 3
          A[nzc3[j]*12 + nzc5[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[73];
          // Number of operations to compute entry: 3
          A[nzc3[j]*12 + nzc6[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[74];
          // Number of operations to compute entry: 3
          A[nzc7[j]*12 + nzc10[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[74];
          // Number of operations to compute entry: 3
          A[nzc7[j]*12 + nzc8[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[72];
          // Number of operations to compute entry: 3
          A[nzc7[j]*12 + nzc9[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[73];
        }// end loop over 'k'
      }// end loop over 'j'
      
      // Number of operations for primary indices: 432
      for (unsigned int j = 0; j < 4; j++)
      {
        for (unsigned int k = 0; k < 4; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc11[k]] += FE0[ip][j]*FE0[ip][k]*I[75];
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc3[k]] += FE0[ip][j]*FE0[ip][k]*I[76];
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc7[k]] += FE0[ip][j]*FE0[ip][k]*I[77];
          // Number of operations to compute entry: 3
          A[nzc3[j]*12 + nzc11[k]] += FE0[ip][j]*FE0[ip][k]*I[78];
          // Number of operations to compute entry: 3
          A[nzc3[j]*12 + nzc3[k]] += FE0[ip][j]*FE0[ip][k]*I[79];
          // Number of operations to compute entry: 3
          A[nzc3[j]*12 + nzc7[k]] += FE0[ip][j]*FE0[ip][k]*I[80];
          // Number of operations to compute entry: 3
          A[nzc7[j]*12 + nzc11[k]] += FE0[ip][j]*FE0[ip][k]*I[81];
          // Number of operations to compute entry: 3
          A[nzc7[j]*12 + nzc3[k]] += FE0[ip][j]*FE0[ip][k]*I[82];
          // Number of operations to compute entry: 3
          A[nzc7[j]*12 + nzc7[k]] += FE0[ip][j]*FE0[ip][k]*I[83];
        }// end loop over 'k'
      }// end loop over 'j'
      
      // Number of operations for primary indices: 972
      for (unsigned int j = 0; j < 2; j++)
      {
        for (unsigned int k = 0; k < 2; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[0];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[1];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[2];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[3];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[4];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[5];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[6];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[7];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[8];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[1];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[9];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[10];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[11];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[12];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[13];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[14];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[15];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[16];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[2];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[10];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[17];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[18];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[19];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[20];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[21];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[22];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[23];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[3];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[11];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[18];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[24];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[25];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[26];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[27];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[28];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[29];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[4];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[12];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[19];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[25];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[30];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[31];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[32];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[33];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[34];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[5];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[13];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[20];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[26];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[31];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[35];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[36];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[37];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[38];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[6];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[14];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[21];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[27];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[32];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[36];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[39];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[40];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[41];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[7];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[15];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[22];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[28];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[33];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[37];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[40];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[42];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[43];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[8];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[16];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[23];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[29];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[34];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[38];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[41];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[43];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[44];
        }// end loop over 'k'
      }// end loop over 'j'
    }// end loop over 'ip'
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Tabulate the tensor for the contribution from a local cell
/// using the specified reference cell quadrature points/weights
void nsemomentum3d_cell_integral_0_0::tabulate_tensor(double* A,
                     const double * const * w,
                     const ufc::cell& c,
                     unsigned int num_quadrature_points,
                     const double * const * quadrature_points,
                     const double* quadrature_weights) const
{
    throw std::runtime_error("Quadrature version of tabulate_tensor not yet implemented (introduced in UFC 2.0).");
}
#endif

/// Constructor
nsemomentum3d_exterior_facet_integral_0_0::nsemomentum3d_exterior_facet_integral_0_0() : ufc::exterior_facet_integral()
{
    // Do nothing
}

/// Destructor
nsemomentum3d_exterior_facet_integral_0_0::~nsemomentum3d_exterior_facet_integral_0_0()
{
    // Do nothing
}

/// Tabulate the tensor for the contribution from a local exterior facet
void nsemomentum3d_exterior_facet_integral_0_0::tabulate_tensor(double* A,
                                    const double * const * w,
                                    const ufc::cell& c,
                                    unsigned int facet) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    
    // Compute sub determinants
    
    // Compute determinant of Jacobian
    
    // Compute inverse of Jacobian
    
    // Get vertices on face
    static unsigned int face_vertices[4][3] = {{1, 2, 3}, {0, 2, 3}, {0, 1, 3}, {0, 1, 2}};
    const unsigned int v0 = face_vertices[facet][0];
    const unsigned int v1 = face_vertices[facet][1];
    const unsigned int v2 = face_vertices[facet][2];
    
    // Compute scale factor (area of face scaled by area of reference triangle)
    const double a0 = (x[v0][1]*x[v1][2] + x[v0][2]*x[v2][1] + x[v1][1]*x[v2][2]) - (x[v2][1]*x[v1][2] + x[v2][2]*x[v0][1] + x[v1][1]*x[v0][2]);
    
    const double a1 = (x[v0][2]*x[v1][0] + x[v0][0]*x[v2][2] + x[v1][2]*x[v2][0]) - (x[v2][2]*x[v1][0] + x[v2][0]*x[v0][2] + x[v1][2]*x[v0][0]);
    
    const double a2 = (x[v0][0]*x[v1][1] + x[v0][1]*x[v2][0] + x[v1][0]*x[v2][1]) - (x[v2][0]*x[v1][1] + x[v2][1]*x[v0][0] + x[v1][0]*x[v0][1]);
    
    const double det = std::sqrt(a0*a0 + a1*a1 + a2*a2);
    
    
    // Cell Volume.
    
    // Compute circumradius.
    
    
    // Facet Area (divide by two because 'det' is scaled by area of reference triangle).
    
    // Array of quadrature weights.
    static const double W6[6] = {0.054975871827661, 0.054975871827661, 0.054975871827661, 0.111690794839005, 0.111690794839005, 0.111690794839005};
    // Quadrature points on the UFC reference element: (0.816847572980459, 0.091576213509771), (0.091576213509771, 0.816847572980459), (0.091576213509771, 0.091576213509771), (0.10810301816807, 0.445948490915965), (0.445948490915965, 0.10810301816807), (0.445948490915965, 0.445948490915965)
    
    // Value of basis functions at quadrature points.
    static const double FE1_f0_C0[6][3] = \
    {{0.09157621350977, 0.816847572980459, 0.091576213509771},
    {0.0915762135097701, 0.091576213509771, 0.816847572980459},
    {0.816847572980458, 0.091576213509771, 0.091576213509771},
    {0.445948490915965, 0.10810301816807, 0.445948490915965},
    {0.445948490915965, 0.445948490915965, 0.10810301816807},
    {0.10810301816807, 0.445948490915965, 0.445948490915965}};
    
    // Array of non-zero columns
    static const unsigned int nzc0[3] = {1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc1[3] = {5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc2[3] = {9, 10, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc5[3] = {8, 10, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc8[3] = {8, 9, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc6[3] = {0, 1, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc7[3] = {4, 5, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc3[3] = {0, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc10[3] = {4, 5, 6};
    
    // Array of non-zero columns
    static const unsigned int nzc9[3] = {0, 1, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc4[3] = {4, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc11[3] = {8, 9, 10};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 144; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    // Number of operations to compute geometry constants: 3.
    double G[1];
    G[0] = 0.5*det*w[14][0]/w[3][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (facet)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 1674
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 1674
      for (unsigned int ip = 0; ip < 6; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        double F2 = 0.0;
        
        // Total number of operations to compute function values = 18
        for (unsigned int r = 0; r < 3; r++)
        {
          F0 += FE1_f0_C0[ip][r]*w[15][nzc0[r]];
          F1 += FE1_f0_C0[ip][r]*w[15][nzc1[r]];
          F2 += FE1_f0_C0[ip][r]*w[15][nzc2[r]];
        }// end loop over 'r'
        
        // Number of operations to compute ip constants: 18
        double I[6];
        // Number of operations: 3
        I[0] = F0*F0*G[0]*W6[ip];
        
        // Number of operations: 3
        I[1] = F0*F1*G[0]*W6[ip];
        
        // Number of operations: 3
        I[2] = F0*F2*G[0]*W6[ip];
        
        // Number of operations: 3
        I[3] = F1*F1*G[0]*W6[ip];
        
        // Number of operations: 3
        I[4] = F1*F2*G[0]*W6[ip];
        
        // Number of operations: 3
        I[5] = F2*F2*G[0]*W6[ip];
        
        
        // Number of operations for primary indices: 243
        for (unsigned int j = 0; j < 3; j++)
        {
          for (unsigned int k = 0; k < 3; k++)
          {
            // Number of operations to compute entry: 3
            A[nzc0[j]*12 + nzc0[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[0];
            // Number of operations to compute entry: 3
            A[nzc0[j]*12 + nzc1[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[1];
            // Number of operations to compute entry: 3
            A[nzc0[j]*12 + nzc2[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[2];
            // Number of operations to compute entry: 3
            A[nzc1[j]*12 + nzc0[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[1];
            // Number of operations to compute entry: 3
            A[nzc1[j]*12 + nzc1[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[3];
            // Number of operations to compute entry: 3
            A[nzc1[j]*12 + nzc2[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc2[j]*12 + nzc0[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[2];
            // Number of operations to compute entry: 3
            A[nzc2[j]*12 + nzc1[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc2[j]*12 + nzc2[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[5];
          }// end loop over 'k'
        }// end loop over 'j'
      }// end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 1674
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 1674
      for (unsigned int ip = 0; ip < 6; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        double F2 = 0.0;
        
        // Total number of operations to compute function values = 18
        for (unsigned int r = 0; r < 3; r++)
        {
          F0 += FE1_f0_C0[ip][r]*w[15][nzc3[r]];
          F1 += FE1_f0_C0[ip][r]*w[15][nzc4[r]];
          F2 += FE1_f0_C0[ip][r]*w[15][nzc5[r]];
        }// end loop over 'r'
        
        // Number of operations to compute ip constants: 18
        double I[6];
        // Number of operations: 3
        I[0] = F0*F0*G[0]*W6[ip];
        
        // Number of operations: 3
        I[1] = F0*F1*G[0]*W6[ip];
        
        // Number of operations: 3
        I[2] = F0*F2*G[0]*W6[ip];
        
        // Number of operations: 3
        I[3] = F1*F1*G[0]*W6[ip];
        
        // Number of operations: 3
        I[4] = F1*F2*G[0]*W6[ip];
        
        // Number of operations: 3
        I[5] = F2*F2*G[0]*W6[ip];
        
        
        // Number of operations for primary indices: 243
        for (unsigned int j = 0; j < 3; j++)
        {
          for (unsigned int k = 0; k < 3; k++)
          {
            // Number of operations to compute entry: 3
            A[nzc3[j]*12 + nzc3[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[0];
            // Number of operations to compute entry: 3
            A[nzc3[j]*12 + nzc4[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[1];
            // Number of operations to compute entry: 3
            A[nzc3[j]*12 + nzc5[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[2];
            // Number of operations to compute entry: 3
            A[nzc4[j]*12 + nzc3[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[1];
            // Number of operations to compute entry: 3
            A[nzc4[j]*12 + nzc4[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[3];
            // Number of operations to compute entry: 3
            A[nzc4[j]*12 + nzc5[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc5[j]*12 + nzc3[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[2];
            // Number of operations to compute entry: 3
            A[nzc5[j]*12 + nzc4[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc5[j]*12 + nzc5[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[5];
          }// end loop over 'k'
        }// end loop over 'j'
      }// end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 1674
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 1674
      for (unsigned int ip = 0; ip < 6; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        double F2 = 0.0;
        
        // Total number of operations to compute function values = 18
        for (unsigned int r = 0; r < 3; r++)
        {
          F0 += FE1_f0_C0[ip][r]*w[15][nzc6[r]];
          F1 += FE1_f0_C0[ip][r]*w[15][nzc7[r]];
          F2 += FE1_f0_C0[ip][r]*w[15][nzc8[r]];
        }// end loop over 'r'
        
        // Number of operations to compute ip constants: 18
        double I[6];
        // Number of operations: 3
        I[0] = F0*F0*G[0]*W6[ip];
        
        // Number of operations: 3
        I[1] = F0*F1*G[0]*W6[ip];
        
        // Number of operations: 3
        I[2] = F0*F2*G[0]*W6[ip];
        
        // Number of operations: 3
        I[3] = F1*F1*G[0]*W6[ip];
        
        // Number of operations: 3
        I[4] = F1*F2*G[0]*W6[ip];
        
        // Number of operations: 3
        I[5] = F2*F2*G[0]*W6[ip];
        
        
        // Number of operations for primary indices: 243
        for (unsigned int j = 0; j < 3; j++)
        {
          for (unsigned int k = 0; k < 3; k++)
          {
            // Number of operations to compute entry: 3
            A[nzc6[j]*12 + nzc6[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[0];
            // Number of operations to compute entry: 3
            A[nzc6[j]*12 + nzc7[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[1];
            // Number of operations to compute entry: 3
            A[nzc6[j]*12 + nzc8[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[2];
            // Number of operations to compute entry: 3
            A[nzc7[j]*12 + nzc6[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[1];
            // Number of operations to compute entry: 3
            A[nzc7[j]*12 + nzc7[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[3];
            // Number of operations to compute entry: 3
            A[nzc7[j]*12 + nzc8[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc8[j]*12 + nzc6[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[2];
            // Number of operations to compute entry: 3
            A[nzc8[j]*12 + nzc7[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc8[j]*12 + nzc8[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[5];
          }// end loop over 'k'
        }// end loop over 'j'
      }// end loop over 'ip'
        break;
      }
    case 3:
      {
        // Total number of operations to compute element tensor (from this point): 1674
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 1674
      for (unsigned int ip = 0; ip < 6; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        double F2 = 0.0;
        
        // Total number of operations to compute function values = 18
        for (unsigned int r = 0; r < 3; r++)
        {
          F0 += FE1_f0_C0[ip][r]*w[15][nzc9[r]];
          F1 += FE1_f0_C0[ip][r]*w[15][nzc10[r]];
          F2 += FE1_f0_C0[ip][r]*w[15][nzc11[r]];
        }// end loop over 'r'
        
        // Number of operations to compute ip constants: 18
        double I[6];
        // Number of operations: 3
        I[0] = F1*F1*G[0]*W6[ip];
        
        // Number of operations: 3
        I[1] = F1*F2*G[0]*W6[ip];
        
        // Number of operations: 3
        I[2] = F0*F1*G[0]*W6[ip];
        
        // Number of operations: 3
        I[3] = F2*F2*G[0]*W6[ip];
        
        // Number of operations: 3
        I[4] = F0*F2*G[0]*W6[ip];
        
        // Number of operations: 3
        I[5] = F0*F0*G[0]*W6[ip];
        
        
        // Number of operations for primary indices: 243
        for (unsigned int j = 0; j < 3; j++)
        {
          for (unsigned int k = 0; k < 3; k++)
          {
            // Number of operations to compute entry: 3
            A[nzc10[j]*12 + nzc10[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[0];
            // Number of operations to compute entry: 3
            A[nzc10[j]*12 + nzc11[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[1];
            // Number of operations to compute entry: 3
            A[nzc10[j]*12 + nzc9[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[2];
            // Number of operations to compute entry: 3
            A[nzc11[j]*12 + nzc10[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[1];
            // Number of operations to compute entry: 3
            A[nzc11[j]*12 + nzc11[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[3];
            // Number of operations to compute entry: 3
            A[nzc11[j]*12 + nzc9[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc9[j]*12 + nzc10[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[2];
            // Number of operations to compute entry: 3
            A[nzc9[j]*12 + nzc11[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc9[j]*12 + nzc9[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[5];
          }// end loop over 'k'
        }// end loop over 'j'
      }// end loop over 'ip'
        break;
      }
    }
    
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Tabulate the tensor for the contribution from a local exterior facet
/// using the specified reference cell quadrature points/weights
void nsemomentum3d_exterior_facet_integral_0_0::tabulate_tensor(double* A,
                     const double * const * w,
                     const ufc::cell& c,
                     unsigned int num_quadrature_points,
                     const double * const * quadrature_points,
                     const double* quadrature_weights) const
{
    throw std::runtime_error("Quadrature version of tabulate_tensor not yet implemented (introduced in UFC 2.0).");
}
#endif

/// Constructor
nsemomentum3d_cell_integral_1_0::nsemomentum3d_cell_integral_1_0() : ufc::cell_integral()
{
    // Do nothing
}

/// Destructor
nsemomentum3d_cell_integral_1_0::~nsemomentum3d_cell_integral_1_0()
{
    // Do nothing
}

/// Tabulate the tensor for the contribution from a local cell
void nsemomentum3d_cell_integral_1_0::tabulate_tensor(double* A,
                                    const double * const * w,
                                    const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Cell Volume.
    
    // Compute circumradius.
    
    
    // Facet Area (divide by two because 'det' is scaled by area of reference triangle).
    
    // Array of quadrature weights.
    static const double W14[14] = {0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.0147649707904968, 0.0147649707904968, 0.0147649707904968, 0.0147649707904968, 0.0221397911142651, 0.0221397911142651, 0.0221397911142651, 0.0221397911142651};
    // Quadrature points on the UFC reference element: (0.0, 0.5, 0.5), (0.5, 0.0, 0.5), (0.5, 0.5, 0.0), (0.5, 0.0, 0.0), (0.0, 0.5, 0.0), (0.0, 0.0, 0.5), (0.698419704324387, 0.100526765225204, 0.100526765225204), (0.100526765225204, 0.100526765225204, 0.100526765225204), (0.100526765225204, 0.100526765225204, 0.698419704324387), (0.100526765225204, 0.698419704324387, 0.100526765225204), (0.0568813795204234, 0.314372873493192, 0.314372873493192), (0.314372873493192, 0.314372873493192, 0.314372873493192), (0.314372873493192, 0.314372873493192, 0.0568813795204234), (0.314372873493192, 0.0568813795204234, 0.314372873493192)
    
    // Value of basis functions at quadrature points.
    static const double FE0[14][4] = \
    {{0.0, 0.0, 0.5, 0.5},
    {0.0, 0.5, 0.0, 0.5},
    {0.0, 0.5, 0.5, 0.0},
    {0.5, 0.5, 0.0, 0.0},
    {0.5, 0.0, 0.5, 0.0},
    {0.5, 0.0, 0.0, 0.5},
    {0.100526765225205, 0.698419704324386, 0.100526765225205, 0.100526765225205},
    {0.698419704324387, 0.100526765225204, 0.100526765225205, 0.100526765225205},
    {0.100526765225205, 0.100526765225204, 0.100526765225205, 0.698419704324386},
    {0.100526765225205, 0.100526765225204, 0.698419704324386, 0.100526765225205},
    {0.314372873493192, 0.0568813795204234, 0.314372873493192, 0.314372873493192},
    {0.0568813795204235, 0.314372873493192, 0.314372873493192, 0.314372873493192},
    {0.314372873493192, 0.314372873493192, 0.314372873493192, 0.0568813795204234},
    {0.314372873493192, 0.314372873493192, 0.0568813795204235, 0.314372873493192}};
    
    // Array of non-zero columns
    static const unsigned int nzc7[4] = {4, 5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc3[4] = {0, 1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc11[4] = {8, 9, 10, 11};
    
    static const double FE0_D001[14][2] = \
    {{-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc9[2] = {4, 6};
    
    // Array of non-zero columns
    static const unsigned int nzc13[2] = {8, 10};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc8[2] = {4, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc12[2] = {8, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc10[2] = {4, 5};
    
    // Array of non-zero columns
    static const unsigned int nzc6[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc2[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc14[2] = {8, 9};
    
    // Array of non-zero columns
    static const unsigned int nzc4[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc0[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc5[2] = {0, 2};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 12; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    // Number of operations to compute geometry constants: 5957.
    double G[639];
    G[0] = -0.5*det*(std::pow(w[4][0], 1.5)*w[8][0]*(K_00*K_10 + K_01*K_11 + K_02*K_12) + w[12][0]*w[4][0]*w[4][0]*w[7][0]*(K_00*K_10 + K_01*K_11 + K_02*K_12));
    G[1] = -0.5*det*(std::pow(w[4][0], 1.5)*w[8][0]*(K_00*K_20 + K_01*K_21 + K_02*K_22) + w[12][0]*w[4][0]*w[4][0]*w[7][0]*(K_00*K_20 + K_01*K_21 + K_02*K_22));
    G[2] = det*w[8][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_00 + K_01*K_01 + K_02*K_02)-0.5*std::pow(w[4][0], 1.5)*(K_00*K_00 + K_01*K_01 + K_02*K_02));
    G[3] = det*w[8][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_10 + K_01*K_11 + K_02*K_12)-0.5*std::pow(w[4][0], 1.5)*(K_00*K_10 + K_01*K_11 + K_02*K_12));
    G[4] = det*w[8][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_20 + K_01*K_21 + K_02*K_22)-0.5*std::pow(w[4][0], 1.5)*(K_00*K_20 + K_01*K_21 + K_02*K_22));
    G[5] = -0.5*det*(std::pow(w[4][0], 1.5)*w[8][0]*(K_00*K_00 + K_01*K_01 + K_02*K_02) + w[12][0]*w[4][0]*w[4][0]*w[7][0]*(K_00*K_00 + K_01*K_01 + K_02*K_02));
    G[6] = 0.5*det*w[4][0]*(std::pow(w[4][0], 0.5)*w[8][0]*(K_00*K_10 + K_01*K_11 + K_02*K_12) + w[12][0]*w[4][0]*w[7][0]*(K_00*K_10 + K_01*K_11 + K_02*K_12));
    G[7] = 0.5*det*w[4][0]*(std::pow(w[4][0], 0.5)*w[8][0]*(K_00*K_20 + K_01*K_21 + K_02*K_22) + w[12][0]*w[4][0]*w[7][0]*(K_00*K_20 + K_01*K_21 + K_02*K_22));
    G[8] = 0.5*det*w[4][0]*(std::pow(w[4][0], 0.5)*w[8][0]*(K_00*K_00 + K_01*K_01 + K_02*K_02) + w[12][0]*w[4][0]*w[7][0]*(K_00*K_00 + K_01*K_01 + K_02*K_02));
    G[9] = K_00*K_01*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[10] = K_01*K_10*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[11] = K_02*K_12*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[12] = K_02*K_12*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[13] = det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_12 + K_02*K_10)-0.03125*std::pow(w[4][0], 1.5)*(K_00*K_12 + K_02*K_10));
    G[14] = det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_12 + K_02*K_10)-0.0625*std::pow(w[4][0], 1.5)*(K_00*K_12 + K_02*K_10));
    G[15] = det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]*(K_01*K_12 + K_02*K_11)-0.03125*std::pow(w[4][0], 1.5)*(K_01*K_12 + K_02*K_11));
    G[16] = det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]*(K_01*K_12 + K_02*K_11)-0.0625*std::pow(w[4][0], 1.5)*(K_01*K_12 + K_02*K_11));
    G[17] = det*w[6][0]*(0.03125*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_12 + K_02*K_10)-0.03125*std::pow(w[4][0], 1.5)*(K_00*K_12 + K_02*K_10));
    G[18] = det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_12 + K_02*K_10)-0.0625*std::pow(w[4][0], 1.5)*(K_00*K_12 + K_02*K_10));
    G[19] = det*w[6][0]*(0.03125*std::pow(w[4][0], 0.5)*w[4][0]*(K_01*K_12 + K_02*K_11)-0.03125*std::pow(w[4][0], 1.5)*(K_01*K_12 + K_02*K_11));
    G[20] = K_02*K_12*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[21] = det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]*(K_01*K_12 + K_02*K_11)-0.0625*std::pow(w[4][0], 1.5)*(K_01*K_12 + K_02*K_11));
    G[22] = K_02*K_12*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[23] = K_00*K_10*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[24] = K_00*K_10*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[25] = det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_11 + K_01*K_10)-0.03125*std::pow(w[4][0], 1.5)*(K_00*K_11 + K_01*K_10));
    G[26] = det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_11 + K_01*K_10)-0.0625*std::pow(w[4][0], 1.5)*(K_00*K_11 + K_01*K_10));
    G[27] = K_00*K_10*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[28] = K_00*K_10*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[29] = det*w[6][0]*(0.03125*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_11 + K_01*K_10)-0.03125*std::pow(w[4][0], 1.5)*(K_00*K_11 + K_01*K_10));
    G[30] = det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_11 + K_01*K_10)-0.0625*std::pow(w[4][0], 1.5)*(K_00*K_11 + K_01*K_10));
    G[31] = K_01*K_11*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[32] = K_01*K_11*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[33] = K_01*K_11*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[34] = K_01*K_11*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[35] = -0.03125*std::pow(w[4][0], 1.5)*K_00*K_10*det*w[6][0];
    G[36] = -0.0625*std::pow(w[4][0], 1.5)*K_00*K_10*det*w[6][0];
    G[37] = -0.03125*std::pow(w[4][0], 1.5)*det*w[6][0]*(K_00*K_11 + K_01*K_10);
    G[38] = -0.03125*std::pow(w[4][0], 1.5)*det*w[6][0]*(K_00*K_12 + K_02*K_10);
    G[39] = -0.0625*std::pow(w[4][0], 1.5)*det*w[6][0]*(K_00*K_11 + K_01*K_10);
    G[40] = -0.0625*std::pow(w[4][0], 1.5)*det*w[6][0]*(K_00*K_12 + K_02*K_10);
    G[41] = -0.03125*std::pow(w[4][0], 1.5)*K_01*K_11*det*w[6][0];
    G[42] = -0.03125*std::pow(w[4][0], 1.5)*det*w[6][0]*(K_01*K_12 + K_02*K_11);
    G[43] = -0.03125*std::pow(w[4][0], 1.5)*K_02*K_12*det*w[6][0];
    G[44] = -0.0625*std::pow(w[4][0], 1.5)*K_01*K_11*det*w[6][0];
    G[45] = -0.0625*std::pow(w[4][0], 1.5)*det*w[6][0]*(K_01*K_12 + K_02*K_11);
    G[46] = -0.0625*std::pow(w[4][0], 1.5)*K_02*K_12*det*w[6][0];
    G[47] = -0.5*det*(K_00*K_10 + K_01*K_11 + K_02*K_12);
    G[48] = -0.5*std::pow(w[4][0], 1.5)*K_01*K_11*det*w[6][0];
    G[49] = K_02*K_22*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[50] = K_02*K_22*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[51] = det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_22 + K_02*K_20)-0.03125*std::pow(w[4][0], 1.5)*(K_00*K_22 + K_02*K_20));
    G[52] = det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_22 + K_02*K_20)-0.0625*std::pow(w[4][0], 1.5)*(K_00*K_22 + K_02*K_20));
    G[53] = det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]*(K_01*K_22 + K_02*K_21)-0.03125*std::pow(w[4][0], 1.5)*(K_01*K_22 + K_02*K_21));
    G[54] = det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]*(K_01*K_22 + K_02*K_21)-0.0625*std::pow(w[4][0], 1.5)*(K_01*K_22 + K_02*K_21));
    G[55] = det*w[6][0]*(0.03125*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_22 + K_02*K_20)-0.03125*std::pow(w[4][0], 1.5)*(K_00*K_22 + K_02*K_20));
    G[56] = det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_22 + K_02*K_20)-0.0625*std::pow(w[4][0], 1.5)*(K_00*K_22 + K_02*K_20));
    G[57] = det*w[6][0]*(0.03125*std::pow(w[4][0], 0.5)*w[4][0]*(K_01*K_22 + K_02*K_21)-0.03125*std::pow(w[4][0], 1.5)*(K_01*K_22 + K_02*K_21));
    G[58] = K_02*K_22*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[59] = det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]*(K_01*K_22 + K_02*K_21)-0.0625*std::pow(w[4][0], 1.5)*(K_01*K_22 + K_02*K_21));
    G[60] = K_02*K_22*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[61] = K_00*K_20*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[62] = K_00*K_20*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[63] = det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_21 + K_01*K_20)-0.03125*std::pow(w[4][0], 1.5)*(K_00*K_21 + K_01*K_20));
    G[64] = det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_21 + K_01*K_20)-0.0625*std::pow(w[4][0], 1.5)*(K_00*K_21 + K_01*K_20));
    G[65] = K_00*K_20*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[66] = K_00*K_20*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[67] = det*w[6][0]*(0.03125*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_21 + K_01*K_20)-0.03125*std::pow(w[4][0], 1.5)*(K_00*K_21 + K_01*K_20));
    G[68] = det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_21 + K_01*K_20)-0.0625*std::pow(w[4][0], 1.5)*(K_00*K_21 + K_01*K_20));
    G[69] = K_01*K_21*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[70] = K_01*K_21*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[71] = K_01*K_21*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[72] = K_01*K_21*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[73] = -0.03125*std::pow(w[4][0], 1.5)*K_00*K_20*det*w[6][0];
    G[74] = -0.0625*std::pow(w[4][0], 1.5)*K_00*K_20*det*w[6][0];
    G[75] = -0.03125*std::pow(w[4][0], 1.5)*det*w[6][0]*(K_00*K_21 + K_01*K_20);
    G[76] = -0.03125*std::pow(w[4][0], 1.5)*det*w[6][0]*(K_00*K_22 + K_02*K_20);
    G[77] = -0.0625*std::pow(w[4][0], 1.5)*det*w[6][0]*(K_00*K_21 + K_01*K_20);
    G[78] = -0.0625*std::pow(w[4][0], 1.5)*det*w[6][0]*(K_00*K_22 + K_02*K_20);
    G[79] = -0.03125*std::pow(w[4][0], 1.5)*K_01*K_21*det*w[6][0];
    G[80] = -0.03125*std::pow(w[4][0], 1.5)*det*w[6][0]*(K_01*K_22 + K_02*K_21);
    G[81] = -0.03125*std::pow(w[4][0], 1.5)*K_02*K_22*det*w[6][0];
    G[82] = -0.0625*std::pow(w[4][0], 1.5)*K_01*K_21*det*w[6][0];
    G[83] = -0.0625*std::pow(w[4][0], 1.5)*det*w[6][0]*(K_01*K_22 + K_02*K_21);
    G[84] = -0.0625*std::pow(w[4][0], 1.5)*K_02*K_22*det*w[6][0];
    G[85] = -0.5*det*(K_00*K_20 + K_01*K_21 + K_02*K_22);
    G[86] = -0.5*std::pow(w[4][0], 1.5)*K_01*K_21*det*w[6][0];
    G[87] = K_01*K_02*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[88] = K_01*K_12*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[89] = K_01*K_22*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[90] = -0.5*std::pow(w[4][0], 1.5)*K_01*K_02*det*w[6][0];
    G[91] = -0.5*std::pow(w[4][0], 1.5)*K_01*K_12*det*w[6][0];
    G[92] = -0.5*std::pow(w[4][0], 1.5)*K_01*K_22*det*w[6][0];
    G[93] = K_02*K_02*det*w[6][0]*(0.09375*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[94] = K_02*K_12*det*w[6][0]*(0.09375*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[95] = K_02*K_22*det*w[6][0]*(0.09375*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[96] = K_02*K_02*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[97] = K_02*K_02*det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[98] = K_02*K_12*det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[99] = K_02*K_22*det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[100] = K_02*K_02*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[101] = K_00*K_02*det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[102] = det*w[6][0]*(0.09375*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_12 + K_02*K_10)-0.03125*std::pow(w[4][0], 1.5)*(K_00*K_12 + K_02*K_10));
    G[103] = det*w[6][0]*(0.09375*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_22 + K_02*K_20)-0.03125*std::pow(w[4][0], 1.5)*(K_00*K_22 + K_02*K_20));
    G[104] = K_00*K_02*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[105] = K_00*K_02*det*w[6][0]*(0.375*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[106] = det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_12 + K_02*K_10)-0.0625*std::pow(w[4][0], 1.5)*(K_00*K_12 + K_02*K_10));
    G[107] = det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_22 + K_02*K_20)-0.0625*std::pow(w[4][0], 1.5)*(K_00*K_22 + K_02*K_20));
    G[108] = K_00*K_02*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[109] = K_01*K_02*det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[110] = det*w[6][0]*(0.09375*std::pow(w[4][0], 0.5)*w[4][0]*(K_01*K_12 + K_02*K_11)-0.03125*std::pow(w[4][0], 1.5)*(K_01*K_12 + K_02*K_11));
    G[111] = det*w[6][0]*(0.09375*std::pow(w[4][0], 0.5)*w[4][0]*(K_01*K_22 + K_02*K_21)-0.03125*std::pow(w[4][0], 1.5)*(K_01*K_22 + K_02*K_21));
    G[112] = K_01*K_02*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[113] = K_01*K_02*det*w[6][0]*(0.375*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[114] = det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]*(K_01*K_12 + K_02*K_11)-0.0625*std::pow(w[4][0], 1.5)*(K_01*K_12 + K_02*K_11));
    G[115] = det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]*(K_01*K_22 + K_02*K_21)-0.0625*std::pow(w[4][0], 1.5)*(K_01*K_22 + K_02*K_21));
    G[116] = K_01*K_02*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[117] = K_00*K_02*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[118] = K_00*K_02*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[119] = K_01*K_02*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[120] = K_02*K_02*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[121] = K_02*det*w[6][0]*(0.125*std::pow(w[4][0], 1.5)-0.125*std::pow(w[4][0], 0.5)*w[4][0]);
    G[122] = K_01*K_02*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[123] = K_02*K_02*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[124] = K_02*K_12*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[125] = K_02*K_22*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[126] = K_02*K_02*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[127] = K_02*det*w[6][0]*(0.25*std::pow(w[4][0], 1.5)-0.25*std::pow(w[4][0], 0.5)*w[4][0]);
    G[128] = K_00*K_00*det*w[6][0]*(0.09375*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[129] = K_00*K_10*det*w[6][0]*(0.09375*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[130] = K_00*K_20*det*w[6][0]*(0.09375*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[131] = K_00*K_00*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[132] = K_00*K_00*det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[133] = K_00*K_10*det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[134] = K_00*K_20*det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[135] = K_00*K_00*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[136] = K_00*K_01*det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[137] = det*w[6][0]*(0.09375*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_11 + K_01*K_10)-0.03125*std::pow(w[4][0], 1.5)*(K_00*K_11 + K_01*K_10));
    G[138] = det*w[6][0]*(0.09375*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_21 + K_01*K_20)-0.03125*std::pow(w[4][0], 1.5)*(K_00*K_21 + K_01*K_20));
    G[139] = K_00*K_01*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[140] = K_00*K_01*det*w[6][0]*(0.375*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[141] = det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_11 + K_01*K_10)-0.0625*std::pow(w[4][0], 1.5)*(K_00*K_11 + K_01*K_10));
    G[142] = det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_21 + K_01*K_20)-0.0625*std::pow(w[4][0], 1.5)*(K_00*K_21 + K_01*K_20));
    G[143] = K_00*K_01*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[144] = K_00*K_00*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[145] = K_00*K_00*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[146] = K_00*K_10*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[147] = K_00*K_20*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[148] = K_00*K_00*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[149] = K_00*K_01*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[150] = K_00*det*w[6][0]*(0.125*std::pow(w[4][0], 1.5)-0.125*std::pow(w[4][0], 0.5)*w[4][0]);
    G[151] = K_00*K_01*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[152] = K_00*det*w[6][0]*(0.25*std::pow(w[4][0], 1.5)-0.25*std::pow(w[4][0], 0.5)*w[4][0]);
    G[153] = K_01*K_20*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[154] = K_01*K_01*det*w[6][0]*(0.09375*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[155] = K_01*K_11*det*w[6][0]*(0.09375*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[156] = K_01*K_21*det*w[6][0]*(0.09375*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[157] = K_01*K_01*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[158] = K_01*K_01*det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[159] = K_01*K_11*det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[160] = K_01*K_21*det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[161] = K_01*K_01*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[162] = K_01*K_01*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[163] = K_01*det*w[6][0]*(0.125*std::pow(w[4][0], 1.5)-0.125*std::pow(w[4][0], 0.5)*w[4][0]);
    G[164] = K_01*K_01*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[165] = K_01*K_11*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[166] = K_01*K_21*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[167] = K_01*K_01*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[168] = K_01*det*w[6][0]*(0.25*std::pow(w[4][0], 1.5)-0.25*std::pow(w[4][0], 0.5)*w[4][0]);
    G[169] = K_00*K_00*det*w[6][0]*(0.03125*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[170] = K_00*K_10*det*w[6][0]*(0.03125*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[171] = K_00*K_20*det*w[6][0]*(0.03125*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[172] = -0.03125*std::pow(w[4][0], 1.5)*K_00*K_00*det*w[6][0];
    G[173] = -0.0625*std::pow(w[4][0], 1.5)*K_00*K_00*det*w[6][0];
    G[174] = -0.0625*std::pow(w[4][0], 1.5)*K_00*K_01*det*w[6][0];
    G[175] = -0.0625*std::pow(w[4][0], 1.5)*K_00*K_02*det*w[6][0];
    G[176] = 0.125*std::pow(w[4][0], 1.5)*K_00*det*w[6][0];
    G[177] = -0.125*std::pow(w[4][0], 1.5)*K_00*K_01*det*w[6][0];
    G[178] = -0.125*std::pow(w[4][0], 1.5)*K_00*K_02*det*w[6][0];
    G[179] = 0.25*std::pow(w[4][0], 1.5)*K_00*det*w[6][0];
    G[180] = K_01*K_01*det*w[6][0]*(0.03125*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[181] = K_01*K_11*det*w[6][0]*(0.03125*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[182] = K_01*K_21*det*w[6][0]*(0.03125*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[183] = -0.03125*std::pow(w[4][0], 1.5)*K_01*K_01*det*w[6][0];
    G[184] = -0.0625*std::pow(w[4][0], 1.5)*K_01*K_02*det*w[6][0];
    G[185] = 0.125*std::pow(w[4][0], 1.5)*K_01*det*w[6][0];
    G[186] = K_02*K_02*det*w[6][0]*(0.03125*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[187] = K_02*K_12*det*w[6][0]*(0.03125*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[188] = K_02*K_22*det*w[6][0]*(0.03125*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[189] = -0.03125*std::pow(w[4][0], 1.5)*K_02*K_02*det*w[6][0];
    G[190] = 0.125*std::pow(w[4][0], 1.5)*K_02*det*w[6][0];
    G[191] = -0.0625*std::pow(w[4][0], 1.5)*K_01*K_01*det*w[6][0];
    G[192] = -0.125*std::pow(w[4][0], 1.5)*K_01*K_02*det*w[6][0];
    G[193] = 0.25*std::pow(w[4][0], 1.5)*K_01*det*w[6][0];
    G[194] = -0.0625*std::pow(w[4][0], 1.5)*K_02*K_02*det*w[6][0];
    G[195] = 0.25*std::pow(w[4][0], 1.5)*K_02*det*w[6][0];
    G[196] = -0.5*std::pow(w[4][0], 1.5)*K_00*K_01*det*w[6][0];
    G[197] = -0.5*std::pow(w[4][0], 1.5)*K_01*K_10*det*w[6][0];
    G[198] = -0.5*det*(K_00*K_00 + K_01*K_01 + K_02*K_02);
    G[199] = -0.5*std::pow(w[4][0], 1.5)*K_01*K_20*det*w[6][0];
    G[200] = K_01*K_01*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[201] = K_01*K_11*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[202] = K_01*K_21*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[203] = -0.5*std::pow(w[4][0], 1.5)*K_01*K_01*det*w[6][0];
    G[204] = det*w[8][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]*(K_10*K_20 + K_11*K_21 + K_12*K_22)-0.5*std::pow(w[4][0], 1.5)*(K_10*K_20 + K_11*K_21 + K_12*K_22));
    G[205] = det*w[8][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]*(K_20*K_20 + K_21*K_21 + K_22*K_22)-0.5*std::pow(w[4][0], 1.5)*(K_20*K_20 + K_21*K_21 + K_22*K_22));
    G[206] = -0.5*det*(std::pow(w[4][0], 1.5)*w[8][0]*(K_10*K_20 + K_11*K_21 + K_12*K_22) + w[12][0]*w[4][0]*w[4][0]*w[7][0]*(K_10*K_20 + K_11*K_21 + K_12*K_22));
    G[207] = -0.5*det*(std::pow(w[4][0], 1.5)*w[8][0]*(K_20*K_20 + K_21*K_21 + K_22*K_22) + w[12][0]*w[4][0]*w[4][0]*w[7][0]*(K_20*K_20 + K_21*K_21 + K_22*K_22));
    G[208] = 0.5*det*w[4][0]*(std::pow(w[4][0], 0.5)*w[8][0]*(K_10*K_20 + K_11*K_21 + K_12*K_22) + w[12][0]*w[4][0]*w[7][0]*(K_10*K_20 + K_11*K_21 + K_12*K_22));
    G[209] = 0.5*det*w[4][0]*(std::pow(w[4][0], 0.5)*w[8][0]*(K_20*K_20 + K_21*K_21 + K_22*K_22) + w[12][0]*w[4][0]*w[7][0]*(K_20*K_20 + K_21*K_21 + K_22*K_22));
    G[210] = K_00*K_22*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[211] = K_10*K_22*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[212] = -0.5*std::pow(w[4][0], 1.5)*K_11*K_22*det*w[6][0];
    G[213] = -0.5*std::pow(w[4][0], 1.5)*K_21*K_22*det*w[6][0];
    G[214] = K_02*K_22*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[215] = K_12*K_22*det*w[6][0]*(0.09375*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[216] = K_12*K_22*det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[217] = det*w[6][0]*(0.09375*std::pow(w[4][0], 0.5)*w[4][0]*(K_10*K_22 + K_12*K_20)-0.03125*std::pow(w[4][0], 1.5)*(K_10*K_22 + K_12*K_20));
    G[218] = det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]*(K_10*K_22 + K_12*K_20)-0.0625*std::pow(w[4][0], 1.5)*(K_10*K_22 + K_12*K_20));
    G[219] = det*w[6][0]*(0.09375*std::pow(w[4][0], 0.5)*w[4][0]*(K_11*K_22 + K_12*K_21)-0.03125*std::pow(w[4][0], 1.5)*(K_11*K_22 + K_12*K_21));
    G[220] = det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]*(K_11*K_22 + K_12*K_21)-0.0625*std::pow(w[4][0], 1.5)*(K_11*K_22 + K_12*K_21));
    G[221] = det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]*(K_10*K_22 + K_12*K_20)-0.03125*std::pow(w[4][0], 1.5)*(K_10*K_22 + K_12*K_20));
    G[222] = det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]*(K_10*K_22 + K_12*K_20)-0.0625*std::pow(w[4][0], 1.5)*(K_10*K_22 + K_12*K_20));
    G[223] = det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]*(K_11*K_22 + K_12*K_21)-0.03125*std::pow(w[4][0], 1.5)*(K_11*K_22 + K_12*K_21));
    G[224] = K_12*K_22*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[225] = det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]*(K_11*K_22 + K_12*K_21)-0.0625*std::pow(w[4][0], 1.5)*(K_11*K_22 + K_12*K_21));
    G[226] = K_12*K_22*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[227] = K_10*K_20*det*w[6][0]*(0.09375*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[228] = K_10*K_20*det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[229] = det*w[6][0]*(0.09375*std::pow(w[4][0], 0.5)*w[4][0]*(K_10*K_21 + K_11*K_20)-0.03125*std::pow(w[4][0], 1.5)*(K_10*K_21 + K_11*K_20));
    G[230] = det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]*(K_10*K_21 + K_11*K_20)-0.0625*std::pow(w[4][0], 1.5)*(K_10*K_21 + K_11*K_20));
    G[231] = K_10*K_20*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[232] = K_10*K_20*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[233] = det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]*(K_10*K_21 + K_11*K_20)-0.03125*std::pow(w[4][0], 1.5)*(K_10*K_21 + K_11*K_20));
    G[234] = det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]*(K_10*K_21 + K_11*K_20)-0.0625*std::pow(w[4][0], 1.5)*(K_10*K_21 + K_11*K_20));
    G[235] = K_11*K_21*det*w[6][0]*(0.09375*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[236] = K_11*K_21*det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[237] = K_11*K_21*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[238] = K_11*K_21*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[239] = K_10*K_20*det*w[6][0]*(0.03125*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[240] = K_10*K_20*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[241] = det*w[6][0]*(0.03125*std::pow(w[4][0], 0.5)*w[4][0]*(K_10*K_21 + K_11*K_20)-0.03125*std::pow(w[4][0], 1.5)*(K_10*K_21 + K_11*K_20));
    G[242] = det*w[6][0]*(0.03125*std::pow(w[4][0], 0.5)*w[4][0]*(K_10*K_22 + K_12*K_20)-0.03125*std::pow(w[4][0], 1.5)*(K_10*K_22 + K_12*K_20));
    G[243] = det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]*(K_10*K_21 + K_11*K_20)-0.0625*std::pow(w[4][0], 1.5)*(K_10*K_21 + K_11*K_20));
    G[244] = det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]*(K_10*K_22 + K_12*K_20)-0.0625*std::pow(w[4][0], 1.5)*(K_10*K_22 + K_12*K_20));
    G[245] = K_11*K_21*det*w[6][0]*(0.03125*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[246] = det*w[6][0]*(0.03125*std::pow(w[4][0], 0.5)*w[4][0]*(K_11*K_22 + K_12*K_21)-0.03125*std::pow(w[4][0], 1.5)*(K_11*K_22 + K_12*K_21));
    G[247] = K_12*K_22*det*w[6][0]*(0.03125*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[248] = K_11*K_21*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[249] = det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]*(K_11*K_22 + K_12*K_21)-0.0625*std::pow(w[4][0], 1.5)*(K_11*K_22 + K_12*K_21));
    G[250] = K_12*K_22*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[251] = K_12*K_22*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[252] = K_22*K_22*det*w[6][0]*(0.09375*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[253] = K_22*K_22*det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[254] = K_20*K_22*det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[255] = K_20*K_22*det*w[6][0]*(0.375*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[256] = K_21*K_22*det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[257] = K_21*K_22*det*w[6][0]*(0.375*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[258] = K_20*K_22*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[259] = K_20*K_22*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[260] = K_21*K_22*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[261] = K_22*K_22*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[262] = K_21*K_22*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[263] = K_22*K_22*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[264] = K_20*K_20*det*w[6][0]*(0.09375*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[265] = K_20*K_20*det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[266] = K_20*K_21*det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[267] = K_20*K_21*det*w[6][0]*(0.375*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[268] = K_20*K_20*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[269] = K_20*K_20*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[270] = K_20*K_21*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[271] = K_20*K_21*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[272] = K_21*K_21*det*w[6][0]*(0.09375*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[273] = K_21*K_21*det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[274] = K_21*K_21*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[275] = K_21*K_21*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[276] = K_20*K_20*det*w[6][0]*(0.03125*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[277] = K_20*K_20*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[278] = K_20*K_21*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[279] = K_20*K_22*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[280] = K_20*K_21*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[281] = K_20*K_22*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[282] = K_21*K_21*det*w[6][0]*(0.03125*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[283] = K_21*K_22*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[284] = K_22*K_22*det*w[6][0]*(0.03125*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[285] = K_21*K_21*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[286] = K_21*K_22*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[287] = K_22*K_22*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[288] = K_22*K_22*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[289] = -0.5*std::pow(w[4][0], 1.5)*K_02*K_22*det*w[6][0];
    G[290] = K_12*K_22*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[291] = K_12*K_22*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[292] = K_10*K_20*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[293] = K_10*K_20*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[294] = K_11*K_21*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[295] = K_11*K_21*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[296] = -0.03125*std::pow(w[4][0], 1.5)*K_10*K_20*det*w[6][0];
    G[297] = -0.0625*std::pow(w[4][0], 1.5)*K_10*K_20*det*w[6][0];
    G[298] = -0.03125*std::pow(w[4][0], 1.5)*det*w[6][0]*(K_10*K_21 + K_11*K_20);
    G[299] = -0.03125*std::pow(w[4][0], 1.5)*det*w[6][0]*(K_10*K_22 + K_12*K_20);
    G[300] = -0.0625*std::pow(w[4][0], 1.5)*det*w[6][0]*(K_10*K_21 + K_11*K_20);
    G[301] = -0.0625*std::pow(w[4][0], 1.5)*det*w[6][0]*(K_10*K_22 + K_12*K_20);
    G[302] = -0.03125*std::pow(w[4][0], 1.5)*K_11*K_21*det*w[6][0];
    G[303] = -0.03125*std::pow(w[4][0], 1.5)*det*w[6][0]*(K_11*K_22 + K_12*K_21);
    G[304] = -0.03125*std::pow(w[4][0], 1.5)*K_12*K_22*det*w[6][0];
    G[305] = -0.0625*std::pow(w[4][0], 1.5)*K_11*K_21*det*w[6][0];
    G[306] = -0.0625*std::pow(w[4][0], 1.5)*det*w[6][0]*(K_11*K_22 + K_12*K_21);
    G[307] = -0.0625*std::pow(w[4][0], 1.5)*K_12*K_22*det*w[6][0];
    G[308] = -0.5*det*(K_10*K_20 + K_11*K_21 + K_12*K_22);
    G[309] = -0.5*std::pow(w[4][0], 1.5)*K_12*K_22*det*w[6][0];
    G[310] = K_22*K_22*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[311] = K_22*K_22*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[312] = K_20*K_20*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[313] = K_20*K_20*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[314] = K_21*K_21*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[315] = K_21*K_21*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[316] = -0.03125*std::pow(w[4][0], 1.5)*K_20*K_20*det*w[6][0];
    G[317] = -0.0625*std::pow(w[4][0], 1.5)*K_20*K_20*det*w[6][0];
    G[318] = -0.0625*std::pow(w[4][0], 1.5)*K_20*K_21*det*w[6][0];
    G[319] = -0.0625*std::pow(w[4][0], 1.5)*K_20*K_22*det*w[6][0];
    G[320] = -0.125*std::pow(w[4][0], 1.5)*K_20*K_21*det*w[6][0];
    G[321] = -0.125*std::pow(w[4][0], 1.5)*K_20*K_22*det*w[6][0];
    G[322] = -0.03125*std::pow(w[4][0], 1.5)*K_21*K_21*det*w[6][0];
    G[323] = -0.0625*std::pow(w[4][0], 1.5)*K_21*K_22*det*w[6][0];
    G[324] = -0.03125*std::pow(w[4][0], 1.5)*K_22*K_22*det*w[6][0];
    G[325] = -0.0625*std::pow(w[4][0], 1.5)*K_21*K_21*det*w[6][0];
    G[326] = -0.125*std::pow(w[4][0], 1.5)*K_21*K_22*det*w[6][0];
    G[327] = -0.0625*std::pow(w[4][0], 1.5)*K_22*K_22*det*w[6][0];
    G[328] = -0.5*det*(K_20*K_20 + K_21*K_21 + K_22*K_22);
    G[329] = -0.5*std::pow(w[4][0], 1.5)*K_22*K_22*det*w[6][0];
    G[330] = K_22*det*w[6][0]*(0.125*std::pow(w[4][0], 1.5)-0.125*std::pow(w[4][0], 0.5)*w[4][0]);
    G[331] = K_22*det*w[6][0]*(0.25*std::pow(w[4][0], 1.5)-0.25*std::pow(w[4][0], 0.5)*w[4][0]);
    G[332] = K_20*det*w[6][0]*(0.125*std::pow(w[4][0], 1.5)-0.125*std::pow(w[4][0], 0.5)*w[4][0]);
    G[333] = K_20*det*w[6][0]*(0.25*std::pow(w[4][0], 1.5)-0.25*std::pow(w[4][0], 0.5)*w[4][0]);
    G[334] = K_20*K_22*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[335] = K_21*det*w[6][0]*(0.125*std::pow(w[4][0], 1.5)-0.125*std::pow(w[4][0], 0.5)*w[4][0]);
    G[336] = K_21*det*w[6][0]*(0.25*std::pow(w[4][0], 1.5)-0.25*std::pow(w[4][0], 0.5)*w[4][0]);
    G[337] = 0.125*std::pow(w[4][0], 1.5)*K_20*det*w[6][0];
    G[338] = 0.25*std::pow(w[4][0], 1.5)*K_20*det*w[6][0];
    G[339] = 0.125*std::pow(w[4][0], 1.5)*K_21*det*w[6][0];
    G[340] = 0.125*std::pow(w[4][0], 1.5)*K_22*det*w[6][0];
    G[341] = 0.25*std::pow(w[4][0], 1.5)*K_21*det*w[6][0];
    G[342] = 0.25*std::pow(w[4][0], 1.5)*K_22*det*w[6][0];
    G[343] = -0.5*std::pow(w[4][0], 1.5)*K_00*K_22*det*w[6][0];
    G[344] = -0.5*std::pow(w[4][0], 1.5)*K_10*K_22*det*w[6][0];
    G[345] = -0.5*std::pow(w[4][0], 1.5)*K_20*K_22*det*w[6][0];
    G[346] = K_11*K_22*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[347] = K_21*K_22*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[348] = det*w[8][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]*(K_10*K_10 + K_11*K_11 + K_12*K_12)-0.5*std::pow(w[4][0], 1.5)*(K_10*K_10 + K_11*K_11 + K_12*K_12));
    G[349] = -0.5*det*(std::pow(w[4][0], 1.5)*w[8][0]*(K_10*K_10 + K_11*K_11 + K_12*K_12) + w[12][0]*w[4][0]*w[4][0]*w[7][0]*(K_10*K_10 + K_11*K_11 + K_12*K_12));
    G[350] = 0.5*det*w[4][0]*(std::pow(w[4][0], 0.5)*w[8][0]*(K_10*K_10 + K_11*K_11 + K_12*K_12) + w[12][0]*w[4][0]*w[7][0]*(K_10*K_10 + K_11*K_11 + K_12*K_12));
    G[351] = K_00*K_12*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[352] = K_10*K_12*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[353] = -0.5*std::pow(w[4][0], 1.5)*K_11*K_12*det*w[6][0];
    G[354] = -0.5*std::pow(w[4][0], 1.5)*K_12*K_21*det*w[6][0];
    G[355] = K_02*K_12*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[356] = K_12*K_12*det*w[6][0]*(0.09375*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[357] = K_12*K_12*det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[358] = K_10*K_12*det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[359] = K_10*K_12*det*w[6][0]*(0.375*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[360] = K_11*K_12*det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[361] = K_11*K_12*det*w[6][0]*(0.375*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[362] = K_10*K_12*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[363] = K_10*K_12*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[364] = K_11*K_12*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[365] = K_12*K_12*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[366] = K_11*K_12*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[367] = K_12*K_12*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[368] = K_10*K_10*det*w[6][0]*(0.09375*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[369] = K_10*K_10*det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[370] = K_10*K_11*det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[371] = K_10*K_11*det*w[6][0]*(0.375*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[372] = K_10*K_10*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[373] = K_10*K_10*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[374] = K_10*K_11*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[375] = K_10*K_11*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[376] = K_11*K_11*det*w[6][0]*(0.09375*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[377] = K_11*K_11*det*w[6][0]*(0.1875*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[378] = K_11*K_11*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[379] = K_11*K_11*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[380] = K_10*K_10*det*w[6][0]*(0.03125*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[381] = K_10*K_10*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[382] = K_10*K_11*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[383] = K_10*K_12*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[384] = K_10*K_11*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[385] = K_10*K_12*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[386] = K_11*K_11*det*w[6][0]*(0.03125*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[387] = K_11*K_12*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[388] = K_12*K_12*det*w[6][0]*(0.03125*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[389] = K_11*K_11*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[390] = K_11*K_12*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[391] = K_12*K_12*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.0625*std::pow(w[4][0], 1.5));
    G[392] = K_12*K_12*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[393] = -0.5*std::pow(w[4][0], 1.5)*K_02*K_12*det*w[6][0];
    G[394] = K_12*K_12*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[395] = K_12*K_12*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[396] = K_10*K_10*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[397] = K_10*K_10*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[398] = K_11*K_11*det*w[6][0]*(0.0625*std::pow(w[4][0], 0.5)*w[4][0]-0.03125*std::pow(w[4][0], 1.5));
    G[399] = K_11*K_11*det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]-0.125*std::pow(w[4][0], 1.5));
    G[400] = -0.03125*std::pow(w[4][0], 1.5)*K_10*K_10*det*w[6][0];
    G[401] = -0.0625*std::pow(w[4][0], 1.5)*K_10*K_10*det*w[6][0];
    G[402] = -0.0625*std::pow(w[4][0], 1.5)*K_10*K_11*det*w[6][0];
    G[403] = -0.0625*std::pow(w[4][0], 1.5)*K_10*K_12*det*w[6][0];
    G[404] = -0.125*std::pow(w[4][0], 1.5)*K_10*K_11*det*w[6][0];
    G[405] = -0.125*std::pow(w[4][0], 1.5)*K_10*K_12*det*w[6][0];
    G[406] = -0.03125*std::pow(w[4][0], 1.5)*K_11*K_11*det*w[6][0];
    G[407] = -0.0625*std::pow(w[4][0], 1.5)*K_11*K_12*det*w[6][0];
    G[408] = -0.03125*std::pow(w[4][0], 1.5)*K_12*K_12*det*w[6][0];
    G[409] = -0.0625*std::pow(w[4][0], 1.5)*K_11*K_11*det*w[6][0];
    G[410] = -0.125*std::pow(w[4][0], 1.5)*K_11*K_12*det*w[6][0];
    G[411] = -0.0625*std::pow(w[4][0], 1.5)*K_12*K_12*det*w[6][0];
    G[412] = -0.5*det*(K_10*K_10 + K_11*K_11 + K_12*K_12);
    G[413] = -0.5*std::pow(w[4][0], 1.5)*K_12*K_12*det*w[6][0];
    G[414] = K_12*det*w[6][0]*(0.125*std::pow(w[4][0], 1.5)-0.125*std::pow(w[4][0], 0.5)*w[4][0]);
    G[415] = K_12*det*w[6][0]*(0.25*std::pow(w[4][0], 1.5)-0.25*std::pow(w[4][0], 0.5)*w[4][0]);
    G[416] = K_10*det*w[6][0]*(0.125*std::pow(w[4][0], 1.5)-0.125*std::pow(w[4][0], 0.5)*w[4][0]);
    G[417] = K_10*det*w[6][0]*(0.25*std::pow(w[4][0], 1.5)-0.25*std::pow(w[4][0], 0.5)*w[4][0]);
    G[418] = K_12*K_20*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[419] = K_11*det*w[6][0]*(0.125*std::pow(w[4][0], 1.5)-0.125*std::pow(w[4][0], 0.5)*w[4][0]);
    G[420] = K_11*det*w[6][0]*(0.25*std::pow(w[4][0], 1.5)-0.25*std::pow(w[4][0], 0.5)*w[4][0]);
    G[421] = 0.125*std::pow(w[4][0], 1.5)*K_10*det*w[6][0];
    G[422] = 0.25*std::pow(w[4][0], 1.5)*K_10*det*w[6][0];
    G[423] = 0.125*std::pow(w[4][0], 1.5)*K_11*det*w[6][0];
    G[424] = 0.125*std::pow(w[4][0], 1.5)*K_12*det*w[6][0];
    G[425] = 0.25*std::pow(w[4][0], 1.5)*K_11*det*w[6][0];
    G[426] = 0.25*std::pow(w[4][0], 1.5)*K_12*det*w[6][0];
    G[427] = -0.5*std::pow(w[4][0], 1.5)*K_00*K_12*det*w[6][0];
    G[428] = -0.5*std::pow(w[4][0], 1.5)*K_10*K_12*det*w[6][0];
    G[429] = -0.5*std::pow(w[4][0], 1.5)*K_12*K_20*det*w[6][0];
    G[430] = K_11*K_12*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[431] = K_12*K_21*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[432] = K_00*K_02*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[433] = K_02*K_10*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[434] = -0.5*std::pow(w[4][0], 1.5)*K_02*K_11*det*w[6][0];
    G[435] = -0.5*std::pow(w[4][0], 1.5)*K_02*K_21*det*w[6][0];
    G[436] = K_02*K_02*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[437] = -0.5*std::pow(w[4][0], 1.5)*K_02*K_02*det*w[6][0];
    G[438] = K_02*K_20*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[439] = -0.5*std::pow(w[4][0], 1.5)*K_00*K_02*det*w[6][0];
    G[440] = -0.5*std::pow(w[4][0], 1.5)*K_02*K_10*det*w[6][0];
    G[441] = -0.5*std::pow(w[4][0], 1.5)*K_02*K_20*det*w[6][0];
    G[442] = K_02*K_11*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[443] = K_02*K_21*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[444] = K_00*K_20*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[445] = K_10*K_20*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[446] = -0.5*std::pow(w[4][0], 1.5)*K_11*K_20*det*w[6][0];
    G[447] = -0.5*std::pow(w[4][0], 1.5)*K_20*K_21*det*w[6][0];
    G[448] = K_20*K_20*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[449] = -0.5*std::pow(w[4][0], 1.5)*K_00*K_20*det*w[6][0];
    G[450] = -0.5*std::pow(w[4][0], 1.5)*K_10*K_20*det*w[6][0];
    G[451] = -0.5*std::pow(w[4][0], 1.5)*K_20*K_20*det*w[6][0];
    G[452] = K_11*K_20*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[453] = K_20*K_21*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[454] = K_00*K_10*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[455] = K_10*K_10*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[456] = -0.5*std::pow(w[4][0], 1.5)*K_10*K_11*det*w[6][0];
    G[457] = -0.5*std::pow(w[4][0], 1.5)*K_10*K_21*det*w[6][0];
    G[458] = -0.5*std::pow(w[4][0], 1.5)*K_00*K_10*det*w[6][0];
    G[459] = -0.5*std::pow(w[4][0], 1.5)*K_10*K_10*det*w[6][0];
    G[460] = K_10*K_11*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[461] = K_10*K_21*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[462] = K_00*K_00*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[463] = -0.5*std::pow(w[4][0], 1.5)*K_00*K_11*det*w[6][0];
    G[464] = -0.5*std::pow(w[4][0], 1.5)*K_00*K_21*det*w[6][0];
    G[465] = -0.5*std::pow(w[4][0], 1.5)*K_00*K_00*det*w[6][0];
    G[466] = K_00*K_11*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[467] = K_00*K_21*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[468] = -0.5*std::pow(w[4][0], 1.5)*K_11*K_21*det*w[6][0];
    G[469] = -0.5*std::pow(w[4][0], 1.5)*K_21*K_21*det*w[6][0];
    G[470] = K_11*K_21*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[471] = K_21*K_21*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[472] = -0.5*std::pow(w[4][0], 1.5)*K_11*K_11*det*w[6][0];
    G[473] = K_11*K_11*det*w[6][0]*(0.5*std::pow(w[4][0], 0.5)*w[4][0]-0.5*std::pow(w[4][0], 1.5));
    G[474] = 0.0;
    G[475] = det/w[5][0];
    G[476] = 0.125*K_02*det;
    G[477] = 0.125*K_00*det;
    G[478] = 0.125*K_01*det;
    G[479] = 0.125*K_12*det;
    G[480] = 0.125*K_10*det;
    G[481] = 0.125*K_11*det;
    G[482] = 0.125*K_22*det;
    G[483] = 0.125*K_20*det;
    G[484] = 0.125*K_21*det;
    G[485] = -0.125*K_00*det;
    G[486] = -0.125*K_01*det;
    G[487] = -0.125*K_02*det;
    G[488] = -0.125*K_10*det;
    G[489] = -0.125*K_11*det;
    G[490] = -0.125*K_12*det;
    G[491] = -0.125*K_20*det;
    G[492] = -0.125*K_21*det;
    G[493] = -0.125*K_22*det;
    G[494] = K_02*K_12*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.25*std::pow(w[4][0], 1.5));
    G[495] = K_02*K_22*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.25*std::pow(w[4][0], 1.5));
    G[496] = K_02*K_02*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.25*std::pow(w[4][0], 1.5));
    G[497] = K_12*K_22*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.25*std::pow(w[4][0], 1.5));
    G[498] = K_12*K_12*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.25*std::pow(w[4][0], 1.5));
    G[499] = K_22*K_22*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.25*std::pow(w[4][0], 1.5));
    G[500] = det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_12 + K_02*K_10)-0.125*std::pow(w[4][0], 1.5)*(K_00*K_12 + K_02*K_10));
    G[501] = det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_22 + K_02*K_20)-0.125*std::pow(w[4][0], 1.5)*(K_00*K_22 + K_02*K_20));
    G[502] = K_00*K_02*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.25*std::pow(w[4][0], 1.5));
    G[503] = det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]*(K_10*K_22 + K_12*K_20)-0.125*std::pow(w[4][0], 1.5)*(K_10*K_22 + K_12*K_20));
    G[504] = K_10*K_12*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.25*std::pow(w[4][0], 1.5));
    G[505] = K_20*K_22*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.25*std::pow(w[4][0], 1.5));
    G[506] = det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]*(K_01*K_12 + K_02*K_11)-0.125*std::pow(w[4][0], 1.5)*(K_01*K_12 + K_02*K_11));
    G[507] = det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]*(K_01*K_22 + K_02*K_21)-0.125*std::pow(w[4][0], 1.5)*(K_01*K_22 + K_02*K_21));
    G[508] = K_01*K_02*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.25*std::pow(w[4][0], 1.5));
    G[509] = det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]*(K_11*K_22 + K_12*K_21)-0.125*std::pow(w[4][0], 1.5)*(K_11*K_22 + K_12*K_21));
    G[510] = K_11*K_12*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.25*std::pow(w[4][0], 1.5));
    G[511] = K_21*K_22*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.25*std::pow(w[4][0], 1.5));
    G[512] = -0.125*std::pow(w[4][0], 1.5)*det*w[6][0]*(K_00*K_12 + K_02*K_10);
    G[513] = -0.125*std::pow(w[4][0], 1.5)*det*w[6][0]*(K_00*K_22 + K_02*K_20);
    G[514] = -0.25*std::pow(w[4][0], 1.5)*K_00*K_02*det*w[6][0];
    G[515] = -0.125*std::pow(w[4][0], 1.5)*det*w[6][0]*(K_10*K_22 + K_12*K_20);
    G[516] = -0.25*std::pow(w[4][0], 1.5)*K_10*K_12*det*w[6][0];
    G[517] = -0.25*std::pow(w[4][0], 1.5)*K_20*K_22*det*w[6][0];
    G[518] = 0.5*det;
    G[519] = -0.125*std::pow(w[4][0], 1.5)*det*w[6][0]*(K_01*K_12 + K_02*K_11);
    G[520] = -0.125*std::pow(w[4][0], 1.5)*det*w[6][0]*(K_01*K_22 + K_02*K_21);
    G[521] = -0.25*std::pow(w[4][0], 1.5)*K_01*K_02*det*w[6][0];
    G[522] = -0.125*std::pow(w[4][0], 1.5)*det*w[6][0]*(K_11*K_22 + K_12*K_21);
    G[523] = -0.25*std::pow(w[4][0], 1.5)*K_11*K_12*det*w[6][0];
    G[524] = -0.25*std::pow(w[4][0], 1.5)*K_21*K_22*det*w[6][0];
    G[525] = -0.125*std::pow(w[4][0], 1.5)*K_02*K_02*det*w[6][0];
    G[526] = -0.25*std::pow(w[4][0], 1.5)*K_02*K_12*det*w[6][0];
    G[527] = -0.25*std::pow(w[4][0], 1.5)*K_02*K_22*det*w[6][0];
    G[528] = -0.25*std::pow(w[4][0], 1.5)*K_02*K_02*det*w[6][0];
    G[529] = -0.125*std::pow(w[4][0], 1.5)*K_12*K_12*det*w[6][0];
    G[530] = -0.25*std::pow(w[4][0], 1.5)*K_12*K_22*det*w[6][0];
    G[531] = -0.25*std::pow(w[4][0], 1.5)*K_12*K_12*det*w[6][0];
    G[532] = -0.125*std::pow(w[4][0], 1.5)*K_22*K_22*det*w[6][0];
    G[533] = -0.25*std::pow(w[4][0], 1.5)*K_22*K_22*det*w[6][0];
    G[534] =  - K_02*det;
    G[535] =  - K_12*det;
    G[536] =  - K_22*det;
    G[537] = -0.05*std::pow(w[4][0], 1.5)*K_02*det*w[6][0]*(K_00 + K_01 + K_02);
    G[538] = std::pow(w[4][0], 1.5)*det*w[6][0]*(-0.05*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01))-0.1*K_02*K_12);
    G[539] = std::pow(w[4][0], 1.5)*det*w[6][0]*(-0.05*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01))-0.1*K_02*K_22);
    G[540] = -0.1*std::pow(w[4][0], 1.5)*K_02*det*w[6][0]*(K_00 + K_01 + K_02);
    G[541] = -0.05*std::pow(w[4][0], 1.5)*K_12*det*w[6][0]*(K_10 + K_11 + K_12);
    G[542] = std::pow(w[4][0], 1.5)*det*w[6][0]*(-0.05*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11))-0.1*K_12*K_22);
    G[543] = -0.1*std::pow(w[4][0], 1.5)*K_12*det*w[6][0]*(K_10 + K_11 + K_12);
    G[544] = -0.05*std::pow(w[4][0], 1.5)*K_22*det*w[6][0]*(K_20 + K_21 + K_22);
    G[545] = -0.1*std::pow(w[4][0], 1.5)*K_22*det*w[6][0]*(K_20 + K_21 + K_22);
    G[546] = 5e-05*std::pow(w[4][0], 1.5)*K_02*det*w[6][0]*(K_00 + K_01 + K_02);
    G[547] = std::pow(w[4][0], 1.5)*det*w[6][0]*(0.0001*K_02*K_12 + 5e-05*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)));
    G[548] = std::pow(w[4][0], 1.5)*det*w[6][0]*(0.0001*K_02*K_22 + 5e-05*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01)));
    G[549] = 0.0001*std::pow(w[4][0], 1.5)*K_02*det*w[6][0]*(K_00 + K_01 + K_02);
    G[550] = 5e-05*std::pow(w[4][0], 1.5)*K_12*det*w[6][0]*(K_10 + K_11 + K_12);
    G[551] = std::pow(w[4][0], 1.5)*det*w[6][0]*(0.0001*K_12*K_22 + 5e-05*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11)));
    G[552] = 0.0001*std::pow(w[4][0], 1.5)*K_12*det*w[6][0]*(K_10 + K_11 + K_12);
    G[553] = 5e-05*std::pow(w[4][0], 1.5)*K_22*det*w[6][0]*(K_20 + K_21 + K_22);
    G[554] = 0.0001*std::pow(w[4][0], 1.5)*K_22*det*w[6][0]*(K_20 + K_21 + K_22);
    G[555] = K_00*K_10*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.25*std::pow(w[4][0], 1.5));
    G[556] = K_00*K_20*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.25*std::pow(w[4][0], 1.5));
    G[557] = K_00*K_00*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.25*std::pow(w[4][0], 1.5));
    G[558] = K_10*K_20*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.25*std::pow(w[4][0], 1.5));
    G[559] = K_10*K_10*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.25*std::pow(w[4][0], 1.5));
    G[560] = K_20*K_20*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.25*std::pow(w[4][0], 1.5));
    G[561] = det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_11 + K_01*K_10)-0.125*std::pow(w[4][0], 1.5)*(K_00*K_11 + K_01*K_10));
    G[562] = det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]*(K_00*K_21 + K_01*K_20)-0.125*std::pow(w[4][0], 1.5)*(K_00*K_21 + K_01*K_20));
    G[563] = K_00*K_01*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.25*std::pow(w[4][0], 1.5));
    G[564] = det*w[6][0]*(0.125*std::pow(w[4][0], 0.5)*w[4][0]*(K_10*K_21 + K_11*K_20)-0.125*std::pow(w[4][0], 1.5)*(K_10*K_21 + K_11*K_20));
    G[565] = K_10*K_11*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.25*std::pow(w[4][0], 1.5));
    G[566] = K_20*K_21*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.25*std::pow(w[4][0], 1.5));
    G[567] = -0.125*std::pow(w[4][0], 1.5)*K_00*K_00*det*w[6][0];
    G[568] = -0.25*std::pow(w[4][0], 1.5)*K_00*K_10*det*w[6][0];
    G[569] = -0.25*std::pow(w[4][0], 1.5)*K_00*K_20*det*w[6][0];
    G[570] = -0.25*std::pow(w[4][0], 1.5)*K_00*K_00*det*w[6][0];
    G[571] = -0.125*std::pow(w[4][0], 1.5)*K_10*K_10*det*w[6][0];
    G[572] = -0.25*std::pow(w[4][0], 1.5)*K_10*K_20*det*w[6][0];
    G[573] = -0.25*std::pow(w[4][0], 1.5)*K_10*K_10*det*w[6][0];
    G[574] = -0.125*std::pow(w[4][0], 1.5)*K_20*K_20*det*w[6][0];
    G[575] = -0.25*std::pow(w[4][0], 1.5)*K_20*K_20*det*w[6][0];
    G[576] = -0.125*std::pow(w[4][0], 1.5)*det*w[6][0]*(K_00*K_11 + K_01*K_10);
    G[577] = -0.125*std::pow(w[4][0], 1.5)*det*w[6][0]*(K_00*K_21 + K_01*K_20);
    G[578] = -0.25*std::pow(w[4][0], 1.5)*K_00*K_01*det*w[6][0];
    G[579] = -0.125*std::pow(w[4][0], 1.5)*det*w[6][0]*(K_10*K_21 + K_11*K_20);
    G[580] = -0.25*std::pow(w[4][0], 1.5)*K_10*K_11*det*w[6][0];
    G[581] = -0.25*std::pow(w[4][0], 1.5)*K_20*K_21*det*w[6][0];
    G[582] =  - K_00*det;
    G[583] =  - K_10*det;
    G[584] =  - K_20*det;
    G[585] = -0.05*std::pow(w[4][0], 1.5)*K_00*det*w[6][0]*(K_00 + K_01 + K_02);
    G[586] = std::pow(w[4][0], 1.5)*det*w[6][0]*(-0.05*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))-0.1*K_00*K_10);
    G[587] = std::pow(w[4][0], 1.5)*det*w[6][0]*(-0.05*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02))-0.1*K_00*K_20);
    G[588] = -0.1*std::pow(w[4][0], 1.5)*K_00*det*w[6][0]*(K_00 + K_01 + K_02);
    G[589] = -0.05*std::pow(w[4][0], 1.5)*K_10*det*w[6][0]*(K_10 + K_11 + K_12);
    G[590] = std::pow(w[4][0], 1.5)*det*w[6][0]*(-0.05*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12))-0.1*K_10*K_20);
    G[591] = -0.1*std::pow(w[4][0], 1.5)*K_10*det*w[6][0]*(K_10 + K_11 + K_12);
    G[592] = -0.05*std::pow(w[4][0], 1.5)*K_20*det*w[6][0]*(K_20 + K_21 + K_22);
    G[593] = -0.1*std::pow(w[4][0], 1.5)*K_20*det*w[6][0]*(K_20 + K_21 + K_22);
    G[594] = 5e-05*std::pow(w[4][0], 1.5)*K_00*det*w[6][0]*(K_00 + K_01 + K_02);
    G[595] = std::pow(w[4][0], 1.5)*det*w[6][0]*(0.0001*K_00*K_10 + 5e-05*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)));
    G[596] = std::pow(w[4][0], 1.5)*det*w[6][0]*(0.0001*K_00*K_20 + 5e-05*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02)));
    G[597] = 0.0001*std::pow(w[4][0], 1.5)*K_00*det*w[6][0]*(K_00 + K_01 + K_02);
    G[598] = 5e-05*std::pow(w[4][0], 1.5)*K_10*det*w[6][0]*(K_10 + K_11 + K_12);
    G[599] = std::pow(w[4][0], 1.5)*det*w[6][0]*(0.0001*K_10*K_20 + 5e-05*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12)));
    G[600] = 0.0001*std::pow(w[4][0], 1.5)*K_10*det*w[6][0]*(K_10 + K_11 + K_12);
    G[601] = 5e-05*std::pow(w[4][0], 1.5)*K_20*det*w[6][0]*(K_20 + K_21 + K_22);
    G[602] = 0.0001*std::pow(w[4][0], 1.5)*K_20*det*w[6][0]*(K_20 + K_21 + K_22);
    G[603] = K_01*K_11*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.25*std::pow(w[4][0], 1.5));
    G[604] = K_01*K_21*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.25*std::pow(w[4][0], 1.5));
    G[605] = K_01*K_01*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.25*std::pow(w[4][0], 1.5));
    G[606] = K_11*K_21*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.25*std::pow(w[4][0], 1.5));
    G[607] = K_11*K_11*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.25*std::pow(w[4][0], 1.5));
    G[608] = K_21*K_21*det*w[6][0]*(0.25*std::pow(w[4][0], 0.5)*w[4][0]-0.25*std::pow(w[4][0], 1.5));
    G[609] = -0.125*std::pow(w[4][0], 1.5)*K_01*K_01*det*w[6][0];
    G[610] = -0.25*std::pow(w[4][0], 1.5)*K_01*K_11*det*w[6][0];
    G[611] = -0.25*std::pow(w[4][0], 1.5)*K_01*K_21*det*w[6][0];
    G[612] = -0.25*std::pow(w[4][0], 1.5)*K_01*K_01*det*w[6][0];
    G[613] = -0.125*std::pow(w[4][0], 1.5)*K_11*K_11*det*w[6][0];
    G[614] = -0.25*std::pow(w[4][0], 1.5)*K_11*K_21*det*w[6][0];
    G[615] = -0.25*std::pow(w[4][0], 1.5)*K_11*K_11*det*w[6][0];
    G[616] = -0.125*std::pow(w[4][0], 1.5)*K_21*K_21*det*w[6][0];
    G[617] = -0.25*std::pow(w[4][0], 1.5)*K_21*K_21*det*w[6][0];
    G[618] =  - K_01*det;
    G[619] =  - K_11*det;
    G[620] =  - K_21*det;
    G[621] = -0.05*std::pow(w[4][0], 1.5)*K_01*det*w[6][0]*(K_00 + K_01 + K_02);
    G[622] = std::pow(w[4][0], 1.5)*det*w[6][0]*(-0.05*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))-0.1*K_01*K_11);
    G[623] = std::pow(w[4][0], 1.5)*det*w[6][0]*(-0.05*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02))-0.1*K_01*K_21);
    G[624] = -0.1*std::pow(w[4][0], 1.5)*K_01*det*w[6][0]*(K_00 + K_01 + K_02);
    G[625] = -0.05*std::pow(w[4][0], 1.5)*K_11*det*w[6][0]*(K_10 + K_11 + K_12);
    G[626] = std::pow(w[4][0], 1.5)*det*w[6][0]*(-0.05*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12))-0.1*K_11*K_21);
    G[627] = -0.1*std::pow(w[4][0], 1.5)*K_11*det*w[6][0]*(K_10 + K_11 + K_12);
    G[628] = -0.05*std::pow(w[4][0], 1.5)*K_21*det*w[6][0]*(K_20 + K_21 + K_22);
    G[629] = -0.1*std::pow(w[4][0], 1.5)*K_21*det*w[6][0]*(K_20 + K_21 + K_22);
    G[630] = 5e-05*std::pow(w[4][0], 1.5)*K_01*det*w[6][0]*(K_00 + K_01 + K_02);
    G[631] = std::pow(w[4][0], 1.5)*det*w[6][0]*(0.0001*K_01*K_11 + 5e-05*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)));
    G[632] = std::pow(w[4][0], 1.5)*det*w[6][0]*(0.0001*K_01*K_21 + 5e-05*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02)));
    G[633] = 0.0001*std::pow(w[4][0], 1.5)*K_01*det*w[6][0]*(K_00 + K_01 + K_02);
    G[634] = 5e-05*std::pow(w[4][0], 1.5)*K_11*det*w[6][0]*(K_10 + K_11 + K_12);
    G[635] = std::pow(w[4][0], 1.5)*det*w[6][0]*(0.0001*K_11*K_21 + 5e-05*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12)));
    G[636] = 0.0001*std::pow(w[4][0], 1.5)*K_11*det*w[6][0]*(K_10 + K_11 + K_12);
    G[637] = 5e-05*std::pow(w[4][0], 1.5)*K_21*det*w[6][0]*(K_20 + K_21 + K_22);
    G[638] = 0.0001*std::pow(w[4][0], 1.5)*K_21*det*w[6][0]*(K_20 + K_21 + K_22);
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 161406
    for (unsigned int ip = 0; ip < 14; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      double F13 = 0.0;
      double F14 = 0.0;
      double F15 = 0.0;
      double F16 = 0.0;
      double F17 = 0.0;
      double F18 = 0.0;
      double F19 = 0.0;
      double F20 = 0.0;
      double F21 = 0.0;
      double F22 = 0.0;
      double F23 = 0.0;
      double F24 = 0.0;
      double F25 = 0.0;
      double F26 = 0.0;
      double F27 = 0.0;
      double F28 = 0.0;
      double F29 = 0.0;
      double F30 = 0.0;
      double F31 = 0.0;
      double F32 = 0.0;
      double F33 = 0.0;
      double F34 = 0.0;
      double F35 = 0.0;
      double F36 = 0.0;
      double F37 = 0.0;
      double F38 = 0.0;
      double F39 = 0.0;
      double F40 = 0.0;
      double F41 = 0.0;
      double F42 = 0.0;
      double F43 = 0.0;
      double F44 = 0.0;
      
      // Total number of operations to compute function values = 108
      for (unsigned int r = 0; r < 2; r++)
      {
        F0 += FE0_D001[ip][r]*w[0][nzc6[r]];
        F1 += FE0_D001[ip][r]*w[0][nzc5[r]];
        F2 += FE0_D001[ip][r]*w[0][nzc4[r]];
        F3 += FE0_D001[ip][r]*w[9][nzc6[r]];
        F4 += FE0_D001[ip][r]*w[9][nzc5[r]];
        F5 += FE0_D001[ip][r]*w[9][nzc4[r]];
        F6 += FE0_D001[ip][r]*w[0][nzc10[r]];
        F7 += FE0_D001[ip][r]*w[0][nzc9[r]];
        F8 += FE0_D001[ip][r]*w[0][nzc8[r]];
        F9 += FE0_D001[ip][r]*w[9][nzc10[r]];
        F10 += FE0_D001[ip][r]*w[9][nzc9[r]];
        F11 += FE0_D001[ip][r]*w[9][nzc8[r]];
        F12 += FE0_D001[ip][r]*w[0][nzc14[r]];
        F13 += FE0_D001[ip][r]*w[0][nzc13[r]];
        F14 += FE0_D001[ip][r]*w[0][nzc12[r]];
        F15 += FE0_D001[ip][r]*w[9][nzc14[r]];
        F16 += FE0_D001[ip][r]*w[9][nzc13[r]];
        F17 += FE0_D001[ip][r]*w[9][nzc12[r]];
        F29 += FE0_D001[ip][r]*w[1][nzc2[r]];
        F30 += FE0_D001[ip][r]*w[1][nzc1[r]];
        F31 += FE0_D001[ip][r]*w[1][nzc0[r]];
        F32 += FE0_D001[ip][r]*w[10][nzc2[r]];
        F33 += FE0_D001[ip][r]*w[10][nzc1[r]];
        F34 += FE0_D001[ip][r]*w[10][nzc0[r]];
        F41 += FE0_D001[ip][r]*w[2][nzc2[r]];
        F42 += FE0_D001[ip][r]*w[2][nzc1[r]];
        F43 += FE0_D001[ip][r]*w[2][nzc0[r]];
      }// end loop over 'r'
      
      // Total number of operations to compute function values = 144
      for (unsigned int r = 0; r < 4; r++)
      {
        F18 += FE0[ip][r]*w[0][nzc11[r]];
        F19 += FE0[ip][r]*w[0][nzc3[r]];
        F20 += FE0[ip][r]*w[0][nzc7[r]];
        F21 += FE0[ip][r]*w[9][nzc3[r]];
        F22 += FE0[ip][r]*w[1][r];
        F23 += FE0[ip][r]*w[10][r];
        F24 += FE0[ip][r]*w[9][nzc7[r]];
        F25 += FE0[ip][r]*w[9][nzc11[r]];
        F26 += FE0[ip][r]*w[11][nzc3[r]];
        F27 += FE0[ip][r]*w[11][nzc7[r]];
        F28 += FE0[ip][r]*w[11][nzc11[r]];
        F35 += FE0[ip][r]*w[13][nzc3[r]];
        F36 += FE0[ip][r]*w[14][nzc3[r]];
        F37 += FE0[ip][r]*w[13][nzc7[r]];
        F38 += FE0[ip][r]*w[14][nzc7[r]];
        F39 += FE0[ip][r]*w[13][nzc11[r]];
        F40 += FE0[ip][r]*w[14][nzc11[r]];
        F44 += FE0[ip][r]*w[3][r];
      }// end loop over 'r'
      double C[12];
      // Compute conditional, operations: 13.
      C[0] = (0.5*(F29*K_02 + F30*K_12 + F31*K_22 + F32*K_02 + F33*K_12 + F34*K_22) < 0.0) ? -1.0 : 1.0;
      // Compute conditional, operations: 13.
      C[1] = (0.5*(F29*K_02 + F30*K_12 + F31*K_22 + F32*K_02 + F33*K_12 + F34*K_22) == 0.0) ? 0.0 : C[0];
      // Compute conditional, operations: 13.
      C[2] = (0.5*(F29*K_00 + F30*K_10 + F31*K_20 + F32*K_00 + F33*K_10 + F34*K_20) < 0.0) ? -1.0 : 1.0;
      // Compute conditional, operations: 13.
      C[3] = (0.5*(F29*K_00 + F30*K_10 + F31*K_20 + F32*K_00 + F33*K_10 + F34*K_20) == 0.0) ? 0.0 : C[2];
      // Compute conditional, operations: 13.
      C[4] = (0.5*(F29*K_01 + F30*K_11 + F31*K_21 + F32*K_01 + F33*K_11 + F34*K_21) < 0.0) ? -1.0 : 1.0;
      // Compute conditional, operations: 13.
      C[5] = (0.5*(F29*K_01 + F30*K_11 + F31*K_21 + F32*K_01 + F33*K_11 + F34*K_21) == 0.0) ? 0.0 : C[4];
      // Compute conditional, operations: 1.
      C[6] = (F18 < 0.0) ? -1.0 : 1.0;
      // Compute conditional, operations: 1.
      C[7] = (F18 == 0.0) ? 0.0 : C[6];
      // Compute conditional, operations: 1.
      C[8] = (F19 < 0.0) ? -1.0 : 1.0;
      // Compute conditional, operations: 1.
      C[9] = (F19 == 0.0) ? 0.0 : C[8];
      // Compute conditional, operations: 1.
      C[10] = (F20 < 0.0) ? -1.0 : 1.0;
      // Compute conditional, operations: 1.
      C[11] = (F20 == 0.0) ? 0.0 : C[10];
      
      // Number of operations to compute ip constants: 11133
      double I[12];
      // Number of operations: 999
      I[0] = W14[ip]*(std::abs(F18)*(F10*G[0] + F11*G[1] + F6*G[2] + F7*G[3] + F8*G[4] + F9*G[5]) + std::abs(F19)*(F10*G[0] + F11*G[1] + F6*G[2] + F7*G[3] + F8*G[4] + F9*G[5]) + std::abs(F20)*(F10*G[0] + F11*G[1] + F6*G[2] + F7*G[3] + F8*G[4] + F9*G[5]) + C[11]*F20*(G[6]*(F10 + F7) + G[7]*(F11 + F8) + G[8]*(F6 + F9)) + C[7]*F18*(G[6]*(F10 + F7) + G[7]*(F11 + F8) + G[8]*(F6 + F9)) + C[9]*F19*(G[6]*(F10 + F7) + G[7]*(F11 + F8) + G[8]*(F6 + F9)) + F0*G[9] + F1*G[10] + F10*G[48] + F11*G[86] + F12*G[87] + F13*G[88] + F14*G[89] + F15*G[90] + F16*G[91] + F17*G[92] + F2*G[153] + F22*F22*(F18*F18*(F10*G[11] + F11*G[49] + F6*G[93] + F7*G[94] + F8*G[95] + F9*G[96]) + F18*F27*G[121] + F19*(F18*(F10*G[13] + F11*G[51] + F6*G[101] + F7*G[102] + F8*G[103] + F9*G[104]) + F19*(F10*G[23] + F11*G[61] + F6*G[128] + F7*G[129] + F8*G[130] + F9*G[131]) + F27*G[150]) + F20*(F18*(F10*G[15] + F11*G[53] + F6*G[109] + F7*G[110] + F8*G[111] + F9*G[112]) + F19*(F10*G[25] + F11*G[63] + F6*G[136] + F7*G[137] + F8*G[138] + F9*G[139]) + F20*(F10*G[31] + F11*G[69] + F6*G[154] + F7*G[155] + F8*G[156] + F9*G[157]) + F27*G[163]) + F21*(F18*(F10*G[17] + F11*G[55] + F6*G[104] + F7*G[13] + F8*G[51] + F9*G[117]) + F19*(F10*G[27] + F11*G[65] + F6*G[135] + F7*G[24] + F8*G[62] + F9*G[144]) + F20*(F10*G[29] + F11*G[67] + F6*G[139] + F7*G[25] + F8*G[63] + F9*G[149]) + F21*(F10*G[35] + F11*G[73] + F6*G[169] + F7*G[170] + F8*G[171] + F9*G[172]) + F27*G[176]) + F24*(F18*(F10*G[19] + F11*G[57] + F6*G[112] + F7*G[15] + F8*G[53] + F9*G[119]) + F19*(F10*G[29] + F11*G[67] + F6*G[139] + F7*G[25] + F8*G[63] + F9*G[149]) + F20*(F10*G[33] + F11*G[71] + F6*G[161] + F7*G[32] + F8*G[70] + F9*G[162]) + F21*(F10*G[37] + F11*G[75] + F6*G[149] + F7*G[29] + F8*G[67] + F9*G[174]) + F24*(F10*G[41] + F11*G[79] + F6*G[180] + F7*G[181] + F8*G[182] + F9*G[183]) + F27*G[185]) + F25*(F10*(F18*G[20] + F19*G[17] + F20*G[19] + F21*G[38] + F24*G[42] + F25*G[43]) + F11*(F18*G[58] + F19*G[55] + F20*G[57] + F21*G[76] + F24*G[80] + F25*G[81]) + F27*G[190] + F6*(F18*G[100] + F19*G[104] + F20*G[112] + F21*G[117] + F24*G[119] + F25*G[186]) + F7*(F18*G[12] + F19*G[13] + F20*G[15] + F21*G[17] + F24*G[19] + F25*G[187]) + F8*(F18*G[50] + F19*G[51] + F20*G[53] + F21*G[55] + F24*G[57] + F25*G[188]) + F9*(F18*G[120] + F19*G[117] + F20*G[119] + F21*G[175] + F24*G[184] + F25*G[189]))) + F23*(F22*(F18*F18*(F10*G[12] + F11*G[50] + F6*G[97] + F7*G[98] + F8*G[99] + F9*G[100]) + F18*F27*G[127] + F19*(F18*(F10*G[14] + F11*G[52] + F6*G[105] + F7*G[106] + F8*G[107] + F9*G[108]) + F19*(F10*G[24] + F11*G[62] + F6*G[132] + F7*G[133] + F8*G[134] + F9*G[135]) + F27*G[152]) + F20*(F18*(F10*G[16] + F11*G[54] + F6*G[113] + F7*G[114] + F8*G[115] + F9*G[116]) + F19*(F10*G[26] + F11*G[64] + F6*G[140] + F7*G[141] + F8*G[142] + F9*G[143]) + F20*(F10*G[32] + F11*G[70] + F6*G[158] + F7*G[159] + F8*G[160] + F9*G[161]) + F27*G[168]) + F21*(F18*(F10*G[18] + F11*G[56] + F6*G[108] + F7*G[14] + F8*G[52] + F9*G[118]) + F19*(F10*G[28] + F11*G[66] + F6*G[145] + F7*G[146] + F8*G[147] + F9*G[148]) + F20*(F10*G[30] + F11*G[68] + F6*G[143] + F7*G[26] + F8*G[64] + F9*G[151]) + F21*(F10*G[36] + F11*G[74] + F6*G[144] + F7*G[27] + F8*G[65] + F9*G[173]) + F27*G[179]) + F24*(F18*(F10*G[21] + F11*G[59] + F6*G[116] + F7*G[16] + F8*G[54] + F9*G[122]) + F19*(F10*G[30] + F11*G[68] + F6*G[143] + F7*G[26] + F8*G[64] + F9*G[151]) + F20*(F10*G[34] + F11*G[72] + F6*G[164] + F7*G[165] + F8*G[166] + F9*G[167]) + F21*(F10*G[39] + F11*G[77] + F6*G[151] + F7*G[30] + F8*G[68] + F9*G[177]) + F24*(F10*G[44] + F11*G[82] + F6*G[162] + F7*G[33] + F8*G[71] + F9*G[191]) + F27*G[193]) + F25*(F10*(F18*G[22] + F19*G[18] + F20*G[21] + F21*G[40] + F24*G[45] + F25*G[46]) + F11*(F18*G[60] + F19*G[56] + F20*G[59] + F21*G[78] + F24*G[83] + F25*G[84]) + F27*G[195] + F6*(F18*G[123] + F19*G[108] + F20*G[116] + F21*G[118] + F24*G[122] + F25*G[120]) + F7*(F18*G[124] + F19*G[14] + F20*G[16] + F21*G[18] + F24*G[21] + F25*G[20]) + F8*(F18*G[125] + F19*G[52] + F20*G[54] + F21*G[56] + F24*G[59] + F25*G[58]) + F9*(F18*G[126] + F19*G[118] + F20*G[122] + F21*G[178] + F24*G[192] + F25*G[194]))) + F23*(F18*F18*(F10*G[11] + F11*G[49] + F6*G[93] + F7*G[94] + F8*G[95] + F9*G[96]) + F18*F27*G[121] + F19*(F18*(F10*G[13] + F11*G[51] + F6*G[101] + F7*G[102] + F8*G[103] + F9*G[104]) + F19*(F10*G[23] + F11*G[61] + F6*G[128] + F7*G[129] + F8*G[130] + F9*G[131]) + F27*G[150]) + F20*(F18*(F10*G[15] + F11*G[53] + F6*G[109] + F7*G[110] + F8*G[111] + F9*G[112]) + F19*(F10*G[25] + F11*G[63] + F6*G[136] + F7*G[137] + F8*G[138] + F9*G[139]) + F20*(F10*G[31] + F11*G[69] + F6*G[154] + F7*G[155] + F8*G[156] + F9*G[157]) + F27*G[163]) + F21*(F18*(F10*G[17] + F11*G[55] + F6*G[104] + F7*G[13] + F8*G[51] + F9*G[117]) + F19*(F10*G[27] + F11*G[65] + F6*G[135] + F7*G[24] + F8*G[62] + F9*G[144]) + F20*(F10*G[29] + F11*G[67] + F6*G[139] + F7*G[25] + F8*G[63] + F9*G[149]) + F21*(F10*G[35] + F11*G[73] + F6*G[169] + F7*G[170] + F8*G[171] + F9*G[172]) + F27*G[176]) + F24*(F18*(F10*G[19] + F11*G[57] + F6*G[112] + F7*G[15] + F8*G[53] + F9*G[119]) + F19*(F10*G[29] + F11*G[67] + F6*G[139] + F7*G[25] + F8*G[63] + F9*G[149]) + F20*(F10*G[33] + F11*G[71] + F6*G[161] + F7*G[32] + F8*G[70] + F9*G[162]) + F21*(F10*G[37] + F11*G[75] + F6*G[149] + F7*G[29] + F8*G[67] + F9*G[174]) + F24*(F10*G[41] + F11*G[79] + F6*G[180] + F7*G[181] + F8*G[182] + F9*G[183]) + F27*G[185]) + F25*(F10*(F18*G[20] + F19*G[17] + F20*G[19] + F21*G[38] + F24*G[42] + F25*G[43]) + F11*(F18*G[58] + F19*G[55] + F20*G[57] + F21*G[76] + F24*G[80] + F25*G[81]) + F27*G[190] + F6*(F18*G[100] + F19*G[104] + F20*G[112] + F21*G[117] + F24*G[119] + F25*G[186]) + F7*(F18*G[12] + F19*G[13] + F20*G[15] + F21*G[17] + F24*G[19] + F25*G[187]) + F8*(F18*G[50] + F19*G[51] + F20*G[53] + F21*G[55] + F24*G[57] + F25*G[188]) + F9*(F18*G[120] + F19*G[117] + F20*G[119] + F21*G[175] + F24*G[184] + F25*G[189])))) + F3*G[196] + F4*G[197] + F44*(F10*G[47] + F11*G[85] + F9*G[198]) + F5*G[199] + F6*G[200] + F7*G[201] + F8*G[202] + F9*G[203]);
      
      // Number of operations: 999
      I[1] = W14[ip]*(std::abs(F18)*(F12*G[4] + F13*G[204] + F14*G[205] + F15*G[1] + F16*G[206] + F17*G[207]) + std::abs(F19)*(F12*G[4] + F13*G[204] + F14*G[205] + F15*G[1] + F16*G[206] + F17*G[207]) + std::abs(F20)*(F12*G[4] + F13*G[204] + F14*G[205] + F15*G[1] + F16*G[206] + F17*G[207]) + C[11]*F20*(G[208]*(F13 + F16) + G[209]*(F14 + F17) + G[7]*(F12 + F15)) + C[7]*F18*(G[208]*(F13 + F16) + G[209]*(F14 + F17) + G[7]*(F12 + F15)) + C[9]*F19*(G[208]*(F13 + F16) + G[209]*(F14 + F17) + G[7]*(F12 + F15)) + F0*G[210] + F1*G[211] + F10*G[212] + F11*G[213] + F12*G[214] + F13*G[251] + F14*G[288] + F15*G[289] + F16*G[309] + F17*G[329] + F2*G[334] + F22*F22*(F18*F18*(F12*G[95] + F13*G[215] + F14*G[252] + F15*G[49] + F16*G[290] + F17*G[310]) + F18*F28*G[330] + F19*(F18*(F12*G[103] + F13*G[217] + F14*G[254] + F15*G[51] + F16*G[221] + F17*G[258]) + F19*(F12*G[130] + F13*G[227] + F14*G[264] + F15*G[61] + F16*G[292] + F17*G[312]) + F28*G[332]) + F20*(F18*(F12*G[111] + F13*G[219] + F14*G[256] + F15*G[53] + F16*G[223] + F17*G[260]) + F19*(F12*G[138] + F13*G[229] + F14*G[266] + F15*G[63] + F16*G[233] + F17*G[270]) + F20*(F12*G[156] + F13*G[235] + F14*G[272] + F15*G[69] + F16*G[294] + F17*G[314]) + F28*G[335]) + F21*(F18*(F12*G[51] + F13*G[221] + F14*G[258] + F15*G[55] + F16*G[242] + F17*G[279]) + F19*(F12*G[62] + F13*G[231] + F14*G[268] + F15*G[65] + F16*G[240] + F17*G[277]) + F20*(F12*G[63] + F13*G[233] + F14*G[270] + F15*G[67] + F16*G[241] + F17*G[278]) + F21*(F12*G[171] + F13*G[239] + F14*G[276] + F15*G[73] + F16*G[296] + F17*G[316]) + F28*G[337]) + F24*(F18*(F12*G[53] + F13*G[223] + F14*G[260] + F15*G[57] + F16*G[246] + F17*G[283]) + F19*(F12*G[63] + F13*G[233] + F14*G[270] + F15*G[67] + F16*G[241] + F17*G[278]) + F20*(F12*G[70] + F13*G[237] + F14*G[274] + F15*G[71] + F16*G[248] + F17*G[285]) + F21*(F12*G[67] + F13*G[241] + F14*G[278] + F15*G[75] + F16*G[298] + F17*G[318]) + F24*(F12*G[182] + F13*G[245] + F14*G[282] + F15*G[79] + F16*G[302] + F17*G[322]) + F28*G[339]) + F25*(F18*(F12*G[50] + F13*G[224] + F14*G[261] + F15*G[58] + F16*G[250] + F17*G[287]) + F19*(F12*G[51] + F13*G[221] + F14*G[258] + F15*G[55] + F16*G[242] + F17*G[279]) + F20*(F12*G[53] + F13*G[223] + F14*G[260] + F15*G[57] + F16*G[246] + F17*G[283]) + F21*(F12*G[55] + F13*G[242] + F14*G[279] + F15*G[76] + F16*G[299] + F17*G[319]) + F24*(F12*G[57] + F13*G[246] + F14*G[283] + F15*G[80] + F16*G[303] + F17*G[323]) + F25*(F12*G[188] + F13*G[247] + F14*G[284] + F15*G[81] + F16*G[304] + F17*G[324]) + F28*G[340])) + F23*(F22*(F18*F18*(F12*G[99] + F13*G[216] + F14*G[253] + F15*G[50] + F16*G[224] + F17*G[261]) + F18*F28*G[331] + F19*(F18*(F12*G[107] + F13*G[218] + F14*G[255] + F15*G[52] + F16*G[222] + F17*G[259]) + F19*(F12*G[134] + F13*G[228] + F14*G[265] + F15*G[62] + F16*G[231] + F17*G[268]) + F28*G[333]) + F20*(F18*(F12*G[115] + F13*G[220] + F14*G[257] + F15*G[54] + F16*G[225] + F17*G[262]) + F19*(F12*G[142] + F13*G[230] + F14*G[267] + F15*G[64] + F16*G[234] + F17*G[271]) + F20*(F12*G[160] + F13*G[236] + F14*G[273] + F15*G[70] + F16*G[237] + F17*G[274]) + F28*G[336]) + F21*(F18*(F12*G[52] + F13*G[222] + F14*G[259] + F15*G[56] + F16*G[244] + F17*G[281]) + F19*(F12*G[147] + F13*G[232] + F14*G[269] + F15*G[66] + F16*G[293] + F17*G[313]) + F20*(F12*G[64] + F13*G[234] + F14*G[271] + F15*G[68] + F16*G[243] + F17*G[280]) + F21*(F12*G[65] + F13*G[240] + F14*G[277] + F15*G[74] + F16*G[297] + F17*G[317]) + F28*G[338]) + F24*(F18*(F12*G[54] + F13*G[225] + F14*G[262] + F15*G[59] + F16*G[249] + F17*G[286]) + F19*(F12*G[64] + F13*G[234] + F14*G[271] + F15*G[68] + F16*G[243] + F17*G[280]) + F20*(F12*G[166] + F13*G[238] + F14*G[275] + F15*G[72] + F16*G[295] + F17*G[315]) + F21*(F12*G[68] + F13*G[243] + F14*G[280] + F15*G[77] + F16*G[300] + F17*G[320]) + F24*(F12*G[71] + F13*G[248] + F14*G[285] + F15*G[82] + F16*G[305] + F17*G[325]) + F28*G[341]) + F25*(F18*(F12*G[125] + F13*G[226] + F14*G[263] + F15*G[60] + F16*G[291] + F17*G[311]) + F19*(F12*G[52] + F13*G[222] + F14*G[259] + F15*G[56] + F16*G[244] + F17*G[281]) + F20*(F12*G[54] + F13*G[225] + F14*G[262] + F15*G[59] + F16*G[249] + F17*G[286]) + F21*(F12*G[56] + F13*G[244] + F14*G[281] + F15*G[78] + F16*G[301] + F17*G[321]) + F24*(F12*G[59] + F13*G[249] + F14*G[286] + F15*G[83] + F16*G[306] + F17*G[326]) + F25*(F12*G[58] + F13*G[250] + F14*G[287] + F15*G[84] + F16*G[307] + F17*G[327]) + F28*G[342])) + F23*(F18*F18*(F12*G[95] + F13*G[215] + F14*G[252] + F15*G[49] + F16*G[290] + F17*G[310]) + F18*F28*G[330] + F19*(F18*(F12*G[103] + F13*G[217] + F14*G[254] + F15*G[51] + F16*G[221] + F17*G[258]) + F19*(F12*G[130] + F13*G[227] + F14*G[264] + F15*G[61] + F16*G[292] + F17*G[312]) + F28*G[332]) + F20*(F18*(F12*G[111] + F13*G[219] + F14*G[256] + F15*G[53] + F16*G[223] + F17*G[260]) + F19*(F12*G[138] + F13*G[229] + F14*G[266] + F15*G[63] + F16*G[233] + F17*G[270]) + F20*(F12*G[156] + F13*G[235] + F14*G[272] + F15*G[69] + F16*G[294] + F17*G[314]) + F28*G[335]) + F21*(F18*(F12*G[51] + F13*G[221] + F14*G[258] + F15*G[55] + F16*G[242] + F17*G[279]) + F19*(F12*G[62] + F13*G[231] + F14*G[268] + F15*G[65] + F16*G[240] + F17*G[277]) + F20*(F12*G[63] + F13*G[233] + F14*G[270] + F15*G[67] + F16*G[241] + F17*G[278]) + F21*(F12*G[171] + F13*G[239] + F14*G[276] + F15*G[73] + F16*G[296] + F17*G[316]) + F28*G[337]) + F24*(F18*(F12*G[53] + F13*G[223] + F14*G[260] + F15*G[57] + F16*G[246] + F17*G[283]) + F19*(F12*G[63] + F13*G[233] + F14*G[270] + F15*G[67] + F16*G[241] + F17*G[278]) + F20*(F12*G[70] + F13*G[237] + F14*G[274] + F15*G[71] + F16*G[248] + F17*G[285]) + F21*(F12*G[67] + F13*G[241] + F14*G[278] + F15*G[75] + F16*G[298] + F17*G[318]) + F24*(F12*G[182] + F13*G[245] + F14*G[282] + F15*G[79] + F16*G[302] + F17*G[322]) + F28*G[339]) + F25*(F18*(F12*G[50] + F13*G[224] + F14*G[261] + F15*G[58] + F16*G[250] + F17*G[287]) + F19*(F12*G[51] + F13*G[221] + F14*G[258] + F15*G[55] + F16*G[242] + F17*G[279]) + F20*(F12*G[53] + F13*G[223] + F14*G[260] + F15*G[57] + F16*G[246] + F17*G[283]) + F21*(F12*G[55] + F13*G[242] + F14*G[279] + F15*G[76] + F16*G[299] + F17*G[319]) + F24*(F12*G[57] + F13*G[246] + F14*G[283] + F15*G[80] + F16*G[303] + F17*G[323]) + F25*(F12*G[188] + F13*G[247] + F14*G[284] + F15*G[81] + F16*G[304] + F17*G[324]) + F28*G[340]))) + F3*G[343] + F4*G[344] + F44*(F15*G[85] + F16*G[308] + F17*G[328]) + F5*G[345] + F6*G[89] + F7*G[346] + F8*G[347] + F9*G[92]);
      
      // Number of operations: 999
      I[2] = W14[ip]*(std::abs(F18)*(F12*G[3] + F13*G[348] + F14*G[204] + F15*G[0] + F16*G[349] + F17*G[206]) + std::abs(F19)*(F12*G[3] + F13*G[348] + F14*G[204] + F15*G[0] + F16*G[349] + F17*G[206]) + std::abs(F20)*(F12*G[3] + F13*G[348] + F14*G[204] + F15*G[0] + F16*G[349] + F17*G[206]) + C[11]*F20*(G[208]*(F14 + F17) + G[350]*(F13 + F16) + G[6]*(F12 + F15)) + C[7]*F18*(G[208]*(F14 + F17) + G[350]*(F13 + F16) + G[6]*(F12 + F15)) + C[9]*F19*(G[208]*(F14 + F17) + G[350]*(F13 + F16) + G[6]*(F12 + F15)) + F0*G[351] + F1*G[352] + F10*G[353] + F11*G[354] + F12*G[355] + F13*G[392] + F14*G[251] + F15*G[393] + F16*G[413] + F17*G[309] + F2*G[418] + F22*F22*(F18*F18*(F12*G[94] + F13*G[356] + F14*G[215] + F15*G[11] + F16*G[394] + F17*G[290]) + F18*F28*G[414] + F19*(F18*(F12*G[102] + F13*G[358] + F14*G[217] + F15*G[13] + F16*G[362] + F17*G[221]) + F19*(F12*G[129] + F13*G[368] + F14*G[227] + F15*G[23] + F16*G[396] + F17*G[292]) + F28*G[416]) + F20*(F18*(F12*G[110] + F13*G[360] + F14*G[219] + F15*G[15] + F16*G[364] + F17*G[223]) + F19*(F12*G[137] + F13*G[370] + F14*G[229] + F15*G[25] + F16*G[374] + F17*G[233]) + F20*(F12*G[155] + F13*G[376] + F14*G[235] + F15*G[31] + F16*G[398] + F17*G[294]) + F28*G[419]) + F21*(F18*(F12*G[13] + F13*G[362] + F14*G[221] + F15*G[17] + F16*G[383] + F17*G[242]) + F19*(F12*G[24] + F13*G[372] + F14*G[231] + F15*G[27] + F16*G[381] + F17*G[240]) + F20*(F12*G[25] + F13*G[374] + F14*G[233] + F15*G[29] + F16*G[382] + F17*G[241]) + F21*(F12*G[170] + F13*G[380] + F14*G[239] + F15*G[35] + F16*G[400] + F17*G[296]) + F28*G[421]) + F24*(F18*(F12*G[15] + F13*G[364] + F14*G[223] + F15*G[19] + F16*G[387] + F17*G[246]) + F19*(F12*G[25] + F13*G[374] + F14*G[233] + F15*G[29] + F16*G[382] + F17*G[241]) + F20*(F12*G[32] + F13*G[378] + F14*G[237] + F15*G[33] + F16*G[389] + F17*G[248]) + F21*(F12*G[29] + F13*G[382] + F14*G[241] + F15*G[37] + F16*G[402] + F17*G[298]) + F24*(F12*G[181] + F13*G[386] + F14*G[245] + F15*G[41] + F16*G[406] + F17*G[302]) + F28*G[423]) + F25*(F18*(F12*G[12] + F13*G[365] + F14*G[224] + F15*G[20] + F16*G[391] + F17*G[250]) + F19*(F12*G[13] + F13*G[362] + F14*G[221] + F15*G[17] + F16*G[383] + F17*G[242]) + F20*(F12*G[15] + F13*G[364] + F14*G[223] + F15*G[19] + F16*G[387] + F17*G[246]) + F21*(F12*G[17] + F13*G[383] + F14*G[242] + F15*G[38] + F16*G[403] + F17*G[299]) + F24*(F12*G[19] + F13*G[387] + F14*G[246] + F15*G[42] + F16*G[407] + F17*G[303]) + F25*(F12*G[187] + F13*G[388] + F14*G[247] + F15*G[43] + F16*G[408] + F17*G[304]) + F28*G[424])) + F23*(F22*(F18*F18*(F12*G[98] + F13*G[357] + F14*G[216] + F15*G[12] + F16*G[365] + F17*G[224]) + F18*F28*G[415] + F19*(F18*(F12*G[106] + F13*G[359] + F14*G[218] + F15*G[14] + F16*G[363] + F17*G[222]) + F19*(F12*G[133] + F13*G[369] + F14*G[228] + F15*G[24] + F16*G[372] + F17*G[231]) + F28*G[417]) + F20*(F18*(F12*G[114] + F13*G[361] + F14*G[220] + F15*G[16] + F16*G[366] + F17*G[225]) + F19*(F12*G[141] + F13*G[371] + F14*G[230] + F15*G[26] + F16*G[375] + F17*G[234]) + F20*(F12*G[159] + F13*G[377] + F14*G[236] + F15*G[32] + F16*G[378] + F17*G[237]) + F28*G[420]) + F21*(F18*(F12*G[14] + F13*G[363] + F14*G[222] + F15*G[18] + F16*G[385] + F17*G[244]) + F19*(F12*G[146] + F13*G[373] + F14*G[232] + F15*G[28] + F16*G[397] + F17*G[293]) + F20*(F12*G[26] + F13*G[375] + F14*G[234] + F15*G[30] + F16*G[384] + F17*G[243]) + F21*(F12*G[27] + F13*G[381] + F14*G[240] + F15*G[36] + F16*G[401] + F17*G[297]) + F28*G[422]) + F24*(F18*(F12*G[16] + F13*G[366] + F14*G[225] + F15*G[21] + F16*G[390] + F17*G[249]) + F19*(F12*G[26] + F13*G[375] + F14*G[234] + F15*G[30] + F16*G[384] + F17*G[243]) + F20*(F12*G[165] + F13*G[379] + F14*G[238] + F15*G[34] + F16*G[399] + F17*G[295]) + F21*(F12*G[30] + F13*G[384] + F14*G[243] + F15*G[39] + F16*G[404] + F17*G[300]) + F24*(F12*G[33] + F13*G[389] + F14*G[248] + F15*G[44] + F16*G[409] + F17*G[305]) + F28*G[425]) + F25*(F18*(F12*G[124] + F13*G[367] + F14*G[226] + F15*G[22] + F16*G[395] + F17*G[291]) + F19*(F12*G[14] + F13*G[363] + F14*G[222] + F15*G[18] + F16*G[385] + F17*G[244]) + F20*(F12*G[16] + F13*G[366] + F14*G[225] + F15*G[21] + F16*G[390] + F17*G[249]) + F21*(F12*G[18] + F13*G[385] + F14*G[244] + F15*G[40] + F16*G[405] + F17*G[301]) + F24*(F12*G[21] + F13*G[390] + F14*G[249] + F15*G[45] + F16*G[410] + F17*G[306]) + F25*(F12*G[20] + F13*G[391] + F14*G[250] + F15*G[46] + F16*G[411] + F17*G[307]) + F28*G[426])) + F23*(F18*F18*(F12*G[94] + F13*G[356] + F14*G[215] + F15*G[11] + F16*G[394] + F17*G[290]) + F18*F28*G[414] + F19*(F18*(F12*G[102] + F13*G[358] + F14*G[217] + F15*G[13] + F16*G[362] + F17*G[221]) + F19*(F12*G[129] + F13*G[368] + F14*G[227] + F15*G[23] + F16*G[396] + F17*G[292]) + F28*G[416]) + F20*(F18*(F12*G[110] + F13*G[360] + F14*G[219] + F15*G[15] + F16*G[364] + F17*G[223]) + F19*(F12*G[137] + F13*G[370] + F14*G[229] + F15*G[25] + F16*G[374] + F17*G[233]) + F20*(F12*G[155] + F13*G[376] + F14*G[235] + F15*G[31] + F16*G[398] + F17*G[294]) + F28*G[419]) + F21*(F18*(F12*G[13] + F13*G[362] + F14*G[221] + F15*G[17] + F16*G[383] + F17*G[242]) + F19*(F12*G[24] + F13*G[372] + F14*G[231] + F15*G[27] + F16*G[381] + F17*G[240]) + F20*(F12*G[25] + F13*G[374] + F14*G[233] + F15*G[29] + F16*G[382] + F17*G[241]) + F21*(F12*G[170] + F13*G[380] + F14*G[239] + F15*G[35] + F16*G[400] + F17*G[296]) + F28*G[421]) + F24*(F18*(F12*G[15] + F13*G[364] + F14*G[223] + F15*G[19] + F16*G[387] + F17*G[246]) + F19*(F12*G[25] + F13*G[374] + F14*G[233] + F15*G[29] + F16*G[382] + F17*G[241]) + F20*(F12*G[32] + F13*G[378] + F14*G[237] + F15*G[33] + F16*G[389] + F17*G[248]) + F21*(F12*G[29] + F13*G[382] + F14*G[241] + F15*G[37] + F16*G[402] + F17*G[298]) + F24*(F12*G[181] + F13*G[386] + F14*G[245] + F15*G[41] + F16*G[406] + F17*G[302]) + F28*G[423]) + F25*(F18*(F12*G[12] + F13*G[365] + F14*G[224] + F15*G[20] + F16*G[391] + F17*G[250]) + F19*(F12*G[13] + F13*G[362] + F14*G[221] + F15*G[17] + F16*G[383] + F17*G[242]) + F20*(F12*G[15] + F13*G[364] + F14*G[223] + F15*G[19] + F16*G[387] + F17*G[246]) + F21*(F12*G[17] + F13*G[383] + F14*G[242] + F15*G[38] + F16*G[403] + F17*G[299]) + F24*(F12*G[19] + F13*G[387] + F14*G[246] + F15*G[42] + F16*G[407] + F17*G[303]) + F25*(F12*G[187] + F13*G[388] + F14*G[247] + F15*G[43] + F16*G[408] + F17*G[304]) + F28*G[424]))) + F3*G[427] + F4*G[428] + F44*(F15*G[47] + F16*G[412] + F17*G[308]) + F5*G[429] + F6*G[88] + F7*G[430] + F8*G[431] + F9*G[91]);
      
      // Number of operations: 999
      I[3] = W14[ip]*(std::abs(F18)*(F12*G[2] + F13*G[3] + F14*G[4] + F15*G[5] + F16*G[0] + F17*G[1]) + std::abs(F19)*(F12*G[2] + F13*G[3] + F14*G[4] + F15*G[5] + F16*G[0] + F17*G[1]) + std::abs(F20)*(F12*G[2] + F13*G[3] + F14*G[4] + F15*G[5] + F16*G[0] + F17*G[1]) + C[11]*F20*(G[6]*(F13 + F16) + G[7]*(F14 + F17) + G[8]*(F12 + F15)) + C[7]*F18*(G[6]*(F13 + F16) + G[7]*(F14 + F17) + G[8]*(F12 + F15)) + C[9]*F19*(G[6]*(F13 + F16) + G[7]*(F14 + F17) + G[8]*(F12 + F15)) + F0*G[432] + F1*G[433] + F10*G[434] + F11*G[435] + F12*G[436] + F13*G[355] + F14*G[214] + F15*G[437] + F16*G[393] + F17*G[289] + F2*G[438] + F22*F22*(F18*F18*(F12*G[93] + F13*G[94] + F14*G[95] + F15*G[96] + F16*G[11] + F17*G[49]) + F18*F28*G[121] + F19*(F18*(F12*G[101] + F13*G[102] + F14*G[103] + F15*G[104] + F16*G[13] + F17*G[51]) + F19*(F12*G[128] + F13*G[129] + F14*G[130] + F15*G[131] + F16*G[23] + F17*G[61]) + F28*G[150]) + F20*(F18*(F12*G[109] + F13*G[110] + F14*G[111] + F15*G[112] + F16*G[15] + F17*G[53]) + F19*(F12*G[136] + F13*G[137] + F14*G[138] + F15*G[139] + F16*G[25] + F17*G[63]) + F20*(F12*G[154] + F13*G[155] + F14*G[156] + F15*G[157] + F16*G[31] + F17*G[69]) + F28*G[163]) + F21*(F18*(F12*G[104] + F13*G[13] + F14*G[51] + F15*G[117] + F16*G[17] + F17*G[55]) + F19*(F12*G[135] + F13*G[24] + F14*G[62] + F15*G[144] + F16*G[27] + F17*G[65]) + F20*(F12*G[139] + F13*G[25] + F14*G[63] + F15*G[149] + F16*G[29] + F17*G[67]) + F21*(F12*G[169] + F13*G[170] + F14*G[171] + F15*G[172] + F16*G[35] + F17*G[73]) + F28*G[176]) + F24*(F18*(F12*G[112] + F13*G[15] + F14*G[53] + F15*G[119] + F16*G[19] + F17*G[57]) + F19*(F12*G[139] + F13*G[25] + F14*G[63] + F15*G[149] + F16*G[29] + F17*G[67]) + F20*(F12*G[161] + F13*G[32] + F14*G[70] + F15*G[162] + F16*G[33] + F17*G[71]) + F21*(F12*G[149] + F13*G[29] + F14*G[67] + F15*G[174] + F16*G[37] + F17*G[75]) + F24*(F12*G[180] + F13*G[181] + F14*G[182] + F15*G[183] + F16*G[41] + F17*G[79]) + F28*G[185]) + F25*(F18*(F12*G[100] + F13*G[12] + F14*G[50] + F15*G[120] + F16*G[20] + F17*G[58]) + F19*(F12*G[104] + F13*G[13] + F14*G[51] + F15*G[117] + F16*G[17] + F17*G[55]) + F20*(F12*G[112] + F13*G[15] + F14*G[53] + F15*G[119] + F16*G[19] + F17*G[57]) + F21*(F12*G[117] + F13*G[17] + F14*G[55] + F15*G[175] + F16*G[38] + F17*G[76]) + F24*(F12*G[119] + F13*G[19] + F14*G[57] + F15*G[184] + F16*G[42] + F17*G[80]) + F25*(F12*G[186] + F13*G[187] + F14*G[188] + F15*G[189] + F16*G[43] + F17*G[81]) + F28*G[190])) + F23*(F22*(F18*F18*(F12*G[97] + F13*G[98] + F14*G[99] + F15*G[100] + F16*G[12] + F17*G[50]) + F18*F28*G[127] + F19*(F18*(F12*G[105] + F13*G[106] + F14*G[107] + F15*G[108] + F16*G[14] + F17*G[52]) + F19*(F12*G[132] + F13*G[133] + F14*G[134] + F15*G[135] + F16*G[24] + F17*G[62]) + F28*G[152]) + F20*(F18*(F12*G[113] + F13*G[114] + F14*G[115] + F15*G[116] + F16*G[16] + F17*G[54]) + F19*(F12*G[140] + F13*G[141] + F14*G[142] + F15*G[143] + F16*G[26] + F17*G[64]) + F20*(F12*G[158] + F13*G[159] + F14*G[160] + F15*G[161] + F16*G[32] + F17*G[70]) + F28*G[168]) + F21*(F18*(F12*G[108] + F13*G[14] + F14*G[52] + F15*G[118] + F16*G[18] + F17*G[56]) + F19*(F12*G[145] + F13*G[146] + F14*G[147] + F15*G[148] + F16*G[28] + F17*G[66]) + F20*(F12*G[143] + F13*G[26] + F14*G[64] + F15*G[151] + F16*G[30] + F17*G[68]) + F21*(F12*G[144] + F13*G[27] + F14*G[65] + F15*G[173] + F16*G[36] + F17*G[74]) + F28*G[179]) + F24*(F18*(F12*G[116] + F13*G[16] + F14*G[54] + F15*G[122] + F16*G[21] + F17*G[59]) + F19*(F12*G[143] + F13*G[26] + F14*G[64] + F15*G[151] + F16*G[30] + F17*G[68]) + F20*(F12*G[164] + F13*G[165] + F14*G[166] + F15*G[167] + F16*G[34] + F17*G[72]) + F21*(F12*G[151] + F13*G[30] + F14*G[68] + F15*G[177] + F16*G[39] + F17*G[77]) + F24*(F12*G[162] + F13*G[33] + F14*G[71] + F15*G[191] + F16*G[44] + F17*G[82]) + F28*G[193]) + F25*(F18*(F12*G[123] + F13*G[124] + F14*G[125] + F15*G[126] + F16*G[22] + F17*G[60]) + F19*(F12*G[108] + F13*G[14] + F14*G[52] + F15*G[118] + F16*G[18] + F17*G[56]) + F20*(F12*G[116] + F13*G[16] + F14*G[54] + F15*G[122] + F16*G[21] + F17*G[59]) + F21*(F12*G[118] + F13*G[18] + F14*G[56] + F15*G[178] + F16*G[40] + F17*G[78]) + F24*(F12*G[122] + F13*G[21] + F14*G[59] + F15*G[192] + F16*G[45] + F17*G[83]) + F25*(F12*G[120] + F13*G[20] + F14*G[58] + F15*G[194] + F16*G[46] + F17*G[84]) + F28*G[195])) + F23*(F18*F18*(F12*G[93] + F13*G[94] + F14*G[95] + F15*G[96] + F16*G[11] + F17*G[49]) + F18*F28*G[121] + F19*(F18*(F12*G[101] + F13*G[102] + F14*G[103] + F15*G[104] + F16*G[13] + F17*G[51]) + F19*(F12*G[128] + F13*G[129] + F14*G[130] + F15*G[131] + F16*G[23] + F17*G[61]) + F28*G[150]) + F20*(F18*(F12*G[109] + F13*G[110] + F14*G[111] + F15*G[112] + F16*G[15] + F17*G[53]) + F19*(F12*G[136] + F13*G[137] + F14*G[138] + F15*G[139] + F16*G[25] + F17*G[63]) + F20*(F12*G[154] + F13*G[155] + F14*G[156] + F15*G[157] + F16*G[31] + F17*G[69]) + F28*G[163]) + F21*(F18*(F12*G[104] + F13*G[13] + F14*G[51] + F15*G[117] + F16*G[17] + F17*G[55]) + F19*(F12*G[135] + F13*G[24] + F14*G[62] + F15*G[144] + F16*G[27] + F17*G[65]) + F20*(F12*G[139] + F13*G[25] + F14*G[63] + F15*G[149] + F16*G[29] + F17*G[67]) + F21*(F12*G[169] + F13*G[170] + F14*G[171] + F15*G[172] + F16*G[35] + F17*G[73]) + F28*G[176]) + F24*(F18*(F12*G[112] + F13*G[15] + F14*G[53] + F15*G[119] + F16*G[19] + F17*G[57]) + F19*(F12*G[139] + F13*G[25] + F14*G[63] + F15*G[149] + F16*G[29] + F17*G[67]) + F20*(F12*G[161] + F13*G[32] + F14*G[70] + F15*G[162] + F16*G[33] + F17*G[71]) + F21*(F12*G[149] + F13*G[29] + F14*G[67] + F15*G[174] + F16*G[37] + F17*G[75]) + F24*(F12*G[180] + F13*G[181] + F14*G[182] + F15*G[183] + F16*G[41] + F17*G[79]) + F28*G[185]) + F25*(F18*(F12*G[100] + F13*G[12] + F14*G[50] + F15*G[120] + F16*G[20] + F17*G[58]) + F19*(F12*G[104] + F13*G[13] + F14*G[51] + F15*G[117] + F16*G[17] + F17*G[55]) + F20*(F12*G[112] + F13*G[15] + F14*G[53] + F15*G[119] + F16*G[19] + F17*G[57]) + F21*(F12*G[117] + F13*G[17] + F14*G[55] + F15*G[175] + F16*G[38] + F17*G[76]) + F24*(F12*G[119] + F13*G[19] + F14*G[57] + F15*G[184] + F16*G[42] + F17*G[80]) + F25*(F12*G[186] + F13*G[187] + F14*G[188] + F15*G[189] + F16*G[43] + F17*G[81]) + F28*G[190]))) + F3*G[439] + F4*G[440] + F44*(F15*G[198] + F16*G[47] + F17*G[85]) + F5*G[441] + F6*G[87] + F7*G[442] + F8*G[443] + F9*G[90]);
      
      // Number of operations: 999
      I[4] = W14[ip]*(std::abs(F18)*(F0*G[4] + F1*G[204] + F2*G[205] + F3*G[1] + F4*G[206] + F5*G[207]) + std::abs(F19)*(F0*G[4] + F1*G[204] + F2*G[205] + F3*G[1] + F4*G[206] + F5*G[207]) + std::abs(F20)*(F0*G[4] + F1*G[204] + F2*G[205] + F3*G[1] + F4*G[206] + F5*G[207]) + C[11]*F20*(G[208]*(F1 + F4) + G[209]*(F2 + F5) + G[7]*(F0 + F3)) + C[7]*F18*(G[208]*(F1 + F4) + G[209]*(F2 + F5) + G[7]*(F0 + F3)) + C[9]*F19*(G[208]*(F1 + F4) + G[209]*(F2 + F5) + G[7]*(F0 + F3)) + F0*G[444] + F1*G[445] + F10*G[446] + F11*G[447] + F12*G[438] + F13*G[418] + F14*G[334] + F15*G[441] + F16*G[429] + F17*G[345] + F2*G[448] + F22*F22*(F18*F18*(F0*G[95] + F1*G[215] + F2*G[252] + F3*G[49] + F4*G[290] + F5*G[310]) + F18*F26*G[330] + F19*(F18*(F0*G[103] + F1*G[217] + F2*G[254] + F3*G[51] + F4*G[221] + F5*G[258]) + F19*(F0*G[130] + F1*G[227] + F2*G[264] + F3*G[61] + F4*G[292] + F5*G[312]) + F26*G[332]) + F20*(F18*(F0*G[111] + F1*G[219] + F2*G[256] + F3*G[53] + F4*G[223] + F5*G[260]) + F19*(F0*G[138] + F1*G[229] + F2*G[266] + F3*G[63] + F4*G[233] + F5*G[270]) + F20*(F0*G[156] + F1*G[235] + F2*G[272] + F3*G[69] + F4*G[294] + F5*G[314]) + F26*G[335]) + F21*(F18*(F0*G[51] + F1*G[221] + F2*G[258] + F3*G[55] + F4*G[242] + F5*G[279]) + F19*(F0*G[62] + F1*G[231] + F2*G[268] + F3*G[65] + F4*G[240] + F5*G[277]) + F20*(F0*G[63] + F1*G[233] + F2*G[270] + F3*G[67] + F4*G[241] + F5*G[278]) + F21*(F0*G[171] + F1*G[239] + F2*G[276] + F3*G[73] + F4*G[296] + F5*G[316]) + F26*G[337]) + F24*(F18*(F0*G[53] + F1*G[223] + F2*G[260] + F3*G[57] + F4*G[246] + F5*G[283]) + F19*(F0*G[63] + F1*G[233] + F2*G[270] + F3*G[67] + F4*G[241] + F5*G[278]) + F20*(F0*G[70] + F1*G[237] + F2*G[274] + F3*G[71] + F4*G[248] + F5*G[285]) + F21*(F0*G[67] + F1*G[241] + F2*G[278] + F3*G[75] + F4*G[298] + F5*G[318]) + F24*(F0*G[182] + F1*G[245] + F2*G[282] + F3*G[79] + F4*G[302] + F5*G[322]) + F26*G[339]) + F25*(F0*(F18*G[50] + F19*G[51] + F20*G[53] + F21*G[55] + F24*G[57] + F25*G[188]) + F1*(F18*G[224] + F19*G[221] + F20*G[223] + F21*G[242] + F24*G[246] + F25*G[247]) + F2*(F18*G[261] + F19*G[258] + F20*G[260] + F21*G[279] + F24*G[283] + F25*G[284]) + F26*G[340] + F3*(F18*G[58] + F19*G[55] + F20*G[57] + F21*G[76] + F24*G[80] + F25*G[81]) + F4*(F18*G[250] + F19*G[242] + F20*G[246] + F21*G[299] + F24*G[303] + F25*G[304]) + F5*(F18*G[287] + F19*G[279] + F20*G[283] + F21*G[319] + F24*G[323] + F25*G[324]))) + F23*(F22*(F18*F18*(F0*G[99] + F1*G[216] + F2*G[253] + F3*G[50] + F4*G[224] + F5*G[261]) + F18*F26*G[331] + F19*(F18*(F0*G[107] + F1*G[218] + F2*G[255] + F3*G[52] + F4*G[222] + F5*G[259]) + F19*(F0*G[134] + F1*G[228] + F2*G[265] + F3*G[62] + F4*G[231] + F5*G[268]) + F26*G[333]) + F20*(F18*(F0*G[115] + F1*G[220] + F2*G[257] + F3*G[54] + F4*G[225] + F5*G[262]) + F19*(F0*G[142] + F1*G[230] + F2*G[267] + F3*G[64] + F4*G[234] + F5*G[271]) + F20*(F0*G[160] + F1*G[236] + F2*G[273] + F3*G[70] + F4*G[237] + F5*G[274]) + F26*G[336]) + F21*(F18*(F0*G[52] + F1*G[222] + F2*G[259] + F3*G[56] + F4*G[244] + F5*G[281]) + F19*(F0*G[147] + F1*G[232] + F2*G[269] + F3*G[66] + F4*G[293] + F5*G[313]) + F20*(F0*G[64] + F1*G[234] + F2*G[271] + F3*G[68] + F4*G[243] + F5*G[280]) + F21*(F0*G[65] + F1*G[240] + F2*G[277] + F3*G[74] + F4*G[297] + F5*G[317]) + F26*G[338]) + F24*(F18*(F0*G[54] + F1*G[225] + F2*G[262] + F3*G[59] + F4*G[249] + F5*G[286]) + F19*(F0*G[64] + F1*G[234] + F2*G[271] + F3*G[68] + F4*G[243] + F5*G[280]) + F20*(F0*G[166] + F1*G[238] + F2*G[275] + F3*G[72] + F4*G[295] + F5*G[315]) + F21*(F0*G[68] + F1*G[243] + F2*G[280] + F3*G[77] + F4*G[300] + F5*G[320]) + F24*(F0*G[71] + F1*G[248] + F2*G[285] + F3*G[82] + F4*G[305] + F5*G[325]) + F26*G[341]) + F25*(F0*(F18*G[125] + F19*G[52] + F20*G[54] + F21*G[56] + F24*G[59] + F25*G[58]) + F1*(F18*G[226] + F19*G[222] + F20*G[225] + F21*G[244] + F24*G[249] + F25*G[250]) + F2*(F18*G[263] + F19*G[259] + F20*G[262] + F21*G[281] + F24*G[286] + F25*G[287]) + F26*G[342] + F3*(F18*G[60] + F19*G[56] + F20*G[59] + F21*G[78] + F24*G[83] + F25*G[84]) + F4*(F18*G[291] + F19*G[244] + F20*G[249] + F21*G[301] + F24*G[306] + F25*G[307]) + F5*(F18*G[311] + F19*G[281] + F20*G[286] + F21*G[321] + F24*G[326] + F25*G[327]))) + F23*(F18*F18*(F0*G[95] + F1*G[215] + F2*G[252] + F3*G[49] + F4*G[290] + F5*G[310]) + F18*F26*G[330] + F19*(F18*(F0*G[103] + F1*G[217] + F2*G[254] + F3*G[51] + F4*G[221] + F5*G[258]) + F19*(F0*G[130] + F1*G[227] + F2*G[264] + F3*G[61] + F4*G[292] + F5*G[312]) + F26*G[332]) + F20*(F18*(F0*G[111] + F1*G[219] + F2*G[256] + F3*G[53] + F4*G[223] + F5*G[260]) + F19*(F0*G[138] + F1*G[229] + F2*G[266] + F3*G[63] + F4*G[233] + F5*G[270]) + F20*(F0*G[156] + F1*G[235] + F2*G[272] + F3*G[69] + F4*G[294] + F5*G[314]) + F26*G[335]) + F21*(F18*(F0*G[51] + F1*G[221] + F2*G[258] + F3*G[55] + F4*G[242] + F5*G[279]) + F19*(F0*G[62] + F1*G[231] + F2*G[268] + F3*G[65] + F4*G[240] + F5*G[277]) + F20*(F0*G[63] + F1*G[233] + F2*G[270] + F3*G[67] + F4*G[241] + F5*G[278]) + F21*(F0*G[171] + F1*G[239] + F2*G[276] + F3*G[73] + F4*G[296] + F5*G[316]) + F26*G[337]) + F24*(F18*(F0*G[53] + F1*G[223] + F2*G[260] + F3*G[57] + F4*G[246] + F5*G[283]) + F19*(F0*G[63] + F1*G[233] + F2*G[270] + F3*G[67] + F4*G[241] + F5*G[278]) + F20*(F0*G[70] + F1*G[237] + F2*G[274] + F3*G[71] + F4*G[248] + F5*G[285]) + F21*(F0*G[67] + F1*G[241] + F2*G[278] + F3*G[75] + F4*G[298] + F5*G[318]) + F24*(F0*G[182] + F1*G[245] + F2*G[282] + F3*G[79] + F4*G[302] + F5*G[322]) + F26*G[339]) + F25*(F0*(F18*G[50] + F19*G[51] + F20*G[53] + F21*G[55] + F24*G[57] + F25*G[188]) + F1*(F18*G[224] + F19*G[221] + F20*G[223] + F21*G[242] + F24*G[246] + F25*G[247]) + F2*(F18*G[261] + F19*G[258] + F20*G[260] + F21*G[279] + F24*G[283] + F25*G[284]) + F26*G[340] + F3*(F18*G[58] + F19*G[55] + F20*G[57] + F21*G[76] + F24*G[80] + F25*G[81]) + F4*(F18*G[250] + F19*G[242] + F20*G[246] + F21*G[299] + F24*G[303] + F25*G[304]) + F5*(F18*G[287] + F19*G[279] + F20*G[283] + F21*G[319] + F24*G[323] + F25*G[324])))) + F3*G[449] + F4*G[450] + F44*(F3*G[85] + F4*G[308] + F5*G[328]) + F5*G[451] + F6*G[153] + F7*G[452] + F8*G[453] + F9*G[199]);
      
      // Number of operations: 999
      I[5] = W14[ip]*(std::abs(F18)*(F0*G[3] + F1*G[348] + F2*G[204] + F3*G[0] + F4*G[349] + F5*G[206]) + std::abs(F19)*(F0*G[3] + F1*G[348] + F2*G[204] + F3*G[0] + F4*G[349] + F5*G[206]) + std::abs(F20)*(F0*G[3] + F1*G[348] + F2*G[204] + F3*G[0] + F4*G[349] + F5*G[206]) + C[11]*F20*(G[208]*(F2 + F5) + G[350]*(F1 + F4) + G[6]*(F0 + F3)) + C[7]*F18*(G[208]*(F2 + F5) + G[350]*(F1 + F4) + G[6]*(F0 + F3)) + C[9]*F19*(G[208]*(F2 + F5) + G[350]*(F1 + F4) + G[6]*(F0 + F3)) + F0*G[454] + F1*G[455] + F10*G[456] + F11*G[457] + F12*G[433] + F13*G[352] + F14*G[211] + F15*G[440] + F16*G[428] + F17*G[344] + F2*G[445] + F22*F22*(F18*F18*(F0*G[94] + F1*G[356] + F2*G[215] + F3*G[11] + F4*G[394] + F5*G[290]) + F18*F26*G[414] + F19*(F18*(F0*G[102] + F1*G[358] + F2*G[217] + F3*G[13] + F4*G[362] + F5*G[221]) + F19*(F0*G[129] + F1*G[368] + F2*G[227] + F3*G[23] + F4*G[396] + F5*G[292]) + F26*G[416]) + F20*(F18*(F0*G[110] + F1*G[360] + F2*G[219] + F3*G[15] + F4*G[364] + F5*G[223]) + F19*(F0*G[137] + F1*G[370] + F2*G[229] + F3*G[25] + F4*G[374] + F5*G[233]) + F20*(F0*G[155] + F1*G[376] + F2*G[235] + F3*G[31] + F4*G[398] + F5*G[294]) + F26*G[419]) + F21*(F18*(F0*G[13] + F1*G[362] + F2*G[221] + F3*G[17] + F4*G[383] + F5*G[242]) + F19*(F0*G[24] + F1*G[372] + F2*G[231] + F3*G[27] + F4*G[381] + F5*G[240]) + F20*(F0*G[25] + F1*G[374] + F2*G[233] + F3*G[29] + F4*G[382] + F5*G[241]) + F21*(F0*G[170] + F1*G[380] + F2*G[239] + F3*G[35] + F4*G[400] + F5*G[296]) + F26*G[421]) + F24*(F18*(F0*G[15] + F1*G[364] + F2*G[223] + F3*G[19] + F4*G[387] + F5*G[246]) + F19*(F0*G[25] + F1*G[374] + F2*G[233] + F3*G[29] + F4*G[382] + F5*G[241]) + F20*(F0*G[32] + F1*G[378] + F2*G[237] + F3*G[33] + F4*G[389] + F5*G[248]) + F21*(F0*G[29] + F1*G[382] + F2*G[241] + F3*G[37] + F4*G[402] + F5*G[298]) + F24*(F0*G[181] + F1*G[386] + F2*G[245] + F3*G[41] + F4*G[406] + F5*G[302]) + F26*G[423]) + F25*(F0*(F18*G[12] + F19*G[13] + F20*G[15] + F21*G[17] + F24*G[19] + F25*G[187]) + F1*(F18*G[365] + F19*G[362] + F20*G[364] + F21*G[383] + F24*G[387] + F25*G[388]) + F2*(F18*G[224] + F19*G[221] + F20*G[223] + F21*G[242] + F24*G[246] + F25*G[247]) + F26*G[424] + F3*(F18*G[20] + F19*G[17] + F20*G[19] + F21*G[38] + F24*G[42] + F25*G[43]) + F4*(F18*G[391] + F19*G[383] + F20*G[387] + F21*G[403] + F24*G[407] + F25*G[408]) + F5*(F18*G[250] + F19*G[242] + F20*G[246] + F21*G[299] + F24*G[303] + F25*G[304]))) + F23*(F22*(F18*F18*(F0*G[98] + F1*G[357] + F2*G[216] + F3*G[12] + F4*G[365] + F5*G[224]) + F18*F26*G[415] + F19*(F18*(F0*G[106] + F1*G[359] + F2*G[218] + F3*G[14] + F4*G[363] + F5*G[222]) + F19*(F0*G[133] + F1*G[369] + F2*G[228] + F3*G[24] + F4*G[372] + F5*G[231]) + F26*G[417]) + F20*(F18*(F0*G[114] + F1*G[361] + F2*G[220] + F3*G[16] + F4*G[366] + F5*G[225]) + F19*(F0*G[141] + F1*G[371] + F2*G[230] + F3*G[26] + F4*G[375] + F5*G[234]) + F20*(F0*G[159] + F1*G[377] + F2*G[236] + F3*G[32] + F4*G[378] + F5*G[237]) + F26*G[420]) + F21*(F18*(F0*G[14] + F1*G[363] + F2*G[222] + F3*G[18] + F4*G[385] + F5*G[244]) + F19*(F0*G[146] + F1*G[373] + F2*G[232] + F3*G[28] + F4*G[397] + F5*G[293]) + F20*(F0*G[26] + F1*G[375] + F2*G[234] + F3*G[30] + F4*G[384] + F5*G[243]) + F21*(F0*G[27] + F1*G[381] + F2*G[240] + F3*G[36] + F4*G[401] + F5*G[297]) + F26*G[422]) + F24*(F18*(F0*G[16] + F1*G[366] + F2*G[225] + F3*G[21] + F4*G[390] + F5*G[249]) + F19*(F0*G[26] + F1*G[375] + F2*G[234] + F3*G[30] + F4*G[384] + F5*G[243]) + F20*(F0*G[165] + F1*G[379] + F2*G[238] + F3*G[34] + F4*G[399] + F5*G[295]) + F21*(F0*G[30] + F1*G[384] + F2*G[243] + F3*G[39] + F4*G[404] + F5*G[300]) + F24*(F0*G[33] + F1*G[389] + F2*G[248] + F3*G[44] + F4*G[409] + F5*G[305]) + F26*G[425]) + F25*(F0*(F18*G[124] + F19*G[14] + F20*G[16] + F21*G[18] + F24*G[21] + F25*G[20]) + F1*(F18*G[367] + F19*G[363] + F20*G[366] + F21*G[385] + F24*G[390] + F25*G[391]) + F2*(F18*G[226] + F19*G[222] + F20*G[225] + F21*G[244] + F24*G[249] + F25*G[250]) + F26*G[426] + F3*(F18*G[22] + F19*G[18] + F20*G[21] + F21*G[40] + F24*G[45] + F25*G[46]) + F4*(F18*G[395] + F19*G[385] + F20*G[390] + F21*G[405] + F24*G[410] + F25*G[411]) + F5*(F18*G[291] + F19*G[244] + F20*G[249] + F21*G[301] + F24*G[306] + F25*G[307]))) + F23*(F18*F18*(F0*G[94] + F1*G[356] + F2*G[215] + F3*G[11] + F4*G[394] + F5*G[290]) + F18*F26*G[414] + F19*(F18*(F0*G[102] + F1*G[358] + F2*G[217] + F3*G[13] + F4*G[362] + F5*G[221]) + F19*(F0*G[129] + F1*G[368] + F2*G[227] + F3*G[23] + F4*G[396] + F5*G[292]) + F26*G[416]) + F20*(F18*(F0*G[110] + F1*G[360] + F2*G[219] + F3*G[15] + F4*G[364] + F5*G[223]) + F19*(F0*G[137] + F1*G[370] + F2*G[229] + F3*G[25] + F4*G[374] + F5*G[233]) + F20*(F0*G[155] + F1*G[376] + F2*G[235] + F3*G[31] + F4*G[398] + F5*G[294]) + F26*G[419]) + F21*(F18*(F0*G[13] + F1*G[362] + F2*G[221] + F3*G[17] + F4*G[383] + F5*G[242]) + F19*(F0*G[24] + F1*G[372] + F2*G[231] + F3*G[27] + F4*G[381] + F5*G[240]) + F20*(F0*G[25] + F1*G[374] + F2*G[233] + F3*G[29] + F4*G[382] + F5*G[241]) + F21*(F0*G[170] + F1*G[380] + F2*G[239] + F3*G[35] + F4*G[400] + F5*G[296]) + F26*G[421]) + F24*(F18*(F0*G[15] + F1*G[364] + F2*G[223] + F3*G[19] + F4*G[387] + F5*G[246]) + F19*(F0*G[25] + F1*G[374] + F2*G[233] + F3*G[29] + F4*G[382] + F5*G[241]) + F20*(F0*G[32] + F1*G[378] + F2*G[237] + F3*G[33] + F4*G[389] + F5*G[248]) + F21*(F0*G[29] + F1*G[382] + F2*G[241] + F3*G[37] + F4*G[402] + F5*G[298]) + F24*(F0*G[181] + F1*G[386] + F2*G[245] + F3*G[41] + F4*G[406] + F5*G[302]) + F26*G[423]) + F25*(F0*(F18*G[12] + F19*G[13] + F20*G[15] + F21*G[17] + F24*G[19] + F25*G[187]) + F1*(F18*G[365] + F19*G[362] + F20*G[364] + F21*G[383] + F24*G[387] + F25*G[388]) + F2*(F18*G[224] + F19*G[221] + F20*G[223] + F21*G[242] + F24*G[246] + F25*G[247]) + F26*G[424] + F3*(F18*G[20] + F19*G[17] + F20*G[19] + F21*G[38] + F24*G[42] + F25*G[43]) + F4*(F18*G[391] + F19*G[383] + F20*G[387] + F21*G[403] + F24*G[407] + F25*G[408]) + F5*(F18*G[250] + F19*G[242] + F20*G[246] + F21*G[299] + F24*G[303] + F25*G[304])))) + F3*G[458] + F4*G[459] + F44*(F3*G[47] + F4*G[412] + F5*G[308]) + F5*G[450] + F6*G[10] + F7*G[460] + F8*G[461] + F9*G[197]);
      
      // Number of operations: 999
      I[6] = W14[ip]*(std::abs(F18)*(F0*G[2] + F1*G[3] + F2*G[4] + F3*G[5] + F4*G[0] + F5*G[1]) + std::abs(F19)*(F0*G[2] + F1*G[3] + F2*G[4] + F3*G[5] + F4*G[0] + F5*G[1]) + std::abs(F20)*(F0*G[2] + F1*G[3] + F2*G[4] + F3*G[5] + F4*G[0] + F5*G[1]) + C[11]*F20*(G[6]*(F1 + F4) + G[7]*(F2 + F5) + G[8]*(F0 + F3)) + C[7]*F18*(G[6]*(F1 + F4) + G[7]*(F2 + F5) + G[8]*(F0 + F3)) + C[9]*F19*(G[6]*(F1 + F4) + G[7]*(F2 + F5) + G[8]*(F0 + F3)) + F0*G[462] + F1*G[454] + F10*G[463] + F11*G[464] + F12*G[432] + F13*G[351] + F14*G[210] + F15*G[439] + F16*G[427] + F17*G[343] + F2*G[444] + F22*F22*(F18*F18*(F0*G[93] + F1*G[94] + F2*G[95] + F3*G[96] + F4*G[11] + F5*G[49]) + F18*F26*G[121] + F19*(F18*(F0*G[101] + F1*G[102] + F2*G[103] + F3*G[104] + F4*G[13] + F5*G[51]) + F19*(F0*G[128] + F1*G[129] + F2*G[130] + F3*G[131] + F4*G[23] + F5*G[61]) + F26*G[150]) + F20*(F18*(F0*G[109] + F1*G[110] + F2*G[111] + F3*G[112] + F4*G[15] + F5*G[53]) + F19*(F0*G[136] + F1*G[137] + F2*G[138] + F3*G[139] + F4*G[25] + F5*G[63]) + F20*(F0*G[154] + F1*G[155] + F2*G[156] + F3*G[157] + F4*G[31] + F5*G[69]) + F26*G[163]) + F21*(F18*(F0*G[104] + F1*G[13] + F2*G[51] + F3*G[117] + F4*G[17] + F5*G[55]) + F19*(F0*G[135] + F1*G[24] + F2*G[62] + F3*G[144] + F4*G[27] + F5*G[65]) + F20*(F0*G[139] + F1*G[25] + F2*G[63] + F3*G[149] + F4*G[29] + F5*G[67]) + F21*(F0*G[169] + F1*G[170] + F2*G[171] + F3*G[172] + F4*G[35] + F5*G[73]) + F26*G[176]) + F24*(F18*(F0*G[112] + F1*G[15] + F2*G[53] + F3*G[119] + F4*G[19] + F5*G[57]) + F19*(F0*G[139] + F1*G[25] + F2*G[63] + F3*G[149] + F4*G[29] + F5*G[67]) + F20*(F0*G[161] + F1*G[32] + F2*G[70] + F3*G[162] + F4*G[33] + F5*G[71]) + F21*(F0*G[149] + F1*G[29] + F2*G[67] + F3*G[174] + F4*G[37] + F5*G[75]) + F24*(F0*G[180] + F1*G[181] + F2*G[182] + F3*G[183] + F4*G[41] + F5*G[79]) + F26*G[185]) + F25*(F0*(F18*G[100] + F19*G[104] + F20*G[112] + F21*G[117] + F24*G[119] + F25*G[186]) + F1*(F18*G[12] + F19*G[13] + F20*G[15] + F21*G[17] + F24*G[19] + F25*G[187]) + F2*(F18*G[50] + F19*G[51] + F20*G[53] + F21*G[55] + F24*G[57] + F25*G[188]) + F26*G[190] + F3*(F18*G[120] + F19*G[117] + F20*G[119] + F21*G[175] + F24*G[184] + F25*G[189]) + F4*(F18*G[20] + F19*G[17] + F20*G[19] + F21*G[38] + F24*G[42] + F25*G[43]) + F5*(F18*G[58] + F19*G[55] + F20*G[57] + F21*G[76] + F24*G[80] + F25*G[81]))) + F23*(F22*(F18*F18*(F0*G[97] + F1*G[98] + F2*G[99] + F3*G[100] + F4*G[12] + F5*G[50]) + F18*F26*G[127] + F19*(F18*(F0*G[105] + F1*G[106] + F2*G[107] + F3*G[108] + F4*G[14] + F5*G[52]) + F19*(F0*G[132] + F1*G[133] + F2*G[134] + F3*G[135] + F4*G[24] + F5*G[62]) + F26*G[152]) + F20*(F18*(F0*G[113] + F1*G[114] + F2*G[115] + F3*G[116] + F4*G[16] + F5*G[54]) + F19*(F0*G[140] + F1*G[141] + F2*G[142] + F3*G[143] + F4*G[26] + F5*G[64]) + F20*(F0*G[158] + F1*G[159] + F2*G[160] + F3*G[161] + F4*G[32] + F5*G[70]) + F26*G[168]) + F21*(F18*(F0*G[108] + F1*G[14] + F2*G[52] + F3*G[118] + F4*G[18] + F5*G[56]) + F19*(F0*G[145] + F1*G[146] + F2*G[147] + F3*G[148] + F4*G[28] + F5*G[66]) + F20*(F0*G[143] + F1*G[26] + F2*G[64] + F3*G[151] + F4*G[30] + F5*G[68]) + F21*(F0*G[144] + F1*G[27] + F2*G[65] + F3*G[173] + F4*G[36] + F5*G[74]) + F26*G[179]) + F24*(F18*(F0*G[116] + F1*G[16] + F2*G[54] + F3*G[122] + F4*G[21] + F5*G[59]) + F19*(F0*G[143] + F1*G[26] + F2*G[64] + F3*G[151] + F4*G[30] + F5*G[68]) + F20*(F0*G[164] + F1*G[165] + F2*G[166] + F3*G[167] + F4*G[34] + F5*G[72]) + F21*(F0*G[151] + F1*G[30] + F2*G[68] + F3*G[177] + F4*G[39] + F5*G[77]) + F24*(F0*G[162] + F1*G[33] + F2*G[71] + F3*G[191] + F4*G[44] + F5*G[82]) + F26*G[193]) + F25*(F0*(F18*G[123] + F19*G[108] + F20*G[116] + F21*G[118] + F24*G[122] + F25*G[120]) + F1*(F18*G[124] + F19*G[14] + F20*G[16] + F21*G[18] + F24*G[21] + F25*G[20]) + F2*(F18*G[125] + F19*G[52] + F20*G[54] + F21*G[56] + F24*G[59] + F25*G[58]) + F26*G[195] + F3*(F18*G[126] + F19*G[118] + F20*G[122] + F21*G[178] + F24*G[192] + F25*G[194]) + F4*(F18*G[22] + F19*G[18] + F20*G[21] + F21*G[40] + F24*G[45] + F25*G[46]) + F5*(F18*G[60] + F19*G[56] + F20*G[59] + F21*G[78] + F24*G[83] + F25*G[84]))) + F23*(F18*F18*(F0*G[93] + F1*G[94] + F2*G[95] + F3*G[96] + F4*G[11] + F5*G[49]) + F18*F26*G[121] + F19*(F18*(F0*G[101] + F1*G[102] + F2*G[103] + F3*G[104] + F4*G[13] + F5*G[51]) + F19*(F0*G[128] + F1*G[129] + F2*G[130] + F3*G[131] + F4*G[23] + F5*G[61]) + F26*G[150]) + F20*(F18*(F0*G[109] + F1*G[110] + F2*G[111] + F3*G[112] + F4*G[15] + F5*G[53]) + F19*(F0*G[136] + F1*G[137] + F2*G[138] + F3*G[139] + F4*G[25] + F5*G[63]) + F20*(F0*G[154] + F1*G[155] + F2*G[156] + F3*G[157] + F4*G[31] + F5*G[69]) + F26*G[163]) + F21*(F18*(F0*G[104] + F1*G[13] + F2*G[51] + F3*G[117] + F4*G[17] + F5*G[55]) + F19*(F0*G[135] + F1*G[24] + F2*G[62] + F3*G[144] + F4*G[27] + F5*G[65]) + F20*(F0*G[139] + F1*G[25] + F2*G[63] + F3*G[149] + F4*G[29] + F5*G[67]) + F21*(F0*G[169] + F1*G[170] + F2*G[171] + F3*G[172] + F4*G[35] + F5*G[73]) + F26*G[176]) + F24*(F18*(F0*G[112] + F1*G[15] + F2*G[53] + F3*G[119] + F4*G[19] + F5*G[57]) + F19*(F0*G[139] + F1*G[25] + F2*G[63] + F3*G[149] + F4*G[29] + F5*G[67]) + F20*(F0*G[161] + F1*G[32] + F2*G[70] + F3*G[162] + F4*G[33] + F5*G[71]) + F21*(F0*G[149] + F1*G[29] + F2*G[67] + F3*G[174] + F4*G[37] + F5*G[75]) + F24*(F0*G[180] + F1*G[181] + F2*G[182] + F3*G[183] + F4*G[41] + F5*G[79]) + F26*G[185]) + F25*(F0*(F18*G[100] + F19*G[104] + F20*G[112] + F21*G[117] + F24*G[119] + F25*G[186]) + F1*(F18*G[12] + F19*G[13] + F20*G[15] + F21*G[17] + F24*G[19] + F25*G[187]) + F2*(F18*G[50] + F19*G[51] + F20*G[53] + F21*G[55] + F24*G[57] + F25*G[188]) + F26*G[190] + F3*(F18*G[120] + F19*G[117] + F20*G[119] + F21*G[175] + F24*G[184] + F25*G[189]) + F4*(F18*G[20] + F19*G[17] + F20*G[19] + F21*G[38] + F24*G[42] + F25*G[43]) + F5*(F18*G[58] + F19*G[55] + F20*G[57] + F21*G[76] + F24*G[80] + F25*G[81])))) + F3*G[465] + F4*G[458] + F44*(F3*G[198] + F4*G[47] + F5*G[85]) + F5*G[449] + F6*G[9] + F7*G[466] + F8*G[467] + F9*G[196]);
      
      // Number of operations: 999
      I[7] = W14[ip]*(std::abs(F18)*(F10*G[206] + F11*G[207] + F6*G[4] + F7*G[204] + F8*G[205] + F9*G[1]) + std::abs(F19)*(F10*G[206] + F11*G[207] + F6*G[4] + F7*G[204] + F8*G[205] + F9*G[1]) + std::abs(F20)*(F10*G[206] + F11*G[207] + F6*G[4] + F7*G[204] + F8*G[205] + F9*G[1]) + C[11]*F20*(G[208]*(F10 + F7) + G[209]*(F11 + F8) + G[7]*(F6 + F9)) + C[7]*F18*(G[208]*(F10 + F7) + G[209]*(F11 + F8) + G[7]*(F6 + F9)) + C[9]*F19*(G[208]*(F10 + F7) + G[209]*(F11 + F8) + G[7]*(F6 + F9)) + F0*G[467] + F1*G[461] + F10*G[468] + F11*G[469] + F12*G[443] + F13*G[431] + F14*G[347] + F15*G[435] + F16*G[354] + F17*G[213] + F2*G[453] + F22*F22*(F18*F18*(F10*G[290] + F11*G[310] + F6*G[95] + F7*G[215] + F8*G[252] + F9*G[49]) + F18*F27*G[330] + F19*(F18*(F10*G[221] + F11*G[258] + F6*G[103] + F7*G[217] + F8*G[254] + F9*G[51]) + F19*(F10*G[292] + F11*G[312] + F6*G[130] + F7*G[227] + F8*G[264] + F9*G[61]) + F27*G[332]) + F20*(F18*(F10*G[223] + F11*G[260] + F6*G[111] + F7*G[219] + F8*G[256] + F9*G[53]) + F19*(F10*G[233] + F11*G[270] + F6*G[138] + F7*G[229] + F8*G[266] + F9*G[63]) + F20*(F10*G[294] + F11*G[314] + F6*G[156] + F7*G[235] + F8*G[272] + F9*G[69]) + F27*G[335]) + F21*(F18*(F10*G[242] + F11*G[279] + F6*G[51] + F7*G[221] + F8*G[258] + F9*G[55]) + F19*(F10*G[240] + F11*G[277] + F6*G[62] + F7*G[231] + F8*G[268] + F9*G[65]) + F20*(F10*G[241] + F11*G[278] + F6*G[63] + F7*G[233] + F8*G[270] + F9*G[67]) + F21*(F10*G[296] + F11*G[316] + F6*G[171] + F7*G[239] + F8*G[276] + F9*G[73]) + F27*G[337]) + F24*(F18*(F10*G[246] + F11*G[283] + F6*G[53] + F7*G[223] + F8*G[260] + F9*G[57]) + F19*(F10*G[241] + F11*G[278] + F6*G[63] + F7*G[233] + F8*G[270] + F9*G[67]) + F20*(F10*G[248] + F11*G[285] + F6*G[70] + F7*G[237] + F8*G[274] + F9*G[71]) + F21*(F10*G[298] + F11*G[318] + F6*G[67] + F7*G[241] + F8*G[278] + F9*G[75]) + F24*(F10*G[302] + F11*G[322] + F6*G[182] + F7*G[245] + F8*G[282] + F9*G[79]) + F27*G[339]) + F25*(F10*(F18*G[250] + F19*G[242] + F20*G[246] + F21*G[299] + F24*G[303] + F25*G[304]) + F11*(F18*G[287] + F19*G[279] + F20*G[283] + F21*G[319] + F24*G[323] + F25*G[324]) + F27*G[340] + F6*(F18*G[50] + F19*G[51] + F20*G[53] + F21*G[55] + F24*G[57] + F25*G[188]) + F7*(F18*G[224] + F19*G[221] + F20*G[223] + F21*G[242] + F24*G[246] + F25*G[247]) + F8*(F18*G[261] + F19*G[258] + F20*G[260] + F21*G[279] + F24*G[283] + F25*G[284]) + F9*(F18*G[58] + F19*G[55] + F20*G[57] + F21*G[76] + F24*G[80] + F25*G[81]))) + F23*(F22*(F18*F18*(F10*G[224] + F11*G[261] + F6*G[99] + F7*G[216] + F8*G[253] + F9*G[50]) + F18*F27*G[331] + F19*(F18*(F10*G[222] + F11*G[259] + F6*G[107] + F7*G[218] + F8*G[255] + F9*G[52]) + F19*(F10*G[231] + F11*G[268] + F6*G[134] + F7*G[228] + F8*G[265] + F9*G[62]) + F27*G[333]) + F20*(F18*(F10*G[225] + F11*G[262] + F6*G[115] + F7*G[220] + F8*G[257] + F9*G[54]) + F19*(F10*G[234] + F11*G[271] + F6*G[142] + F7*G[230] + F8*G[267] + F9*G[64]) + F20*(F10*G[237] + F11*G[274] + F6*G[160] + F7*G[236] + F8*G[273] + F9*G[70]) + F27*G[336]) + F21*(F18*(F10*G[244] + F11*G[281] + F6*G[52] + F7*G[222] + F8*G[259] + F9*G[56]) + F19*(F10*G[293] + F11*G[313] + F6*G[147] + F7*G[232] + F8*G[269] + F9*G[66]) + F20*(F10*G[243] + F11*G[280] + F6*G[64] + F7*G[234] + F8*G[271] + F9*G[68]) + F21*(F10*G[297] + F11*G[317] + F6*G[65] + F7*G[240] + F8*G[277] + F9*G[74]) + F27*G[338]) + F24*(F18*(F10*G[249] + F11*G[286] + F6*G[54] + F7*G[225] + F8*G[262] + F9*G[59]) + F19*(F10*G[243] + F11*G[280] + F6*G[64] + F7*G[234] + F8*G[271] + F9*G[68]) + F20*(F10*G[295] + F11*G[315] + F6*G[166] + F7*G[238] + F8*G[275] + F9*G[72]) + F21*(F10*G[300] + F11*G[320] + F6*G[68] + F7*G[243] + F8*G[280] + F9*G[77]) + F24*(F10*G[305] + F11*G[325] + F6*G[71] + F7*G[248] + F8*G[285] + F9*G[82]) + F27*G[341]) + F25*(F10*(F18*G[291] + F19*G[244] + F20*G[249] + F21*G[301] + F24*G[306] + F25*G[307]) + F11*(F18*G[311] + F19*G[281] + F20*G[286] + F21*G[321] + F24*G[326] + F25*G[327]) + F27*G[342] + F6*(F18*G[125] + F19*G[52] + F20*G[54] + F21*G[56] + F24*G[59] + F25*G[58]) + F7*(F18*G[226] + F19*G[222] + F20*G[225] + F21*G[244] + F24*G[249] + F25*G[250]) + F8*(F18*G[263] + F19*G[259] + F20*G[262] + F21*G[281] + F24*G[286] + F25*G[287]) + F9*(F18*G[60] + F19*G[56] + F20*G[59] + F21*G[78] + F24*G[83] + F25*G[84]))) + F23*(F18*F18*(F10*G[290] + F11*G[310] + F6*G[95] + F7*G[215] + F8*G[252] + F9*G[49]) + F18*F27*G[330] + F19*(F18*(F10*G[221] + F11*G[258] + F6*G[103] + F7*G[217] + F8*G[254] + F9*G[51]) + F19*(F10*G[292] + F11*G[312] + F6*G[130] + F7*G[227] + F8*G[264] + F9*G[61]) + F27*G[332]) + F20*(F18*(F10*G[223] + F11*G[260] + F6*G[111] + F7*G[219] + F8*G[256] + F9*G[53]) + F19*(F10*G[233] + F11*G[270] + F6*G[138] + F7*G[229] + F8*G[266] + F9*G[63]) + F20*(F10*G[294] + F11*G[314] + F6*G[156] + F7*G[235] + F8*G[272] + F9*G[69]) + F27*G[335]) + F21*(F18*(F10*G[242] + F11*G[279] + F6*G[51] + F7*G[221] + F8*G[258] + F9*G[55]) + F19*(F10*G[240] + F11*G[277] + F6*G[62] + F7*G[231] + F8*G[268] + F9*G[65]) + F20*(F10*G[241] + F11*G[278] + F6*G[63] + F7*G[233] + F8*G[270] + F9*G[67]) + F21*(F10*G[296] + F11*G[316] + F6*G[171] + F7*G[239] + F8*G[276] + F9*G[73]) + F27*G[337]) + F24*(F18*(F10*G[246] + F11*G[283] + F6*G[53] + F7*G[223] + F8*G[260] + F9*G[57]) + F19*(F10*G[241] + F11*G[278] + F6*G[63] + F7*G[233] + F8*G[270] + F9*G[67]) + F20*(F10*G[248] + F11*G[285] + F6*G[70] + F7*G[237] + F8*G[274] + F9*G[71]) + F21*(F10*G[298] + F11*G[318] + F6*G[67] + F7*G[241] + F8*G[278] + F9*G[75]) + F24*(F10*G[302] + F11*G[322] + F6*G[182] + F7*G[245] + F8*G[282] + F9*G[79]) + F27*G[339]) + F25*(F10*(F18*G[250] + F19*G[242] + F20*G[246] + F21*G[299] + F24*G[303] + F25*G[304]) + F11*(F18*G[287] + F19*G[279] + F20*G[283] + F21*G[319] + F24*G[323] + F25*G[324]) + F27*G[340] + F6*(F18*G[50] + F19*G[51] + F20*G[53] + F21*G[55] + F24*G[57] + F25*G[188]) + F7*(F18*G[224] + F19*G[221] + F20*G[223] + F21*G[242] + F24*G[246] + F25*G[247]) + F8*(F18*G[261] + F19*G[258] + F20*G[260] + F21*G[279] + F24*G[283] + F25*G[284]) + F9*(F18*G[58] + F19*G[55] + F20*G[57] + F21*G[76] + F24*G[80] + F25*G[81])))) + F3*G[464] + F4*G[457] + F44*(F10*G[308] + F11*G[328] + F9*G[85]) + F5*G[447] + F6*G[202] + F7*G[470] + F8*G[471] + F9*G[86]);
      
      // Number of operations: 999
      I[8] = W14[ip]*(std::abs(F18)*(F10*G[349] + F11*G[206] + F6*G[3] + F7*G[348] + F8*G[204] + F9*G[0]) + std::abs(F19)*(F10*G[349] + F11*G[206] + F6*G[3] + F7*G[348] + F8*G[204] + F9*G[0]) + std::abs(F20)*(F10*G[349] + F11*G[206] + F6*G[3] + F7*G[348] + F8*G[204] + F9*G[0]) + C[11]*F20*(G[208]*(F11 + F8) + G[350]*(F10 + F7) + G[6]*(F6 + F9)) + C[7]*F18*(G[208]*(F11 + F8) + G[350]*(F10 + F7) + G[6]*(F6 + F9)) + C[9]*F19*(G[208]*(F11 + F8) + G[350]*(F10 + F7) + G[6]*(F6 + F9)) + F0*G[466] + F1*G[460] + F10*G[472] + F11*G[468] + F12*G[442] + F13*G[430] + F14*G[346] + F15*G[434] + F16*G[353] + F17*G[212] + F2*G[452] + F22*F22*(F18*F18*(F10*G[394] + F11*G[290] + F6*G[94] + F7*G[356] + F8*G[215] + F9*G[11]) + F18*F27*G[414] + F19*(F18*(F10*G[362] + F11*G[221] + F6*G[102] + F7*G[358] + F8*G[217] + F9*G[13]) + F19*(F10*G[396] + F11*G[292] + F6*G[129] + F7*G[368] + F8*G[227] + F9*G[23]) + F27*G[416]) + F20*(F18*(F10*G[364] + F11*G[223] + F6*G[110] + F7*G[360] + F8*G[219] + F9*G[15]) + F19*(F10*G[374] + F11*G[233] + F6*G[137] + F7*G[370] + F8*G[229] + F9*G[25]) + F20*(F10*G[398] + F11*G[294] + F6*G[155] + F7*G[376] + F8*G[235] + F9*G[31]) + F27*G[419]) + F21*(F18*(F10*G[383] + F11*G[242] + F6*G[13] + F7*G[362] + F8*G[221] + F9*G[17]) + F19*(F10*G[381] + F11*G[240] + F6*G[24] + F7*G[372] + F8*G[231] + F9*G[27]) + F20*(F10*G[382] + F11*G[241] + F6*G[25] + F7*G[374] + F8*G[233] + F9*G[29]) + F21*(F10*G[400] + F11*G[296] + F6*G[170] + F7*G[380] + F8*G[239] + F9*G[35]) + F27*G[421]) + F24*(F18*(F10*G[387] + F11*G[246] + F6*G[15] + F7*G[364] + F8*G[223] + F9*G[19]) + F19*(F10*G[382] + F11*G[241] + F6*G[25] + F7*G[374] + F8*G[233] + F9*G[29]) + F20*(F10*G[389] + F11*G[248] + F6*G[32] + F7*G[378] + F8*G[237] + F9*G[33]) + F21*(F10*G[402] + F11*G[298] + F6*G[29] + F7*G[382] + F8*G[241] + F9*G[37]) + F24*(F10*G[406] + F11*G[302] + F6*G[181] + F7*G[386] + F8*G[245] + F9*G[41]) + F27*G[423]) + F25*(F10*(F18*G[391] + F19*G[383] + F20*G[387] + F21*G[403] + F24*G[407] + F25*G[408]) + F11*(F18*G[250] + F19*G[242] + F20*G[246] + F21*G[299] + F24*G[303] + F25*G[304]) + F27*G[424] + F6*(F18*G[12] + F19*G[13] + F20*G[15] + F21*G[17] + F24*G[19] + F25*G[187]) + F7*(F18*G[365] + F19*G[362] + F20*G[364] + F21*G[383] + F24*G[387] + F25*G[388]) + F8*(F18*G[224] + F19*G[221] + F20*G[223] + F21*G[242] + F24*G[246] + F25*G[247]) + F9*(F18*G[20] + F19*G[17] + F20*G[19] + F21*G[38] + F24*G[42] + F25*G[43]))) + F23*(F22*(F18*F18*(F10*G[365] + F11*G[224] + F6*G[98] + F7*G[357] + F8*G[216] + F9*G[12]) + F18*F27*G[415] + F19*(F18*(F10*G[363] + F11*G[222] + F6*G[106] + F7*G[359] + F8*G[218] + F9*G[14]) + F19*(F10*G[372] + F11*G[231] + F6*G[133] + F7*G[369] + F8*G[228] + F9*G[24]) + F27*G[417]) + F20*(F18*(F10*G[366] + F11*G[225] + F6*G[114] + F7*G[361] + F8*G[220] + F9*G[16]) + F19*(F10*G[375] + F11*G[234] + F6*G[141] + F7*G[371] + F8*G[230] + F9*G[26]) + F20*(F10*G[378] + F11*G[237] + F6*G[159] + F7*G[377] + F8*G[236] + F9*G[32]) + F27*G[420]) + F21*(F18*(F10*G[385] + F11*G[244] + F6*G[14] + F7*G[363] + F8*G[222] + F9*G[18]) + F19*(F10*G[397] + F11*G[293] + F6*G[146] + F7*G[373] + F8*G[232] + F9*G[28]) + F20*(F10*G[384] + F11*G[243] + F6*G[26] + F7*G[375] + F8*G[234] + F9*G[30]) + F21*(F10*G[401] + F11*G[297] + F6*G[27] + F7*G[381] + F8*G[240] + F9*G[36]) + F27*G[422]) + F24*(F18*(F10*G[390] + F11*G[249] + F6*G[16] + F7*G[366] + F8*G[225] + F9*G[21]) + F19*(F10*G[384] + F11*G[243] + F6*G[26] + F7*G[375] + F8*G[234] + F9*G[30]) + F20*(F10*G[399] + F11*G[295] + F6*G[165] + F7*G[379] + F8*G[238] + F9*G[34]) + F21*(F10*G[404] + F11*G[300] + F6*G[30] + F7*G[384] + F8*G[243] + F9*G[39]) + F24*(F10*G[409] + F11*G[305] + F6*G[33] + F7*G[389] + F8*G[248] + F9*G[44]) + F27*G[425]) + F25*(F10*(F18*G[395] + F19*G[385] + F20*G[390] + F21*G[405] + F24*G[410] + F25*G[411]) + F11*(F18*G[291] + F19*G[244] + F20*G[249] + F21*G[301] + F24*G[306] + F25*G[307]) + F27*G[426] + F6*(F18*G[124] + F19*G[14] + F20*G[16] + F21*G[18] + F24*G[21] + F25*G[20]) + F7*(F18*G[367] + F19*G[363] + F20*G[366] + F21*G[385] + F24*G[390] + F25*G[391]) + F8*(F18*G[226] + F19*G[222] + F20*G[225] + F21*G[244] + F24*G[249] + F25*G[250]) + F9*(F18*G[22] + F19*G[18] + F20*G[21] + F21*G[40] + F24*G[45] + F25*G[46]))) + F23*(F18*F18*(F10*G[394] + F11*G[290] + F6*G[94] + F7*G[356] + F8*G[215] + F9*G[11]) + F18*F27*G[414] + F19*(F18*(F10*G[362] + F11*G[221] + F6*G[102] + F7*G[358] + F8*G[217] + F9*G[13]) + F19*(F10*G[396] + F11*G[292] + F6*G[129] + F7*G[368] + F8*G[227] + F9*G[23]) + F27*G[416]) + F20*(F18*(F10*G[364] + F11*G[223] + F6*G[110] + F7*G[360] + F8*G[219] + F9*G[15]) + F19*(F10*G[374] + F11*G[233] + F6*G[137] + F7*G[370] + F8*G[229] + F9*G[25]) + F20*(F10*G[398] + F11*G[294] + F6*G[155] + F7*G[376] + F8*G[235] + F9*G[31]) + F27*G[419]) + F21*(F18*(F10*G[383] + F11*G[242] + F6*G[13] + F7*G[362] + F8*G[221] + F9*G[17]) + F19*(F10*G[381] + F11*G[240] + F6*G[24] + F7*G[372] + F8*G[231] + F9*G[27]) + F20*(F10*G[382] + F11*G[241] + F6*G[25] + F7*G[374] + F8*G[233] + F9*G[29]) + F21*(F10*G[400] + F11*G[296] + F6*G[170] + F7*G[380] + F8*G[239] + F9*G[35]) + F27*G[421]) + F24*(F18*(F10*G[387] + F11*G[246] + F6*G[15] + F7*G[364] + F8*G[223] + F9*G[19]) + F19*(F10*G[382] + F11*G[241] + F6*G[25] + F7*G[374] + F8*G[233] + F9*G[29]) + F20*(F10*G[389] + F11*G[248] + F6*G[32] + F7*G[378] + F8*G[237] + F9*G[33]) + F21*(F10*G[402] + F11*G[298] + F6*G[29] + F7*G[382] + F8*G[241] + F9*G[37]) + F24*(F10*G[406] + F11*G[302] + F6*G[181] + F7*G[386] + F8*G[245] + F9*G[41]) + F27*G[423]) + F25*(F10*(F18*G[391] + F19*G[383] + F20*G[387] + F21*G[403] + F24*G[407] + F25*G[408]) + F11*(F18*G[250] + F19*G[242] + F20*G[246] + F21*G[299] + F24*G[303] + F25*G[304]) + F27*G[424] + F6*(F18*G[12] + F19*G[13] + F20*G[15] + F21*G[17] + F24*G[19] + F25*G[187]) + F7*(F18*G[365] + F19*G[362] + F20*G[364] + F21*G[383] + F24*G[387] + F25*G[388]) + F8*(F18*G[224] + F19*G[221] + F20*G[223] + F21*G[242] + F24*G[246] + F25*G[247]) + F9*(F18*G[20] + F19*G[17] + F20*G[19] + F21*G[38] + F24*G[42] + F25*G[43])))) + F3*G[463] + F4*G[456] + F44*(F10*G[412] + F11*G[308] + F9*G[47]) + F5*G[446] + F6*G[201] + F7*G[473] + F8*G[470] + F9*G[48]);
      
      // Number of operations: 714
      I[9] = W14[ip]*(std::abs(0.5*(F22 + F23))*(F18*G[474] + F25*G[475]) + F22*(F15*(F21*G[485] + F24*G[486] + F25*G[487] + G[476]*(F39 + F40) + G[477]*(F35 + F36) + G[478]*(F37 + F38)) + F16*(F21*G[488] + F24*G[489] + F25*G[490] + G[479]*(F39 + F40) + G[480]*(F35 + F36) + G[481]*(F37 + F38)) + F17*(F21*G[491] + F24*G[492] + F25*G[493] + G[482]*(F39 + F40) + G[483]*(F35 + F36) + G[484]*(F37 + F38)) + F18*(F12*G[476] + F13*G[479] + F14*G[482]) + F19*(F12*G[477] + F13*G[480] + F14*G[483]) + F20*(F12*G[478] + F13*G[481] + F14*G[484]) + F28*G[518]) + F23*(F15*(F21*G[485] + F24*G[486] + F25*G[487] + G[476]*(F39 + F40) + G[477]*(F35 + F36) + G[478]*(F37 + F38)) + F16*(F21*G[488] + F24*G[489] + F25*G[490] + G[479]*(F39 + F40) + G[480]*(F35 + F36) + G[481]*(F37 + F38)) + F17*(F21*G[491] + F24*G[492] + F25*G[493] + G[482]*(F39 + F40) + G[483]*(F35 + F36) + G[484]*(F37 + F38)) + F18*(F12*G[476] + F13*G[479] + F14*G[482]) + F19*(F12*G[477] + F13*G[480] + F14*G[483]) + F20*(F12*G[478] + F13*G[481] + F14*G[484]) + F28*G[518]) + F29*F29*(F18*G[126] + F19*G[118] + F20*G[122] + F21*G[178] + F24*G[192] + F25*G[525]) + F30*(F29*(F18*G[494] + F19*G[500] + F20*G[506] + F21*G[512] + F24*G[519] + F25*G[526]) + F30*(F18*G[395] + F19*G[385] + F20*G[390] + F21*G[405] + F24*G[410] + F25*G[529])) + F31*(F29*(F18*G[495] + F19*G[501] + F20*G[507] + F21*G[513] + F24*G[520] + F25*G[527]) + F30*(F18*G[497] + F19*G[503] + F20*G[509] + F21*G[515] + F24*G[522] + F25*G[530]) + F31*(F18*G[311] + F19*G[281] + F20*G[286] + F21*G[321] + F24*G[326] + F25*G[532])) + F32*(F29*(F18*G[496] + F19*G[502] + F20*G[508] + F21*G[514] + F24*G[521] + F25*G[528]) + F30*(F18*G[494] + F19*G[500] + F20*G[506] + F21*G[512] + F24*G[519] + F25*G[526]) + F31*(F18*G[495] + F19*G[501] + F20*G[507] + F21*G[513] + F24*G[520] + F25*G[527]) + F32*(F18*G[126] + F19*G[118] + F20*G[122] + F21*G[178] + F24*G[192] + F25*G[525])) + F33*(F29*(F18*G[494] + F19*G[500] + F20*G[506] + F21*G[512] + F24*G[519] + F25*G[526]) + F30*(F18*G[498] + F19*G[504] + F20*G[510] + F21*G[516] + F24*G[523] + F25*G[531]) + F31*(F18*G[497] + F19*G[503] + F20*G[509] + F21*G[515] + F24*G[522] + F25*G[530]) + F32*(F18*G[494] + F19*G[500] + F20*G[506] + F21*G[512] + F24*G[519] + F25*G[526]) + F33*(F18*G[395] + F19*G[385] + F20*G[390] + F21*G[405] + F24*G[410] + F25*G[529])) + F34*(F29*(F18*G[495] + F19*G[501] + F20*G[507] + F21*G[513] + F24*G[520] + F25*G[527]) + F30*(F18*G[497] + F19*G[503] + F20*G[509] + F21*G[515] + F24*G[522] + F25*G[530]) + F31*(F18*G[499] + F19*G[505] + F20*G[511] + F21*G[517] + F24*G[524] + F25*G[533]) + F32*(F18*G[495] + F19*G[501] + F20*G[507] + F21*G[513] + F24*G[520] + F25*G[527]) + F33*(F18*G[497] + F19*G[503] + F20*G[509] + F21*G[515] + F24*G[522] + F25*G[530]) + F34*(F18*G[311] + F19*G[281] + F20*G[286] + F21*G[321] + F24*G[326] + F25*G[532])) + F41*G[534] + F42*G[535] + F43*G[536] + (F22*F29*F29*G[537] + F22*F29*F30*G[538] + F22*F29*F31*G[539] + F22*F29*F32*G[540] + F22*F29*F33*G[538] + F22*F29*F34*G[539] + F22*F30*F30*G[541] + F22*F30*F31*G[542] + F22*F30*F32*G[538] + F22*F30*F33*G[543] + F22*F30*F34*G[542] + F22*F31*F31*G[544] + F22*F31*F32*G[539] + F22*F31*F33*G[542] + F22*F31*F34*G[545] + F22*F32*F32*G[537] + F22*F32*F33*G[538] + F22*F32*F34*G[539] + F22*F33*F33*G[541] + F22*F33*F34*G[542] + F22*F34*F34*G[544] + F23*F29*F29*G[537] + F23*F29*F30*G[538] + F23*F29*F31*G[539] + F23*F29*F32*G[540] + F23*F29*F33*G[538] + F23*F29*F34*G[539] + F23*F30*F30*G[541] + F23*F30*F31*G[542] + F23*F30*F32*G[538] + F23*F30*F33*G[543] + F23*F30*F34*G[542] + F23*F31*F31*G[544] + F23*F31*F32*G[539] + F23*F31*F33*G[542] + F23*F31*F34*G[545] + F23*F32*F32*G[537] + F23*F32*F33*G[538] + F23*F32*F34*G[539] + F23*F33*F33*G[541] + F23*F33*F34*G[542] + F23*F34*F34*G[544] + F29*F29*G[546] + F29*F30*G[547] + F29*F31*G[548] + F29*F32*G[549] + F29*F33*G[547] + F29*F34*G[548] + F30*F30*G[550] + F30*F31*G[551] + F30*F32*G[547] + F30*F33*G[552] + F30*F34*G[551] + F31*F31*G[553] + F31*F32*G[548] + F31*F33*G[551] + F31*F34*G[554] + F32*F32*G[546] + F32*F33*G[547] + F32*F34*G[548] + F33*F33*G[550] + F33*F34*G[551] + F34*F34*G[553])/(1.0 + 0.1*std::abs(0.5*(F29*K_00 + F30*K_10 + F31*K_20 + F32*K_00 + F33*K_10 + F34*K_20)) + 0.1*std::abs(0.5*(F29*K_01 + F30*K_11 + F31*K_21 + F32*K_01 + F33*K_11 + F34*K_21)) + 0.1*std::abs(0.5*(F29*K_02 + F30*K_12 + F31*K_22 + F32*K_02 + F33*K_12 + F34*K_22))));
      
      // Number of operations: 714
      I[10] = W14[ip]*(std::abs(0.5*(F22 + F23))*(F19*G[474] + F21*G[475]) + F22*(F18*(F0*G[476] + F1*G[479] + F2*G[482]) + F19*(F0*G[477] + F1*G[480] + F2*G[483]) + F20*(F0*G[478] + F1*G[481] + F2*G[484]) + F26*G[518] + F3*(F21*G[485] + F24*G[486] + F25*G[487] + G[476]*(F39 + F40) + G[477]*(F35 + F36) + G[478]*(F37 + F38)) + F4*(F21*G[488] + F24*G[489] + F25*G[490] + G[479]*(F39 + F40) + G[480]*(F35 + F36) + G[481]*(F37 + F38)) + F5*(F21*G[491] + F24*G[492] + F25*G[493] + G[482]*(F39 + F40) + G[483]*(F35 + F36) + G[484]*(F37 + F38))) + F23*(F18*(F0*G[476] + F1*G[479] + F2*G[482]) + F19*(F0*G[477] + F1*G[480] + F2*G[483]) + F20*(F0*G[478] + F1*G[481] + F2*G[484]) + F26*G[518] + F3*(F21*G[485] + F24*G[486] + F25*G[487] + G[476]*(F39 + F40) + G[477]*(F35 + F36) + G[478]*(F37 + F38)) + F4*(F21*G[488] + F24*G[489] + F25*G[490] + G[479]*(F39 + F40) + G[480]*(F35 + F36) + G[481]*(F37 + F38)) + F5*(F21*G[491] + F24*G[492] + F25*G[493] + G[482]*(F39 + F40) + G[483]*(F35 + F36) + G[484]*(F37 + F38))) + F29*F29*(F18*G[118] + F19*G[148] + F20*G[151] + F21*G[567] + F24*G[177] + F25*G[178]) + F30*(F29*(F18*G[500] + F19*G[555] + F20*G[561] + F21*G[568] + F24*G[576] + F25*G[512]) + F30*(F18*G[385] + F19*G[397] + F20*G[384] + F21*G[571] + F24*G[404] + F25*G[405])) + F31*(F29*(F18*G[501] + F19*G[556] + F20*G[562] + F21*G[569] + F24*G[577] + F25*G[513]) + F30*(F18*G[503] + F19*G[558] + F20*G[564] + F21*G[572] + F24*G[579] + F25*G[515]) + F31*(F18*G[281] + F19*G[313] + F20*G[280] + F21*G[574] + F24*G[320] + F25*G[321])) + F32*(F29*(F18*G[502] + F19*G[557] + F20*G[563] + F21*G[570] + F24*G[578] + F25*G[514]) + F30*(F18*G[500] + F19*G[555] + F20*G[561] + F21*G[568] + F24*G[576] + F25*G[512]) + F31*(F18*G[501] + F19*G[556] + F20*G[562] + F21*G[569] + F24*G[577] + F25*G[513]) + F32*(F18*G[118] + F19*G[148] + F20*G[151] + F21*G[567] + F24*G[177] + F25*G[178])) + F33*(F29*(F18*G[500] + F19*G[555] + F20*G[561] + F21*G[568] + F24*G[576] + F25*G[512]) + F30*(F18*G[504] + F19*G[559] + F20*G[565] + F21*G[573] + F24*G[580] + F25*G[516]) + F31*(F18*G[503] + F19*G[558] + F20*G[564] + F21*G[572] + F24*G[579] + F25*G[515]) + F32*(F18*G[500] + F19*G[555] + F20*G[561] + F21*G[568] + F24*G[576] + F25*G[512]) + F33*(F18*G[385] + F19*G[397] + F20*G[384] + F21*G[571] + F24*G[404] + F25*G[405])) + F34*(F29*(F18*G[501] + F19*G[556] + F20*G[562] + F21*G[569] + F24*G[577] + F25*G[513]) + F30*(F18*G[503] + F19*G[558] + F20*G[564] + F21*G[572] + F24*G[579] + F25*G[515]) + F31*(F18*G[505] + F19*G[560] + F20*G[566] + F21*G[575] + F24*G[581] + F25*G[517]) + F32*(F18*G[501] + F19*G[556] + F20*G[562] + F21*G[569] + F24*G[577] + F25*G[513]) + F33*(F18*G[503] + F19*G[558] + F20*G[564] + F21*G[572] + F24*G[579] + F25*G[515]) + F34*(F18*G[281] + F19*G[313] + F20*G[280] + F21*G[574] + F24*G[320] + F25*G[321])) + F41*G[582] + F42*G[583] + F43*G[584] + (F22*F29*F29*G[585] + F22*F29*F30*G[586] + F22*F29*F31*G[587] + F22*F29*F32*G[588] + F22*F29*F33*G[586] + F22*F29*F34*G[587] + F22*F30*F30*G[589] + F22*F30*F31*G[590] + F22*F30*F32*G[586] + F22*F30*F33*G[591] + F22*F30*F34*G[590] + F22*F31*F31*G[592] + F22*F31*F32*G[587] + F22*F31*F33*G[590] + F22*F31*F34*G[593] + F22*F32*F32*G[585] + F22*F32*F33*G[586] + F22*F32*F34*G[587] + F22*F33*F33*G[589] + F22*F33*F34*G[590] + F22*F34*F34*G[592] + F23*F29*F29*G[585] + F23*F29*F30*G[586] + F23*F29*F31*G[587] + F23*F29*F32*G[588] + F23*F29*F33*G[586] + F23*F29*F34*G[587] + F23*F30*F30*G[589] + F23*F30*F31*G[590] + F23*F30*F32*G[586] + F23*F30*F33*G[591] + F23*F30*F34*G[590] + F23*F31*F31*G[592] + F23*F31*F32*G[587] + F23*F31*F33*G[590] + F23*F31*F34*G[593] + F23*F32*F32*G[585] + F23*F32*F33*G[586] + F23*F32*F34*G[587] + F23*F33*F33*G[589] + F23*F33*F34*G[590] + F23*F34*F34*G[592] + F29*F29*G[594] + F29*F30*G[595] + F29*F31*G[596] + F29*F32*G[597] + F29*F33*G[595] + F29*F34*G[596] + F30*F30*G[598] + F30*F31*G[599] + F30*F32*G[595] + F30*F33*G[600] + F30*F34*G[599] + F31*F31*G[601] + F31*F32*G[596] + F31*F33*G[599] + F31*F34*G[602] + F32*F32*G[594] + F32*F33*G[595] + F32*F34*G[596] + F33*F33*G[598] + F33*F34*G[599] + F34*F34*G[601])/(1.0 + 0.1*std::abs(0.5*(F29*K_00 + F30*K_10 + F31*K_20 + F32*K_00 + F33*K_10 + F34*K_20)) + 0.1*std::abs(0.5*(F29*K_01 + F30*K_11 + F31*K_21 + F32*K_01 + F33*K_11 + F34*K_21)) + 0.1*std::abs(0.5*(F29*K_02 + F30*K_12 + F31*K_22 + F32*K_02 + F33*K_12 + F34*K_22))));
      
      // Number of operations: 714
      I[11] = W14[ip]*(std::abs(0.5*(F22 + F23))*(F20*G[474] + F24*G[475]) + F22*(F10*(F21*G[488] + F24*G[489] + F25*G[490] + G[479]*(F39 + F40) + G[480]*(F35 + F36) + G[481]*(F37 + F38)) + F11*(F21*G[491] + F24*G[492] + F25*G[493] + G[482]*(F39 + F40) + G[483]*(F35 + F36) + G[484]*(F37 + F38)) + F27*G[518] + F6*(F18*G[476] + F19*G[477] + F20*G[478]) + F7*(F18*G[479] + F19*G[480] + F20*G[481]) + F8*(F18*G[482] + F19*G[483] + F20*G[484]) + F9*(F21*G[485] + F24*G[486] + F25*G[487] + G[476]*(F39 + F40) + G[477]*(F35 + F36) + G[478]*(F37 + F38))) + F23*(F10*(F21*G[488] + F24*G[489] + F25*G[490] + G[479]*(F39 + F40) + G[480]*(F35 + F36) + G[481]*(F37 + F38)) + F11*(F21*G[491] + F24*G[492] + F25*G[493] + G[482]*(F39 + F40) + G[483]*(F35 + F36) + G[484]*(F37 + F38)) + F27*G[518] + F6*(F18*G[476] + F19*G[477] + F20*G[478]) + F7*(F18*G[479] + F19*G[480] + F20*G[481]) + F8*(F18*G[482] + F19*G[483] + F20*G[484]) + F9*(F21*G[485] + F24*G[486] + F25*G[487] + G[476]*(F39 + F40) + G[477]*(F35 + F36) + G[478]*(F37 + F38))) + F29*F29*(F18*G[122] + F19*G[151] + F20*G[167] + F21*G[177] + F24*G[609] + F25*G[192]) + F30*(F29*(F18*G[506] + F19*G[561] + F20*G[603] + F21*G[576] + F24*G[610] + F25*G[519]) + F30*(F18*G[390] + F19*G[384] + F20*G[399] + F21*G[404] + F24*G[613] + F25*G[410])) + F31*(F29*(F18*G[507] + F19*G[562] + F20*G[604] + F21*G[577] + F24*G[611] + F25*G[520]) + F30*(F18*G[509] + F19*G[564] + F20*G[606] + F21*G[579] + F24*G[614] + F25*G[522]) + F31*(F18*G[286] + F19*G[280] + F20*G[315] + F21*G[320] + F24*G[616] + F25*G[326])) + F32*(F29*(F18*G[508] + F19*G[563] + F20*G[605] + F21*G[578] + F24*G[612] + F25*G[521]) + F30*(F18*G[506] + F19*G[561] + F20*G[603] + F21*G[576] + F24*G[610] + F25*G[519]) + F31*(F18*G[507] + F19*G[562] + F20*G[604] + F21*G[577] + F24*G[611] + F25*G[520]) + F32*(F18*G[122] + F19*G[151] + F20*G[167] + F21*G[177] + F24*G[609] + F25*G[192])) + F33*(F29*(F18*G[506] + F19*G[561] + F20*G[603] + F21*G[576] + F24*G[610] + F25*G[519]) + F30*(F18*G[510] + F19*G[565] + F20*G[607] + F21*G[580] + F24*G[615] + F25*G[523]) + F31*(F18*G[509] + F19*G[564] + F20*G[606] + F21*G[579] + F24*G[614] + F25*G[522]) + F32*(F18*G[506] + F19*G[561] + F20*G[603] + F21*G[576] + F24*G[610] + F25*G[519]) + F33*(F18*G[390] + F19*G[384] + F20*G[399] + F21*G[404] + F24*G[613] + F25*G[410])) + F34*(F29*(F18*G[507] + F19*G[562] + F20*G[604] + F21*G[577] + F24*G[611] + F25*G[520]) + F30*(F18*G[509] + F19*G[564] + F20*G[606] + F21*G[579] + F24*G[614] + F25*G[522]) + F31*(F18*G[511] + F19*G[566] + F20*G[608] + F21*G[581] + F24*G[617] + F25*G[524]) + F32*(F18*G[507] + F19*G[562] + F20*G[604] + F21*G[577] + F24*G[611] + F25*G[520]) + F33*(F18*G[509] + F19*G[564] + F20*G[606] + F21*G[579] + F24*G[614] + F25*G[522]) + F34*(F18*G[286] + F19*G[280] + F20*G[315] + F21*G[320] + F24*G[616] + F25*G[326])) + F41*G[618] + F42*G[619] + F43*G[620] + (F22*F29*F29*G[621] + F22*F29*F30*G[622] + F22*F29*F31*G[623] + F22*F29*F32*G[624] + F22*F29*F33*G[622] + F22*F29*F34*G[623] + F22*F30*F30*G[625] + F22*F30*F31*G[626] + F22*F30*F32*G[622] + F22*F30*F33*G[627] + F22*F30*F34*G[626] + F22*F31*F31*G[628] + F22*F31*F32*G[623] + F22*F31*F33*G[626] + F22*F31*F34*G[629] + F22*F32*F32*G[621] + F22*F32*F33*G[622] + F22*F32*F34*G[623] + F22*F33*F33*G[625] + F22*F33*F34*G[626] + F22*F34*F34*G[628] + F23*F29*F29*G[621] + F23*F29*F30*G[622] + F23*F29*F31*G[623] + F23*F29*F32*G[624] + F23*F29*F33*G[622] + F23*F29*F34*G[623] + F23*F30*F30*G[625] + F23*F30*F31*G[626] + F23*F30*F32*G[622] + F23*F30*F33*G[627] + F23*F30*F34*G[626] + F23*F31*F31*G[628] + F23*F31*F32*G[623] + F23*F31*F33*G[626] + F23*F31*F34*G[629] + F23*F32*F32*G[621] + F23*F32*F33*G[622] + F23*F32*F34*G[623] + F23*F33*F33*G[625] + F23*F33*F34*G[626] + F23*F34*F34*G[628] + F29*F29*G[630] + F29*F30*G[631] + F29*F31*G[632] + F29*F32*G[633] + F29*F33*G[631] + F29*F34*G[632] + F30*F30*G[634] + F30*F31*G[635] + F30*F32*G[631] + F30*F33*G[636] + F30*F34*G[635] + F31*F31*G[637] + F31*F32*G[632] + F31*F33*G[635] + F31*F34*G[638] + F32*F32*G[630] + F32*F33*G[631] + F32*F34*G[632] + F33*F33*G[634] + F33*F34*G[635] + F34*F34*G[637])/(1.0 + 0.1*std::abs(0.5*(F29*K_00 + F30*K_10 + F31*K_20 + F32*K_00 + F33*K_10 + F34*K_20)) + 0.1*std::abs(0.5*(F29*K_01 + F30*K_11 + F31*K_21 + F32*K_01 + F33*K_11 + F34*K_21)) + 0.1*std::abs(0.5*(F29*K_02 + F30*K_12 + F31*K_22 + F32*K_02 + F33*K_12 + F34*K_22))));
      
      
      // Number of operations for primary indices: 36
      for (unsigned int j = 0; j < 2; j++)
      {
        // Number of operations to compute entry: 2
        A[nzc10[j]] += FE0_D001[ip][j]*I[0];
        // Number of operations to compute entry: 2
        A[nzc12[j]] += FE0_D001[ip][j]*I[1];
        // Number of operations to compute entry: 2
        A[nzc13[j]] += FE0_D001[ip][j]*I[2];
        // Number of operations to compute entry: 2
        A[nzc14[j]] += FE0_D001[ip][j]*I[3];
        // Number of operations to compute entry: 2
        A[nzc4[j]] += FE0_D001[ip][j]*I[4];
        // Number of operations to compute entry: 2
        A[nzc5[j]] += FE0_D001[ip][j]*I[5];
        // Number of operations to compute entry: 2
        A[nzc6[j]] += FE0_D001[ip][j]*I[6];
        // Number of operations to compute entry: 2
        A[nzc8[j]] += FE0_D001[ip][j]*I[7];
        // Number of operations to compute entry: 2
        A[nzc9[j]] += FE0_D001[ip][j]*I[8];
      }// end loop over 'j'
      
      // Number of operations for primary indices: 24
      for (unsigned int j = 0; j < 4; j++)
      {
        // Number of operations to compute entry: 2
        A[nzc11[j]] += FE0[ip][j]*I[9];
        // Number of operations to compute entry: 2
        A[nzc3[j]] += FE0[ip][j]*I[10];
        // Number of operations to compute entry: 2
        A[nzc7[j]] += FE0[ip][j]*I[11];
      }// end loop over 'j'
    }// end loop over 'ip'
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Tabulate the tensor for the contribution from a local cell
/// using the specified reference cell quadrature points/weights
void nsemomentum3d_cell_integral_1_0::tabulate_tensor(double* A,
                     const double * const * w,
                     const ufc::cell& c,
                     unsigned int num_quadrature_points,
                     const double * const * quadrature_points,
                     const double* quadrature_weights) const
{
    throw std::runtime_error("Quadrature version of tabulate_tensor not yet implemented (introduced in UFC 2.0).");
}
#endif

/// Constructor
nsemomentum3d_exterior_facet_integral_1_0::nsemomentum3d_exterior_facet_integral_1_0() : ufc::exterior_facet_integral()
{
    // Do nothing
}

/// Destructor
nsemomentum3d_exterior_facet_integral_1_0::~nsemomentum3d_exterior_facet_integral_1_0()
{
    // Do nothing
}

/// Tabulate the tensor for the contribution from a local exterior facet
void nsemomentum3d_exterior_facet_integral_1_0::tabulate_tensor(double* A,
                                    const double * const * w,
                                    const ufc::cell& c,
                                    unsigned int facet) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    
    // Compute sub determinants
    
    // Compute determinant of Jacobian
    
    // Compute inverse of Jacobian
    
    // Get vertices on face
    static unsigned int face_vertices[4][3] = {{1, 2, 3}, {0, 2, 3}, {0, 1, 3}, {0, 1, 2}};
    const unsigned int v0 = face_vertices[facet][0];
    const unsigned int v1 = face_vertices[facet][1];
    const unsigned int v2 = face_vertices[facet][2];
    
    // Compute scale factor (area of face scaled by area of reference triangle)
    const double a0 = (x[v0][1]*x[v1][2] + x[v0][2]*x[v2][1] + x[v1][1]*x[v2][2]) - (x[v2][1]*x[v1][2] + x[v2][2]*x[v0][1] + x[v1][1]*x[v0][2]);
    
    const double a1 = (x[v0][2]*x[v1][0] + x[v0][0]*x[v2][2] + x[v1][2]*x[v2][0]) - (x[v2][2]*x[v1][0] + x[v2][0]*x[v0][2] + x[v1][2]*x[v0][0]);
    
    const double a2 = (x[v0][0]*x[v1][1] + x[v0][1]*x[v2][0] + x[v1][0]*x[v2][1]) - (x[v2][0]*x[v1][1] + x[v2][1]*x[v0][0] + x[v1][0]*x[v0][1]);
    
    const double det = std::sqrt(a0*a0 + a1*a1 + a2*a2);
    
    
    // Cell Volume.
    
    // Compute circumradius.
    
    
    // Facet Area (divide by two because 'det' is scaled by area of reference triangle).
    
    // Array of quadrature weights.
    static const double W6[6] = {0.054975871827661, 0.054975871827661, 0.054975871827661, 0.111690794839005, 0.111690794839005, 0.111690794839005};
    // Quadrature points on the UFC reference element: (0.816847572980459, 0.091576213509771), (0.091576213509771, 0.816847572980459), (0.091576213509771, 0.091576213509771), (0.10810301816807, 0.445948490915965), (0.445948490915965, 0.10810301816807), (0.445948490915965, 0.445948490915965)
    
    // Value of basis functions at quadrature points.
    static const double FE1_f0_C0[6][3] = \
    {{0.09157621350977, 0.816847572980459, 0.091576213509771},
    {0.0915762135097701, 0.091576213509771, 0.816847572980459},
    {0.816847572980458, 0.091576213509771, 0.091576213509771},
    {0.445948490915965, 0.10810301816807, 0.445948490915965},
    {0.445948490915965, 0.445948490915965, 0.10810301816807},
    {0.10810301816807, 0.445948490915965, 0.445948490915965}};
    
    // Array of non-zero columns
    static const unsigned int nzc0[3] = {1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc1[3] = {5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc2[3] = {9, 10, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc5[3] = {8, 10, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc8[3] = {8, 9, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc6[3] = {0, 1, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc7[3] = {4, 5, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc3[3] = {0, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc10[3] = {4, 5, 6};
    
    // Array of non-zero columns
    static const unsigned int nzc9[3] = {0, 1, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc4[3] = {4, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc11[3] = {8, 9, 10};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 12; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    // Number of operations to compute geometry constants: 6.
    double G[3];
    G[0] = 0.0;
    G[1] = -0.5*det*w[15][0]/w[4][0];
    G[2] = 0.5*det*w[15][0]/w[4][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (facet)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 1098
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 1098
      for (unsigned int ip = 0; ip < 6; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        double F2 = 0.0;
        double F3 = 0.0;
        double F4 = 0.0;
        double F5 = 0.0;
        double F6 = 0.0;
        double F7 = 0.0;
        double F8 = 0.0;
        double F9 = 0.0;
        double F10 = 0.0;
        double F11 = 0.0;
        double F12 = 0.0;
        double F13 = 0.0;
        double F14 = 0.0;
        
        // Total number of operations to compute function values = 90
        for (unsigned int r = 0; r < 3; r++)
        {
          F0 += FE1_f0_C0[ip][r]*w[16][nzc0[r]];
          F1 += FE1_f0_C0[ip][r]*w[16][nzc1[r]];
          F2 += FE1_f0_C0[ip][r]*w[16][nzc2[r]];
          F3 += FE1_f0_C0[ip][r]*w[0][nzc0[r]];
          F4 += FE1_f0_C0[ip][r]*w[0][nzc1[r]];
          F5 += FE1_f0_C0[ip][r]*w[0][nzc2[r]];
          F6 += FE1_f0_C0[ip][r]*w[9][nzc0[r]];
          F7 += FE1_f0_C0[ip][r]*w[13][nzc0[r]];
          F8 += FE1_f0_C0[ip][r]*w[14][nzc0[r]];
          F9 += FE1_f0_C0[ip][r]*w[9][nzc1[r]];
          F10 += FE1_f0_C0[ip][r]*w[13][nzc1[r]];
          F11 += FE1_f0_C0[ip][r]*w[14][nzc1[r]];
          F12 += FE1_f0_C0[ip][r]*w[9][nzc2[r]];
          F13 += FE1_f0_C0[ip][r]*w[13][nzc2[r]];
          F14 += FE1_f0_C0[ip][r]*w[14][nzc2[r]];
        }// end loop over 'r'
        
        // Number of operations to compute ip constants: 75
        double I[3];
        // Number of operations: 25
        I[0] = F0*W6[ip]*(G[0]*(F0*F3 + F1*F4 + F2*F5) + G[1]*(F0*F6 + F1*F9 + F12*F2) + G[2]*(F0*(F7 + F8) + F1*(F10 + F11) + F2*(F13 + F14)));
        
        // Number of operations: 25
        I[1] = F1*W6[ip]*(G[0]*(F0*F3 + F1*F4 + F2*F5) + G[1]*(F0*F6 + F1*F9 + F12*F2) + G[2]*(F0*(F7 + F8) + F1*(F10 + F11) + F2*(F13 + F14)));
        
        // Number of operations: 25
        I[2] = F2*W6[ip]*(G[0]*(F0*F3 + F1*F4 + F2*F5) + G[1]*(F0*F6 + F1*F9 + F12*F2) + G[2]*(F0*(F7 + F8) + F1*(F10 + F11) + F2*(F13 + F14)));
        
        
        // Number of operations for primary indices: 18
        for (unsigned int j = 0; j < 3; j++)
        {
          // Number of operations to compute entry: 2
          A[nzc0[j]] += FE1_f0_C0[ip][j]*I[0];
          // Number of operations to compute entry: 2
          A[nzc1[j]] += FE1_f0_C0[ip][j]*I[1];
          // Number of operations to compute entry: 2
          A[nzc2[j]] += FE1_f0_C0[ip][j]*I[2];
        }// end loop over 'j'
      }// end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 1098
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 1098
      for (unsigned int ip = 0; ip < 6; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        double F2 = 0.0;
        double F3 = 0.0;
        double F4 = 0.0;
        double F5 = 0.0;
        double F6 = 0.0;
        double F7 = 0.0;
        double F8 = 0.0;
        double F9 = 0.0;
        double F10 = 0.0;
        double F11 = 0.0;
        double F12 = 0.0;
        double F13 = 0.0;
        double F14 = 0.0;
        
        // Total number of operations to compute function values = 90
        for (unsigned int r = 0; r < 3; r++)
        {
          F0 += FE1_f0_C0[ip][r]*w[16][nzc3[r]];
          F1 += FE1_f0_C0[ip][r]*w[16][nzc4[r]];
          F2 += FE1_f0_C0[ip][r]*w[16][nzc5[r]];
          F3 += FE1_f0_C0[ip][r]*w[0][nzc3[r]];
          F4 += FE1_f0_C0[ip][r]*w[0][nzc4[r]];
          F5 += FE1_f0_C0[ip][r]*w[0][nzc5[r]];
          F6 += FE1_f0_C0[ip][r]*w[9][nzc3[r]];
          F7 += FE1_f0_C0[ip][r]*w[13][nzc3[r]];
          F8 += FE1_f0_C0[ip][r]*w[14][nzc3[r]];
          F9 += FE1_f0_C0[ip][r]*w[9][nzc4[r]];
          F10 += FE1_f0_C0[ip][r]*w[13][nzc4[r]];
          F11 += FE1_f0_C0[ip][r]*w[14][nzc4[r]];
          F12 += FE1_f0_C0[ip][r]*w[9][nzc5[r]];
          F13 += FE1_f0_C0[ip][r]*w[13][nzc5[r]];
          F14 += FE1_f0_C0[ip][r]*w[14][nzc5[r]];
        }// end loop over 'r'
        
        // Number of operations to compute ip constants: 75
        double I[3];
        // Number of operations: 25
        I[0] = F0*W6[ip]*(G[0]*(F0*F3 + F1*F4 + F2*F5) + G[1]*(F0*F6 + F1*F9 + F12*F2) + G[2]*(F0*(F7 + F8) + F1*(F10 + F11) + F2*(F13 + F14)));
        
        // Number of operations: 25
        I[1] = F1*W6[ip]*(G[0]*(F0*F3 + F1*F4 + F2*F5) + G[1]*(F0*F6 + F1*F9 + F12*F2) + G[2]*(F0*(F7 + F8) + F1*(F10 + F11) + F2*(F13 + F14)));
        
        // Number of operations: 25
        I[2] = F2*W6[ip]*(G[0]*(F0*F3 + F1*F4 + F2*F5) + G[1]*(F0*F6 + F1*F9 + F12*F2) + G[2]*(F0*(F7 + F8) + F1*(F10 + F11) + F2*(F13 + F14)));
        
        
        // Number of operations for primary indices: 18
        for (unsigned int j = 0; j < 3; j++)
        {
          // Number of operations to compute entry: 2
          A[nzc3[j]] += FE1_f0_C0[ip][j]*I[0];
          // Number of operations to compute entry: 2
          A[nzc4[j]] += FE1_f0_C0[ip][j]*I[1];
          // Number of operations to compute entry: 2
          A[nzc5[j]] += FE1_f0_C0[ip][j]*I[2];
        }// end loop over 'j'
      }// end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 1098
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 1098
      for (unsigned int ip = 0; ip < 6; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        double F2 = 0.0;
        double F3 = 0.0;
        double F4 = 0.0;
        double F5 = 0.0;
        double F6 = 0.0;
        double F7 = 0.0;
        double F8 = 0.0;
        double F9 = 0.0;
        double F10 = 0.0;
        double F11 = 0.0;
        double F12 = 0.0;
        double F13 = 0.0;
        double F14 = 0.0;
        
        // Total number of operations to compute function values = 90
        for (unsigned int r = 0; r < 3; r++)
        {
          F0 += FE1_f0_C0[ip][r]*w[16][nzc6[r]];
          F1 += FE1_f0_C0[ip][r]*w[16][nzc7[r]];
          F2 += FE1_f0_C0[ip][r]*w[16][nzc8[r]];
          F3 += FE1_f0_C0[ip][r]*w[0][nzc6[r]];
          F4 += FE1_f0_C0[ip][r]*w[0][nzc7[r]];
          F5 += FE1_f0_C0[ip][r]*w[0][nzc8[r]];
          F6 += FE1_f0_C0[ip][r]*w[9][nzc6[r]];
          F7 += FE1_f0_C0[ip][r]*w[13][nzc6[r]];
          F8 += FE1_f0_C0[ip][r]*w[14][nzc6[r]];
          F9 += FE1_f0_C0[ip][r]*w[9][nzc7[r]];
          F10 += FE1_f0_C0[ip][r]*w[13][nzc7[r]];
          F11 += FE1_f0_C0[ip][r]*w[14][nzc7[r]];
          F12 += FE1_f0_C0[ip][r]*w[9][nzc8[r]];
          F13 += FE1_f0_C0[ip][r]*w[13][nzc8[r]];
          F14 += FE1_f0_C0[ip][r]*w[14][nzc8[r]];
        }// end loop over 'r'
        
        // Number of operations to compute ip constants: 75
        double I[3];
        // Number of operations: 25
        I[0] = F0*W6[ip]*(G[0]*(F0*F3 + F1*F4 + F2*F5) + G[1]*(F0*F6 + F1*F9 + F12*F2) + G[2]*(F0*(F7 + F8) + F1*(F10 + F11) + F2*(F13 + F14)));
        
        // Number of operations: 25
        I[1] = F1*W6[ip]*(G[0]*(F0*F3 + F1*F4 + F2*F5) + G[1]*(F0*F6 + F1*F9 + F12*F2) + G[2]*(F0*(F7 + F8) + F1*(F10 + F11) + F2*(F13 + F14)));
        
        // Number of operations: 25
        I[2] = F2*W6[ip]*(G[0]*(F0*F3 + F1*F4 + F2*F5) + G[1]*(F0*F6 + F1*F9 + F12*F2) + G[2]*(F0*(F7 + F8) + F1*(F10 + F11) + F2*(F13 + F14)));
        
        
        // Number of operations for primary indices: 18
        for (unsigned int j = 0; j < 3; j++)
        {
          // Number of operations to compute entry: 2
          A[nzc6[j]] += FE1_f0_C0[ip][j]*I[0];
          // Number of operations to compute entry: 2
          A[nzc7[j]] += FE1_f0_C0[ip][j]*I[1];
          // Number of operations to compute entry: 2
          A[nzc8[j]] += FE1_f0_C0[ip][j]*I[2];
        }// end loop over 'j'
      }// end loop over 'ip'
        break;
      }
    case 3:
      {
        // Total number of operations to compute element tensor (from this point): 1098
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 1098
      for (unsigned int ip = 0; ip < 6; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        double F2 = 0.0;
        double F3 = 0.0;
        double F4 = 0.0;
        double F5 = 0.0;
        double F6 = 0.0;
        double F7 = 0.0;
        double F8 = 0.0;
        double F9 = 0.0;
        double F10 = 0.0;
        double F11 = 0.0;
        double F12 = 0.0;
        double F13 = 0.0;
        double F14 = 0.0;
        
        // Total number of operations to compute function values = 90
        for (unsigned int r = 0; r < 3; r++)
        {
          F0 += FE1_f0_C0[ip][r]*w[16][nzc9[r]];
          F1 += FE1_f0_C0[ip][r]*w[16][nzc10[r]];
          F2 += FE1_f0_C0[ip][r]*w[16][nzc11[r]];
          F3 += FE1_f0_C0[ip][r]*w[0][nzc9[r]];
          F4 += FE1_f0_C0[ip][r]*w[0][nzc10[r]];
          F5 += FE1_f0_C0[ip][r]*w[0][nzc11[r]];
          F6 += FE1_f0_C0[ip][r]*w[9][nzc9[r]];
          F7 += FE1_f0_C0[ip][r]*w[13][nzc9[r]];
          F8 += FE1_f0_C0[ip][r]*w[14][nzc9[r]];
          F9 += FE1_f0_C0[ip][r]*w[9][nzc10[r]];
          F10 += FE1_f0_C0[ip][r]*w[13][nzc10[r]];
          F11 += FE1_f0_C0[ip][r]*w[14][nzc10[r]];
          F12 += FE1_f0_C0[ip][r]*w[9][nzc11[r]];
          F13 += FE1_f0_C0[ip][r]*w[13][nzc11[r]];
          F14 += FE1_f0_C0[ip][r]*w[14][nzc11[r]];
        }// end loop over 'r'
        
        // Number of operations to compute ip constants: 75
        double I[3];
        // Number of operations: 25
        I[0] = F1*W6[ip]*(G[0]*(F0*F3 + F1*F4 + F2*F5) + G[1]*(F0*F6 + F1*F9 + F12*F2) + G[2]*(F0*(F7 + F8) + F1*(F10 + F11) + F2*(F13 + F14)));
        
        // Number of operations: 25
        I[1] = F2*W6[ip]*(G[0]*(F0*F3 + F1*F4 + F2*F5) + G[1]*(F0*F6 + F1*F9 + F12*F2) + G[2]*(F0*(F7 + F8) + F1*(F10 + F11) + F2*(F13 + F14)));
        
        // Number of operations: 25
        I[2] = F0*W6[ip]*(G[0]*(F0*F3 + F1*F4 + F2*F5) + G[1]*(F0*F6 + F1*F9 + F12*F2) + G[2]*(F0*(F7 + F8) + F1*(F10 + F11) + F2*(F13 + F14)));
        
        
        // Number of operations for primary indices: 18
        for (unsigned int j = 0; j < 3; j++)
        {
          // Number of operations to compute entry: 2
          A[nzc10[j]] += FE1_f0_C0[ip][j]*I[0];
          // Number of operations to compute entry: 2
          A[nzc11[j]] += FE1_f0_C0[ip][j]*I[1];
          // Number of operations to compute entry: 2
          A[nzc9[j]] += FE1_f0_C0[ip][j]*I[2];
        }// end loop over 'j'
      }// end loop over 'ip'
        break;
      }
    }
    
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Tabulate the tensor for the contribution from a local exterior facet
/// using the specified reference cell quadrature points/weights
void nsemomentum3d_exterior_facet_integral_1_0::tabulate_tensor(double* A,
                     const double * const * w,
                     const ufc::cell& c,
                     unsigned int num_quadrature_points,
                     const double * const * quadrature_points,
                     const double* quadrature_weights) const
{
    throw std::runtime_error("Quadrature version of tabulate_tensor not yet implemented (introduced in UFC 2.0).");
}
#endif

/// Constructor
nsemomentum3d_form_0::nsemomentum3d_form_0() : ufc::form()
{
    // Do nothing
}

/// Destructor
nsemomentum3d_form_0::~nsemomentum3d_form_0()
{
    // Do nothing
}

/// Return a string identifying the form
const char* nsemomentum3d_form_0::signature() const
{
    return "Form([Integral(Sum(Sum(Product(IndexSum(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(0),), {Index(0): 3})), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(2),), {Index(2): 3})), MultiIndex((Index(2), Index(0)), {Index(2): 3, Index(0): 3})), MultiIndex((Index(3), Index(4)), {Index(4): 3, Index(3): 3})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(5),), {Index(5): 3})), MultiIndex((Index(6),), {Index(6): 3})), MultiIndex((Index(6), Index(5)), {Index(5): 3, Index(6): 3})), MultiIndex((Index(3), Index(4)), {Index(4): 3, Index(3): 3}))), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((Index(4),), {Index(4): 3})), Product(Sum(Abs(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(1),), {}))))), Sum(Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 7), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3), FloatValue(0.5, (), (), {})))), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 11), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 6), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3), IntValue(2, (), (), {}))))))), Product(IndexSum(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(0),), {Index(0): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 8), MultiIndex((Index(0),), {Index(0): 3}))), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(2),), {Index(2): 3})), MultiIndex((Index(2), Index(0)), {Index(2): 3, Index(0): 3})), MultiIndex((Index(3), Index(4)), {Index(4): 3, Index(3): 3})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(5),), {Index(5): 3})), MultiIndex((Index(6),), {Index(6): 3})), MultiIndex((Index(6), Index(5)), {Index(5): 3, Index(6): 3})), MultiIndex((Index(3), Index(4)), {Index(4): 3, Index(3): 3}))), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((Index(4),), {Index(4): 3})), Product(Sum(Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 7), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3), FloatValue(0.5, (), (), {})))), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 11), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 6), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3), IntValue(2, (), (), {}))))), Sum(Product(Conditional(EQ(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((FixedIndex(1),), {})))))))), Sum(Product(Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 5), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3), FloatValue(0.5, (), (), {})))), Sum(Product(IndexSum(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(7),), {Index(7): 3})), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(7),), {Index(7): 3})), MultiIndex((Index(7),), {Index(7): 3})), IndexSum(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(8),), {Index(8): 3})), MultiIndex((Index(8),), {Index(8): 3})), MultiIndex((Index(8),), {Index(8): 3}))), Sum(IndexSum(Sum(Product(Indexed(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(9),), {Index(9): 3})), Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(10),), {Index(10): 3})), MultiIndex((Index(11),), {Index(11): 3})), MultiIndex((Index(11), Index(10)), {Index(11): 3, Index(10): 3})), MultiIndex((Index(12), Index(13)), {Index(13): 3, Index(12): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 9)))), MultiIndex((Index(12), Index(13)), {Index(13): 3, Index(12): 3})), MultiIndex((Index(14), Index(9)), {Index(14): 3, Index(9): 3}))), MultiIndex((Index(9),), {Index(9): 3})), MultiIndex((Index(14),), {Index(14): 3})), MultiIndex((Index(15),), {Index(15): 3})), Indexed(Sum(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 8)), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(16),), {Index(16): 3})), Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(17),), {Index(17): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 8), MultiIndex((Index(17),), {Index(17): 3}))), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(18),), {Index(18): 3})), MultiIndex((Index(18), Index(17)), {Index(17): 3, Index(18): 3})), MultiIndex((Index(19), Index(20)), {Index(19): 3, Index(20): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 9)))), MultiIndex((Index(19), Index(20)), {Index(19): 3, Index(20): 3})), MultiIndex((Index(21), Index(16)), {Index(21): 3, Index(16): 3}))), MultiIndex((Index(16),), {Index(16): 3})), MultiIndex((Index(21),), {Index(21): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(ComponentTensor(Product(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 10), MultiIndex((Index(22),), {Index(22): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 9)))), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(23),), {Index(23): 3}))), MultiIndex((Index(23),), {Index(23): 3}))), MultiIndex((Index(15),), {Index(15): 3}))), Product(Indexed(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 8)), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(9),), {Index(9): 3})), Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(10),), {Index(10): 3})), MultiIndex((Index(11),), {Index(11): 3})), MultiIndex((Index(11), Index(10)), {Index(11): 3, Index(10): 3})), MultiIndex((Index(12), Index(13)), {Index(13): 3, Index(12): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 9)))), MultiIndex((Index(12), Index(13)), {Index(13): 3, Index(12): 3})), MultiIndex((Index(14), Index(9)), {Index(14): 3, Index(9): 3}))), MultiIndex((Index(9),), {Index(9): 3})), MultiIndex((Index(14),), {Index(14): 3})), MultiIndex((Index(15),), {Index(15): 3})), Indexed(ComponentTensor(IndexSum(Sum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(16),), {Index(16): 3})), Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(17),), {Index(17): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 8), MultiIndex((Index(17),), {Index(17): 3}))), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(18),), {Index(18): 3})), MultiIndex((Index(18), Index(17)), {Index(17): 3, Index(18): 3})), MultiIndex((Index(19), Index(20)), {Index(19): 3, Index(20): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 9)))), MultiIndex((Index(19), Index(20)), {Index(19): 3, Index(20): 3})), MultiIndex((Index(21), Index(16)), {Index(21): 3, Index(16): 3}))), Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 8)), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(16),), {Index(16): 3})), Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(17),), {Index(17): 3})), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(18),), {Index(18): 3})), MultiIndex((Index(18), Index(17)), {Index(17): 3, Index(18): 3})), MultiIndex((Index(19), Index(20)), {Index(19): 3, Index(20): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 9)))), MultiIndex((Index(19), Index(20)), {Index(19): 3, Index(20): 3})), MultiIndex((Index(21), Index(16)), {Index(21): 3, Index(16): 3})))), MultiIndex((Index(16),), {Index(16): 3})), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((Index(15),), {Index(15): 3})))), MultiIndex((Index(15),), {Index(15): 3})), Product(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(24),), {Index(24): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(25),), {Index(25): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 9), MultiIndex((Index(25),), {Index(25): 3})))), MultiIndex((Index(25),), {Index(25): 3})), MultiIndex((Index(24),), {Index(24): 3}))), MultiIndex((Index(24),), {Index(24): 3})), IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(26),), {Index(26): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 9), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((Index(26),), {Index(26): 3}))), MultiIndex((Index(26),), {Index(26): 3})))))), Sum(Division(Product(Abs(Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 9)))), IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(28),), {Index(28): 3})), Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(28),), {Index(28): 3}))), MultiIndex((Index(28),), {Index(28): 3}))), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 4)), Sum(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(29),), {Index(29): 3})), Indexed(ComponentTensor(IndexSum(Sum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(30),), {Index(30): 3})), Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(31),), {Index(31): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 8), MultiIndex((Index(31),), {Index(31): 3}))), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(32),), {Index(32): 3})), MultiIndex((Index(32), Index(31)), {Index(31): 3, Index(32): 3})), MultiIndex((Index(33), Index(34)), {Index(33): 3, Index(34): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 9)))), MultiIndex((Index(33), Index(34)), {Index(33): 3, Index(34): 3})), MultiIndex((Index(35), Index(30)), {Index(35): 3, Index(30): 3}))), Product(Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(31),), {Index(31): 3})), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(32),), {Index(32): 3})), MultiIndex((Index(32), Index(31)), {Index(31): 3, Index(32): 3})), MultiIndex((Index(33), Index(34)), {Index(33): 3, Index(34): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 9)))), MultiIndex((Index(33), Index(34)), {Index(33): 3, Index(34): 3})), MultiIndex((Index(35), Index(30)), {Index(35): 3, Index(30): 3})), Indexed(Sum(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 8)), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 12), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 13)), MultiIndex((Index(36),), {Index(36): 3}))), MultiIndex((Index(36),), {Index(36): 3})), MultiIndex((Index(37),), {Index(37): 3}))), MultiIndex((Index(37),), {Index(37): 3}))), MultiIndex((Index(30),), {Index(30): 3})))), MultiIndex((Index(30),), {Index(30): 3})), MultiIndex((Index(35),), {Index(35): 3})), MultiIndex((Index(29),), {Index(29): 3}))), MultiIndex((Index(29),), {Index(29): 3})), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 2), IndexSum(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(38),), {Index(38): 3})), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(39),), {Index(39): 3})), MultiIndex((Index(39), Index(38)), {Index(39): 3, Index(38): 3})), MultiIndex((Index(40), Index(41)), {Index(40): 3, Index(41): 3})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(42),), {Index(42): 3})), MultiIndex((Index(43),), {Index(43): 3})), MultiIndex((Index(43), Index(42)), {Index(43): 3, Index(42): 3})), MultiIndex((Index(40), Index(41)), {Index(40): 3, Index(41): 3}))), MultiIndex((Index(40),), {Index(40): 3})), MultiIndex((Index(41),), {Index(41): 3}))))))), Measure('cell', 0, None)), Integral(Product(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(44),), {Index(44): 3})), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 15), MultiIndex((Index(44),), {Index(44): 3}))), MultiIndex((Index(44),), {Index(44): 3})), Product(IndexSum(Product(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 15), MultiIndex((Index(45),), {Index(45): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(45),), {Index(45): 3}))), MultiIndex((Index(45),), {Index(45): 3})), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 14), Division(FloatValue(1, (), (), {}), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3))))), Measure('exterior_facet', 0, None))])";
}

/// Return the rank of the global tensor (r)
unsigned int nsemomentum3d_form_0::rank() const
{
    return 2;
}

/// Return the number of coefficients (n)
unsigned int nsemomentum3d_form_0::num_coefficients() const
{
    return 16;
}
 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Return the number of cell domains
unsigned int nsemomentum3d_form_0::num_cell_domains() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int nsemomentum3d_form_0::num_exterior_facet_domains() const
{
    return 1;
}

/// Return the number of interior facet domains
unsigned int nsemomentum3d_form_0::num_interior_facet_domains() const
{
    return 0;
}
#else

/// Return the number of cell domains
unsigned int nsemomentum3d_form_0::num_cell_integrals() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int nsemomentum3d_form_0::num_exterior_facet_integrals() const
{
    return 1;
}

/// Return the number of interior facet domains
unsigned int nsemomentum3d_form_0::num_interior_facet_integrals() const
{
    return 0;
}

#endif

/// Create a new finite element for argument function i
ufc::finite_element* nsemomentum3d_form_0::create_finite_element(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum3d_finite_element_2();
        break;
      }
    case 1:
      {
        return new nsemomentum3d_finite_element_2();
        break;
      }
    case 2:
      {
        return new nsemomentum3d_finite_element_2();
        break;
      }
    case 3:
      {
        return new nsemomentum3d_finite_element_1();
        break;
      }
    case 4:
      {
        return new nsemomentum3d_finite_element_1();
        break;
      }
    case 5:
      {
        return new nsemomentum3d_finite_element_0();
        break;
      }
    case 6:
      {
        return new nsemomentum3d_finite_element_0();
        break;
      }
    case 7:
      {
        return new nsemomentum3d_finite_element_0();
        break;
      }
    case 8:
      {
        return new nsemomentum3d_finite_element_0();
        break;
      }
    case 9:
      {
        return new nsemomentum3d_finite_element_0();
        break;
      }
    case 10:
      {
        return new nsemomentum3d_finite_element_2();
        break;
      }
    case 11:
      {
        return new nsemomentum3d_finite_element_1();
        break;
      }
    case 12:
      {
        return new nsemomentum3d_finite_element_2();
        break;
      }
    case 13:
      {
        return new nsemomentum3d_finite_element_0();
        break;
      }
    case 14:
      {
        return new nsemomentum3d_finite_element_2();
        break;
      }
    case 15:
      {
        return new nsemomentum3d_finite_element_2();
        break;
      }
    case 16:
      {
        return new nsemomentum3d_finite_element_0();
        break;
      }
    case 17:
      {
        return new nsemomentum3d_finite_element_2();
        break;
      }
    }
    
    return 0;
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Create a new dofmap for argument function i
ufc::dofmap* nsemomentum3d_form_0::create_dofmap(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 1:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 2:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 3:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 4:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 5:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 6:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 7:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 8:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 9:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 10:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 11:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 12:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 13:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 14:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 15:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 16:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 17:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    }
    
    return 0;
}
#else

/// Create a new dofmap for argument function i
ufc::dof_map* nsemomentum3d_form_0::create_dof_map(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 1:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 2:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 3:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 4:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 5:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 6:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 7:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 8:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 9:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 10:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 11:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 12:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 13:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 14:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 15:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 16:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 17:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    }
    
    return 0;
}
#endif
/// Create a new cell integral on sub domain i
ufc::cell_integral* nsemomentum3d_form_0::create_cell_integral(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum3d_cell_integral_0_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new exterior facet integral on sub domain i
ufc::exterior_facet_integral* nsemomentum3d_form_0::create_exterior_facet_integral(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum3d_exterior_facet_integral_0_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new interior facet integral on sub domain i
ufc::interior_facet_integral* nsemomentum3d_form_0::create_interior_facet_integral(unsigned int i) const
{
    return 0;
}

/// Constructor
nsemomentum3d_form_1::nsemomentum3d_form_1() : ufc::form()
{
    // Do nothing
}

/// Destructor
nsemomentum3d_form_1::~nsemomentum3d_form_1()
{
    // Do nothing
}

/// Return a string identifying the form
const char* nsemomentum3d_form_1::signature() const
{
    return "Form([Integral(Sum(Product(IntValue(-1, (), (), {}), Sum(Product(IndexSum(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(0),), {Index(0): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9), MultiIndex((Index(0),), {Index(0): 3}))), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(2),), {Index(2): 3})), MultiIndex((Index(2), Index(0)), {Index(2): 3, Index(0): 3})), MultiIndex((Index(3), Index(4)), {Index(4): 3, Index(3): 3})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(5),), {Index(5): 3})), MultiIndex((Index(6),), {Index(6): 3})), MultiIndex((Index(6), Index(5)), {Index(5): 3, Index(6): 3})), MultiIndex((Index(3), Index(4)), {Index(4): 3, Index(3): 3}))), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((Index(4),), {Index(4): 3})), Product(Sum(Abs(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(1),), {}))))), Sum(Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 8), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 4), FloatValue(1.5, (), (), {}))), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 12), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 7), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 4), IntValue(2, (), (), {}))))))), Sum(Product(Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 6), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 4), FloatValue(1.5, (), (), {}))), Sum(Product(IndexSum(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(7),), {Index(7): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9), MultiIndex((Index(7),), {Index(7): 3}))), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(7),), {Index(7): 3})), MultiIndex((Index(7),), {Index(7): 3})), IndexSum(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(8),), {Index(8): 3})), MultiIndex((Index(8),), {Index(8): 3})), MultiIndex((Index(8),), {Index(8): 3}))), Sum(IndexSum(Product(Indexed(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9)), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(9),), {Index(9): 3})), Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(10),), {Index(10): 3})), MultiIndex((Index(11),), {Index(11): 3})), MultiIndex((Index(11), Index(10)), {Index(11): 3, Index(10): 3})), MultiIndex((Index(12), Index(13)), {Index(13): 3, Index(12): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10)))), MultiIndex((Index(12), Index(13)), {Index(13): 3, Index(12): 3})), MultiIndex((Index(14), Index(9)), {Index(14): 3, Index(9): 3}))), MultiIndex((Index(9),), {Index(9): 3})), MultiIndex((Index(14),), {Index(14): 3})), MultiIndex((Index(15),), {Index(15): 3})), Indexed(Sum(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9)), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(16),), {Index(16): 3})), Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(17),), {Index(17): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9), MultiIndex((Index(17),), {Index(17): 3}))), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(18),), {Index(18): 3})), MultiIndex((Index(18), Index(17)), {Index(17): 3, Index(18): 3})), MultiIndex((Index(19), Index(20)), {Index(19): 3, Index(20): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10)))), MultiIndex((Index(19), Index(20)), {Index(19): 3, Index(20): 3})), MultiIndex((Index(21), Index(16)), {Index(21): 3, Index(16): 3}))), MultiIndex((Index(16),), {Index(16): 3})), MultiIndex((Index(21),), {Index(21): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(ComponentTensor(Product(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 11), MultiIndex((Index(22),), {Index(22): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10)))), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(23),), {Index(23): 3}))), MultiIndex((Index(23),), {Index(23): 3}))), MultiIndex((Index(15),), {Index(15): 3}))), MultiIndex((Index(15),), {Index(15): 3})), Product(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(24),), {Index(24): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(25),), {Index(25): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10), MultiIndex((Index(25),), {Index(25): 3})))), MultiIndex((Index(25),), {Index(25): 3})), MultiIndex((Index(24),), {Index(24): 3}))), MultiIndex((Index(24),), {Index(24): 3})), Sum(IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9)), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(26),), {Index(26): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((Index(26),), {Index(26): 3}))), MultiIndex((Index(26),), {Index(26): 3})), IndexSum(Product(Indexed(ComponentTensor(Sum(Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10), MultiIndex((Index(29),), {Index(29): 3})))), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(30),), {Index(30): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10), MultiIndex((Index(30),), {Index(30): 3})))), MultiIndex((Index(30),), {Index(30): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10)))), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(31),), {Index(31): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10), MultiIndex((Index(31),), {Index(31): 3})))))), Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(31),), {Index(31): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10), MultiIndex((Index(31),), {Index(31): 3}))))), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10)))))))), Product(Division(Product(IntValue(-1, (), (), {}), Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10), MultiIndex((Index(29),), {Index(29): 3})))), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(30),), {Index(30): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10), MultiIndex((Index(30),), {Index(30): 3})))), MultiIndex((Index(30),), {Index(30): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(31),), {Index(31): 3})), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10), MultiIndex((Index(31),), {Index(31): 3})), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10), MultiIndex((Index(29),), {Index(29): 3})))), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10), MultiIndex((Index(29),), {Index(29): 3})))), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(31),), {Index(31): 3})), MultiIndex((Index(29),), {Index(29): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10), MultiIndex((Index(31),), {Index(31): 3})), MultiIndex((Index(29),), {Index(29): 3})))), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(30),), {Index(30): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10), MultiIndex((Index(30),), {Index(30): 3})))), MultiIndex((Index(30),), {Index(30): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(30),), {Index(30): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10), MultiIndex((Index(30),), {Index(30): 3})))), MultiIndex((Index(30),), {Index(30): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(31),), {Index(31): 3})), MultiIndex((Index(30),), {Index(30): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10), MultiIndex((Index(31),), {Index(31): 3})), MultiIndex((Index(30),), {Index(30): 3})))), MultiIndex((Index(30),), {Index(30): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10), MultiIndex((Index(29),), {Index(29): 3})))), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(30),), {Index(30): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10), MultiIndex((Index(30),), {Index(30): 3})))), MultiIndex((Index(30),), {Index(30): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10)))), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10)))))))), MultiIndex((Index(31),), {Index(31): 3})), MultiIndex((Index(32),), {Index(32): 3})), Indexed(ListTensor(FloatValue(1, (), (), {}), FloatValue(1, (), (), {}), FloatValue(1, (), (), {})), MultiIndex((Index(32),), {Index(32): 3}))), MultiIndex((Index(32),), {Index(32): 3}))))))), Sum(Division(Product(Abs(Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10)))), IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(33),), {Index(33): 3})), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9), MultiIndex((Index(34),), {Index(34): 3}))), MultiIndex((Index(34),), {Index(34): 3}))), MultiIndex((Index(33),), {Index(33): 3}))), MultiIndex((Index(33),), {Index(33): 3}))), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 5)), Sum(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(35),), {Index(35): 3})), Indexed(Sum(ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(ComponentTensor(Product(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 11), MultiIndex((Index(36),), {Index(36): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10)))), MultiIndex((Index(36),), {Index(36): 3})), MultiIndex((Index(37),), {Index(37): 3}))), MultiIndex((Index(37),), {Index(37): 3})), Sum(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(38),), {Index(38): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9), MultiIndex((Index(38),), {Index(38): 3}))), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(39),), {Index(39): 3})), MultiIndex((Index(39), Index(38)), {Index(39): 3, Index(38): 3})), MultiIndex((Index(40), Index(41)), {Index(40): 3, Index(41): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10)))), MultiIndex((Index(40), Index(41)), {Index(40): 3, Index(41): 3})), MultiIndex((Index(42), Index(43)), {Index(43): 3, Index(42): 3})), Indexed(Sum(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9)), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 13), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 14)), MultiIndex((Index(44),), {Index(44): 3}))), MultiIndex((Index(44),), {Index(44): 3})), MultiIndex((Index(45),), {Index(45): 3}))), MultiIndex((Index(45),), {Index(45): 3}))), MultiIndex((Index(43),), {Index(43): 3}))), MultiIndex((Index(43),), {Index(43): 3})), MultiIndex((Index(42),), {Index(42): 3})), ComponentTensor(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 2), MultiIndex((Index(46),), {Index(46): 3})), MultiIndex((Index(46),), {Index(46): 3})))), MultiIndex((Index(35),), {Index(35): 3}))), MultiIndex((Index(35),), {Index(35): 3})), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 3), IndexSum(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(47),), {Index(47): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9), MultiIndex((Index(47),), {Index(47): 3}))), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(48),), {Index(48): 3})), MultiIndex((Index(48), Index(47)), {Index(48): 3, Index(47): 3})), MultiIndex((Index(49), Index(50)), {Index(50): 3, Index(49): 3})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((Index(52), Index(51)), {Index(52): 3, Index(51): 3})), MultiIndex((Index(49), Index(50)), {Index(50): 3, Index(49): 3}))), MultiIndex((Index(49),), {Index(49): 3})), MultiIndex((Index(50),), {Index(50): 3})))))))), Sum(Sum(Product(IndexSum(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(53),), {Index(53): 3})), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(54),), {Index(54): 3})), MultiIndex((Index(54), Index(53)), {Index(53): 3, Index(54): 3})), MultiIndex((Index(55), Index(56)), {Index(55): 3, Index(56): 3})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((Index(58), Index(57)), {Index(58): 3, Index(57): 3})), MultiIndex((Index(55), Index(56)), {Index(55): 3, Index(56): 3}))), MultiIndex((Index(55),), {Index(55): 3})), MultiIndex((Index(56),), {Index(56): 3})), Product(Sum(Abs(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(1),), {}))))), Sum(Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 8), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 4), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 4), FloatValue(0.5, (), (), {})))), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 12), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 7), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 4), IntValue(2, (), (), {}))))))), Product(IndexSum(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(53),), {Index(53): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9), MultiIndex((Index(53),), {Index(53): 3}))), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(54),), {Index(54): 3})), MultiIndex((Index(54), Index(53)), {Index(53): 3, Index(54): 3})), MultiIndex((Index(55), Index(56)), {Index(55): 3, Index(56): 3})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((Index(58), Index(57)), {Index(58): 3, Index(57): 3})), MultiIndex((Index(55), Index(56)), {Index(55): 3, Index(56): 3}))), MultiIndex((Index(55),), {Index(55): 3})), MultiIndex((Index(56),), {Index(56): 3})), Product(Sum(Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 8), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 4), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 4), FloatValue(0.5, (), (), {})))), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 12), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 7), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 4), IntValue(2, (), (), {}))))), Sum(Product(Conditional(EQ(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(1),), {})))))))), Sum(Product(Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 6), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 4), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 4), FloatValue(0.5, (), (), {})))), Sum(Product(IndexSum(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((Index(59),), {Index(59): 3})), IndexSum(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(60),), {Index(60): 3})), MultiIndex((Index(60),), {Index(60): 3})), MultiIndex((Index(60),), {Index(60): 3}))), Sum(IndexSum(Sum(Product(Indexed(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(9),), {Index(9): 3})), Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(61),), {Index(61): 3})), MultiIndex((Index(62),), {Index(62): 3})), MultiIndex((Index(62), Index(61)), {Index(62): 3, Index(61): 3})), MultiIndex((Index(12), Index(13)), {Index(13): 3, Index(12): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10)))), MultiIndex((Index(12), Index(13)), {Index(13): 3, Index(12): 3})), MultiIndex((Index(14), Index(9)), {Index(14): 3, Index(9): 3}))), MultiIndex((Index(9),), {Index(9): 3})), MultiIndex((Index(14),), {Index(14): 3})), MultiIndex((Index(63),), {Index(63): 3})), Indexed(Sum(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9)), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(16),), {Index(16): 3})), Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(64),), {Index(64): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9), MultiIndex((Index(64),), {Index(64): 3}))), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(65),), {Index(65): 3})), MultiIndex((Index(65), Index(64)), {Index(65): 3, Index(64): 3})), MultiIndex((Index(19), Index(20)), {Index(19): 3, Index(20): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10)))), MultiIndex((Index(19), Index(20)), {Index(19): 3, Index(20): 3})), MultiIndex((Index(21), Index(16)), {Index(21): 3, Index(16): 3}))), MultiIndex((Index(16),), {Index(16): 3})), MultiIndex((Index(21),), {Index(21): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(ComponentTensor(Product(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 11), MultiIndex((Index(22),), {Index(22): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10)))), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(23),), {Index(23): 3}))), MultiIndex((Index(23),), {Index(23): 3}))), MultiIndex((Index(63),), {Index(63): 3}))), Product(Indexed(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9)), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(9),), {Index(9): 3})), Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(61),), {Index(61): 3})), MultiIndex((Index(62),), {Index(62): 3})), MultiIndex((Index(62), Index(61)), {Index(62): 3, Index(61): 3})), MultiIndex((Index(12), Index(13)), {Index(13): 3, Index(12): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10)))), MultiIndex((Index(12), Index(13)), {Index(13): 3, Index(12): 3})), MultiIndex((Index(14), Index(9)), {Index(14): 3, Index(9): 3}))), MultiIndex((Index(9),), {Index(9): 3})), MultiIndex((Index(14),), {Index(14): 3})), MultiIndex((Index(63),), {Index(63): 3})), Indexed(ComponentTensor(IndexSum(Sum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(16),), {Index(16): 3})), Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(64),), {Index(64): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9), MultiIndex((Index(64),), {Index(64): 3}))), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(65),), {Index(65): 3})), MultiIndex((Index(65), Index(64)), {Index(65): 3, Index(64): 3})), MultiIndex((Index(19), Index(20)), {Index(19): 3, Index(20): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10)))), MultiIndex((Index(19), Index(20)), {Index(19): 3, Index(20): 3})), MultiIndex((Index(21), Index(16)), {Index(21): 3, Index(16): 3}))), Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9)), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(16),), {Index(16): 3})), Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(64),), {Index(64): 3})), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(65),), {Index(65): 3})), MultiIndex((Index(65), Index(64)), {Index(65): 3, Index(64): 3})), MultiIndex((Index(19), Index(20)), {Index(19): 3, Index(20): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10)))), MultiIndex((Index(19), Index(20)), {Index(19): 3, Index(20): 3})), MultiIndex((Index(21), Index(16)), {Index(21): 3, Index(16): 3})))), MultiIndex((Index(16),), {Index(16): 3})), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((Index(63),), {Index(63): 3})))), MultiIndex((Index(63),), {Index(63): 3})), Product(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(66),), {Index(66): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(67),), {Index(67): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10), MultiIndex((Index(67),), {Index(67): 3})))), MultiIndex((Index(67),), {Index(67): 3})), MultiIndex((Index(66),), {Index(66): 3}))), MultiIndex((Index(66),), {Index(66): 3})), IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(68),), {Index(68): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(69),), {Index(69): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10), MultiIndex((Index(69),), {Index(69): 3})))), MultiIndex((Index(69),), {Index(69): 3})), MultiIndex((Index(68),), {Index(68): 3}))), MultiIndex((Index(68),), {Index(68): 3})))))), Sum(Division(Product(Abs(Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10)))), IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(70),), {Index(70): 3})), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(70),), {Index(70): 3}))), MultiIndex((Index(70),), {Index(70): 3}))), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 5)), Sum(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(71),), {Index(71): 3})), Indexed(ComponentTensor(IndexSum(Sum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(43),), {Index(43): 3})), Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(72),), {Index(72): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9), MultiIndex((Index(72),), {Index(72): 3}))), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(73),), {Index(73): 3})), MultiIndex((Index(73), Index(72)), {Index(72): 3, Index(73): 3})), MultiIndex((Index(40), Index(41)), {Index(40): 3, Index(41): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10)))), MultiIndex((Index(40), Index(41)), {Index(40): 3, Index(41): 3})), MultiIndex((Index(42), Index(43)), {Index(43): 3, Index(42): 3}))), Product(Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(72),), {Index(72): 3})), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(73),), {Index(73): 3})), MultiIndex((Index(73), Index(72)), {Index(72): 3, Index(73): 3})), MultiIndex((Index(40), Index(41)), {Index(40): 3, Index(41): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 10)))), MultiIndex((Index(40), Index(41)), {Index(40): 3, Index(41): 3})), MultiIndex((Index(42), Index(43)), {Index(43): 3, Index(42): 3})), Indexed(Sum(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9)), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 13), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 14)), MultiIndex((Index(44),), {Index(44): 3}))), MultiIndex((Index(44),), {Index(44): 3})), MultiIndex((Index(45),), {Index(45): 3}))), MultiIndex((Index(45),), {Index(45): 3}))), MultiIndex((Index(43),), {Index(43): 3})))), MultiIndex((Index(43),), {Index(43): 3})), MultiIndex((Index(42),), {Index(42): 3})), MultiIndex((Index(71),), {Index(71): 3}))), MultiIndex((Index(71),), {Index(71): 3})), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 3), IndexSum(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(74),), {Index(74): 3})), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(75),), {Index(75): 3})), MultiIndex((Index(75), Index(74)), {Index(75): 3, Index(74): 3})), MultiIndex((Index(76), Index(77)), {Index(77): 3, Index(76): 3})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(78),), {Index(78): 3})), MultiIndex((Index(79),), {Index(79): 3})), MultiIndex((Index(79), Index(78)), {Index(79): 3, Index(78): 3})), MultiIndex((Index(76), Index(77)), {Index(77): 3, Index(76): 3}))), MultiIndex((Index(76),), {Index(76): 3})), MultiIndex((Index(77),), {Index(77): 3})))))))), Measure('cell', 0, None)), Integral(Sum(Product(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(80),), {Index(80): 3})), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 16), MultiIndex((Index(80),), {Index(80): 3}))), MultiIndex((Index(80),), {Index(80): 3})), Product(IndexSum(Product(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 16), MultiIndex((Index(81),), {Index(81): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(81),), {Index(81): 3}))), MultiIndex((Index(81),), {Index(81): 3})), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 15), Division(FloatValue(1, (), (), {}), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 4))))), Product(IntValue(-1, (), (), {}), Product(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(82),), {Index(82): 3})), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 16), MultiIndex((Index(82),), {Index(82): 3}))), MultiIndex((Index(82),), {Index(82): 3})), Product(IndexSum(Product(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 16), MultiIndex((Index(83),), {Index(83): 3})), Indexed(Sum(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9)), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 13), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 14)), MultiIndex((Index(44),), {Index(44): 3}))), MultiIndex((Index(44),), {Index(44): 3})), MultiIndex((Index(84),), {Index(84): 3}))), MultiIndex((Index(84),), {Index(84): 3}))), MultiIndex((Index(83),), {Index(83): 3}))), MultiIndex((Index(83),), {Index(83): 3})), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 15), Division(FloatValue(1, (), (), {}), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 4))))))), Measure('exterior_facet', 0, None))])";
}

/// Return the rank of the global tensor (r)
unsigned int nsemomentum3d_form_1::rank() const
{
    return 1;
}

/// Return the number of coefficients (n)
unsigned int nsemomentum3d_form_1::num_coefficients() const
{
    return 17;
}
 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Return the number of cell domains
unsigned int nsemomentum3d_form_1::num_cell_domains() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int nsemomentum3d_form_1::num_exterior_facet_domains() const
{
    return 1;
}

/// Return the number of interior facet domains
unsigned int nsemomentum3d_form_1::num_interior_facet_domains() const
{
    return 0;
}
#else

/// Return the number of cell domains
unsigned int nsemomentum3d_form_1::num_cell_integrals() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int nsemomentum3d_form_1::num_exterior_facet_integrals() const
{
    return 1;
}

/// Return the number of interior facet domains
unsigned int nsemomentum3d_form_1::num_interior_facet_integrals() const
{
    return 0;
}

#endif

/// Create a new finite element for argument function i
ufc::finite_element* nsemomentum3d_form_1::create_finite_element(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum3d_finite_element_2();
        break;
      }
    case 1:
      {
        return new nsemomentum3d_finite_element_2();
        break;
      }
    case 2:
      {
        return new nsemomentum3d_finite_element_1();
        break;
      }
    case 3:
      {
        return new nsemomentum3d_finite_element_1();
        break;
      }
    case 4:
      {
        return new nsemomentum3d_finite_element_1();
        break;
      }
    case 5:
      {
        return new nsemomentum3d_finite_element_0();
        break;
      }
    case 6:
      {
        return new nsemomentum3d_finite_element_0();
        break;
      }
    case 7:
      {
        return new nsemomentum3d_finite_element_0();
        break;
      }
    case 8:
      {
        return new nsemomentum3d_finite_element_0();
        break;
      }
    case 9:
      {
        return new nsemomentum3d_finite_element_0();
        break;
      }
    case 10:
      {
        return new nsemomentum3d_finite_element_2();
        break;
      }
    case 11:
      {
        return new nsemomentum3d_finite_element_1();
        break;
      }
    case 12:
      {
        return new nsemomentum3d_finite_element_2();
        break;
      }
    case 13:
      {
        return new nsemomentum3d_finite_element_0();
        break;
      }
    case 14:
      {
        return new nsemomentum3d_finite_element_2();
        break;
      }
    case 15:
      {
        return new nsemomentum3d_finite_element_2();
        break;
      }
    case 16:
      {
        return new nsemomentum3d_finite_element_0();
        break;
      }
    case 17:
      {
        return new nsemomentum3d_finite_element_2();
        break;
      }
    }
    
    return 0;
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Create a new dofmap for argument function i
ufc::dofmap* nsemomentum3d_form_1::create_dofmap(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 1:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 2:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 3:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 4:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 5:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 6:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 7:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 8:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 9:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 10:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 11:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 12:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 13:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 14:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 15:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 16:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 17:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    }
    
    return 0;
}
#else

/// Create a new dofmap for argument function i
ufc::dof_map* nsemomentum3d_form_1::create_dof_map(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 1:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 2:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 3:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 4:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 5:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 6:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 7:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 8:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 9:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 10:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 11:
      {
        return new nsemomentum3d_dofmap_1();
        break;
      }
    case 12:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 13:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 14:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 15:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    case 16:
      {
        return new nsemomentum3d_dofmap_0();
        break;
      }
    case 17:
      {
        return new nsemomentum3d_dofmap_2();
        break;
      }
    }
    
    return 0;
}
#endif
/// Create a new cell integral on sub domain i
ufc::cell_integral* nsemomentum3d_form_1::create_cell_integral(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum3d_cell_integral_1_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new exterior facet integral on sub domain i
ufc::exterior_facet_integral* nsemomentum3d_form_1::create_exterior_facet_integral(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsemomentum3d_exterior_facet_integral_1_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new interior facet integral on sub domain i
ufc::interior_facet_integral* nsemomentum3d_form_1::create_interior_facet_integral(unsigned int i) const
{
    return 0;
}

