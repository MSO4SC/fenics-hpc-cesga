// This code conforms with the UFC specification version 2.0.5
// and was automatically generated by FFC version 1.0.0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   False
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'dolfin'
//   log_level:                      20
//   log_prefix:                     ''
//   optimize:                       False
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              'auto'
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   split:                          False
//   swig_binary:                    'swig'
//   swig_path:                      ''

#ifndef __NSEMOMENTUM2D_H
#define __NSEMOMENTUM2D_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class nsemomentum2d_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  nsemomentum2d_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~nsemomentum2d_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

#ifndef UFC_BACKWARD_COMPATIBILITY
  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }
#endif
  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 1;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    
    // Compute Jacobian of affine map from reference cell
    
    // Compute determinant of Jacobian
    
    // Compute inverse of Jacobian
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    // Reset values.
    *values = 0.0;
    
    // Array of basisvalues.
    double basisvalues[1] = {0.0};
    
    // Declare helper variables.
    
    // Compute basisvalues.
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients.
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s).
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    }// end loop over 'r'
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, coordinates, c);
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K_00, K_01}, {K_10, K_11}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    
    // Array of basisvalues.
    double basisvalues[1] = {0.0};
    
    // Declare helper variables.
    
    // Compute basisvalues.
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients.
    static const double coefficients0[1] = \
    {1.0};
    
    // Tables of derivatives of the polynomial base (transpose).
    static const double dmats0[1][1] = \
    {{0.0}};
    
    static const double dmats1[1][1] = \
    {{0.0}};
    
    // Compute reference derivatives.
    // Declare pointer to array of derivatives on FIAT element.
    double *derivatives = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      derivatives[r] = 0.0;
    }// end loop over 'r'
    
    // Declare derivative matrix (of polynomial basis).
    double dmats[1][1] = \
    {{1.0}};
    
    // Declare (auxiliary) derivative matrix (of polynomial basis).
    double dmats_old[1][1] = \
    {{1.0}};
    
    // Loop possible derivatives.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      // Resetting dmats values to compute next derivative.
      for (unsigned int t = 0; t < 1; t++)
      {
        for (unsigned int u = 0; u < 1; u++)
        {
          dmats[t][u] = 0.0;
          if (t == u)
          {
          dmats[t][u] = 1.0;
          }
          
        }// end loop over 'u'
      }// end loop over 't'
      
      // Looping derivative order to generate dmats.
      for (unsigned int s = 0; s < n; s++)
      {
        // Updating dmats_old with new values and resetting dmats.
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            dmats_old[t][u] = dmats[t][u];
            dmats[t][u] = 0.0;
          }// end loop over 'u'
        }// end loop over 't'
        
        // Update dmats using an inner product.
        if (combinations[r][s] == 0)
        {
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            for (unsigned int tu = 0; tu < 1; tu++)
            {
              dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
            }// end loop over 'tu'
          }// end loop over 'u'
        }// end loop over 't'
        }
        
        if (combinations[r][s] == 1)
        {
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            for (unsigned int tu = 0; tu < 1; tu++)
            {
              dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
            }// end loop over 'tu'
          }// end loop over 'u'
        }// end loop over 't'
        }
        
      }// end loop over 's'
      for (unsigned int s = 0; s < 1; s++)
      {
        for (unsigned int t = 0; t < 1; t++)
        {
          derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
        }// end loop over 't'
      }// end loop over 's'
    }// end loop over 'r'
    
    // Transform derivatives back to physical element
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r] += transform[r][s]*derivatives[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      delete [] combinations[r];
    }// end loop over 'r'
    delete [] combinations;
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      delete [] transform[r];
    }// end loop over 'r'
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, coordinates, c);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
      y[1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    y[1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
  }

#ifndef UFC_BACKWARD_COMPATIBILITY

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

#endif

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return 0;
  }
#ifndef UFC_BACKWARD_COMPATIBILITY
  /// Create a new class instance 
  virtual ufc::finite_element* create() const
  {
    return new nsemomentum2d_finite_element_0();
  }
#endif
};

/// This class defines the interface for a finite element.

class nsemomentum2d_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  nsemomentum2d_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~nsemomentum2d_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

#ifndef UFC_BACKWARD_COMPATIBILITY
  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }
#endif
  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 3;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K_00, K_01}, {K_10, K_11}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

#ifndef UFC_BACKWARD_COMPATIBILITY

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

#endif

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return 0;
  }
#ifndef UFC_BACKWARD_COMPATIBILITY
  /// Create a new class instance 
  virtual ufc::finite_element* create() const
  {
    return new nsemomentum2d_finite_element_1();
  }
#endif
};

/// This class defines the interface for a finite element.

class nsemomentum2d_finite_element_2: public ufc::finite_element
{
public:

  /// Constructor
  nsemomentum2d_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~nsemomentum2d_finite_element_2()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

#ifndef UFC_BACKWARD_COMPATIBILITY
  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }
#endif
  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 6;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 6; r++)
    {
      evaluate_basis(r, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K_00, K_01}, {K_10, K_11}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 2*num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[2*num_derivatives];
    for (unsigned int r = 0; r < 2*num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 6; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[2];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 4:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[2];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[3] = vals[1];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[3];
    vertex_values[3] = dof_values[4];
    vertex_values[5] = dof_values[5];
  }

#ifndef UFC_BACKWARD_COMPATIBILITY

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

#endif

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new nsemomentum2d_finite_element_1();
        break;
      }
    case 1:
      {
        return new nsemomentum2d_finite_element_1();
        break;
      }
    }
    
    return 0;
  }
#ifndef UFC_BACKWARD_COMPATIBILITY
  /// Create a new class instance 
  virtual ufc::finite_element* create() const
  {
    return new nsemomentum2d_finite_element_2();
  }
#endif
};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

#ifndef UFC_BACKWARD_COMPATIBILITY
class nsemomentum2d_dofmap_0: public ufc::dofmap
#else 
class nsemomentum2d_dofmap_0: public ufc::dof_map
#endif
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
#ifndef UFC_BACKWARD_COMPATIBILITY
  nsemomentum2d_dofmap_0() : ufc::dofmap()
#else
  nsemomentum2d_dofmap_0() : ufc::dof_map()
#endif
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~nsemomentum2d_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = m.num_entities[2];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

#ifndef UFC_BACKWARD_COMPATIBILITY
  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }
#endif
  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

#ifndef UFC_BACKWARD_COMPATIBILITY
  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 1;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 1;
  }
#else

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension() const
  {
    return 1;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

#endif

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 0;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[2][0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[0][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
  }

#ifndef UFC_BACKWARD_COMPATIBILITY
  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new nsemomentum2d_dofmap_0();
  }
#else
  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return 0;
  }
#endif

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

#ifndef UFC_BACKWARD_COMPATIBILITY
class nsemomentum2d_dofmap_1: public ufc::dofmap
#else 
class nsemomentum2d_dofmap_1: public ufc::dof_map
#endif
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
#ifndef UFC_BACKWARD_COMPATIBILITY
  nsemomentum2d_dofmap_1() : ufc::dofmap()
#else
  nsemomentum2d_dofmap_1() : ufc::dof_map()
#endif
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~nsemomentum2d_dofmap_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = m.num_entities[0];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

#ifndef UFC_BACKWARD_COMPATIBILITY
  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }
#endif
  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

#ifndef UFC_BACKWARD_COMPATIBILITY
  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 3;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 3;
  }
#else

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension() const
  {
    return 3;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

#endif

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 2;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
  }

#ifndef UFC_BACKWARD_COMPATIBILITY
  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new nsemomentum2d_dofmap_1();
  }
#else
  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return 0;
  }
#endif

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

#ifndef UFC_BACKWARD_COMPATIBILITY
class nsemomentum2d_dofmap_2: public ufc::dofmap
#else 
class nsemomentum2d_dofmap_2: public ufc::dof_map
#endif
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
#ifndef UFC_BACKWARD_COMPATIBILITY
  nsemomentum2d_dofmap_2() : ufc::dofmap()
#else
  nsemomentum2d_dofmap_2() : ufc::dof_map()
#endif
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~nsemomentum2d_dofmap_2()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = 2*m.num_entities[0];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

#ifndef UFC_BACKWARD_COMPATIBILITY
  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }
#endif
  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

#ifndef UFC_BACKWARD_COMPATIBILITY
  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 6;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 6;
  }
#else

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension() const
  {
    return 6;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

#endif

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 4;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[3] = offset + c.entity_indices[0][0];
    dofs[4] = offset + c.entity_indices[0][1];
    dofs[5] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 5;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 4;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 5;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = x[0][0];
    coordinates[3][1] = x[0][1];
    coordinates[4][0] = x[1][0];
    coordinates[4][1] = x[1][1];
    coordinates[5][0] = x[2][0];
    coordinates[5][1] = x[2][1];
  }

#ifndef UFC_BACKWARD_COMPATIBILITY
  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 2;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new nsemomentum2d_dofmap_1();
        break;
      }
    case 1:
      {
        return new nsemomentum2d_dofmap_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new nsemomentum2d_dofmap_2();
  }
#else
  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 2;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new nsemomentum2d_dofmap_1();
        break;
      }
    case 1:
      {
        return new nsemomentum2d_dofmap_1();
        break;
      }
    }
    
    return 0;
  }
#endif

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class nsemomentum2d_cell_integral_0_0: public ufc::cell_integral
{
public:

  /// Constructor
  nsemomentum2d_cell_integral_0_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~nsemomentum2d_cell_integral_0_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Cell Volume.
    
    // Compute circumradius, assuming triangle is embedded in 2D.
    
    
    // Facet Area.
    
    // Array of quadrature weights.
    static const double W3[3] = {0.166666666666667, 0.166666666666667, 0.166666666666667};
    // Quadrature points on the UFC reference element: (0.166666666666667, 0.166666666666667), (0.166666666666667, 0.666666666666667), (0.666666666666667, 0.166666666666667)
    
    // Value of basis functions at quadrature points.
    static const double FE0[3][3] = \
    {{0.666666666666667, 0.166666666666667, 0.166666666666667},
    {0.166666666666667, 0.166666666666667, 0.666666666666667},
    {0.166666666666667, 0.666666666666667, 0.166666666666667}};
    
    static const double FE0_D01[3][3] = \
    {{-1.0, 0.0, 1.0},
    {-1.0, 0.0, 1.0},
    {-1.0, 0.0, 1.0}};
    
    static const double FE0_D10[3][3] = \
    {{-0.999999999999999, 0.999999999999999, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0}};
    
    static const double FE1[3][1] = \
    {{1.0},
    {1.0},
    {1.0}};
    
    static const double FE2_C0[3][6] = \
    {{0.666666666666667, 0.166666666666667, 0.166666666666667, 0.0, 0.0, 0.0},
    {0.166666666666667, 0.166666666666667, 0.666666666666667, 0.0, 0.0, 0.0},
    {0.166666666666667, 0.666666666666667, 0.166666666666667, 0.0, 0.0, 0.0}};
    
    static const double FE2_C0_D01[3][6] = \
    {{-1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_C0_D10[3][6] = \
    {{-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_C1[3][6] = \
    {{0.0, 0.0, 0.0, 0.666666666666667, 0.166666666666667, 0.166666666666667},
    {0.0, 0.0, 0.0, 0.166666666666667, 0.166666666666667, 0.666666666666667},
    {0.0, 0.0, 0.0, 0.166666666666667, 0.666666666666667, 0.166666666666667}};
    
    static const double FE2_C1_D01[3][6] = \
    {{0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0}};
    
    static const double FE2_C1_D10[3][6] = \
    {{0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0}};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 36; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', False), ('ignore ones', False), ('ignore zero tables', False), ('optimisation', False), ('remove zero terms', False)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 37218
    for (unsigned int ip = 0; ip < 3; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      double F13 = 0.0;
      double F14 = 0.0;
      double F15 = 0.0;
      double F16 = 0.0;
      
      // Total number of operations to compute function values = 4
      for (unsigned int r = 0; r < 1; r++)
      {
        F0 += FE1[ip][r]*w[4][r];
        F1 += FE1[ip][r]*w[3][r];
      }// end loop over 'r'
      
      // Total number of operations to compute function values = 18
      for (unsigned int r = 0; r < 3; r++)
      {
        F10 += FE0_D10[ip][r]*w[1][r];
        F11 += FE0_D01[ip][r]*w[1][r];
        F16 += FE0[ip][r]*w[2][r];
      }// end loop over 'r'
      
      // Total number of operations to compute function values = 144
      for (unsigned int r = 0; r < 6; r++)
      {
        F2 += FE2_C0_D10[ip][r]*w[0][r];
        F3 += FE2_C0_D01[ip][r]*w[0][r];
        F4 += FE2_C0_D10[ip][r]*w[5][r];
        F5 += FE2_C0_D01[ip][r]*w[5][r];
        F6 += FE2_C0[ip][r]*w[0][r];
        F7 += FE2_C0[ip][r]*w[5][r];
        F8 += FE2_C1[ip][r]*w[0][r];
        F9 += FE2_C1[ip][r]*w[5][r];
        F12 += FE2_C1_D10[ip][r]*w[0][r];
        F13 += FE2_C1_D01[ip][r]*w[0][r];
        F14 += FE2_C1_D10[ip][r]*w[5][r];
        F15 += FE2_C1_D01[ip][r]*w[5][r];
      }// end loop over 'r'
      
      // Number of operations for primary indices: 12240
      for (unsigned int j = 0; j < 6; j++)
      {
        for (unsigned int k = 0; k < 6; k++)
        {
          // Number of operations to compute entry: 340
          A[j*6 + k] += ((FE2_C1[ip][j]*FE2_C1[ip][k] + FE2_C0[ip][j]*FE2_C0[ip][k]) + ((((((((FE2_C1[ip][j]*(((K_01*FE2_C0_D10[ip][k] + K_11*FE2_C0_D01[ip][k]))*0.5) + FE2_C0[ip][j]*(((K_00*FE2_C0_D10[ip][k] + K_10*FE2_C0_D01[ip][k]))*0.5)))*((((0.5*(((K_00*F4 + K_10*F5) + (K_00*F2 + K_10*F3))))*(0.5*((F6 + F7))) + (0.5*(((K_01*F4 + K_11*F5) + (K_01*F2 + K_11*F3))))*(0.5*((F8 + F9)))) + (K_00*F10 + K_10*F11))) + ((FE2_C0[ip][j]*(0.5*(((K_00*F4 + K_10*F5) + (K_00*F2 + K_10*F3)))) + FE2_C1[ip][j]*(0.5*(((K_01*F4 + K_11*F5) + (K_01*F2 + K_11*F3))))))*(((FE2_C0[ip][k]*0.5*(0.5*(((K_00*F4 + K_10*F5) + (K_00*F2 + K_10*F3)))) + (((K_00*FE2_C0_D10[ip][k] + K_10*FE2_C0_D01[ip][k]))*0.5)*(0.5*((F6 + F7)))) + ((((K_01*FE2_C0_D10[ip][k] + K_11*FE2_C0_D01[ip][k]))*0.5)*(0.5*((F8 + F9))) + FE2_C1[ip][k]*0.5*(0.5*(((K_01*F4 + K_11*F5) + (K_01*F2 + K_11*F3)))))))) + (((FE2_C0[ip][j]*(((K_00*FE2_C1_D10[ip][k] + K_10*FE2_C1_D01[ip][k]))*0.5) + FE2_C1[ip][j]*(((K_01*FE2_C1_D10[ip][k] + K_11*FE2_C1_D01[ip][k]))*0.5)))*(((K_01*F10 + K_11*F11) + ((0.5*(((K_01*F14 + K_11*F15) + (K_01*F12 + K_11*F13))))*(0.5*((F8 + F9))) + (0.5*(((K_00*F14 + K_10*F15) + (K_00*F12 + K_10*F13))))*(0.5*((F6 + F7)))))) + ((FE2_C0[ip][j]*(0.5*(((K_00*F14 + K_10*F15) + (K_00*F12 + K_10*F13)))) + FE2_C1[ip][j]*(0.5*(((K_01*F14 + K_11*F15) + (K_01*F12 + K_11*F13))))))*(((FE2_C1[ip][k]*0.5*(0.5*(((K_01*F14 + K_11*F15) + (K_01*F12 + K_11*F13)))) + (((K_01*FE2_C1_D10[ip][k] + K_11*FE2_C1_D01[ip][k]))*0.5)*(0.5*((F8 + F9)))) + ((((K_00*FE2_C1_D10[ip][k] + K_10*FE2_C1_D01[ip][k]))*0.5)*(0.5*((F6 + F7))) + FE2_C0[ip][k]*0.5*(0.5*(((K_00*F14 + K_10*F15) + (K_00*F12 + K_10*F13))))))))))*4.0*F1 + (((((((K_01*FE2_C1_D10[ip][k] + K_11*FE2_C1_D01[ip][k]))*0.5)*((K_01*FE2_C1_D10[ip][j] + K_11*FE2_C1_D01[ip][j])) + (((K_01*FE2_C0_D10[ip][k] + K_11*FE2_C0_D01[ip][k]))*0.5)*((K_01*FE2_C0_D10[ip][j] + K_11*FE2_C0_D01[ip][j]))) + ((((K_00*FE2_C1_D10[ip][k] + K_10*FE2_C1_D01[ip][k]))*0.5)*((K_00*FE2_C1_D10[ip][j] + K_10*FE2_C1_D01[ip][j])) + (((K_00*FE2_C0_D10[ip][k] + K_10*FE2_C0_D01[ip][k]))*0.5)*((K_00*FE2_C0_D10[ip][j] + K_10*FE2_C0_D01[ip][j])))))*F16 + (FE2_C0[ip][j]*(((FE2_C0[ip][k]*0.5*(0.5*(((K_00*F4 + K_10*F5) + (K_00*F2 + K_10*F3)))) + (((K_00*FE2_C0_D10[ip][k] + K_10*FE2_C0_D01[ip][k]))*0.5)*(0.5*((F6 + F7)))) + ((((K_01*FE2_C0_D10[ip][k] + K_11*FE2_C0_D01[ip][k]))*0.5)*(0.5*((F8 + F9))) + FE2_C1[ip][k]*0.5*(0.5*(((K_01*F4 + K_11*F5) + (K_01*F2 + K_11*F3))))))) + FE2_C1[ip][j]*(((FE2_C1[ip][k]*0.5*(0.5*(((K_01*F14 + K_11*F15) + (K_01*F12 + K_11*F13)))) + (((K_01*FE2_C1_D10[ip][k] + K_11*FE2_C1_D01[ip][k]))*0.5)*(0.5*((F8 + F9)))) + ((((K_00*FE2_C1_D10[ip][k] + K_10*FE2_C1_D01[ip][k]))*0.5)*(0.5*((F6 + F7))) + FE2_C0[ip][k]*0.5*(0.5*(((K_00*F14 + K_10*F15) + (K_00*F12 + K_10*F13)))))))))) + (((((K_00*FE2_C0_D10[ip][k] + K_10*FE2_C0_D01[ip][k]))*0.5 + ((K_01*FE2_C1_D10[ip][k] + K_11*FE2_C1_D01[ip][k]))*0.5))*(((K_00*FE2_C0_D10[ip][j] + K_10*FE2_C0_D01[ip][j]) + (K_01*FE2_C1_D10[ip][j] + K_11*FE2_C1_D01[ip][j]))))*4.0*F1))*F0)*W3[ip]*det;
        }// end loop over 'k'
      }// end loop over 'j'
    }// end loop over 'ip'
  }
 #ifndef UFC_BACKWARD_COMPATIBILITY 
  /// Tabulate the tensor for the contribution from a local cell
  /// using the specified reference cell quadrature points/weights
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c,
                               unsigned int num_quadrature_points,
                               const double * const * quadrature_points,
                               const double* quadrature_weights) const
  {
    throw std::runtime_error("Quadrature version of tabulate_tensor not yet implemented (introduced in UFC 2.0).");
  }
#endif
};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class nsemomentum2d_cell_integral_1_0: public ufc::cell_integral
{
public:

  /// Constructor
  nsemomentum2d_cell_integral_1_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~nsemomentum2d_cell_integral_1_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Cell Volume.
    
    // Compute circumradius, assuming triangle is embedded in 2D.
    
    
    // Facet Area.
    
    // Array of quadrature weights.
    static const double W3[3] = {0.166666666666667, 0.166666666666667, 0.166666666666667};
    // Quadrature points on the UFC reference element: (0.166666666666667, 0.166666666666667), (0.166666666666667, 0.666666666666667), (0.666666666666667, 0.166666666666667)
    
    // Value of basis functions at quadrature points.
    static const double FE0[3][3] = \
    {{0.666666666666667, 0.166666666666667, 0.166666666666667},
    {0.166666666666667, 0.166666666666667, 0.666666666666667},
    {0.166666666666667, 0.666666666666667, 0.166666666666667}};
    
    static const double FE0_D01[3][3] = \
    {{-1.0, 0.0, 1.0},
    {-1.0, 0.0, 1.0},
    {-1.0, 0.0, 1.0}};
    
    static const double FE0_D10[3][3] = \
    {{-0.999999999999999, 0.999999999999999, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0}};
    
    static const double FE1[3][1] = \
    {{1.0},
    {1.0},
    {1.0}};
    
    static const double FE2_C0[3][6] = \
    {{0.666666666666667, 0.166666666666667, 0.166666666666667, 0.0, 0.0, 0.0},
    {0.166666666666667, 0.166666666666667, 0.666666666666667, 0.0, 0.0, 0.0},
    {0.166666666666667, 0.666666666666667, 0.166666666666667, 0.0, 0.0, 0.0}};
    
    static const double FE2_C0_D01[3][6] = \
    {{-1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_C0_D10[3][6] = \
    {{-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0},
    {-0.999999999999999, 0.999999999999999, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_C1[3][6] = \
    {{0.0, 0.0, 0.0, 0.666666666666667, 0.166666666666667, 0.166666666666667},
    {0.0, 0.0, 0.0, 0.166666666666667, 0.166666666666667, 0.666666666666667},
    {0.0, 0.0, 0.0, 0.166666666666667, 0.666666666666667, 0.166666666666667}};
    
    static const double FE2_C1_D01[3][6] = \
    {{0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, -1.0, 0.0, 1.0}};
    
    static const double FE2_C1_D10[3][6] = \
    {{0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0},
    {0.0, 0.0, 0.0, -0.999999999999999, 0.999999999999999, 0.0}};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 6; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', False), ('ignore ones', False), ('ignore zero tables', False), ('optimisation', False), ('remove zero terms', False)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 11064
    for (unsigned int ip = 0; ip < 3; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      double F13 = 0.0;
      double F14 = 0.0;
      double F15 = 0.0;
      double F16 = 0.0;
      
      // Total number of operations to compute function values = 4
      for (unsigned int r = 0; r < 1; r++)
      {
        F4 += FE1[ip][r]*w[4][r];
        F13 += FE1[ip][r]*w[3][r];
      }// end loop over 'r'
      
      // Total number of operations to compute function values = 18
      for (unsigned int r = 0; r < 3; r++)
      {
        F14 += FE0_D10[ip][r]*w[1][r];
        F15 += FE0_D01[ip][r]*w[1][r];
        F16 += FE0[ip][r]*w[2][r];
      }// end loop over 'r'
      
      // Total number of operations to compute function values = 144
      for (unsigned int r = 0; r < 6; r++)
      {
        F0 += FE2_C0[ip][r]*w[0][r];
        F1 += FE2_C0[ip][r]*w[5][r];
        F2 += FE2_C1[ip][r]*w[0][r];
        F3 += FE2_C1[ip][r]*w[5][r];
        F5 += FE2_C0_D10[ip][r]*w[0][r];
        F6 += FE2_C0_D01[ip][r]*w[0][r];
        F7 += FE2_C0_D10[ip][r]*w[5][r];
        F8 += FE2_C0_D01[ip][r]*w[5][r];
        F9 += FE2_C1_D10[ip][r]*w[0][r];
        F10 += FE2_C1_D01[ip][r]*w[0][r];
        F11 += FE2_C1_D10[ip][r]*w[5][r];
        F12 += FE2_C1_D01[ip][r]*w[5][r];
      }// end loop over 'r'
      
      // Number of operations for primary indices: 3522
      for (unsigned int j = 0; j < 6; j++)
      {
        // Number of operations to compute entry: 587
        A[j] += (((FE2_C1[ip][j]*F2 + FE2_C0[ip][j]*F0) + ((((((((FE2_C1[ip][j]*(0.5*(((K_01*F5 + K_11*F6) + (K_01*F7 + K_11*F8)))) + FE2_C0[ip][j]*(0.5*(((K_00*F5 + K_10*F6) + (K_00*F7 + K_10*F8))))))*((((0.5*(((K_01*F5 + K_11*F6) + (K_01*F7 + K_11*F8))))*0.5*F2 + (0.5*((K_01*F5 + K_11*F6)))*(0.5*((F2 + F3)))) + ((0.5*((K_00*F5 + K_10*F6)))*(0.5*((F0 + F1))) + (0.5*(((K_00*F5 + K_10*F6) + (K_00*F7 + K_10*F8))))*0.5*F0))) + ((FE2_C1[ip][j]*(0.5*((K_01*F5 + K_11*F6))) + FE2_C0[ip][j]*(0.5*((K_00*F5 + K_10*F6)))))*((((0.5*(((K_01*F5 + K_11*F6) + (K_01*F7 + K_11*F8))))*(0.5*((F2 + F3))) + (0.5*(((K_00*F5 + K_10*F6) + (K_00*F7 + K_10*F8))))*(0.5*((F0 + F1)))) + (K_00*F14 + K_10*F15)))) + (((FE2_C1[ip][j]*(0.5*(((K_01*F11 + K_11*F12) + (K_01*F9 + K_11*F10)))) + FE2_C0[ip][j]*(0.5*(((K_00*F11 + K_10*F12) + (K_00*F9 + K_10*F10))))))*((((0.5*((K_00*F9 + K_10*F10)))*(0.5*((F0 + F1))) + (0.5*(((K_00*F11 + K_10*F12) + (K_00*F9 + K_10*F10))))*0.5*F0) + ((0.5*((K_01*F9 + K_11*F10)))*(0.5*((F2 + F3))) + (0.5*(((K_01*F11 + K_11*F12) + (K_01*F9 + K_11*F10))))*0.5*F2))) + ((FE2_C1[ip][j]*(0.5*((K_01*F9 + K_11*F10))) + FE2_C0[ip][j]*(0.5*((K_00*F9 + K_10*F10)))))*((((0.5*(((K_00*F11 + K_10*F12) + (K_00*F9 + K_10*F10))))*(0.5*((F0 + F1))) + (0.5*(((K_01*F11 + K_11*F12) + (K_01*F9 + K_11*F10))))*(0.5*((F2 + F3)))) + (K_01*F14 + K_11*F15))))))*4.0*F13 + ((FE2_C0[ip][j]*((((0.5*(((K_01*F5 + K_11*F6) + (K_01*F7 + K_11*F8))))*0.5*F2 + (0.5*((K_01*F5 + K_11*F6)))*(0.5*((F2 + F3)))) + ((0.5*((K_00*F5 + K_10*F6)))*(0.5*((F0 + F1))) + (0.5*(((K_00*F5 + K_10*F6) + (K_00*F7 + K_10*F8))))*0.5*F0))) + FE2_C1[ip][j]*((((0.5*((K_00*F9 + K_10*F10)))*(0.5*((F0 + F1))) + (0.5*(((K_00*F11 + K_10*F12) + (K_00*F9 + K_10*F10))))*0.5*F0) + ((0.5*((K_01*F9 + K_11*F10)))*(0.5*((F2 + F3))) + (0.5*(((K_01*F11 + K_11*F12) + (K_01*F9 + K_11*F10))))*0.5*F2)))) + (((((K_01*FE2_C0_D10[ip][j] + K_11*FE2_C0_D01[ip][j]))*(0.5*((K_01*F5 + K_11*F6))) + ((K_01*FE2_C1_D10[ip][j] + K_11*FE2_C1_D01[ip][j]))*(0.5*((K_01*F9 + K_11*F10)))) + (((K_00*FE2_C1_D10[ip][j] + K_10*FE2_C1_D01[ip][j]))*(0.5*((K_00*F9 + K_10*F10))) + ((K_00*FE2_C0_D10[ip][j] + K_10*FE2_C0_D01[ip][j]))*(0.5*((K_00*F5 + K_10*F6))))))*F16)) + ((((K_00*FE2_C0_D10[ip][j] + K_10*FE2_C0_D01[ip][j]) + (K_01*FE2_C1_D10[ip][j] + K_11*FE2_C1_D01[ip][j])))*((0.5*((K_01*F9 + K_11*F10)) + 0.5*((K_00*F5 + K_10*F6)))))*4.0*F13))*F4) + (((((((FE2_C0[ip][j]*((((0.5*(((K_01*F5 + K_11*F6) + (K_01*F7 + K_11*F8))))*(0.5*((F2 + F3))) + (0.5*(((K_00*F5 + K_10*F6) + (K_00*F7 + K_10*F8))))*(0.5*((F0 + F1)))) + (K_00*F14 + K_10*F15))) + FE2_C1[ip][j]*((((0.5*(((K_00*F11 + K_10*F12) + (K_00*F9 + K_10*F10))))*(0.5*((F0 + F1))) + (0.5*(((K_01*F11 + K_11*F12) + (K_01*F9 + K_11*F10))))*(0.5*((F2 + F3)))) + (K_01*F14 + K_11*F15)))) + (((((K_00*FE2_C1_D10[ip][j] + K_10*FE2_C1_D01[ip][j]))*(0.5*(((K_00*F11 + K_10*F12) + (K_00*F9 + K_10*F10)))) + ((K_00*FE2_C0_D10[ip][j] + K_10*FE2_C0_D01[ip][j]))*(0.5*(((K_00*F5 + K_10*F6) + (K_00*F7 + K_10*F8))))) + (((K_01*FE2_C0_D10[ip][j] + K_11*FE2_C0_D01[ip][j]))*(0.5*(((K_01*F5 + K_11*F6) + (K_01*F7 + K_11*F8)))) + ((K_01*FE2_C1_D10[ip][j] + K_11*FE2_C1_D01[ip][j]))*(0.5*(((K_01*F11 + K_11*F12) + (K_01*F9 + K_11*F10)))))))*F16) + ((((FE2_C1[ip][j]*(0.5*(((K_01*F5 + K_11*F6) + (K_01*F7 + K_11*F8)))) + FE2_C0[ip][j]*(0.5*(((K_00*F5 + K_10*F6) + (K_00*F7 + K_10*F8))))))*((((0.5*(((K_01*F5 + K_11*F6) + (K_01*F7 + K_11*F8))))*(0.5*((F2 + F3))) + (0.5*(((K_00*F5 + K_10*F6) + (K_00*F7 + K_10*F8))))*(0.5*((F0 + F1)))) + (K_00*F14 + K_10*F15))) + ((FE2_C1[ip][j]*(0.5*(((K_01*F11 + K_11*F12) + (K_01*F9 + K_11*F10)))) + FE2_C0[ip][j]*(0.5*(((K_00*F11 + K_10*F12) + (K_00*F9 + K_10*F10))))))*((((0.5*(((K_00*F11 + K_10*F12) + (K_00*F9 + K_10*F10))))*(0.5*((F0 + F1))) + (0.5*(((K_01*F11 + K_11*F12) + (K_01*F9 + K_11*F10))))*(0.5*((F2 + F3)))) + (K_01*F14 + K_11*F15)))))*4.0*F13) + ((((K_00*FE2_C0_D10[ip][j] + K_10*FE2_C0_D01[ip][j]) + (K_01*FE2_C1_D10[ip][j] + K_11*FE2_C1_D01[ip][j])))*((0.5*(((K_00*F5 + K_10*F6) + (K_00*F7 + K_10*F8))) + 0.5*(((K_01*F11 + K_11*F12) + (K_01*F9 + K_11*F10))))))*4.0*F13))*F4 + (FE2_C0[ip][j]*((F0 + (-1.0)*F1)) + FE2_C1[ip][j]*(((-1.0)*F3 + F2)))))*(-1.0))*W3[ip]*det;
      }// end loop over 'j'
    }// end loop over 'ip'
  }
 #ifndef UFC_BACKWARD_COMPATIBILITY 
  /// Tabulate the tensor for the contribution from a local cell
  /// using the specified reference cell quadrature points/weights
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c,
                               unsigned int num_quadrature_points,
                               const double * const * quadrature_points,
                               const double* quadrature_weights) const
  {
    throw std::runtime_error("Quadrature version of tabulate_tensor not yet implemented (introduced in UFC 2.0).");
  }
#endif
};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class nsemomentum2d_form_0: public ufc::form
{
public:

  /// Constructor
  nsemomentum2d_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~nsemomentum2d_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "Form([Integral(Sum(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(0),), {Index(0): 2})), Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 1), MultiIndex((Index(0),), {Index(0): 2}))), MultiIndex((Index(0),), {Index(0): 2})), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 4), Sum(Product(Product(IndexSum(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 1), MultiIndex((Index(1),), {Index(1): 2})), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(1),), {Index(1): 2})), MultiIndex((Index(1),), {Index(1): 2})), IndexSum(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(3),), {Index(3): 2}))), Product(IntValue(4, (), (), {}), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Product(IndexSum(Sum(Product(Indexed(ComponentTensor(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(4),), {Index(4): 2})), Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 1), MultiIndex((Index(5),), {Index(5): 2})), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(6),), {Index(6): 2})), MultiIndex((Index(6), Index(5)), {Index(5): 2, Index(6): 2})), MultiIndex((Index(7), Index(4)), {Index(7): 2, Index(4): 2}))), MultiIndex((Index(4),), {Index(4): 2})), MultiIndex((Index(7),), {Index(7): 2})), MultiIndex((Index(8),), {Index(8): 2})), Indexed(Sum(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(9),), {Index(9): 2})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(9),), {Index(9): 2}))), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(10),), {Index(10): 2})), MultiIndex((Index(10), Index(9)), {Index(10): 2, Index(9): 2})), MultiIndex((Index(11), Index(12)), {Index(11): 2, Index(12): 2})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5)), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(12),), {Index(12): 2}))), MultiIndex((Index(12),), {Index(12): 2})), MultiIndex((Index(11),), {Index(11): 2})), ComponentTensor(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None), 1), MultiIndex((Index(13),), {Index(13): 2})), MultiIndex((Index(13),), {Index(13): 2}))), MultiIndex((Index(8),), {Index(8): 2}))), Product(Indexed(ComponentTensor(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(4),), {Index(4): 2})), Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(5),), {Index(5): 2})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(5),), {Index(5): 2}))), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(6),), {Index(6): 2})), MultiIndex((Index(6), Index(5)), {Index(5): 2, Index(6): 2})), MultiIndex((Index(7), Index(4)), {Index(7): 2, Index(4): 2}))), MultiIndex((Index(4),), {Index(4): 2})), MultiIndex((Index(7),), {Index(7): 2})), MultiIndex((Index(8),), {Index(8): 2})), Indexed(ComponentTensor(IndexSum(Sum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 1), MultiIndex((Index(9),), {Index(9): 2})), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(10),), {Index(10): 2})), MultiIndex((Index(10), Index(9)), {Index(10): 2, Index(9): 2})), MultiIndex((Index(11), Index(12)), {Index(11): 2, Index(12): 2})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5)), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(12),), {Index(12): 2}))), Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(9),), {Index(9): 2})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(9),), {Index(9): 2}))), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(10),), {Index(10): 2})), MultiIndex((Index(10), Index(9)), {Index(10): 2, Index(9): 2})), MultiIndex((Index(11), Index(12)), {Index(11): 2, Index(12): 2})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 1), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(12),), {Index(12): 2})))), MultiIndex((Index(12),), {Index(12): 2})), MultiIndex((Index(11),), {Index(11): 2})), MultiIndex((Index(8),), {Index(8): 2})))), MultiIndex((Index(8),), {Index(8): 2})), Product(IntValue(4, (), (), {}), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(14),), {Index(14): 2})), Indexed(ComponentTensor(IndexSum(Sum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 1), MultiIndex((Index(15),), {Index(15): 2})), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(16),), {Index(16): 2})), MultiIndex((Index(16), Index(15)), {Index(16): 2, Index(15): 2})), MultiIndex((Index(17), Index(18)), {Index(17): 2, Index(18): 2})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5)), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(18),), {Index(18): 2}))), Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(15),), {Index(15): 2})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(15),), {Index(15): 2}))), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(16),), {Index(16): 2})), MultiIndex((Index(16), Index(15)), {Index(16): 2, Index(15): 2})), MultiIndex((Index(17), Index(18)), {Index(17): 2, Index(18): 2})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 1), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(18),), {Index(18): 2})))), MultiIndex((Index(18),), {Index(18): 2})), MultiIndex((Index(17),), {Index(17): 2})), MultiIndex((Index(14),), {Index(14): 2}))), MultiIndex((Index(14),), {Index(14): 2})), Product(Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None), 2), IndexSum(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 1), MultiIndex((Index(19),), {Index(19): 2})), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(20),), {Index(20): 2})), MultiIndex((Index(20), Index(19)), {Index(19): 2, Index(20): 2})), MultiIndex((Index(21), Index(22)), {Index(22): 2, Index(21): 2})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(23),), {Index(23): 2})), MultiIndex((Index(24),), {Index(24): 2})), MultiIndex((Index(24), Index(23)), {Index(24): 2, Index(23): 2})), MultiIndex((Index(21), Index(22)), {Index(22): 2, Index(21): 2}))), MultiIndex((Index(21),), {Index(21): 2})), MultiIndex((Index(22),), {Index(22): 2})))))))), Measure('cell', 0, None))])";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 6;
  }

 #ifndef UFC_BACKWARD_COMPATIBILITY 

  /// Return the number of cell domains
  virtual unsigned int num_cell_domains() const
  {
    return 1;
  }

  /// Return the number of exterior facet domains
  virtual unsigned int num_exterior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual unsigned int num_interior_facet_domains() const
  {
    return 0;
  }
#else

  /// Return the number of cell domains
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }

  /// Return the number of exterior facet domains
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 0;
  }

#endif
  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new nsemomentum2d_finite_element_2();
        break;
      }
    case 1:
      {
        return new nsemomentum2d_finite_element_2();
        break;
      }
    case 2:
      {
        return new nsemomentum2d_finite_element_2();
        break;
      }
    case 3:
      {
        return new nsemomentum2d_finite_element_1();
        break;
      }
    case 4:
      {
        return new nsemomentum2d_finite_element_1();
        break;
      }
    case 5:
      {
        return new nsemomentum2d_finite_element_0();
        break;
      }
    case 6:
      {
        return new nsemomentum2d_finite_element_0();
        break;
      }
    case 7:
      {
        return new nsemomentum2d_finite_element_2();
        break;
      }
    }
    
    return 0;
  }

 #ifndef UFC_BACKWARD_COMPATIBILITY 
  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    case 1:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    case 2:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    case 3:
      {
        return new nsemomentum2d_dofmap_1();
        break;
      }
    case 4:
      {
        return new nsemomentum2d_dofmap_1();
        break;
      }
    case 5:
      {
        return new nsemomentum2d_dofmap_0();
        break;
      }
    case 6:
      {
        return new nsemomentum2d_dofmap_0();
        break;
      }
    case 7:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    }
    
    return 0;
  }
#else
  /// Create a new dofmap for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    case 1:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    case 2:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    case 3:
      {
        return new nsemomentum2d_dofmap_1();
        break;
      }
    case 4:
      {
        return new nsemomentum2d_dofmap_1();
        break;
      }
    case 5:
      {
        return new nsemomentum2d_dofmap_0();
        break;
      }
    case 6:
      {
        return new nsemomentum2d_dofmap_0();
        break;
      }
    case 7:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    }
    
    return 0;
  }

#endif
  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new nsemomentum2d_cell_integral_0_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class nsemomentum2d_form_1: public ufc::form
{
public:

  /// Constructor
  nsemomentum2d_form_1() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~nsemomentum2d_form_1()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "Form([Integral(Sum(Product(IntValue(-1, (), (), {}), Sum(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(0),), {Index(0): 2})), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(1),), {Index(1): 2}))), MultiIndex((Index(1),), {Index(1): 2}))), MultiIndex((Index(0),), {Index(0): 2}))), MultiIndex((Index(0),), {Index(0): 2})), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 4), Sum(Product(Product(IndexSum(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(2),), {Index(2): 2})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(2),), {Index(2): 2}))), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(2),), {Index(2): 2})), IndexSum(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(4),), {Index(4): 2})), MultiIndex((Index(4),), {Index(4): 2})), MultiIndex((Index(4),), {Index(4): 2}))), Product(IntValue(4, (), (), {}), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Product(IndexSum(Product(Indexed(ComponentTensor(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(5),), {Index(5): 2})), Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(6),), {Index(6): 2})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(6),), {Index(6): 2}))), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(7),), {Index(7): 2})), MultiIndex((Index(7), Index(6)), {Index(7): 2, Index(6): 2})), MultiIndex((Index(8), Index(5)), {Index(5): 2, Index(8): 2}))), MultiIndex((Index(5),), {Index(5): 2})), MultiIndex((Index(8),), {Index(8): 2})), MultiIndex((Index(9),), {Index(9): 2})), Indexed(Sum(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(10),), {Index(10): 2})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(10),), {Index(10): 2}))), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(11),), {Index(11): 2})), MultiIndex((Index(11), Index(10)), {Index(11): 2, Index(10): 2})), MultiIndex((Index(12), Index(13)), {Index(13): 2, Index(12): 2})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5)), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(13),), {Index(13): 2}))), MultiIndex((Index(13),), {Index(13): 2})), MultiIndex((Index(12),), {Index(12): 2})), ComponentTensor(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None), 1), MultiIndex((Index(14),), {Index(14): 2})), MultiIndex((Index(14),), {Index(14): 2}))), MultiIndex((Index(9),), {Index(9): 2}))), MultiIndex((Index(9),), {Index(9): 2})), Product(IntValue(4, (), (), {}), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(15),), {Index(15): 2})), Indexed(Sum(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(16),), {Index(16): 2})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(16),), {Index(16): 2}))), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(17),), {Index(17): 2})), MultiIndex((Index(17), Index(16)), {Index(17): 2, Index(16): 2})), MultiIndex((Index(18), Index(19)), {Index(19): 2, Index(18): 2})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5)), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(19),), {Index(19): 2}))), MultiIndex((Index(19),), {Index(19): 2})), MultiIndex((Index(18),), {Index(18): 2})), ComponentTensor(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 2})), MultiIndex((Index(20),), {Index(20): 2}))), MultiIndex((Index(15),), {Index(15): 2}))), MultiIndex((Index(15),), {Index(15): 2})), Product(Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None), 2), IndexSum(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(21),), {Index(21): 2})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(21),), {Index(21): 2}))), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(22),), {Index(22): 2})), MultiIndex((Index(22), Index(21)), {Index(22): 2, Index(21): 2})), MultiIndex((Index(23), Index(24)), {Index(24): 2, Index(23): 2})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(25),), {Index(25): 2})), MultiIndex((Index(26),), {Index(26): 2})), MultiIndex((Index(26), Index(25)), {Index(26): 2, Index(25): 2})), MultiIndex((Index(23), Index(24)), {Index(24): 2, Index(23): 2}))), MultiIndex((Index(23),), {Index(23): 2})), MultiIndex((Index(24),), {Index(24): 2}))))))))), Sum(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(27),), {Index(27): 2})), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(27),), {Index(27): 2}))), MultiIndex((Index(27),), {Index(27): 2})), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 4), Sum(Product(Product(IndexSum(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(28),), {Index(28): 2})), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(28),), {Index(28): 2})), MultiIndex((Index(28),), {Index(28): 2})), IndexSum(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(29),), {Index(29): 2})), MultiIndex((Index(29),), {Index(29): 2})), MultiIndex((Index(29),), {Index(29): 2}))), Product(IntValue(4, (), (), {}), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(Product(IndexSum(Sum(Product(Indexed(ComponentTensor(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(5),), {Index(5): 2})), Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(30),), {Index(30): 2})), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(31),), {Index(31): 2})), MultiIndex((Index(31), Index(30)), {Index(31): 2, Index(30): 2})), MultiIndex((Index(8), Index(5)), {Index(5): 2, Index(8): 2}))), MultiIndex((Index(5),), {Index(5): 2})), MultiIndex((Index(8),), {Index(8): 2})), MultiIndex((Index(32),), {Index(32): 2})), Indexed(Sum(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(33),), {Index(33): 2})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(33),), {Index(33): 2}))), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(34),), {Index(34): 2})), MultiIndex((Index(34), Index(33)), {Index(33): 2, Index(34): 2})), MultiIndex((Index(12), Index(13)), {Index(13): 2, Index(12): 2})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5)), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(13),), {Index(13): 2}))), MultiIndex((Index(13),), {Index(13): 2})), MultiIndex((Index(12),), {Index(12): 2})), ComponentTensor(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None), 1), MultiIndex((Index(35),), {Index(35): 2})), MultiIndex((Index(35),), {Index(35): 2}))), MultiIndex((Index(32),), {Index(32): 2}))), Product(Indexed(ComponentTensor(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(5),), {Index(5): 2})), Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(30),), {Index(30): 2})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(30),), {Index(30): 2}))), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(31),), {Index(31): 2})), MultiIndex((Index(31), Index(30)), {Index(31): 2, Index(30): 2})), MultiIndex((Index(8), Index(5)), {Index(5): 2, Index(8): 2}))), MultiIndex((Index(5),), {Index(5): 2})), MultiIndex((Index(8),), {Index(8): 2})), MultiIndex((Index(32),), {Index(32): 2})), Indexed(ComponentTensor(IndexSum(Sum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(33),), {Index(33): 2})), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(34),), {Index(34): 2})), MultiIndex((Index(34), Index(33)), {Index(33): 2, Index(34): 2})), MultiIndex((Index(12), Index(13)), {Index(13): 2, Index(12): 2})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5)), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(13),), {Index(13): 2}))), Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(33),), {Index(33): 2})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(33),), {Index(33): 2}))), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(34),), {Index(34): 2})), MultiIndex((Index(34), Index(33)), {Index(33): 2, Index(34): 2})), MultiIndex((Index(12), Index(13)), {Index(13): 2, Index(12): 2})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(13),), {Index(13): 2})))), MultiIndex((Index(13),), {Index(13): 2})), MultiIndex((Index(12),), {Index(12): 2})), MultiIndex((Index(32),), {Index(32): 2})))), MultiIndex((Index(32),), {Index(32): 2})), Product(IntValue(4, (), (), {}), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 0, None), 3))), Sum(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(36),), {Index(36): 2})), Indexed(ComponentTensor(IndexSum(Sum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(37),), {Index(37): 2})), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(38),), {Index(38): 2})), MultiIndex((Index(38), Index(37)), {Index(37): 2, Index(38): 2})), MultiIndex((Index(18), Index(19)), {Index(19): 2, Index(18): 2})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5)), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(19),), {Index(19): 2}))), Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(37),), {Index(37): 2})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 5), MultiIndex((Index(37),), {Index(37): 2}))), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(38),), {Index(38): 2})), MultiIndex((Index(38), Index(37)), {Index(37): 2, Index(38): 2})), MultiIndex((Index(18), Index(19)), {Index(19): 2, Index(18): 2})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(19),), {Index(19): 2})))), MultiIndex((Index(19),), {Index(19): 2})), MultiIndex((Index(18),), {Index(18): 2})), MultiIndex((Index(36),), {Index(36): 2}))), MultiIndex((Index(36),), {Index(36): 2})), Product(Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None), 2), IndexSum(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(39),), {Index(39): 2})), MultiIndex((Index(3),), {Index(3): 2}))), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(40),), {Index(40): 2})), MultiIndex((Index(40), Index(39)), {Index(40): 2, Index(39): 2})), MultiIndex((Index(41), Index(42)), {Index(41): 2, Index(42): 2})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(43),), {Index(43): 2})), MultiIndex((Index(44),), {Index(44): 2})), MultiIndex((Index(44), Index(43)), {Index(43): 2, Index(44): 2})), MultiIndex((Index(41), Index(42)), {Index(41): 2, Index(42): 2}))), MultiIndex((Index(41),), {Index(41): 2})), MultiIndex((Index(42),), {Index(42): 2}))))))))), Measure('cell', 0, None))])";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 6;
  }

 #ifndef UFC_BACKWARD_COMPATIBILITY 

  /// Return the number of cell domains
  virtual unsigned int num_cell_domains() const
  {
    return 1;
  }

  /// Return the number of exterior facet domains
  virtual unsigned int num_exterior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual unsigned int num_interior_facet_domains() const
  {
    return 0;
  }
#else

  /// Return the number of cell domains
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }

  /// Return the number of exterior facet domains
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 0;
  }

#endif
  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new nsemomentum2d_finite_element_2();
        break;
      }
    case 1:
      {
        return new nsemomentum2d_finite_element_2();
        break;
      }
    case 2:
      {
        return new nsemomentum2d_finite_element_1();
        break;
      }
    case 3:
      {
        return new nsemomentum2d_finite_element_1();
        break;
      }
    case 4:
      {
        return new nsemomentum2d_finite_element_0();
        break;
      }
    case 5:
      {
        return new nsemomentum2d_finite_element_0();
        break;
      }
    case 6:
      {
        return new nsemomentum2d_finite_element_2();
        break;
      }
    }
    
    return 0;
  }

 #ifndef UFC_BACKWARD_COMPATIBILITY 
  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    case 1:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    case 2:
      {
        return new nsemomentum2d_dofmap_1();
        break;
      }
    case 3:
      {
        return new nsemomentum2d_dofmap_1();
        break;
      }
    case 4:
      {
        return new nsemomentum2d_dofmap_0();
        break;
      }
    case 5:
      {
        return new nsemomentum2d_dofmap_0();
        break;
      }
    case 6:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    }
    
    return 0;
  }
#else
  /// Create a new dofmap for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    case 1:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    case 2:
      {
        return new nsemomentum2d_dofmap_1();
        break;
      }
    case 3:
      {
        return new nsemomentum2d_dofmap_1();
        break;
      }
    case 4:
      {
        return new nsemomentum2d_dofmap_0();
        break;
      }
    case 5:
      {
        return new nsemomentum2d_dofmap_0();
        break;
      }
    case 6:
      {
        return new nsemomentum2d_dofmap_2();
        break;
      }
    }
    
    return 0;
  }

#endif
  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new nsemomentum2d_cell_integral_1_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

#ifndef UFC_BACKWARD_COMPATIBILITY 

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>

namespace NSEMomentum2D
{

class CoefficientSpace_h: public dolfin::FunctionSpace
{
public:

  CoefficientSpace_h(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          const dolfin::FiniteElement* (new dolfin::FiniteElement(ufc::finite_element* (new nsemomentum2d_finite_element_0()))),
                          const dolfin::DofMap *(new dolfin::DofMap(ufc::dofmap* (new nsemomentum2d_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  CoefficientSpace_h(dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          const dolfin::FiniteElement* (new dolfin::FiniteElement(ufc::finite_element* (new nsemomentum2d_finite_element_0()))),
                          const dolfin::DofMap* (new dolfin::DofMap(ufc::dofmap *(new nsemomentum2d_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  CoefficientSpace_h(dolfin::Mesh*  mesh):
    dolfin::FunctionSpace(mesh,
                          const dolfin::FiniteElement *(new dolfin::FiniteElement(ufc::finite_element* (new nsemomentum2d_finite_element_0()))),
                          const dolfin::DofMap* (new dolfin::DofMap(ufc::dofmap*(new nsemomentum2d_dofmap_0()), *mesh)))
  {
      // Do nothing
  }

  CoefficientSpace_h(const dolfin::Mesh* mesh):
    dolfin::FunctionSpace(mesh,
                          const dolfin::FiniteElement *(new dolfin::FiniteElement(ufc::finite_element*(new nsemomentum2d_finite_element_0()))),
                          const dolfin::DofMap*(new dolfin::DofMap(ufc::dofmap*(new nsemomentum2d_dofmap_0()), *mesh)))
  {
      // Do nothing
  }

  ~CoefficientSpace_h()
  {
  }

};

class CoefficientSpace_k: public dolfin::FunctionSpace
{
public:

  CoefficientSpace_k(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          const dolfin::FiniteElement* (new dolfin::FiniteElement(ufc::finite_element* (new nsemomentum2d_finite_element_0()))),
                          const dolfin::DofMap *(new dolfin::DofMap(ufc::dofmap* (new nsemomentum2d_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  CoefficientSpace_k(dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          const dolfin::FiniteElement* (new dolfin::FiniteElement(ufc::finite_element* (new nsemomentum2d_finite_element_0()))),
                          const dolfin::DofMap* (new dolfin::DofMap(ufc::dofmap *(new nsemomentum2d_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  CoefficientSpace_k(dolfin::Mesh*  mesh):
    dolfin::FunctionSpace(mesh,
                          const dolfin::FiniteElement *(new dolfin::FiniteElement(ufc::finite_element* (new nsemomentum2d_finite_element_0()))),
                          const dolfin::DofMap* (new dolfin::DofMap(ufc::dofmap*(new nsemomentum2d_dofmap_0()), *mesh)))
  {
      // Do nothing
  }

  CoefficientSpace_k(const dolfin::Mesh* mesh):
    dolfin::FunctionSpace(mesh,
                          const dolfin::FiniteElement *(new dolfin::FiniteElement(ufc::finite_element*(new nsemomentum2d_finite_element_0()))),
                          const dolfin::DofMap*(new dolfin::DofMap(ufc::dofmap*(new nsemomentum2d_dofmap_0()), *mesh)))
  {
      // Do nothing
  }

  ~CoefficientSpace_k()
  {
  }

};

class CoefficientSpace_nu: public dolfin::FunctionSpace
{
public:

  CoefficientSpace_nu(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          const dolfin::FiniteElement* (new dolfin::FiniteElement(ufc::finite_element* (new nsemomentum2d_finite_element_1()))),
                          const dolfin::DofMap *(new dolfin::DofMap(ufc::dofmap* (new nsemomentum2d_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  CoefficientSpace_nu(dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          const dolfin::FiniteElement* (new dolfin::FiniteElement(ufc::finite_element* (new nsemomentum2d_finite_element_1()))),
                          const dolfin::DofMap* (new dolfin::DofMap(ufc::dofmap *(new nsemomentum2d_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  CoefficientSpace_nu(dolfin::Mesh*  mesh):
    dolfin::FunctionSpace(mesh,
                          const dolfin::FiniteElement *(new dolfin::FiniteElement(ufc::finite_element* (new nsemomentum2d_finite_element_1()))),
                          const dolfin::DofMap* (new dolfin::DofMap(ufc::dofmap*(new nsemomentum2d_dofmap_1()), *mesh)))
  {
      // Do nothing
  }

  CoefficientSpace_nu(const dolfin::Mesh* mesh):
    dolfin::FunctionSpace(mesh,
                          const dolfin::FiniteElement *(new dolfin::FiniteElement(ufc::finite_element*(new nsemomentum2d_finite_element_1()))),
                          const dolfin::DofMap*(new dolfin::DofMap(ufc::dofmap*(new nsemomentum2d_dofmap_1()), *mesh)))
  {
      // Do nothing
  }

  ~CoefficientSpace_nu()
  {
  }

};

class CoefficientSpace_p: public dolfin::FunctionSpace
{
public:

  CoefficientSpace_p(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          const dolfin::FiniteElement* (new dolfin::FiniteElement(ufc::finite_element* (new nsemomentum2d_finite_element_1()))),
                          const dolfin::DofMap *(new dolfin::DofMap(ufc::dofmap* (new nsemomentum2d_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  CoefficientSpace_p(dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          const dolfin::FiniteElement* (new dolfin::FiniteElement(ufc::finite_element* (new nsemomentum2d_finite_element_1()))),
                          const dolfin::DofMap* (new dolfin::DofMap(ufc::dofmap *(new nsemomentum2d_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  CoefficientSpace_p(dolfin::Mesh*  mesh):
    dolfin::FunctionSpace(mesh,
                          const dolfin::FiniteElement *(new dolfin::FiniteElement(ufc::finite_element* (new nsemomentum2d_finite_element_1()))),
                          const dolfin::DofMap* (new dolfin::DofMap(ufc::dofmap*(new nsemomentum2d_dofmap_1()), *mesh)))
  {
      // Do nothing
  }

  CoefficientSpace_p(const dolfin::Mesh* mesh):
    dolfin::FunctionSpace(mesh,
                          const dolfin::FiniteElement *(new dolfin::FiniteElement(ufc::finite_element*(new nsemomentum2d_finite_element_1()))),
                          const dolfin::DofMap*(new dolfin::DofMap(ufc::dofmap*(new nsemomentum2d_dofmap_1()), *mesh)))
  {
      // Do nothing
  }

  ~CoefficientSpace_p()
  {
  }

};

class CoefficientSpace_u: public dolfin::FunctionSpace
{
public:

  CoefficientSpace_u(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          const dolfin::FiniteElement* (new dolfin::FiniteElement(ufc::finite_element* (new nsemomentum2d_finite_element_2()))),
                          const dolfin::DofMap *(new dolfin::DofMap(ufc::dofmap* (new nsemomentum2d_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  CoefficientSpace_u(dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          const dolfin::FiniteElement* (new dolfin::FiniteElement(ufc::finite_element* (new nsemomentum2d_finite_element_2()))),
                          const dolfin::DofMap* (new dolfin::DofMap(ufc::dofmap *(new nsemomentum2d_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  CoefficientSpace_u(dolfin::Mesh*  mesh):
    dolfin::FunctionSpace(mesh,
                          const dolfin::FiniteElement *(new dolfin::FiniteElement(ufc::finite_element* (new nsemomentum2d_finite_element_2()))),
                          const dolfin::DofMap* (new dolfin::DofMap(ufc::dofmap*(new nsemomentum2d_dofmap_2()), *mesh)))
  {
      // Do nothing
  }

  CoefficientSpace_u(const dolfin::Mesh* mesh):
    dolfin::FunctionSpace(mesh,
                          const dolfin::FiniteElement *(new dolfin::FiniteElement(ufc::finite_element*(new nsemomentum2d_finite_element_2()))),
                          const dolfin::DofMap*(new dolfin::DofMap(ufc::dofmap*(new nsemomentum2d_dofmap_2()), *mesh)))
  {
      // Do nothing
  }

  ~CoefficientSpace_u()
  {
  }

};

class CoefficientSpace_u0: public dolfin::FunctionSpace
{
public:

  CoefficientSpace_u0(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          const dolfin::FiniteElement* (new dolfin::FiniteElement(ufc::finite_element* (new nsemomentum2d_finite_element_2()))),
                          const dolfin::DofMap *(new dolfin::DofMap(ufc::dofmap* (new nsemomentum2d_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  CoefficientSpace_u0(dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          const dolfin::FiniteElement* (new dolfin::FiniteElement(ufc::finite_element* (new nsemomentum2d_finite_element_2()))),
                          const dolfin::DofMap* (new dolfin::DofMap(ufc::dofmap *(new nsemomentum2d_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  CoefficientSpace_u0(dolfin::Mesh*  mesh):
    dolfin::FunctionSpace(mesh,
                          const dolfin::FiniteElement *(new dolfin::FiniteElement(ufc::finite_element* (new nsemomentum2d_finite_element_2()))),
                          const dolfin::DofMap* (new dolfin::DofMap(ufc::dofmap*(new nsemomentum2d_dofmap_2()), *mesh)))
  {
      // Do nothing
  }

  CoefficientSpace_u0(const dolfin::Mesh* mesh):
    dolfin::FunctionSpace(mesh,
                          const dolfin::FiniteElement *(new dolfin::FiniteElement(ufc::finite_element*(new nsemomentum2d_finite_element_2()))),
                          const dolfin::DofMap*(new dolfin::DofMap(ufc::dofmap*(new nsemomentum2d_dofmap_2()), *mesh)))
  {
      // Do nothing
  }

  ~CoefficientSpace_u0()
  {
  }

};

class Form_0_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  Form_0_FunctionSpace_0(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          const dolfin::FiniteElement* (new dolfin::FiniteElement(ufc::finite_element* (new nsemomentum2d_finite_element_2()))),
                          const dolfin::DofMap *(new dolfin::DofMap(ufc::dofmap* (new nsemomentum2d_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  Form_0_FunctionSpace_0(dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          const dolfin::FiniteElement* (new dolfin::FiniteElement(ufc::finite_element* (new nsemomentum2d_finite_element_2()))),
                          const dolfin::DofMap* (new dolfin::DofMap(ufc::dofmap *(new nsemomentum2d_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  Form_0_FunctionSpace_0(dolfin::Mesh*  mesh):
    dolfin::FunctionSpace(mesh,
                          const dolfin::FiniteElement *(new dolfin::FiniteElement(ufc::finite_element* (new nsemomentum2d_finite_element_2()))),
                          const dolfin::DofMap* (new dolfin::DofMap(ufc::dofmap*(new nsemomentum2d_dofmap_2()), *mesh)))
  {
      // Do nothing
  }

  Form_0_FunctionSpace_0(const dolfin::Mesh* mesh):
    dolfin::FunctionSpace(mesh,
                          const dolfin::FiniteElement *(new dolfin::FiniteElement(ufc::finite_element*(new nsemomentum2d_finite_element_2()))),
                          const dolfin::DofMap*(new dolfin::DofMap(ufc::dofmap*(new nsemomentum2d_dofmap_2()), *mesh)))
  {
      // Do nothing
  }

  ~Form_0_FunctionSpace_0()
  {
  }

};

class Form_0_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  Form_0_FunctionSpace_1(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          const dolfin::FiniteElement* (new dolfin::FiniteElement(ufc::finite_element* (new nsemomentum2d_finite_element_2()))),
                          const dolfin::DofMap *(new dolfin::DofMap(ufc::dofmap* (new nsemomentum2d_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  Form_0_FunctionSpace_1(dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          const dolfin::FiniteElement* (new dolfin::FiniteElement(ufc::finite_element* (new nsemomentum2d_finite_element_2()))),
                          const dolfin::DofMap* (new dolfin::DofMap(ufc::dofmap *(new nsemomentum2d_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  Form_0_FunctionSpace_1(dolfin::Mesh*  mesh):
    dolfin::FunctionSpace(mesh,
                          const dolfin::FiniteElement *(new dolfin::FiniteElement(ufc::finite_element* (new nsemomentum2d_finite_element_2()))),
                          const dolfin::DofMap* (new dolfin::DofMap(ufc::dofmap*(new nsemomentum2d_dofmap_2()), *mesh)))
  {
      // Do nothing
  }

  Form_0_FunctionSpace_1(const dolfin::Mesh* mesh):
    dolfin::FunctionSpace(mesh,
                          const dolfin::FiniteElement *(new dolfin::FiniteElement(ufc::finite_element*(new nsemomentum2d_finite_element_2()))),
                          const dolfin::DofMap*(new dolfin::DofMap(ufc::dofmap*(new nsemomentum2d_dofmap_2()), *mesh)))
  {
      // Do nothing
  }

  ~Form_0_FunctionSpace_1()
  {
  }

};

typedef CoefficientSpace_u Form_0_FunctionSpace_2;

typedef CoefficientSpace_p Form_0_FunctionSpace_3;

typedef CoefficientSpace_nu Form_0_FunctionSpace_4;

typedef CoefficientSpace_h Form_0_FunctionSpace_5;

typedef CoefficientSpace_k Form_0_FunctionSpace_6;

typedef CoefficientSpace_u0 Form_0_FunctionSpace_7;

class Form_0: public dolfin::Form
{
public:

  // Constructor
  Form_0(const dolfin::FunctionSpace& V1, const dolfin::FunctionSpace& V0):
    dolfin::Form(2, 6), u(*this, 0), p(*this, 1), nu(*this, 2), h(*this, 3), k(*this, 4), u0(*this, 5)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);
    _function_spaces[1] = reference_to_no_delete_pointer(V1);

    _ufc_form = const ufc::form* (new nsemomentum2d_form_0());
  }

  // Constructor
  Form_0(const dolfin::FunctionSpace& V1, const dolfin::FunctionSpace& V0, const dolfin::GenericFunction& u, const dolfin::GenericFunction& p, const dolfin::GenericFunction& nu, const dolfin::GenericFunction& h, const dolfin::GenericFunction& k, const dolfin::GenericFunction& u0):
    dolfin::Form(2, 6), u(*this, 0), p(*this, 1), nu(*this, 2), h(*this, 3), k(*this, 4), u0(*this, 5)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);
    _function_spaces[1] = reference_to_no_delete_pointer(V1);

    this->u = u;
    this->p = p;
    this->nu = nu;
    this->h = h;
    this->k = k;
    this->u0 = u0;

    _ufc_form = const ufc::form* (new nsemomentum2d_form_0());
  }

  // Constructor
  Form_0(const dolfin::FunctionSpace& V1, const dolfin::FunctionSpace& V0, boost::shared_ptr<const dolfin::GenericFunction> u, boost::shared_ptr<const dolfin::GenericFunction> p, boost::shared_ptr<const dolfin::GenericFunction> nu, boost::shared_ptr<const dolfin::GenericFunction> h, boost::shared_ptr<const dolfin::GenericFunction> k, boost::shared_ptr<const dolfin::GenericFunction> u0):
    dolfin::Form(2, 6), u(*this, 0), p(*this, 1), nu(*this, 2), h(*this, 3), k(*this, 4), u0(*this, 5)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);
    _function_spaces[1] = reference_to_no_delete_pointer(V1);

    this->u = *u;
    this->p = *p;
    this->nu = *nu;
    this->h = *h;
    this->k = *k;
    this->u0 = *u0;

    _ufc_form = const ufc::form* (new nsemomentum2d_form_0());
  }

  // Constructor
  Form_0(boost::shared_ptr<const dolfin::FunctionSpace> V1, boost::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 6), u(*this, 0), p(*this, 1), nu(*this, 2), h(*this, 3), k(*this, 4), u0(*this, 5)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = const ufc::form* (new nsemomentum2d_form_0());
  }

  // Constructor
  Form_0(boost::shared_ptr<const dolfin::FunctionSpace> V1, boost::shared_ptr<const dolfin::FunctionSpace> V0, const dolfin::GenericFunction& u, const dolfin::GenericFunction& p, const dolfin::GenericFunction& nu, const dolfin::GenericFunction& h, const dolfin::GenericFunction& k, const dolfin::GenericFunction& u0):
    dolfin::Form(2, 6), u(*this, 0), p(*this, 1), nu(*this, 2), h(*this, 3), k(*this, 4), u0(*this, 5)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->u = u;
    this->p = p;
    this->nu = nu;
    this->h = h;
    this->k = k;
    this->u0 = u0;

    _ufc_form = const ufc::form* (new nsemomentum2d_form_0());
  }

  // Constructor
  Form_0(boost::shared_ptr<const dolfin::FunctionSpace> V1, boost::shared_ptr<const dolfin::FunctionSpace> V0, boost::shared_ptr<const dolfin::GenericFunction> u, boost::shared_ptr<const dolfin::GenericFunction> p, boost::shared_ptr<const dolfin::GenericFunction> nu, boost::shared_ptr<const dolfin::GenericFunction> h, boost::shared_ptr<const dolfin::GenericFunction> k, boost::shared_ptr<const dolfin::GenericFunction> u0):
    dolfin::Form(2, 6), u(*this, 0), p(*this, 1), nu(*this, 2), h(*this, 3), k(*this, 4), u0(*this, 5)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->u = *u;
    this->p = *p;
    this->nu = *nu;
    this->h = *h;
    this->k = *k;
    this->u0 = *u0;

    _ufc_form = const ufc::form* (new nsemomentum2d_form_0());
  }

  // Destructor
  ~Form_0()
  {}

  /// Return the number of the coefficient with this name
  virtual dolfin::uint coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;
    else if (name == "p")
      return 1;
    else if (name == "nu")
      return 2;
    else if (name == "h")
      return 3;
    else if (name == "k")
      return 4;
    else if (name == "u0")
      return 5;

    dolfin::dolfin_error("generated code for class Form",
                         "access coeficient data",
                         "Invalid coeficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(dolfin::uint i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    case 1:
      return "p";
    case 2:
      return "nu";
    case 3:
      return "h";
    case 4:
      return "k";
    case 5:
      return "u0";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coeficient data",
                         "Invalid coeficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_0_FunctionSpace_0 TestSpace;
  typedef Form_0_FunctionSpace_1 TrialSpace;
  typedef Form_0_FunctionSpace_2 CoefficientSpace_u;
  typedef Form_0_FunctionSpace_3 CoefficientSpace_p;
  typedef Form_0_FunctionSpace_4 CoefficientSpace_nu;
  typedef Form_0_FunctionSpace_5 CoefficientSpace_h;
  typedef Form_0_FunctionSpace_6 CoefficientSpace_k;
  typedef Form_0_FunctionSpace_7 CoefficientSpace_u0;

  // Coefficients
  dolfin::CoefficientAssigner u;
  dolfin::CoefficientAssigner p;
  dolfin::CoefficientAssigner nu;
  dolfin::CoefficientAssigner h;
  dolfin::CoefficientAssigner k;
  dolfin::CoefficientAssigner u0;
};

class Form_1_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  Form_1_FunctionSpace_0(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          const dolfin::FiniteElement* (new dolfin::FiniteElement(ufc::finite_element* (new nsemomentum2d_finite_element_2()))),
                          const dolfin::DofMap *(new dolfin::DofMap(ufc::dofmap* (new nsemomentum2d_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  Form_1_FunctionSpace_0(dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          const dolfin::FiniteElement* (new dolfin::FiniteElement(ufc::finite_element* (new nsemomentum2d_finite_element_2()))),
                          const dolfin::DofMap* (new dolfin::DofMap(ufc::dofmap *(new nsemomentum2d_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  Form_1_FunctionSpace_0(dolfin::Mesh*  mesh):
    dolfin::FunctionSpace(mesh,
                          const dolfin::FiniteElement *(new dolfin::FiniteElement(ufc::finite_element* (new nsemomentum2d_finite_element_2()))),
                          const dolfin::DofMap* (new dolfin::DofMap(ufc::dofmap*(new nsemomentum2d_dofmap_2()), *mesh)))
  {
      // Do nothing
  }

  Form_1_FunctionSpace_0(const dolfin::Mesh* mesh):
    dolfin::FunctionSpace(mesh,
                          const dolfin::FiniteElement *(new dolfin::FiniteElement(ufc::finite_element*(new nsemomentum2d_finite_element_2()))),
                          const dolfin::DofMap*(new dolfin::DofMap(ufc::dofmap*(new nsemomentum2d_dofmap_2()), *mesh)))
  {
      // Do nothing
  }

  ~Form_1_FunctionSpace_0()
  {
  }

};

typedef CoefficientSpace_u Form_1_FunctionSpace_1;

typedef CoefficientSpace_p Form_1_FunctionSpace_2;

typedef CoefficientSpace_nu Form_1_FunctionSpace_3;

typedef CoefficientSpace_h Form_1_FunctionSpace_4;

typedef CoefficientSpace_k Form_1_FunctionSpace_5;

typedef CoefficientSpace_u0 Form_1_FunctionSpace_6;

class Form_1: public dolfin::Form
{
public:

  // Constructor
  Form_1(const dolfin::FunctionSpace& V0):
    dolfin::Form(1, 6), u(*this, 0), p(*this, 1), nu(*this, 2), h(*this, 3), k(*this, 4), u0(*this, 5)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    _ufc_form = const ufc::form* (new nsemomentum2d_form_1());
  }

  // Constructor
  Form_1(const dolfin::FunctionSpace& V0, const dolfin::GenericFunction& u, const dolfin::GenericFunction& p, const dolfin::GenericFunction& nu, const dolfin::GenericFunction& h, const dolfin::GenericFunction& k, const dolfin::GenericFunction& u0):
    dolfin::Form(1, 6), u(*this, 0), p(*this, 1), nu(*this, 2), h(*this, 3), k(*this, 4), u0(*this, 5)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    this->u = u;
    this->p = p;
    this->nu = nu;
    this->h = h;
    this->k = k;
    this->u0 = u0;

    _ufc_form = const ufc::form* (new nsemomentum2d_form_1());
  }

  // Constructor
  Form_1(const dolfin::FunctionSpace& V0, boost::shared_ptr<const dolfin::GenericFunction> u, boost::shared_ptr<const dolfin::GenericFunction> p, boost::shared_ptr<const dolfin::GenericFunction> nu, boost::shared_ptr<const dolfin::GenericFunction> h, boost::shared_ptr<const dolfin::GenericFunction> k, boost::shared_ptr<const dolfin::GenericFunction> u0):
    dolfin::Form(1, 6), u(*this, 0), p(*this, 1), nu(*this, 2), h(*this, 3), k(*this, 4), u0(*this, 5)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    this->u = *u;
    this->p = *p;
    this->nu = *nu;
    this->h = *h;
    this->k = *k;
    this->u0 = *u0;

    _ufc_form = const ufc::form* (new nsemomentum2d_form_1());
  }

  // Constructor
  Form_1(boost::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 6), u(*this, 0), p(*this, 1), nu(*this, 2), h(*this, 3), k(*this, 4), u0(*this, 5)
  {
    _function_spaces[0] = V0;

    _ufc_form = const ufc::form* (new nsemomentum2d_form_1());
  }

  // Constructor
  Form_1(boost::shared_ptr<const dolfin::FunctionSpace> V0, const dolfin::GenericFunction& u, const dolfin::GenericFunction& p, const dolfin::GenericFunction& nu, const dolfin::GenericFunction& h, const dolfin::GenericFunction& k, const dolfin::GenericFunction& u0):
    dolfin::Form(1, 6), u(*this, 0), p(*this, 1), nu(*this, 2), h(*this, 3), k(*this, 4), u0(*this, 5)
  {
    _function_spaces[0] = V0;

    this->u = u;
    this->p = p;
    this->nu = nu;
    this->h = h;
    this->k = k;
    this->u0 = u0;

    _ufc_form = const ufc::form* (new nsemomentum2d_form_1());
  }

  // Constructor
  Form_1(boost::shared_ptr<const dolfin::FunctionSpace> V0, boost::shared_ptr<const dolfin::GenericFunction> u, boost::shared_ptr<const dolfin::GenericFunction> p, boost::shared_ptr<const dolfin::GenericFunction> nu, boost::shared_ptr<const dolfin::GenericFunction> h, boost::shared_ptr<const dolfin::GenericFunction> k, boost::shared_ptr<const dolfin::GenericFunction> u0):
    dolfin::Form(1, 6), u(*this, 0), p(*this, 1), nu(*this, 2), h(*this, 3), k(*this, 4), u0(*this, 5)
  {
    _function_spaces[0] = V0;

    this->u = *u;
    this->p = *p;
    this->nu = *nu;
    this->h = *h;
    this->k = *k;
    this->u0 = *u0;

    _ufc_form = const ufc::form* (new nsemomentum2d_form_1());
  }

  // Destructor
  ~Form_1()
  {}

  /// Return the number of the coefficient with this name
  virtual dolfin::uint coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;
    else if (name == "p")
      return 1;
    else if (name == "nu")
      return 2;
    else if (name == "h")
      return 3;
    else if (name == "k")
      return 4;
    else if (name == "u0")
      return 5;

    dolfin::dolfin_error("generated code for class Form",
                         "access coeficient data",
                         "Invalid coeficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(dolfin::uint i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    case 1:
      return "p";
    case 2:
      return "nu";
    case 3:
      return "h";
    case 4:
      return "k";
    case 5:
      return "u0";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coeficient data",
                         "Invalid coeficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_1_FunctionSpace_0 TestSpace;
  typedef Form_1_FunctionSpace_1 CoefficientSpace_u;
  typedef Form_1_FunctionSpace_2 CoefficientSpace_p;
  typedef Form_1_FunctionSpace_3 CoefficientSpace_nu;
  typedef Form_1_FunctionSpace_4 CoefficientSpace_h;
  typedef Form_1_FunctionSpace_5 CoefficientSpace_k;
  typedef Form_1_FunctionSpace_6 CoefficientSpace_u0;

  // Coefficients
  dolfin::CoefficientAssigner u;
  dolfin::CoefficientAssigner p;
  dolfin::CoefficientAssigner nu;
  dolfin::CoefficientAssigner h;
  dolfin::CoefficientAssigner k;
  dolfin::CoefficientAssigner u0;
};

// Class typedefs
typedef Form_0 BilinearForm;
typedef Form_0 JacobianForm;
typedef Form_1 LinearForm;
typedef Form_1 ResidualForm;
typedef Form_0::TestSpace FunctionSpace;

}
#else 

// DOLFIN wrappers
#include <dolfin/fem/Form.h>

class NSEMomentum2DBilinearForm : public dolfin::Form
{
public:

  NSEMomentum2DBilinearForm(dolfin::Function& w0, dolfin::Function& w1, dolfin::Function& w2, dolfin::Function& w3, dolfin::Function& w4, dolfin::Function& w5) : dolfin::Form()
  {
    __coefficients.push_back(&w0);
    __coefficients.push_back(&w1);
    __coefficients.push_back(&w2);
    __coefficients.push_back(&w3);
    __coefficients.push_back(&w4);
    __coefficients.push_back(&w5);
  }

  /// Return UFC form
  virtual const ufc::form& form() const
  {
    return __form;
  }
  
  /// Return array of coefficients
  virtual const dolfin::Array<dolfin::Function*>& coefficients() const
  {
    return __coefficients;
  }

private:

  // UFC form
  nsemomentum2d_form_0 __form;

  /// Array of coefficients
  dolfin::Array<dolfin::Function*> __coefficients;

};

class NSEMomentum2DLinearForm : public dolfin::Form
{
public:

  NSEMomentum2DLinearForm(dolfin::Function& w0, dolfin::Function& w1, dolfin::Function& w2, dolfin::Function& w3, dolfin::Function& w4, dolfin::Function& w5) : dolfin::Form()
  {
    __coefficients.push_back(&w0);
    __coefficients.push_back(&w1);
    __coefficients.push_back(&w2);
    __coefficients.push_back(&w3);
    __coefficients.push_back(&w4);
    __coefficients.push_back(&w5);
  }

  /// Return UFC form
  virtual const ufc::form& form() const
  {
    return __form;
  }
  
  /// Return array of coefficients
  virtual const dolfin::Array<dolfin::Function*>& coefficients() const
  {
    return __coefficients;
  }

private:

  // UFC form
  nsemomentum2d_form_1 __form;

  /// Array of coefficients
  dolfin::Array<dolfin::Function*> __coefficients;

};


#endif 


#endif
