// This code conforms with the UFC specification version 2.0.5
// and was automatically generated by FFC version 1.0.0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   False
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'dolfin'
//   log_level:                      20
//   log_prefix:                     ''
//   optimize:                       True
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              'auto'
//   quadrature_rule:                'auto'
//   representation:                 'quadrature'
//   split:                          True
//   swig_binary:                    'swig'
//   swig_path:                      ''

#include "NSEDensity3D.h"

/// Constructor
nsedensity3d_finite_element_0::nsedensity3d_finite_element_0() : ufc::finite_element()
{
    // Do nothing
}

/// Destructor
nsedensity3d_finite_element_0::~nsedensity3d_finite_element_0()
{
    // Do nothing
}

/// Return a string identifying the finite element
const char* nsedensity3d_finite_element_0::signature() const
{
    return "FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None)";
}

/// Return the cell shape
ufc::shape nsedensity3d_finite_element_0::cell_shape() const
{
    return ufc::tetrahedron;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the cell shape
unsigned int nsedensity3d_finite_element_0::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the cell shape
unsigned int nsedensity3d_finite_element_0::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the finite element function space
unsigned int nsedensity3d_finite_element_0::space_dimension() const
{
    return 1;
}

/// Return the rank of the value space
unsigned int nsedensity3d_finite_element_0::value_rank() const
{
    return 0;
}

/// Return the dimension of the value space for axis i
unsigned int nsedensity3d_finite_element_0::value_dimension(unsigned int i) const
{
    return 1;
}

/// Evaluate basis function i at given point in cell
void nsedensity3d_finite_element_0::evaluate_basis(unsigned int i,
                                   double* values,
                                   const double* coordinates,
                                   const ufc::cell& c) const
{
    // Extract vertex coordinates
    
    // Compute Jacobian of affine map from reference cell
    
    // Compute sub determinants
    
    // Compute determinant of Jacobian
    
    // Compute inverse of Jacobian
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Reset values.
    *values = 0.0;
    
    // Array of basisvalues.
    double basisvalues[1] = {0.0};
    
    // Declare helper variables.
    
    // Compute basisvalues.
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients.
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s).
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    }// end loop over 'r'
}

/// Evaluate all basis functions at given point in cell
void nsedensity3d_finite_element_0::evaluate_basis_all(double* values,
                                       const double* coordinates,
                                       const ufc::cell& c) const
{
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, coordinates, c);
}

/// Evaluate order n derivatives of basis function i at given point in cell
void nsedensity3d_finite_element_0::evaluate_basis_derivatives(unsigned int i,
                                               unsigned int n,
                                               double* values,
                                               const double* coordinates,
                                               const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K_00, K_01, K_02}, {K_10, K_11, K_12}, {K_20, K_21, K_22}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    
    // Array of basisvalues.
    double basisvalues[1] = {0.0};
    
    // Declare helper variables.
    
    // Compute basisvalues.
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients.
    static const double coefficients0[1] = \
    {1.0};
    
    // Tables of derivatives of the polynomial base (transpose).
    static const double dmats0[1][1] = \
    {{0.0}};
    
    static const double dmats1[1][1] = \
    {{0.0}};
    
    static const double dmats2[1][1] = \
    {{0.0}};
    
    // Compute reference derivatives.
    // Declare pointer to array of derivatives on FIAT element.
    double *derivatives = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      derivatives[r] = 0.0;
    }// end loop over 'r'
    
    // Declare derivative matrix (of polynomial basis).
    double dmats[1][1] = \
    {{1.0}};
    
    // Declare (auxiliary) derivative matrix (of polynomial basis).
    double dmats_old[1][1] = \
    {{1.0}};
    
    // Loop possible derivatives.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      // Resetting dmats values to compute next derivative.
      for (unsigned int t = 0; t < 1; t++)
      {
        for (unsigned int u = 0; u < 1; u++)
        {
          dmats[t][u] = 0.0;
          if (t == u)
          {
          dmats[t][u] = 1.0;
          }
          
        }// end loop over 'u'
      }// end loop over 't'
      
      // Looping derivative order to generate dmats.
      for (unsigned int s = 0; s < n; s++)
      {
        // Updating dmats_old with new values and resetting dmats.
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            dmats_old[t][u] = dmats[t][u];
            dmats[t][u] = 0.0;
          }// end loop over 'u'
        }// end loop over 't'
        
        // Update dmats using an inner product.
        if (combinations[r][s] == 0)
        {
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            for (unsigned int tu = 0; tu < 1; tu++)
            {
              dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
            }// end loop over 'tu'
          }// end loop over 'u'
        }// end loop over 't'
        }
        
        if (combinations[r][s] == 1)
        {
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            for (unsigned int tu = 0; tu < 1; tu++)
            {
              dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
            }// end loop over 'tu'
          }// end loop over 'u'
        }// end loop over 't'
        }
        
        if (combinations[r][s] == 2)
        {
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            for (unsigned int tu = 0; tu < 1; tu++)
            {
              dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
            }// end loop over 'tu'
          }// end loop over 'u'
        }// end loop over 't'
        }
        
      }// end loop over 's'
      for (unsigned int s = 0; s < 1; s++)
      {
        for (unsigned int t = 0; t < 1; t++)
        {
          derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
        }// end loop over 't'
      }// end loop over 's'
    }// end loop over 'r'
    
    // Transform derivatives back to physical element
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r] += transform[r][s]*derivatives[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      delete [] combinations[r];
    }// end loop over 'r'
    delete [] combinations;
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      delete [] transform[r];
    }// end loop over 'r'
    delete [] transform;
}

/// Evaluate order n derivatives of all basis functions at given point in cell
void nsedensity3d_finite_element_0::evaluate_basis_derivatives_all(unsigned int n,
                                                   double* values,
                                                   const double* coordinates,
                                                   const ufc::cell& c) const
{
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, coordinates, c);
}

/// Evaluate linear functional for dof i on the function f
double nsedensity3d_finite_element_0::evaluate_dof(unsigned int i,
                                   const ufc::function& f,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
      y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
      y[2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

/// Evaluate linear functionals for all dofs on the function f
void nsedensity3d_finite_element_0::evaluate_dofs(double* values,
                                  const ufc::function& f,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    y[2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
}

/// Interpolate vertex values from dof values
void nsedensity3d_finite_element_0::interpolate_vertex_values(double* vertex_values,
                                              const double* dof_values,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Map coordinate xhat from reference cell to coordinate x in cell
void nsedensity3d_finite_element_0::map_from_reference_cell(double* x,
                                            const double* xhat,
                                            const ufc::cell& c) const
{
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
}

/// Map from coordinate x in cell to coordinate xhat in reference cell
void nsedensity3d_finite_element_0::map_to_reference_cell(double* xhat,
                                          const double* x,
                                          const ufc::cell& c) const
{
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
}
#endif
/// Return the number of sub elements (for a mixed element)
unsigned int nsedensity3d_finite_element_0::num_sub_elements() const
{
    return 0;
}

/// Create a new finite element for sub element i (for a mixed element)
ufc::finite_element* nsedensity3d_finite_element_0::create_sub_element(unsigned int i) const
{
    return 0;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Create a new class instance
ufc::finite_element* nsedensity3d_finite_element_0::create() const
{
    return new nsedensity3d_finite_element_0();
}
#endif


/// Constructor
nsedensity3d_finite_element_1::nsedensity3d_finite_element_1() : ufc::finite_element()
{
    // Do nothing
}

/// Destructor
nsedensity3d_finite_element_1::~nsedensity3d_finite_element_1()
{
    // Do nothing
}

/// Return a string identifying the finite element
const char* nsedensity3d_finite_element_1::signature() const
{
    return "FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)";
}

/// Return the cell shape
ufc::shape nsedensity3d_finite_element_1::cell_shape() const
{
    return ufc::tetrahedron;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the cell shape
unsigned int nsedensity3d_finite_element_1::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the cell shape
unsigned int nsedensity3d_finite_element_1::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the finite element function space
unsigned int nsedensity3d_finite_element_1::space_dimension() const
{
    return 4;
}

/// Return the rank of the value space
unsigned int nsedensity3d_finite_element_1::value_rank() const
{
    return 0;
}

/// Return the dimension of the value space for axis i
unsigned int nsedensity3d_finite_element_1::value_dimension(unsigned int i) const
{
    return 1;
}

/// Evaluate basis function i at given point in cell
void nsedensity3d_finite_element_1::evaluate_basis(unsigned int i,
                                   double* values,
                                   const double* coordinates,
                                   const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[3][0] + x[2][0] + x[1][0] - x[0][0];
    const double C1 = x[3][1] + x[2][1] + x[1][1] - x[0][1];
    const double C2 = x[3][2] + x[2][2] + x[1][2] - x[0][2];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*coordinates[0] - C0) + d_10*(2.0*coordinates[1] - C1) + d_20*(2.0*coordinates[2] - C2)) / detJ;
    double Y = (d_01*(2.0*coordinates[0] - C0) + d_11*(2.0*coordinates[1] - C1) + d_21*(2.0*coordinates[2] - C2)) / detJ;
    double Z = (d_02*(2.0*coordinates[0] - C0) + d_12*(2.0*coordinates[1] - C1) + d_22*(2.0*coordinates[2] - C2)) / detJ;
    
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
}

/// Evaluate all basis functions at given point in cell
void nsedensity3d_finite_element_1::evaluate_basis_all(double* values,
                                       const double* coordinates,
                                       const ufc::cell& c) const
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 4; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
}

/// Evaluate order n derivatives of basis function i at given point in cell
void nsedensity3d_finite_element_1::evaluate_basis_derivatives(unsigned int i,
                                               unsigned int n,
                                               double* values,
                                               const double* coordinates,
                                               const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Compute constants
    const double C0 = x[3][0] + x[2][0] + x[1][0] - x[0][0];
    const double C1 = x[3][1] + x[2][1] + x[1][1] - x[0][1];
    const double C2 = x[3][2] + x[2][2] + x[1][2] - x[0][2];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*coordinates[0] - C0) + d_10*(2.0*coordinates[1] - C1) + d_20*(2.0*coordinates[2] - C2)) / detJ;
    double Y = (d_01*(2.0*coordinates[0] - C0) + d_11*(2.0*coordinates[1] - C1) + d_21*(2.0*coordinates[2] - C2)) / detJ;
    double Z = (d_02*(2.0*coordinates[0] - C0) + d_12*(2.0*coordinates[1] - C1) + d_22*(2.0*coordinates[2] - C2)) / detJ;
    
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K_00, K_01, K_02}, {K_10, K_11, K_12}, {K_20, K_21, K_22}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
}

/// Evaluate order n derivatives of all basis functions at given point in cell
void nsedensity3d_finite_element_1::evaluate_basis_derivatives_all(unsigned int n,
                                                   double* values,
                                                   const double* coordinates,
                                                   const ufc::cell& c) const
{
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
}

/// Evaluate linear functional for dof i on the function f
double nsedensity3d_finite_element_1::evaluate_dof(unsigned int i,
                                   const ufc::function& f,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

/// Evaluate linear functionals for all dofs on the function f
void nsedensity3d_finite_element_1::evaluate_dofs(double* values,
                                  const ufc::function& f,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
}

/// Interpolate vertex values from dof values
void nsedensity3d_finite_element_1::interpolate_vertex_values(double* vertex_values,
                                              const double* dof_values,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Map coordinate xhat from reference cell to coordinate x in cell
void nsedensity3d_finite_element_1::map_from_reference_cell(double* x,
                                            const double* xhat,
                                            const ufc::cell& c) const
{
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
}

/// Map from coordinate x in cell to coordinate xhat in reference cell
void nsedensity3d_finite_element_1::map_to_reference_cell(double* xhat,
                                          const double* x,
                                          const ufc::cell& c) const
{
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
}
#endif
/// Return the number of sub elements (for a mixed element)
unsigned int nsedensity3d_finite_element_1::num_sub_elements() const
{
    return 0;
}

/// Create a new finite element for sub element i (for a mixed element)
ufc::finite_element* nsedensity3d_finite_element_1::create_sub_element(unsigned int i) const
{
    return 0;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Create a new class instance
ufc::finite_element* nsedensity3d_finite_element_1::create() const
{
    return new nsedensity3d_finite_element_1();
}
#endif


/// Constructor
nsedensity3d_finite_element_2::nsedensity3d_finite_element_2() : ufc::finite_element()
{
    // Do nothing
}

/// Destructor
nsedensity3d_finite_element_2::~nsedensity3d_finite_element_2()
{
    // Do nothing
}

/// Return a string identifying the finite element
const char* nsedensity3d_finite_element_2::signature() const
{
    return "VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None)";
}

/// Return the cell shape
ufc::shape nsedensity3d_finite_element_2::cell_shape() const
{
    return ufc::tetrahedron;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the cell shape
unsigned int nsedensity3d_finite_element_2::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the cell shape
unsigned int nsedensity3d_finite_element_2::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the finite element function space
unsigned int nsedensity3d_finite_element_2::space_dimension() const
{
    return 12;
}

/// Return the rank of the value space
unsigned int nsedensity3d_finite_element_2::value_rank() const
{
    return 1;
}

/// Return the dimension of the value space for axis i
unsigned int nsedensity3d_finite_element_2::value_dimension(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
}

/// Evaluate basis function i at given point in cell
void nsedensity3d_finite_element_2::evaluate_basis(unsigned int i,
                                   double* values,
                                   const double* coordinates,
                                   const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[3][0] + x[2][0] + x[1][0] - x[0][0];
    const double C1 = x[3][1] + x[2][1] + x[1][1] - x[0][1];
    const double C2 = x[3][2] + x[2][2] + x[1][2] - x[0][2];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*coordinates[0] - C0) + d_10*(2.0*coordinates[1] - C1) + d_20*(2.0*coordinates[2] - C2)) / detJ;
    double Y = (d_01*(2.0*coordinates[0] - C0) + d_11*(2.0*coordinates[1] - C1) + d_21*(2.0*coordinates[2] - C2)) / detJ;
    double Z = (d_02*(2.0*coordinates[0] - C0) + d_12*(2.0*coordinates[1] - C1) + d_22*(2.0*coordinates[2] - C2)) / detJ;
    
    
    // Reset values.
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
}

/// Evaluate all basis functions at given point in cell
void nsedensity3d_finite_element_2::evaluate_basis_all(double* values,
                                       const double* coordinates,
                                       const ufc::cell& c) const
{
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 12; r++)
    {
      evaluate_basis(r, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
}

/// Evaluate order n derivatives of basis function i at given point in cell
void nsedensity3d_finite_element_2::evaluate_basis_derivatives(unsigned int i,
                                               unsigned int n,
                                               double* values,
                                               const double* coordinates,
                                               const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Compute constants
    const double C0 = x[3][0] + x[2][0] + x[1][0] - x[0][0];
    const double C1 = x[3][1] + x[2][1] + x[1][1] - x[0][1];
    const double C2 = x[3][2] + x[2][2] + x[1][2] - x[0][2];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*coordinates[0] - C0) + d_10*(2.0*coordinates[1] - C1) + d_20*(2.0*coordinates[2] - C2)) / detJ;
    double Y = (d_01*(2.0*coordinates[0] - C0) + d_11*(2.0*coordinates[1] - C1) + d_21*(2.0*coordinates[2] - C2)) / detJ;
    double Z = (d_02*(2.0*coordinates[0] - C0) + d_12*(2.0*coordinates[1] - C1) + d_22*(2.0*coordinates[2] - C2)) / detJ;
    
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K_00, K_01, K_02}, {K_10, K_11, K_12}, {K_20, K_21, K_22}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
}

/// Evaluate order n derivatives of all basis functions at given point in cell
void nsedensity3d_finite_element_2::evaluate_basis_derivatives_all(unsigned int n,
                                                   double* values,
                                                   const double* coordinates,
                                                   const ufc::cell& c) const
{
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[3*num_derivatives];
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
}

/// Evaluate linear functional for dof i on the function f
double nsedensity3d_finite_element_2::evaluate_dof(unsigned int i,
                                   const ufc::function& f,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[3];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 9:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 10:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 11:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
}

/// Evaluate linear functionals for all dofs on the function f
void nsedensity3d_finite_element_2::evaluate_dofs(double* values,
                                  const ufc::function& f,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[3];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[8] = vals[2];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[9] = vals[2];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[10] = vals[2];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[11] = vals[2];
}

/// Interpolate vertex values from dof values
void nsedensity3d_finite_element_2::interpolate_vertex_values(double* vertex_values,
                                              const double* dof_values,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[4] = dof_values[5];
    vertex_values[7] = dof_values[6];
    vertex_values[10] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[5] = dof_values[9];
    vertex_values[8] = dof_values[10];
    vertex_values[11] = dof_values[11];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Map coordinate xhat from reference cell to coordinate x in cell
void nsedensity3d_finite_element_2::map_from_reference_cell(double* x,
                                            const double* xhat,
                                            const ufc::cell& c) const
{
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
}

/// Map from coordinate x in cell to coordinate xhat in reference cell
void nsedensity3d_finite_element_2::map_to_reference_cell(double* xhat,
                                          const double* x,
                                          const ufc::cell& c) const
{
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
}
#endif
/// Return the number of sub elements (for a mixed element)
unsigned int nsedensity3d_finite_element_2::num_sub_elements() const
{
    return 3;
}

/// Create a new finite element for sub element i (for a mixed element)
ufc::finite_element* nsedensity3d_finite_element_2::create_sub_element(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsedensity3d_finite_element_1();
        break;
      }
    case 1:
      {
        return new nsedensity3d_finite_element_1();
        break;
      }
    case 2:
      {
        return new nsedensity3d_finite_element_1();
        break;
      }
    }
    
    return 0;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Create a new class instance
ufc::finite_element* nsedensity3d_finite_element_2::create() const
{
    return new nsedensity3d_finite_element_2();
}
#endif

/// Constructor


#ifndef UFC_BACKWARD_COMPATIBILITY
nsedensity3d_dofmap_0::nsedensity3d_dofmap_0() : ufc::dofmap()
#else
nsedensity3d_dofmap_0::nsedensity3d_dofmap_0() : ufc::dof_map()
#endif
{
    _global_dimension = 0;
}

/// Destructor
nsedensity3d_dofmap_0::~nsedensity3d_dofmap_0()
{
    // Do nothing
}

/// Return a string identifying the dofmap
const char* nsedensity3d_dofmap_0::signature() const
{
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None)";
}

/// Return true iff mesh entities of topological dimension d are needed
bool nsedensity3d_dofmap_0::needs_mesh_entities(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return true;
        break;
      }
    }
    
    return false;
}

/// Initialize dofmap for mesh (return true iff init_cell() is needed)
bool nsedensity3d_dofmap_0::init_mesh(const ufc::mesh& m)
{
    _global_dimension = m.num_entities[3];
    return false;
}

/// Initialize dofmap for given cell
void nsedensity3d_dofmap_0::init_cell(const ufc::mesh& m,
                              const ufc::cell& c)
{
    // Do nothing
}

/// Finish initialization of dofmap for cells
void nsedensity3d_dofmap_0::init_cell_finalize()
{
    // Do nothing
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the associated cell shape
unsigned int nsedensity3d_dofmap_0::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the associated cell shape
unsigned int nsedensity3d_dofmap_0::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the global finite element function space
unsigned int nsedensity3d_dofmap_0::global_dimension() const
{
    return _global_dimension;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the dimension of the local finite element function space for a cell
unsigned int nsedensity3d_dofmap_0::local_dimension(const ufc::cell& c) const
{
    return 1;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsedensity3d_dofmap_0::max_local_dimension() const
{
    return 1;
}
#else

/// Return the dimension of the local finite element function space for a cell
unsigned int nsedensity3d_dofmap_0::local_dimension() const
{
    return 1;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsedensity3d_dofmap_0::geometric_dimension() const
{
    return 3;
}

#endif
/// Return the number of dofs on each cell facet
unsigned int nsedensity3d_dofmap_0::num_facet_dofs() const
{
    return 0;
}

/// Return the number of dofs associated with each cell entity of dimension d
unsigned int nsedensity3d_dofmap_0::num_entity_dofs(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
}

/// Tabulate the local-to-global mapping of dofs on a cell
void nsedensity3d_dofmap_0::tabulate_dofs(unsigned int* dofs,
                                  const ufc::mesh& m,
                                  const ufc::cell& c) const
{
    dofs[0] = c.entity_indices[3][0];
}

/// Tabulate the local-to-local mapping from facet dofs to cell dofs
void nsedensity3d_dofmap_0::tabulate_facet_dofs(unsigned int* dofs,
                                        unsigned int facet) const
{
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
}

/// Tabulate the local-to-local mapping of dofs on entity (d, i)
void nsedensity3d_dofmap_0::tabulate_entity_dofs(unsigned int* dofs,
                                  unsigned int d, unsigned int i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
}

/// Tabulate the coordinates of all dofs on a cell
void nsedensity3d_dofmap_0::tabulate_coordinates(double** coordinates,
                                         const ufc::cell& c) const
{
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[0][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[0][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsedensity3d_dofmap_0::num_sub_dofmaps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dofmap* nsedensity3d_dofmap_0::create_sub_dofmap(unsigned int i) const
{
    return 0;
}

/// Create a new class instance
ufc::dofmap* nsedensity3d_dofmap_0::create() const
{
    return new nsedensity3d_dofmap_0();
}
#else

/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsedensity3d_dofmap_0::num_sub_dof_maps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dof_map* nsedensity3d_dofmap_0::create_sub_dof_map(unsigned int i) const
{
    return 0;
}

#endif

/// Constructor


#ifndef UFC_BACKWARD_COMPATIBILITY
nsedensity3d_dofmap_1::nsedensity3d_dofmap_1() : ufc::dofmap()
#else
nsedensity3d_dofmap_1::nsedensity3d_dofmap_1() : ufc::dof_map()
#endif
{
    _global_dimension = 0;
}

/// Destructor
nsedensity3d_dofmap_1::~nsedensity3d_dofmap_1()
{
    // Do nothing
}

/// Return a string identifying the dofmap
const char* nsedensity3d_dofmap_1::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)";
}

/// Return true iff mesh entities of topological dimension d are needed
bool nsedensity3d_dofmap_1::needs_mesh_entities(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
}

/// Initialize dofmap for mesh (return true iff init_cell() is needed)
bool nsedensity3d_dofmap_1::init_mesh(const ufc::mesh& m)
{
    _global_dimension = m.num_entities[0];
    return false;
}

/// Initialize dofmap for given cell
void nsedensity3d_dofmap_1::init_cell(const ufc::mesh& m,
                              const ufc::cell& c)
{
    // Do nothing
}

/// Finish initialization of dofmap for cells
void nsedensity3d_dofmap_1::init_cell_finalize()
{
    // Do nothing
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the associated cell shape
unsigned int nsedensity3d_dofmap_1::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the associated cell shape
unsigned int nsedensity3d_dofmap_1::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the global finite element function space
unsigned int nsedensity3d_dofmap_1::global_dimension() const
{
    return _global_dimension;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the dimension of the local finite element function space for a cell
unsigned int nsedensity3d_dofmap_1::local_dimension(const ufc::cell& c) const
{
    return 4;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsedensity3d_dofmap_1::max_local_dimension() const
{
    return 4;
}
#else

/// Return the dimension of the local finite element function space for a cell
unsigned int nsedensity3d_dofmap_1::local_dimension() const
{
    return 4;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsedensity3d_dofmap_1::geometric_dimension() const
{
    return 3;
}

#endif
/// Return the number of dofs on each cell facet
unsigned int nsedensity3d_dofmap_1::num_facet_dofs() const
{
    return 3;
}

/// Return the number of dofs associated with each cell entity of dimension d
unsigned int nsedensity3d_dofmap_1::num_entity_dofs(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

/// Tabulate the local-to-global mapping of dofs on a cell
void nsedensity3d_dofmap_1::tabulate_dofs(unsigned int* dofs,
                                  const ufc::mesh& m,
                                  const ufc::cell& c) const
{
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
}

/// Tabulate the local-to-local mapping from facet dofs to cell dofs
void nsedensity3d_dofmap_1::tabulate_facet_dofs(unsigned int* dofs,
                                        unsigned int facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
        break;
      }
    }
    
}

/// Tabulate the local-to-local mapping of dofs on entity (d, i)
void nsedensity3d_dofmap_1::tabulate_entity_dofs(unsigned int* dofs,
                                  unsigned int d, unsigned int i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
}

/// Tabulate the coordinates of all dofs on a cell
void nsedensity3d_dofmap_1::tabulate_coordinates(double** coordinates,
                                         const ufc::cell& c) const
{
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsedensity3d_dofmap_1::num_sub_dofmaps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dofmap* nsedensity3d_dofmap_1::create_sub_dofmap(unsigned int i) const
{
    return 0;
}

/// Create a new class instance
ufc::dofmap* nsedensity3d_dofmap_1::create() const
{
    return new nsedensity3d_dofmap_1();
}
#else

/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsedensity3d_dofmap_1::num_sub_dof_maps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dof_map* nsedensity3d_dofmap_1::create_sub_dof_map(unsigned int i) const
{
    return 0;
}

#endif

/// Constructor


#ifndef UFC_BACKWARD_COMPATIBILITY
nsedensity3d_dofmap_2::nsedensity3d_dofmap_2() : ufc::dofmap()
#else
nsedensity3d_dofmap_2::nsedensity3d_dofmap_2() : ufc::dof_map()
#endif
{
    _global_dimension = 0;
}

/// Destructor
nsedensity3d_dofmap_2::~nsedensity3d_dofmap_2()
{
    // Do nothing
}

/// Return a string identifying the dofmap
const char* nsedensity3d_dofmap_2::signature() const
{
    return "FFC dofmap for VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None)";
}

/// Return true iff mesh entities of topological dimension d are needed
bool nsedensity3d_dofmap_2::needs_mesh_entities(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
}

/// Initialize dofmap for mesh (return true iff init_cell() is needed)
bool nsedensity3d_dofmap_2::init_mesh(const ufc::mesh& m)
{
    _global_dimension = 3*m.num_entities[0];
    return false;
}

/// Initialize dofmap for given cell
void nsedensity3d_dofmap_2::init_cell(const ufc::mesh& m,
                              const ufc::cell& c)
{
    // Do nothing
}

/// Finish initialization of dofmap for cells
void nsedensity3d_dofmap_2::init_cell_finalize()
{
    // Do nothing
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the associated cell shape
unsigned int nsedensity3d_dofmap_2::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the associated cell shape
unsigned int nsedensity3d_dofmap_2::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the global finite element function space
unsigned int nsedensity3d_dofmap_2::global_dimension() const
{
    return _global_dimension;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the dimension of the local finite element function space for a cell
unsigned int nsedensity3d_dofmap_2::local_dimension(const ufc::cell& c) const
{
    return 12;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsedensity3d_dofmap_2::max_local_dimension() const
{
    return 12;
}
#else

/// Return the dimension of the local finite element function space for a cell
unsigned int nsedensity3d_dofmap_2::local_dimension() const
{
    return 12;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsedensity3d_dofmap_2::geometric_dimension() const
{
    return 3;
}

#endif
/// Return the number of dofs on each cell facet
unsigned int nsedensity3d_dofmap_2::num_facet_dofs() const
{
    return 9;
}

/// Return the number of dofs associated with each cell entity of dimension d
unsigned int nsedensity3d_dofmap_2::num_entity_dofs(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

/// Tabulate the local-to-global mapping of dofs on a cell
void nsedensity3d_dofmap_2::tabulate_dofs(unsigned int* dofs,
                                  const ufc::mesh& m,
                                  const ufc::cell& c) const
{
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    dofs[3] = offset + c.entity_indices[0][3];
    offset += m.num_entities[0];
    dofs[4] = offset + c.entity_indices[0][0];
    dofs[5] = offset + c.entity_indices[0][1];
    dofs[6] = offset + c.entity_indices[0][2];
    dofs[7] = offset + c.entity_indices[0][3];
    offset += m.num_entities[0];
    dofs[8] = offset + c.entity_indices[0][0];
    dofs[9] = offset + c.entity_indices[0][1];
    dofs[10] = offset + c.entity_indices[0][2];
    dofs[11] = offset + c.entity_indices[0][3];
    offset += m.num_entities[0];
}

/// Tabulate the local-to-local mapping from facet dofs to cell dofs
void nsedensity3d_dofmap_2::tabulate_facet_dofs(unsigned int* dofs,
                                        unsigned int facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
        break;
      }
    }
    
}

/// Tabulate the local-to-local mapping of dofs on entity (d, i)
void nsedensity3d_dofmap_2::tabulate_entity_dofs(unsigned int* dofs,
                                  unsigned int d, unsigned int i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
}

/// Tabulate the coordinates of all dofs on a cell
void nsedensity3d_dofmap_2::tabulate_coordinates(double** coordinates,
                                         const ufc::cell& c) const
{
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = x[0][0];
    coordinates[4][1] = x[0][1];
    coordinates[4][2] = x[0][2];
    coordinates[5][0] = x[1][0];
    coordinates[5][1] = x[1][1];
    coordinates[5][2] = x[1][2];
    coordinates[6][0] = x[2][0];
    coordinates[6][1] = x[2][1];
    coordinates[6][2] = x[2][2];
    coordinates[7][0] = x[3][0];
    coordinates[7][1] = x[3][1];
    coordinates[7][2] = x[3][2];
    coordinates[8][0] = x[0][0];
    coordinates[8][1] = x[0][1];
    coordinates[8][2] = x[0][2];
    coordinates[9][0] = x[1][0];
    coordinates[9][1] = x[1][1];
    coordinates[9][2] = x[1][2];
    coordinates[10][0] = x[2][0];
    coordinates[10][1] = x[2][1];
    coordinates[10][2] = x[2][2];
    coordinates[11][0] = x[3][0];
    coordinates[11][1] = x[3][1];
    coordinates[11][2] = x[3][2];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsedensity3d_dofmap_2::num_sub_dofmaps() const
{
    return 3;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dofmap* nsedensity3d_dofmap_2::create_sub_dofmap(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsedensity3d_dofmap_1();
        break;
      }
    case 1:
      {
        return new nsedensity3d_dofmap_1();
        break;
      }
    case 2:
      {
        return new nsedensity3d_dofmap_1();
        break;
      }
    }
    
    return 0;
}

/// Create a new class instance
ufc::dofmap* nsedensity3d_dofmap_2::create() const
{
    return new nsedensity3d_dofmap_2();
}
#else

/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsedensity3d_dofmap_2::num_sub_dof_maps() const
{
    return 3;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dof_map* nsedensity3d_dofmap_2::create_sub_dof_map(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsedensity3d_dofmap_1();
        break;
      }
    case 1:
      {
        return new nsedensity3d_dofmap_1();
        break;
      }
    case 2:
      {
        return new nsedensity3d_dofmap_1();
        break;
      }
    }
    
    return 0;
}

#endif

/// Constructor
nsedensity3d_cell_integral_0_0::nsedensity3d_cell_integral_0_0() : ufc::cell_integral()
{
    // Do nothing
}

/// Destructor
nsedensity3d_cell_integral_0_0::~nsedensity3d_cell_integral_0_0()
{
    // Do nothing
}

/// Tabulate the tensor for the contribution from a local cell
void nsedensity3d_cell_integral_0_0::tabulate_tensor(double* A,
                                    const double * const * w,
                                    const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Cell Volume.
    
    // Compute circumradius.
    
    
    // Facet Area (divide by two because 'det' is scaled by area of reference triangle).
    
    // Array of quadrature weights.
    static const double W14[14] = {0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.0147649707904968, 0.0147649707904968, 0.0147649707904968, 0.0147649707904968, 0.0221397911142651, 0.0221397911142651, 0.0221397911142651, 0.0221397911142651};
    // Quadrature points on the UFC reference element: (0.0, 0.5, 0.5), (0.5, 0.0, 0.5), (0.5, 0.5, 0.0), (0.5, 0.0, 0.0), (0.0, 0.5, 0.0), (0.0, 0.0, 0.5), (0.698419704324387, 0.100526765225204, 0.100526765225204), (0.100526765225204, 0.100526765225204, 0.100526765225204), (0.100526765225204, 0.100526765225204, 0.698419704324387), (0.100526765225204, 0.698419704324387, 0.100526765225204), (0.0568813795204234, 0.314372873493192, 0.314372873493192), (0.314372873493192, 0.314372873493192, 0.314372873493192), (0.314372873493192, 0.314372873493192, 0.0568813795204234), (0.314372873493192, 0.0568813795204234, 0.314372873493192)
    
    // Value of basis functions at quadrature points.
    static const double FE0[14][4] = \
    {{0.0, 0.0, 0.5, 0.5},
    {0.0, 0.5, 0.0, 0.5},
    {0.0, 0.5, 0.5, 0.0},
    {0.5, 0.5, 0.0, 0.0},
    {0.5, 0.0, 0.5, 0.0},
    {0.5, 0.0, 0.0, 0.5},
    {0.100526765225205, 0.698419704324386, 0.100526765225205, 0.100526765225205},
    {0.698419704324387, 0.100526765225204, 0.100526765225205, 0.100526765225205},
    {0.100526765225205, 0.100526765225204, 0.100526765225205, 0.698419704324386},
    {0.100526765225205, 0.100526765225204, 0.698419704324386, 0.100526765225205},
    {0.314372873493192, 0.0568813795204234, 0.314372873493192, 0.314372873493192},
    {0.0568813795204235, 0.314372873493192, 0.314372873493192, 0.314372873493192},
    {0.314372873493192, 0.314372873493192, 0.314372873493192, 0.0568813795204234},
    {0.314372873493192, 0.314372873493192, 0.0568813795204235, 0.314372873493192}};
    
    // Array of non-zero columns
    static const unsigned int nzc7[4] = {4, 5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc3[4] = {0, 1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc11[4] = {8, 9, 10, 11};
    
    static const double FE0_D001[14][2] = \
    {{-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc9[2] = {4, 6};
    
    // Array of non-zero columns
    static const unsigned int nzc13[2] = {8, 10};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc8[2] = {4, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc12[2] = {8, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc10[2] = {4, 5};
    
    // Array of non-zero columns
    static const unsigned int nzc6[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc2[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc14[2] = {8, 9};
    
    // Array of non-zero columns
    static const unsigned int nzc4[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc0[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc5[2] = {0, 2};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 16; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    // Number of operations to compute geometry constants: 16087.
    double G[1258];
    G[0] = 0.5*det*w[2][0]*(std::pow(w[2][0], 0.5)*w[6][0]*(K_20*K_20 + K_21*K_21 + K_22*K_22) + w[10][0]*w[2][0]*w[5][0]*(K_20*K_20 + K_21*K_21 + K_22*K_22));
    G[1] = 0.125*std::pow(w[2][0], 0.5)*K_22*K_22*det*w[2][0]*w[4][0];
    G[2] = 0.25*std::pow(w[2][0], 0.5)*K_20*K_22*det*w[2][0]*w[4][0];
    G[3] = 0.25*std::pow(w[2][0], 0.5)*K_21*K_22*det*w[2][0]*w[4][0];
    G[4] = 0.25*std::pow(w[2][0], 0.5)*K_22*K_22*det*w[2][0]*w[4][0];
    G[5] = 0.125*std::pow(w[2][0], 0.5)*K_20*K_20*det*w[2][0]*w[4][0];
    G[6] = 0.25*std::pow(w[2][0], 0.5)*K_20*K_21*det*w[2][0]*w[4][0];
    G[7] = 0.25*std::pow(w[2][0], 0.5)*K_20*K_20*det*w[2][0]*w[4][0];
    G[8] = 0.125*std::pow(w[2][0], 0.5)*K_21*K_21*det*w[2][0]*w[4][0];
    G[9] = 0.25*std::pow(w[2][0], 0.5)*K_21*K_21*det*w[2][0]*w[4][0];
    G[10] = -0.001*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[11] = -0.002*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[12] = 3e-06*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[13] = -2e-09*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[14] = -0.001*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[15] = -0.002*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[16] = 3e-06*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[17] = -2e-09*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[18] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_21*(-0.001*K_21-0.002*K_20) + K_22*(-0.001*K_22-0.002*(K_20 + K_21))-0.001*K_20*K_20);
    G[19] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_21*(-0.002*K_21-0.004*K_20) + K_22*(-0.002*K_22-0.004*(K_20 + K_21))-0.002*K_20*K_20);
    G[20] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(3e-06*K_20*K_20 + K_21*(3e-06*K_21 + 6e-06*K_20) + K_22*(3e-06*K_22 + 6e-06*(K_20 + K_21)));
    G[21] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_21*(-2e-09*K_21-4e-09*K_20) + K_22*(-2e-09*K_22-4e-09*(K_20 + K_21))-2e-09*K_20*K_20);
    G[22] = -0.001*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[23] = -0.002*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[24] = 3e-06*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[25] = -2e-09*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[26] = -0.001*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[27] = -0.002*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[28] = 3e-06*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[29] = -2e-09*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[30] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_21*(-0.001*K_21-0.002*K_20) + K_22*(-0.001*K_22-0.002*(K_20 + K_21))-0.001*K_20*K_20);
    G[31] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_21*(-0.002*K_21-0.004*K_20) + K_22*(-0.002*K_22-0.004*(K_20 + K_21))-0.002*K_20*K_20);
    G[32] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(3e-06*K_20*K_20 + K_21*(3e-06*K_21 + 6e-06*K_20) + K_22*(3e-06*K_22 + 6e-06*(K_20 + K_21)));
    G[33] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_21*(-2e-09*K_21-4e-09*K_20) + K_22*(-2e-09*K_22-4e-09*(K_20 + K_21))-2e-09*K_20*K_20);
    G[34] = -0.001*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[35] = -0.002*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[36] = 3e-06*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[37] = -2e-09*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[38] = -0.001*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[39] = -0.002*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[40] = 3e-06*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[41] = -2e-09*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[42] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_21*(-0.001*K_21-0.002*K_20) + K_22*(-0.001*K_22-0.002*(K_20 + K_21))-0.001*K_20*K_20);
    G[43] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_21*(-0.002*K_21-0.004*K_20) + K_22*(-0.002*K_22-0.004*(K_20 + K_21))-0.002*K_20*K_20);
    G[44] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(3e-06*K_20*K_20 + K_21*(3e-06*K_21 + 6e-06*K_20) + K_22*(3e-06*K_22 + 6e-06*(K_20 + K_21)));
    G[45] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_21*(-2e-09*K_21-4e-09*K_20) + K_22*(-2e-09*K_22-4e-09*(K_20 + K_21))-2e-09*K_20*K_20);
    G[46] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.01*K_20*K_20 + K_21*(0.01*K_21 + 0.02*K_20) + K_22*(0.01*K_22 + 0.02*(K_20 + K_21)));
    G[47] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.02*K_20*K_20 + K_21*(0.02*K_21 + 0.04*K_20) + K_22*(0.02*K_22 + 0.04*(K_20 + K_21)));
    G[48] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_21*(-3e-05*K_21-6e-05*K_20) + K_22*(-3e-05*K_22-6e-05*(K_20 + K_21))-3e-05*K_20*K_20);
    G[49] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2e-08*K_20*K_20 + K_21*(2e-08*K_21 + 4e-08*K_20) + K_22*(2e-08*K_22 + 4e-08*(K_20 + K_21)));
    G[50] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_20 + K_21));
    G[51] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01)) + 5e-06*K_02*K_22);
    G[52] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_10 + K_11)-0.00375*K_12)-0.00125*K_12*(K_20 + K_21));
    G[53] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(2.5e-06*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11)) + 5e-06*K_12*K_22);
    G[54] = -0.00375*std::pow(w[2][0], 0.5)*K_22*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[55] = 5e-06*std::pow(w[2][0], 0.5)*K_22*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[56] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_21 + K_22));
    G[57] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02)) + 5e-06*K_00*K_20);
    G[58] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_11 + K_12)-0.00375*K_10)-0.00125*K_10*(K_21 + K_22));
    G[59] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(2.5e-06*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12)) + 5e-06*K_10*K_20);
    G[60] = -0.00375*std::pow(w[2][0], 0.5)*K_20*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[61] = 5e-06*std::pow(w[2][0], 0.5)*K_20*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[62] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_20 + K_22));
    G[63] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02)) + 5e-06*K_01*K_21);
    G[64] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_10 + K_12)-0.00375*K_11)-0.00125*K_11*(K_20 + K_22));
    G[65] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(2.5e-06*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12)) + 5e-06*K_11*K_21);
    G[66] = -0.00375*std::pow(w[2][0], 0.5)*K_21*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[67] = 5e-06*std::pow(w[2][0], 0.5)*K_21*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[68] = 0.0025*K_22*det*(K_20 + K_21 + K_22);
    G[69] = 0.005*K_22*det*(K_20 + K_21 + K_22);
    G[70] = -0.005005*K_22*det*(K_20 + K_21 + K_22);
    G[71] = 1e-05*K_22*det*(K_20 + K_21 + K_22);
    G[72] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_20 + K_21));
    G[73] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01)) + 5e-06*K_02*K_22);
    G[74] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_10 + K_11)-0.00375*K_12)-0.00125*K_12*(K_20 + K_21));
    G[75] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(2.5e-06*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11)) + 5e-06*K_12*K_22);
    G[76] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_21 + K_22));
    G[77] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02)) + 5e-06*K_00*K_20);
    G[78] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_11 + K_12)-0.00375*K_10)-0.00125*K_10*(K_21 + K_22));
    G[79] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(2.5e-06*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12)) + 5e-06*K_10*K_20);
    G[80] = -0.00375*std::pow(w[2][0], 0.5)*K_20*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[81] = 5e-06*std::pow(w[2][0], 0.5)*K_20*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[82] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_20 + K_22));
    G[83] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02)) + 5e-06*K_01*K_21);
    G[84] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_10 + K_12)-0.00375*K_11)-0.00125*K_11*(K_20 + K_22));
    G[85] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(2.5e-06*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12)) + 5e-06*K_11*K_21);
    G[86] = -0.00375*std::pow(w[2][0], 0.5)*K_20*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[87] = 5e-06*std::pow(w[2][0], 0.5)*K_20*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[88] = 0.0025*K_20*det*(K_20 + K_21 + K_22);
    G[89] = 0.005*K_20*det*(K_20 + K_21 + K_22);
    G[90] = -0.005005*K_20*det*(K_20 + K_21 + K_22);
    G[91] = 1e-05*K_20*det*(K_20 + K_21 + K_22);
    G[92] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_20 + K_21));
    G[93] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01)) + 5e-06*K_02*K_22);
    G[94] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_10 + K_11)-0.00375*K_12)-0.00125*K_12*(K_20 + K_21));
    G[95] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(2.5e-06*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11)) + 5e-06*K_12*K_22);
    G[96] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_21 + K_22));
    G[97] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02)) + 5e-06*K_00*K_20);
    G[98] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_11 + K_12)-0.00375*K_10)-0.00125*K_10*(K_21 + K_22));
    G[99] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(2.5e-06*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12)) + 5e-06*K_10*K_20);
    G[100] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_20 + K_22));
    G[101] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02)) + 5e-06*K_01*K_21);
    G[102] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_10 + K_12)-0.00375*K_11)-0.00125*K_11*(K_20 + K_22));
    G[103] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(2.5e-06*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12)) + 5e-06*K_11*K_21);
    G[104] = -0.00375*std::pow(w[2][0], 0.5)*K_21*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[105] = 5e-06*std::pow(w[2][0], 0.5)*K_21*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[106] = 0.0025*K_21*det*(K_20 + K_21 + K_22);
    G[107] = 0.005*K_21*det*(K_20 + K_21 + K_22);
    G[108] = -0.005005*K_21*det*(K_20 + K_21 + K_22);
    G[109] = 1e-05*K_21*det*(K_20 + K_21 + K_22);
    G[110] = 0.075*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[111] = -0.0001*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[112] = 0.075*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[113] = -0.0001*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[114] = 0.075*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[115] = -0.0001*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[116] = 0.5*det*w[2][0]*(std::pow(w[2][0], 0.5)*w[6][0]*(K_10*K_20 + K_11*K_21 + K_12*K_22) + w[10][0]*w[2][0]*w[5][0]*(K_10*K_20 + K_11*K_21 + K_12*K_22));
    G[117] = 0.125*std::pow(w[2][0], 0.5)*K_12*K_22*det*w[2][0]*w[4][0];
    G[118] = 0.125*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_10*K_22 + K_12*K_20);
    G[119] = 0.125*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*K_22 + K_12*K_21);
    G[120] = 0.25*std::pow(w[2][0], 0.5)*K_12*K_22*det*w[2][0]*w[4][0];
    G[121] = 0.125*std::pow(w[2][0], 0.5)*K_10*K_20*det*w[2][0]*w[4][0];
    G[122] = 0.125*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_10*K_21 + K_11*K_20);
    G[123] = 0.25*std::pow(w[2][0], 0.5)*K_10*K_20*det*w[2][0]*w[4][0];
    G[124] = 0.125*std::pow(w[2][0], 0.5)*K_11*K_21*det*w[2][0]*w[4][0];
    G[125] = 0.25*std::pow(w[2][0], 0.5)*K_11*K_21*det*w[2][0]*w[4][0];
    G[126] = -0.001*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[127] = -0.002*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[128] = 3e-06*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[129] = -2e-09*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[130] = -0.001*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[131] = -0.002*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[132] = 3e-06*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[133] = -2e-09*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[134] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_21*(-0.001*K_21-0.002*K_20) + K_22*(-0.001*K_22-0.002*(K_20 + K_21))-0.001*K_20*K_20);
    G[135] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_21*(-0.002*K_21-0.004*K_20) + K_22*(-0.002*K_22-0.004*(K_20 + K_21))-0.002*K_20*K_20);
    G[136] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(3e-06*K_20*K_20 + K_21*(3e-06*K_21 + 6e-06*K_20) + K_22*(3e-06*K_22 + 6e-06*(K_20 + K_21)));
    G[137] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_21*(-2e-09*K_21-4e-09*K_20) + K_22*(-2e-09*K_22-4e-09*(K_20 + K_21))-2e-09*K_20*K_20);
    G[138] = -0.001*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[139] = -0.002*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[140] = 3e-06*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[141] = -2e-09*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[142] = -0.001*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[143] = -0.002*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[144] = 3e-06*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[145] = -2e-09*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[146] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_21*(-0.001*K_21-0.002*K_20) + K_22*(-0.001*K_22-0.002*(K_20 + K_21))-0.001*K_20*K_20);
    G[147] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_21*(-0.002*K_21-0.004*K_20) + K_22*(-0.002*K_22-0.004*(K_20 + K_21))-0.002*K_20*K_20);
    G[148] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(3e-06*K_20*K_20 + K_21*(3e-06*K_21 + 6e-06*K_20) + K_22*(3e-06*K_22 + 6e-06*(K_20 + K_21)));
    G[149] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_21*(-2e-09*K_21-4e-09*K_20) + K_22*(-2e-09*K_22-4e-09*(K_20 + K_21))-2e-09*K_20*K_20);
    G[150] = -0.001*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[151] = -0.002*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[152] = 3e-06*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[153] = -2e-09*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[154] = -0.001*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[155] = -0.002*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[156] = 3e-06*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[157] = -2e-09*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[158] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_21*(-0.001*K_21-0.002*K_20) + K_22*(-0.001*K_22-0.002*(K_20 + K_21))-0.001*K_20*K_20);
    G[159] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_21*(-0.002*K_21-0.004*K_20) + K_22*(-0.002*K_22-0.004*(K_20 + K_21))-0.002*K_20*K_20);
    G[160] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(3e-06*K_20*K_20 + K_21*(3e-06*K_21 + 6e-06*K_20) + K_22*(3e-06*K_22 + 6e-06*(K_20 + K_21)));
    G[161] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_21*(-2e-09*K_21-4e-09*K_20) + K_22*(-2e-09*K_22-4e-09*(K_20 + K_21))-2e-09*K_20*K_20);
    G[162] = 0.01*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[163] = 0.02*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[164] = -3e-05*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[165] = 2e-08*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[166] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_20 + K_21));
    G[167] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01)) + 5e-06*K_02*K_22);
    G[168] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_10 + K_11)-0.00375*K_12)-0.00125*K_12*(K_20 + K_21));
    G[169] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(2.5e-06*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11)) + 5e-06*K_12*K_22);
    G[170] = -0.00375*std::pow(w[2][0], 0.5)*K_12*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[171] = 5e-06*std::pow(w[2][0], 0.5)*K_12*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[172] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_21 + K_22));
    G[173] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02)) + 5e-06*K_00*K_20);
    G[174] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_11 + K_12)-0.00375*K_10)-0.00125*K_10*(K_21 + K_22));
    G[175] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(2.5e-06*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12)) + 5e-06*K_10*K_20);
    G[176] = -0.00375*std::pow(w[2][0], 0.5)*K_12*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[177] = 5e-06*std::pow(w[2][0], 0.5)*K_12*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[178] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_20 + K_22));
    G[179] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02)) + 5e-06*K_01*K_21);
    G[180] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_10 + K_12)-0.00375*K_11)-0.00125*K_11*(K_20 + K_22));
    G[181] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(2.5e-06*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12)) + 5e-06*K_11*K_21);
    G[182] = -0.00375*std::pow(w[2][0], 0.5)*K_12*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[183] = 5e-06*std::pow(w[2][0], 0.5)*K_12*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[184] = 0.0025*K_12*det*(K_20 + K_21 + K_22);
    G[185] = 0.005*K_12*det*(K_20 + K_21 + K_22);
    G[186] = -0.005005*K_12*det*(K_20 + K_21 + K_22);
    G[187] = 1e-05*K_12*det*(K_20 + K_21 + K_22);
    G[188] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_20 + K_21));
    G[189] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01)) + 5e-06*K_02*K_22);
    G[190] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_10 + K_11)-0.00375*K_12)-0.00125*K_12*(K_20 + K_21));
    G[191] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(2.5e-06*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11)) + 5e-06*K_12*K_22);
    G[192] = -0.00375*std::pow(w[2][0], 0.5)*K_10*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[193] = 5e-06*std::pow(w[2][0], 0.5)*K_10*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[194] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_21 + K_22));
    G[195] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02)) + 5e-06*K_00*K_20);
    G[196] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_11 + K_12)-0.00375*K_10)-0.00125*K_10*(K_21 + K_22));
    G[197] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(2.5e-06*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12)) + 5e-06*K_10*K_20);
    G[198] = -0.00375*std::pow(w[2][0], 0.5)*K_10*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[199] = 5e-06*std::pow(w[2][0], 0.5)*K_10*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[200] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_20 + K_22));
    G[201] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02)) + 5e-06*K_01*K_21);
    G[202] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_10 + K_12)-0.00375*K_11)-0.00125*K_11*(K_20 + K_22));
    G[203] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(2.5e-06*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12)) + 5e-06*K_11*K_21);
    G[204] = -0.00375*std::pow(w[2][0], 0.5)*K_10*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[205] = 5e-06*std::pow(w[2][0], 0.5)*K_10*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[206] = 0.0025*K_10*det*(K_20 + K_21 + K_22);
    G[207] = 0.005*K_10*det*(K_20 + K_21 + K_22);
    G[208] = -0.005005*K_10*det*(K_20 + K_21 + K_22);
    G[209] = 1e-05*K_10*det*(K_20 + K_21 + K_22);
    G[210] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_20 + K_21));
    G[211] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01)) + 5e-06*K_02*K_22);
    G[212] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_10 + K_11)-0.00375*K_12)-0.00125*K_12*(K_20 + K_21));
    G[213] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(2.5e-06*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11)) + 5e-06*K_12*K_22);
    G[214] = -0.00375*std::pow(w[2][0], 0.5)*K_11*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[215] = 5e-06*std::pow(w[2][0], 0.5)*K_11*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[216] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_21 + K_22));
    G[217] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02)) + 5e-06*K_00*K_20);
    G[218] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_11 + K_12)-0.00375*K_10)-0.00125*K_10*(K_21 + K_22));
    G[219] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(2.5e-06*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12)) + 5e-06*K_10*K_20);
    G[220] = -0.00375*std::pow(w[2][0], 0.5)*K_11*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[221] = 5e-06*std::pow(w[2][0], 0.5)*K_11*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[222] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_20 + K_22));
    G[223] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02)) + 5e-06*K_01*K_21);
    G[224] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_10 + K_12)-0.00375*K_11)-0.00125*K_11*(K_20 + K_22));
    G[225] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(2.5e-06*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12)) + 5e-06*K_11*K_21);
    G[226] = -0.00375*std::pow(w[2][0], 0.5)*K_11*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[227] = 5e-06*std::pow(w[2][0], 0.5)*K_11*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[228] = 0.0025*K_11*det*(K_20 + K_21 + K_22);
    G[229] = 0.005*K_11*det*(K_20 + K_21 + K_22);
    G[230] = -0.005005*K_11*det*(K_20 + K_21 + K_22);
    G[231] = 1e-05*K_11*det*(K_20 + K_21 + K_22);
    G[232] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.025*K_12*(K_20 + K_21) + K_22*(0.05*(K_10 + K_11) + 0.075*K_12));
    G[233] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.0001*K_12*K_22-5e-05*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11)));
    G[234] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.025*K_10*(K_21 + K_22) + K_20*(0.05*(K_11 + K_12) + 0.075*K_10));
    G[235] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.0001*K_10*K_20-5e-05*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12)));
    G[236] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.025*K_11*(K_20 + K_22) + K_21*(0.05*(K_10 + K_12) + 0.075*K_11));
    G[237] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.0001*K_11*K_21-5e-05*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12)));
    G[238] = 0.5*det*w[2][0]*(std::pow(w[2][0], 0.5)*w[6][0]*(K_00*K_20 + K_01*K_21 + K_02*K_22) + w[10][0]*w[2][0]*w[5][0]*(K_00*K_20 + K_01*K_21 + K_02*K_22));
    G[239] = 0.125*std::pow(w[2][0], 0.5)*K_02*K_22*det*w[2][0]*w[4][0];
    G[240] = 0.125*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*K_22 + K_02*K_20);
    G[241] = 0.125*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*K_22 + K_02*K_21);
    G[242] = 0.25*std::pow(w[2][0], 0.5)*K_02*K_22*det*w[2][0]*w[4][0];
    G[243] = 0.125*std::pow(w[2][0], 0.5)*K_00*K_20*det*w[2][0]*w[4][0];
    G[244] = 0.125*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*K_21 + K_01*K_20);
    G[245] = 0.25*std::pow(w[2][0], 0.5)*K_00*K_20*det*w[2][0]*w[4][0];
    G[246] = 0.125*std::pow(w[2][0], 0.5)*K_01*K_21*det*w[2][0]*w[4][0];
    G[247] = 0.25*std::pow(w[2][0], 0.5)*K_01*K_21*det*w[2][0]*w[4][0];
    G[248] = -0.001*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[249] = -0.002*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[250] = 3e-06*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[251] = -2e-09*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[252] = -0.001*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[253] = -0.002*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[254] = 3e-06*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[255] = -2e-09*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[256] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_21*(-0.001*K_21-0.002*K_20) + K_22*(-0.001*K_22-0.002*(K_20 + K_21))-0.001*K_20*K_20);
    G[257] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_21*(-0.002*K_21-0.004*K_20) + K_22*(-0.002*K_22-0.004*(K_20 + K_21))-0.002*K_20*K_20);
    G[258] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(3e-06*K_20*K_20 + K_21*(3e-06*K_21 + 6e-06*K_20) + K_22*(3e-06*K_22 + 6e-06*(K_20 + K_21)));
    G[259] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_21*(-2e-09*K_21-4e-09*K_20) + K_22*(-2e-09*K_22-4e-09*(K_20 + K_21))-2e-09*K_20*K_20);
    G[260] = -0.001*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[261] = -0.002*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[262] = 3e-06*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[263] = -2e-09*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[264] = -0.001*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[265] = -0.002*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[266] = 3e-06*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[267] = -2e-09*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[268] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_21*(-0.001*K_21-0.002*K_20) + K_22*(-0.001*K_22-0.002*(K_20 + K_21))-0.001*K_20*K_20);
    G[269] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_21*(-0.002*K_21-0.004*K_20) + K_22*(-0.002*K_22-0.004*(K_20 + K_21))-0.002*K_20*K_20);
    G[270] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(3e-06*K_20*K_20 + K_21*(3e-06*K_21 + 6e-06*K_20) + K_22*(3e-06*K_22 + 6e-06*(K_20 + K_21)));
    G[271] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_21*(-2e-09*K_21-4e-09*K_20) + K_22*(-2e-09*K_22-4e-09*(K_20 + K_21))-2e-09*K_20*K_20);
    G[272] = -0.001*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[273] = -0.002*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[274] = 3e-06*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[275] = -2e-09*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[276] = -0.001*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[277] = -0.002*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[278] = 3e-06*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[279] = -2e-09*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[280] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_21*(-0.001*K_21-0.002*K_20) + K_22*(-0.001*K_22-0.002*(K_20 + K_21))-0.001*K_20*K_20);
    G[281] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_21*(-0.002*K_21-0.004*K_20) + K_22*(-0.002*K_22-0.004*(K_20 + K_21))-0.002*K_20*K_20);
    G[282] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(3e-06*K_20*K_20 + K_21*(3e-06*K_21 + 6e-06*K_20) + K_22*(3e-06*K_22 + 6e-06*(K_20 + K_21)));
    G[283] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_21*(-2e-09*K_21-4e-09*K_20) + K_22*(-2e-09*K_22-4e-09*(K_20 + K_21))-2e-09*K_20*K_20);
    G[284] = 0.01*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[285] = 0.02*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[286] = -3e-05*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[287] = 2e-08*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[288] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_20 + K_21));
    G[289] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01)) + 5e-06*K_02*K_22);
    G[290] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_10 + K_11)-0.00375*K_12)-0.00125*K_12*(K_20 + K_21));
    G[291] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(2.5e-06*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11)) + 5e-06*K_12*K_22);
    G[292] = -0.00375*std::pow(w[2][0], 0.5)*K_02*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[293] = 5e-06*std::pow(w[2][0], 0.5)*K_02*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[294] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_21 + K_22));
    G[295] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02)) + 5e-06*K_00*K_20);
    G[296] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_11 + K_12)-0.00375*K_10)-0.00125*K_10*(K_21 + K_22));
    G[297] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(2.5e-06*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12)) + 5e-06*K_10*K_20);
    G[298] = -0.00375*std::pow(w[2][0], 0.5)*K_02*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[299] = 5e-06*std::pow(w[2][0], 0.5)*K_02*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[300] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_20 + K_22));
    G[301] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02)) + 5e-06*K_01*K_21);
    G[302] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_10 + K_12)-0.00375*K_11)-0.00125*K_11*(K_20 + K_22));
    G[303] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(2.5e-06*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12)) + 5e-06*K_11*K_21);
    G[304] = -0.00375*std::pow(w[2][0], 0.5)*K_02*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[305] = 5e-06*std::pow(w[2][0], 0.5)*K_02*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[306] = 0.0025*K_02*det*(K_20 + K_21 + K_22);
    G[307] = 0.005*K_02*det*(K_20 + K_21 + K_22);
    G[308] = -0.005005*K_02*det*(K_20 + K_21 + K_22);
    G[309] = 1e-05*K_02*det*(K_20 + K_21 + K_22);
    G[310] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_20 + K_21));
    G[311] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01)) + 5e-06*K_02*K_22);
    G[312] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_10 + K_11)-0.00375*K_12)-0.00125*K_12*(K_20 + K_21));
    G[313] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(2.5e-06*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11)) + 5e-06*K_12*K_22);
    G[314] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[315] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[316] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_21 + K_22));
    G[317] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02)) + 5e-06*K_00*K_20);
    G[318] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_11 + K_12)-0.00375*K_10)-0.00125*K_10*(K_21 + K_22));
    G[319] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(2.5e-06*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12)) + 5e-06*K_10*K_20);
    G[320] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[321] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[322] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_20 + K_22));
    G[323] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02)) + 5e-06*K_01*K_21);
    G[324] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_10 + K_12)-0.00375*K_11)-0.00125*K_11*(K_20 + K_22));
    G[325] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(2.5e-06*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12)) + 5e-06*K_11*K_21);
    G[326] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[327] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[328] = 0.0025*K_00*det*(K_20 + K_21 + K_22);
    G[329] = 0.005*K_00*det*(K_20 + K_21 + K_22);
    G[330] = -0.005005*K_00*det*(K_20 + K_21 + K_22);
    G[331] = 1e-05*K_00*det*(K_20 + K_21 + K_22);
    G[332] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_20 + K_21));
    G[333] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01)) + 5e-06*K_02*K_22);
    G[334] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_10 + K_11)-0.00375*K_12)-0.00125*K_12*(K_20 + K_21));
    G[335] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(2.5e-06*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11)) + 5e-06*K_12*K_22);
    G[336] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[337] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[338] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_21 + K_22));
    G[339] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02)) + 5e-06*K_00*K_20);
    G[340] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_11 + K_12)-0.00375*K_10)-0.00125*K_10*(K_21 + K_22));
    G[341] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(2.5e-06*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12)) + 5e-06*K_10*K_20);
    G[342] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[343] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[344] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_20 + K_22));
    G[345] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02)) + 5e-06*K_01*K_21);
    G[346] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_10 + K_12)-0.00375*K_11)-0.00125*K_11*(K_20 + K_22));
    G[347] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(2.5e-06*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12)) + 5e-06*K_11*K_21);
    G[348] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[349] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[350] = 0.0025*K_01*det*(K_20 + K_21 + K_22);
    G[351] = 0.005*K_01*det*(K_20 + K_21 + K_22);
    G[352] = -0.005005*K_01*det*(K_20 + K_21 + K_22);
    G[353] = 1e-05*K_01*det*(K_20 + K_21 + K_22);
    G[354] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.025*K_02*(K_20 + K_21) + K_22*(0.05*(K_00 + K_01) + 0.075*K_02));
    G[355] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.0001*K_02*K_22-5e-05*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01)));
    G[356] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.025*K_00*(K_21 + K_22) + K_20*(0.05*(K_01 + K_02) + 0.075*K_00));
    G[357] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.0001*K_00*K_20-5e-05*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02)));
    G[358] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.025*K_01*(K_20 + K_22) + K_21*(0.05*(K_00 + K_02) + 0.075*K_01));
    G[359] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.0001*K_01*K_21-5e-05*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02)));
    G[360] = -0.001*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[361] = -0.002*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[362] = 3e-06*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[363] = -2e-09*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[364] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_11*(-0.001*K_11-0.002*K_10) + K_12*(-0.001*K_12-0.002*(K_10 + K_11))-0.001*K_10*K_10);
    G[365] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_11*(-0.002*K_11-0.004*K_10) + K_12*(-0.002*K_12-0.004*(K_10 + K_11))-0.002*K_10*K_10);
    G[366] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(3e-06*K_10*K_10 + K_11*(3e-06*K_11 + 6e-06*K_10) + K_12*(3e-06*K_12 + 6e-06*(K_10 + K_11)));
    G[367] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_11*(-2e-09*K_11-4e-09*K_10) + K_12*(-2e-09*K_12-4e-09*(K_10 + K_11))-2e-09*K_10*K_10);
    G[368] = -0.001*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[369] = -0.002*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[370] = 3e-06*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[371] = -2e-09*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[372] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_11*(-0.001*K_11-0.002*K_10) + K_12*(-0.001*K_12-0.002*(K_10 + K_11))-0.001*K_10*K_10);
    G[373] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_11*(-0.002*K_11-0.004*K_10) + K_12*(-0.002*K_12-0.004*(K_10 + K_11))-0.002*K_10*K_10);
    G[374] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(3e-06*K_10*K_10 + K_11*(3e-06*K_11 + 6e-06*K_10) + K_12*(3e-06*K_12 + 6e-06*(K_10 + K_11)));
    G[375] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_11*(-2e-09*K_11-4e-09*K_10) + K_12*(-2e-09*K_12-4e-09*(K_10 + K_11))-2e-09*K_10*K_10);
    G[376] = -0.001*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[377] = -0.002*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[378] = 3e-06*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[379] = -2e-09*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[380] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_11*(-0.001*K_11-0.002*K_10) + K_12*(-0.001*K_12-0.002*(K_10 + K_11))-0.001*K_10*K_10);
    G[381] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_11*(-0.002*K_11-0.004*K_10) + K_12*(-0.002*K_12-0.004*(K_10 + K_11))-0.002*K_10*K_10);
    G[382] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(3e-06*K_10*K_10 + K_11*(3e-06*K_11 + 6e-06*K_10) + K_12*(3e-06*K_12 + 6e-06*(K_10 + K_11)));
    G[383] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_11*(-2e-09*K_11-4e-09*K_10) + K_12*(-2e-09*K_12-4e-09*(K_10 + K_11))-2e-09*K_10*K_10);
    G[384] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_12*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_10 + K_11));
    G[385] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)) + 5e-06*K_02*K_12);
    G[386] = -0.00375*std::pow(w[2][0], 0.5)*K_12*K_22*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[387] = 5e-06*std::pow(w[2][0], 0.5)*K_12*K_22*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[388] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_10 + K_11)-0.00375*K_12)-0.0025*K_12*(K_20 + K_21));
    G[389] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_10*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_11 + K_12));
    G[390] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)) + 5e-06*K_00*K_10);
    G[391] = -0.00375*std::pow(w[2][0], 0.5)*K_10*K_22*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[392] = 5e-06*std::pow(w[2][0], 0.5)*K_10*K_22*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[393] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_11 + K_12)-0.00375*K_10)-0.0025*K_10*(K_21 + K_22));
    G[394] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_11*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_10 + K_12));
    G[395] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)) + 5e-06*K_01*K_11);
    G[396] = -0.00375*std::pow(w[2][0], 0.5)*K_11*K_22*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[397] = 5e-06*std::pow(w[2][0], 0.5)*K_11*K_22*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[398] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_10 + K_12)-0.00375*K_11)-0.0025*K_11*(K_20 + K_22));
    G[399] = 0.0025*K_22*det*(K_10 + K_11 + K_12);
    G[400] = 0.005*K_22*det*(K_10 + K_11 + K_12);
    G[401] = -0.005005*K_22*det*(K_10 + K_11 + K_12);
    G[402] = 1e-05*K_22*det*(K_10 + K_11 + K_12);
    G[403] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_12*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_10 + K_11));
    G[404] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)) + 5e-06*K_02*K_12);
    G[405] = -0.00375*std::pow(w[2][0], 0.5)*K_12*K_20*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[406] = 5e-06*std::pow(w[2][0], 0.5)*K_12*K_20*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[407] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_10 + K_11)-0.00375*K_12)-0.0025*K_12*(K_20 + K_21));
    G[408] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_10*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_11 + K_12));
    G[409] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)) + 5e-06*K_00*K_10);
    G[410] = -0.00375*std::pow(w[2][0], 0.5)*K_10*K_20*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[411] = 5e-06*std::pow(w[2][0], 0.5)*K_10*K_20*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[412] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_11 + K_12)-0.00375*K_10)-0.0025*K_10*(K_21 + K_22));
    G[413] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_11*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_10 + K_12));
    G[414] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)) + 5e-06*K_01*K_11);
    G[415] = -0.00375*std::pow(w[2][0], 0.5)*K_11*K_20*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[416] = 5e-06*std::pow(w[2][0], 0.5)*K_11*K_20*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[417] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_10 + K_12)-0.00375*K_11)-0.0025*K_11*(K_20 + K_22));
    G[418] = 0.0025*K_20*det*(K_10 + K_11 + K_12);
    G[419] = 0.005*K_20*det*(K_10 + K_11 + K_12);
    G[420] = -0.005005*K_20*det*(K_10 + K_11 + K_12);
    G[421] = 1e-05*K_20*det*(K_10 + K_11 + K_12);
    G[422] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_12*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_10 + K_11));
    G[423] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)) + 5e-06*K_02*K_12);
    G[424] = -0.00375*std::pow(w[2][0], 0.5)*K_12*K_21*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[425] = 5e-06*std::pow(w[2][0], 0.5)*K_12*K_21*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[426] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_10 + K_11)-0.00375*K_12)-0.0025*K_12*(K_20 + K_21));
    G[427] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_10*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_11 + K_12));
    G[428] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)) + 5e-06*K_00*K_10);
    G[429] = -0.00375*std::pow(w[2][0], 0.5)*K_10*K_21*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[430] = 5e-06*std::pow(w[2][0], 0.5)*K_10*K_21*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[431] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_11 + K_12)-0.00375*K_10)-0.0025*K_10*(K_21 + K_22));
    G[432] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_11*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_10 + K_12));
    G[433] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)) + 5e-06*K_01*K_11);
    G[434] = -0.00375*std::pow(w[2][0], 0.5)*K_11*K_21*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[435] = 5e-06*std::pow(w[2][0], 0.5)*K_11*K_21*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[436] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_10 + K_12)-0.00375*K_11)-0.0025*K_11*(K_20 + K_22));
    G[437] = 0.0025*K_21*det*(K_10 + K_11 + K_12);
    G[438] = 0.005*K_21*det*(K_10 + K_11 + K_12);
    G[439] = -0.005005*K_21*det*(K_10 + K_11 + K_12);
    G[440] = 1e-05*K_21*det*(K_10 + K_11 + K_12);
    G[441] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.05*K_12*(K_20 + K_21) + K_22*(0.025*(K_10 + K_11) + 0.075*K_12));
    G[442] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.05*K_10*(K_21 + K_22) + K_20*(0.025*(K_11 + K_12) + 0.075*K_10));
    G[443] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.05*K_11*(K_20 + K_22) + K_21*(0.025*(K_10 + K_12) + 0.075*K_11));
    G[444] = 0.5*det*w[2][0]*(std::pow(w[2][0], 0.5)*w[6][0]*(K_10*K_10 + K_11*K_11 + K_12*K_12) + w[10][0]*w[2][0]*w[5][0]*(K_10*K_10 + K_11*K_11 + K_12*K_12));
    G[445] = 0.125*std::pow(w[2][0], 0.5)*K_12*K_12*det*w[2][0]*w[4][0];
    G[446] = 0.25*std::pow(w[2][0], 0.5)*K_10*K_12*det*w[2][0]*w[4][0];
    G[447] = 0.25*std::pow(w[2][0], 0.5)*K_11*K_12*det*w[2][0]*w[4][0];
    G[448] = 0.25*std::pow(w[2][0], 0.5)*K_12*K_12*det*w[2][0]*w[4][0];
    G[449] = 0.125*std::pow(w[2][0], 0.5)*K_10*K_10*det*w[2][0]*w[4][0];
    G[450] = 0.25*std::pow(w[2][0], 0.5)*K_10*K_11*det*w[2][0]*w[4][0];
    G[451] = 0.25*std::pow(w[2][0], 0.5)*K_10*K_10*det*w[2][0]*w[4][0];
    G[452] = 0.125*std::pow(w[2][0], 0.5)*K_11*K_11*det*w[2][0]*w[4][0];
    G[453] = 0.25*std::pow(w[2][0], 0.5)*K_11*K_11*det*w[2][0]*w[4][0];
    G[454] = -0.001*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[455] = -0.002*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[456] = 3e-06*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[457] = -2e-09*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[458] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_11*(-0.001*K_11-0.002*K_10) + K_12*(-0.001*K_12-0.002*(K_10 + K_11))-0.001*K_10*K_10);
    G[459] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_11*(-0.002*K_11-0.004*K_10) + K_12*(-0.002*K_12-0.004*(K_10 + K_11))-0.002*K_10*K_10);
    G[460] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(3e-06*K_10*K_10 + K_11*(3e-06*K_11 + 6e-06*K_10) + K_12*(3e-06*K_12 + 6e-06*(K_10 + K_11)));
    G[461] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_11*(-2e-09*K_11-4e-09*K_10) + K_12*(-2e-09*K_12-4e-09*(K_10 + K_11))-2e-09*K_10*K_10);
    G[462] = -0.001*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[463] = -0.002*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[464] = 3e-06*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[465] = -2e-09*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[466] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_11*(-0.001*K_11-0.002*K_10) + K_12*(-0.001*K_12-0.002*(K_10 + K_11))-0.001*K_10*K_10);
    G[467] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_11*(-0.002*K_11-0.004*K_10) + K_12*(-0.002*K_12-0.004*(K_10 + K_11))-0.002*K_10*K_10);
    G[468] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(3e-06*K_10*K_10 + K_11*(3e-06*K_11 + 6e-06*K_10) + K_12*(3e-06*K_12 + 6e-06*(K_10 + K_11)));
    G[469] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_11*(-2e-09*K_11-4e-09*K_10) + K_12*(-2e-09*K_12-4e-09*(K_10 + K_11))-2e-09*K_10*K_10);
    G[470] = -0.001*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[471] = -0.002*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[472] = 3e-06*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[473] = -2e-09*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[474] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_11*(-0.001*K_11-0.002*K_10) + K_12*(-0.001*K_12-0.002*(K_10 + K_11))-0.001*K_10*K_10);
    G[475] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_11*(-0.002*K_11-0.004*K_10) + K_12*(-0.002*K_12-0.004*(K_10 + K_11))-0.002*K_10*K_10);
    G[476] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(3e-06*K_10*K_10 + K_11*(3e-06*K_11 + 6e-06*K_10) + K_12*(3e-06*K_12 + 6e-06*(K_10 + K_11)));
    G[477] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_11*(-2e-09*K_11-4e-09*K_10) + K_12*(-2e-09*K_12-4e-09*(K_10 + K_11))-2e-09*K_10*K_10);
    G[478] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.01*K_10*K_10 + K_11*(0.01*K_11 + 0.02*K_10) + K_12*(0.01*K_12 + 0.02*(K_10 + K_11)));
    G[479] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.02*K_10*K_10 + K_11*(0.02*K_11 + 0.04*K_10) + K_12*(0.02*K_12 + 0.04*(K_10 + K_11)));
    G[480] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(-3e-05*K_11-6e-05*K_10) + K_12*(-3e-05*K_12-6e-05*(K_10 + K_11))-3e-05*K_10*K_10);
    G[481] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2e-08*K_10*K_10 + K_11*(2e-08*K_11 + 4e-08*K_10) + K_12*(2e-08*K_12 + 4e-08*(K_10 + K_11)));
    G[482] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_12*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_10 + K_11));
    G[483] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)) + 5e-06*K_02*K_12);
    G[484] = -0.00375*std::pow(w[2][0], 0.5)*K_12*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[485] = 5e-06*std::pow(w[2][0], 0.5)*K_12*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[486] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_10 + K_11)-0.00375*K_12)-0.0025*K_12*(K_20 + K_21));
    G[487] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_10*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_11 + K_12));
    G[488] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)) + 5e-06*K_00*K_10);
    G[489] = -0.00375*std::pow(w[2][0], 0.5)*K_10*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[490] = 5e-06*std::pow(w[2][0], 0.5)*K_10*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[491] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_11 + K_12)-0.00375*K_10)-0.0025*K_10*(K_21 + K_22));
    G[492] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_11*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_10 + K_12));
    G[493] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)) + 5e-06*K_01*K_11);
    G[494] = -0.00375*std::pow(w[2][0], 0.5)*K_11*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[495] = 5e-06*std::pow(w[2][0], 0.5)*K_11*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[496] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_10 + K_12)-0.00375*K_11)-0.0025*K_11*(K_20 + K_22));
    G[497] = 0.0025*K_12*det*(K_10 + K_11 + K_12);
    G[498] = 0.005*K_12*det*(K_10 + K_11 + K_12);
    G[499] = -0.005005*K_12*det*(K_10 + K_11 + K_12);
    G[500] = 1e-05*K_12*det*(K_10 + K_11 + K_12);
    G[501] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_12*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_10 + K_11));
    G[502] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)) + 5e-06*K_02*K_12);
    G[503] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_10 + K_11)-0.00375*K_12)-0.0025*K_12*(K_20 + K_21));
    G[504] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_10*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_11 + K_12));
    G[505] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)) + 5e-06*K_00*K_10);
    G[506] = -0.00375*std::pow(w[2][0], 0.5)*K_10*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[507] = 5e-06*std::pow(w[2][0], 0.5)*K_10*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[508] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_11 + K_12)-0.00375*K_10)-0.0025*K_10*(K_21 + K_22));
    G[509] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_11*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_10 + K_12));
    G[510] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)) + 5e-06*K_01*K_11);
    G[511] = -0.00375*std::pow(w[2][0], 0.5)*K_10*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[512] = 5e-06*std::pow(w[2][0], 0.5)*K_10*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[513] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_10 + K_12)-0.00375*K_11)-0.0025*K_11*(K_20 + K_22));
    G[514] = 0.0025*K_10*det*(K_10 + K_11 + K_12);
    G[515] = 0.005*K_10*det*(K_10 + K_11 + K_12);
    G[516] = -0.005005*K_10*det*(K_10 + K_11 + K_12);
    G[517] = 1e-05*K_10*det*(K_10 + K_11 + K_12);
    G[518] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_12*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_10 + K_11));
    G[519] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)) + 5e-06*K_02*K_12);
    G[520] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_10 + K_11)-0.00375*K_12)-0.0025*K_12*(K_20 + K_21));
    G[521] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_10*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_11 + K_12));
    G[522] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)) + 5e-06*K_00*K_10);
    G[523] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_11 + K_12)-0.00375*K_10)-0.0025*K_10*(K_21 + K_22));
    G[524] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_11*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_10 + K_12));
    G[525] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)) + 5e-06*K_01*K_11);
    G[526] = -0.00375*std::pow(w[2][0], 0.5)*K_11*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[527] = 5e-06*std::pow(w[2][0], 0.5)*K_11*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[528] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_10 + K_12)-0.00375*K_11)-0.0025*K_11*(K_20 + K_22));
    G[529] = 0.0025*K_11*det*(K_10 + K_11 + K_12);
    G[530] = 0.005*K_11*det*(K_10 + K_11 + K_12);
    G[531] = -0.005005*K_11*det*(K_10 + K_11 + K_12);
    G[532] = 1e-05*K_11*det*(K_10 + K_11 + K_12);
    G[533] = 0.075*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[534] = -0.0001*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[535] = 0.075*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[536] = -0.0001*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[537] = 0.075*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[538] = -0.0001*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[539] = 0.5*det*w[2][0]*(std::pow(w[2][0], 0.5)*w[6][0]*(K_00*K_10 + K_01*K_11 + K_02*K_12) + w[10][0]*w[2][0]*w[5][0]*(K_00*K_10 + K_01*K_11 + K_02*K_12));
    G[540] = 0.125*std::pow(w[2][0], 0.5)*K_02*K_12*det*w[2][0]*w[4][0];
    G[541] = 0.125*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*K_12 + K_02*K_10);
    G[542] = 0.125*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*K_12 + K_02*K_11);
    G[543] = 0.25*std::pow(w[2][0], 0.5)*K_02*K_12*det*w[2][0]*w[4][0];
    G[544] = 0.125*std::pow(w[2][0], 0.5)*K_00*K_10*det*w[2][0]*w[4][0];
    G[545] = 0.125*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*K_11 + K_01*K_10);
    G[546] = 0.25*std::pow(w[2][0], 0.5)*K_00*K_10*det*w[2][0]*w[4][0];
    G[547] = 0.125*std::pow(w[2][0], 0.5)*K_01*K_11*det*w[2][0]*w[4][0];
    G[548] = 0.25*std::pow(w[2][0], 0.5)*K_01*K_11*det*w[2][0]*w[4][0];
    G[549] = -0.001*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[550] = -0.002*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[551] = 3e-06*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[552] = -2e-09*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[553] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_11*(-0.001*K_11-0.002*K_10) + K_12*(-0.001*K_12-0.002*(K_10 + K_11))-0.001*K_10*K_10);
    G[554] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_11*(-0.002*K_11-0.004*K_10) + K_12*(-0.002*K_12-0.004*(K_10 + K_11))-0.002*K_10*K_10);
    G[555] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(3e-06*K_10*K_10 + K_11*(3e-06*K_11 + 6e-06*K_10) + K_12*(3e-06*K_12 + 6e-06*(K_10 + K_11)));
    G[556] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_11*(-2e-09*K_11-4e-09*K_10) + K_12*(-2e-09*K_12-4e-09*(K_10 + K_11))-2e-09*K_10*K_10);
    G[557] = -0.001*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[558] = -0.002*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[559] = 3e-06*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[560] = -2e-09*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[561] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_11*(-0.001*K_11-0.002*K_10) + K_12*(-0.001*K_12-0.002*(K_10 + K_11))-0.001*K_10*K_10);
    G[562] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_11*(-0.002*K_11-0.004*K_10) + K_12*(-0.002*K_12-0.004*(K_10 + K_11))-0.002*K_10*K_10);
    G[563] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(3e-06*K_10*K_10 + K_11*(3e-06*K_11 + 6e-06*K_10) + K_12*(3e-06*K_12 + 6e-06*(K_10 + K_11)));
    G[564] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_11*(-2e-09*K_11-4e-09*K_10) + K_12*(-2e-09*K_12-4e-09*(K_10 + K_11))-2e-09*K_10*K_10);
    G[565] = -0.001*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[566] = -0.002*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[567] = 3e-06*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[568] = -2e-09*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[569] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_11*(-0.001*K_11-0.002*K_10) + K_12*(-0.001*K_12-0.002*(K_10 + K_11))-0.001*K_10*K_10);
    G[570] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_11*(-0.002*K_11-0.004*K_10) + K_12*(-0.002*K_12-0.004*(K_10 + K_11))-0.002*K_10*K_10);
    G[571] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(3e-06*K_10*K_10 + K_11*(3e-06*K_11 + 6e-06*K_10) + K_12*(3e-06*K_12 + 6e-06*(K_10 + K_11)));
    G[572] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_11*(-2e-09*K_11-4e-09*K_10) + K_12*(-2e-09*K_12-4e-09*(K_10 + K_11))-2e-09*K_10*K_10);
    G[573] = 0.01*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[574] = 0.02*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[575] = -3e-05*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[576] = 2e-08*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[577] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_12*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_10 + K_11));
    G[578] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)) + 5e-06*K_02*K_12);
    G[579] = -0.00375*std::pow(w[2][0], 0.5)*K_02*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[580] = 5e-06*std::pow(w[2][0], 0.5)*K_02*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[581] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_10 + K_11)-0.00375*K_12)-0.0025*K_12*(K_20 + K_21));
    G[582] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_10*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_11 + K_12));
    G[583] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)) + 5e-06*K_00*K_10);
    G[584] = -0.00375*std::pow(w[2][0], 0.5)*K_02*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[585] = 5e-06*std::pow(w[2][0], 0.5)*K_02*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[586] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_11 + K_12)-0.00375*K_10)-0.0025*K_10*(K_21 + K_22));
    G[587] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_11*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_10 + K_12));
    G[588] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)) + 5e-06*K_01*K_11);
    G[589] = -0.00375*std::pow(w[2][0], 0.5)*K_02*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[590] = 5e-06*std::pow(w[2][0], 0.5)*K_02*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[591] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_10 + K_12)-0.00375*K_11)-0.0025*K_11*(K_20 + K_22));
    G[592] = 0.0025*K_02*det*(K_10 + K_11 + K_12);
    G[593] = 0.005*K_02*det*(K_10 + K_11 + K_12);
    G[594] = -0.005005*K_02*det*(K_10 + K_11 + K_12);
    G[595] = 1e-05*K_02*det*(K_10 + K_11 + K_12);
    G[596] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_12*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_10 + K_11));
    G[597] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)) + 5e-06*K_02*K_12);
    G[598] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[599] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[600] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_10 + K_11)-0.00375*K_12)-0.0025*K_12*(K_20 + K_21));
    G[601] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_10*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_11 + K_12));
    G[602] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)) + 5e-06*K_00*K_10);
    G[603] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[604] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[605] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_11 + K_12)-0.00375*K_10)-0.0025*K_10*(K_21 + K_22));
    G[606] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_11*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_10 + K_12));
    G[607] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)) + 5e-06*K_01*K_11);
    G[608] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[609] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[610] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_10 + K_12)-0.00375*K_11)-0.0025*K_11*(K_20 + K_22));
    G[611] = 0.0025*K_00*det*(K_10 + K_11 + K_12);
    G[612] = 0.005*K_00*det*(K_10 + K_11 + K_12);
    G[613] = -0.005005*K_00*det*(K_10 + K_11 + K_12);
    G[614] = 1e-05*K_00*det*(K_10 + K_11 + K_12);
    G[615] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_12*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_10 + K_11));
    G[616] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)) + 5e-06*K_02*K_12);
    G[617] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[618] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[619] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_10 + K_11)-0.00375*K_12)-0.0025*K_12*(K_20 + K_21));
    G[620] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_10*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_11 + K_12));
    G[621] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)) + 5e-06*K_00*K_10);
    G[622] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[623] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[624] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_11 + K_12)-0.00375*K_10)-0.0025*K_10*(K_21 + K_22));
    G[625] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_11*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_10 + K_12));
    G[626] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)) + 5e-06*K_01*K_11);
    G[627] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[628] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[629] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_10 + K_12)-0.00375*K_11)-0.0025*K_11*(K_20 + K_22));
    G[630] = 0.0025*K_01*det*(K_10 + K_11 + K_12);
    G[631] = 0.005*K_01*det*(K_10 + K_11 + K_12);
    G[632] = -0.005005*K_01*det*(K_10 + K_11 + K_12);
    G[633] = 1e-05*K_01*det*(K_10 + K_11 + K_12);
    G[634] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.025*K_02*(K_10 + K_11) + K_12*(0.05*(K_00 + K_01) + 0.075*K_02));
    G[635] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.0001*K_02*K_12-5e-05*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)));
    G[636] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.025*K_00*(K_11 + K_12) + K_10*(0.05*(K_01 + K_02) + 0.075*K_00));
    G[637] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.0001*K_00*K_10-5e-05*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)));
    G[638] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.025*K_01*(K_10 + K_12) + K_11*(0.05*(K_00 + K_02) + 0.075*K_01));
    G[639] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.0001*K_01*K_11-5e-05*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)));
    G[640] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_01*(-0.001*K_01-0.002*K_00) + K_02*(-0.001*K_02-0.002*(K_00 + K_01))-0.001*K_00*K_00);
    G[641] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_01*(-0.002*K_01-0.004*K_00) + K_02*(-0.002*K_02-0.004*(K_00 + K_01))-0.002*K_00*K_00);
    G[642] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(3e-06*K_00*K_00 + K_01*(3e-06*K_01 + 6e-06*K_00) + K_02*(3e-06*K_02 + 6e-06*(K_00 + K_01)));
    G[643] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_01*(-2e-09*K_01-4e-09*K_00) + K_02*(-2e-09*K_02-4e-09*(K_00 + K_01))-2e-09*K_00*K_00);
    G[644] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_01*(-0.001*K_01-0.002*K_00) + K_02*(-0.001*K_02-0.002*(K_00 + K_01))-0.001*K_00*K_00);
    G[645] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_01*(-0.002*K_01-0.004*K_00) + K_02*(-0.002*K_02-0.004*(K_00 + K_01))-0.002*K_00*K_00);
    G[646] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(3e-06*K_00*K_00 + K_01*(3e-06*K_01 + 6e-06*K_00) + K_02*(3e-06*K_02 + 6e-06*(K_00 + K_01)));
    G[647] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_01*(-2e-09*K_01-4e-09*K_00) + K_02*(-2e-09*K_02-4e-09*(K_00 + K_01))-2e-09*K_00*K_00);
    G[648] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_01*(-0.001*K_01-0.002*K_00) + K_02*(-0.001*K_02-0.002*(K_00 + K_01))-0.001*K_00*K_00);
    G[649] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_01*(-0.002*K_01-0.004*K_00) + K_02*(-0.002*K_02-0.004*(K_00 + K_01))-0.002*K_00*K_00);
    G[650] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(3e-06*K_00*K_00 + K_01*(3e-06*K_01 + 6e-06*K_00) + K_02*(3e-06*K_02 + 6e-06*(K_00 + K_01)));
    G[651] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_01*(-2e-09*K_01-4e-09*K_00) + K_02*(-2e-09*K_02-4e-09*(K_00 + K_01))-2e-09*K_00*K_00);
    G[652] = -0.00375*std::pow(w[2][0], 0.5)*K_02*K_22*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[653] = 5e-06*std::pow(w[2][0], 0.5)*K_02*K_22*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[654] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_12*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_10 + K_11));
    G[655] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_20 + K_21));
    G[656] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_22*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[657] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_22*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[658] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_10*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_11 + K_12));
    G[659] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_21 + K_22));
    G[660] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_22*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[661] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_22*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[662] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_11*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_10 + K_12));
    G[663] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_20 + K_22));
    G[664] = 0.0025*K_22*det*(K_00 + K_01 + K_02);
    G[665] = 0.005*K_22*det*(K_00 + K_01 + K_02);
    G[666] = -0.005005*K_22*det*(K_00 + K_01 + K_02);
    G[667] = 1e-05*K_22*det*(K_00 + K_01 + K_02);
    G[668] = -0.00375*std::pow(w[2][0], 0.5)*K_02*K_20*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[669] = 5e-06*std::pow(w[2][0], 0.5)*K_02*K_20*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[670] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_12*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_10 + K_11));
    G[671] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_20 + K_21));
    G[672] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_20*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[673] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_20*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[674] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_10*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_11 + K_12));
    G[675] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_21 + K_22));
    G[676] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_20*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[677] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_20*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[678] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_11*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_10 + K_12));
    G[679] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_20 + K_22));
    G[680] = 0.0025*K_20*det*(K_00 + K_01 + K_02);
    G[681] = 0.005*K_20*det*(K_00 + K_01 + K_02);
    G[682] = -0.005005*K_20*det*(K_00 + K_01 + K_02);
    G[683] = 1e-05*K_20*det*(K_00 + K_01 + K_02);
    G[684] = -0.00375*std::pow(w[2][0], 0.5)*K_02*K_21*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[685] = 5e-06*std::pow(w[2][0], 0.5)*K_02*K_21*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[686] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_12*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_10 + K_11));
    G[687] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_20 + K_21));
    G[688] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_21*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[689] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_21*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[690] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_10*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_11 + K_12));
    G[691] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_21 + K_22));
    G[692] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_21*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[693] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_21*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[694] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_11*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_10 + K_12));
    G[695] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_20 + K_22));
    G[696] = 0.0025*K_21*det*(K_00 + K_01 + K_02);
    G[697] = 0.005*K_21*det*(K_00 + K_01 + K_02);
    G[698] = -0.005005*K_21*det*(K_00 + K_01 + K_02);
    G[699] = 1e-05*K_21*det*(K_00 + K_01 + K_02);
    G[700] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.05*K_02*(K_20 + K_21) + K_22*(0.025*(K_00 + K_01) + 0.075*K_02));
    G[701] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.05*K_00*(K_21 + K_22) + K_20*(0.025*(K_01 + K_02) + 0.075*K_00));
    G[702] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.05*K_01*(K_20 + K_22) + K_21*(0.025*(K_00 + K_02) + 0.075*K_01));
    G[703] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_01*(-0.001*K_01-0.002*K_00) + K_02*(-0.001*K_02-0.002*(K_00 + K_01))-0.001*K_00*K_00);
    G[704] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_01*(-0.002*K_01-0.004*K_00) + K_02*(-0.002*K_02-0.004*(K_00 + K_01))-0.002*K_00*K_00);
    G[705] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(3e-06*K_00*K_00 + K_01*(3e-06*K_01 + 6e-06*K_00) + K_02*(3e-06*K_02 + 6e-06*(K_00 + K_01)));
    G[706] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_01*(-2e-09*K_01-4e-09*K_00) + K_02*(-2e-09*K_02-4e-09*(K_00 + K_01))-2e-09*K_00*K_00);
    G[707] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_01*(-0.001*K_01-0.002*K_00) + K_02*(-0.001*K_02-0.002*(K_00 + K_01))-0.001*K_00*K_00);
    G[708] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_01*(-0.002*K_01-0.004*K_00) + K_02*(-0.002*K_02-0.004*(K_00 + K_01))-0.002*K_00*K_00);
    G[709] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(3e-06*K_00*K_00 + K_01*(3e-06*K_01 + 6e-06*K_00) + K_02*(3e-06*K_02 + 6e-06*(K_00 + K_01)));
    G[710] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_01*(-2e-09*K_01-4e-09*K_00) + K_02*(-2e-09*K_02-4e-09*(K_00 + K_01))-2e-09*K_00*K_00);
    G[711] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_01*(-0.001*K_01-0.002*K_00) + K_02*(-0.001*K_02-0.002*(K_00 + K_01))-0.001*K_00*K_00);
    G[712] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_01*(-0.002*K_01-0.004*K_00) + K_02*(-0.002*K_02-0.004*(K_00 + K_01))-0.002*K_00*K_00);
    G[713] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(3e-06*K_00*K_00 + K_01*(3e-06*K_01 + 6e-06*K_00) + K_02*(3e-06*K_02 + 6e-06*(K_00 + K_01)));
    G[714] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_01*(-2e-09*K_01-4e-09*K_00) + K_02*(-2e-09*K_02-4e-09*(K_00 + K_01))-2e-09*K_00*K_00);
    G[715] = -0.00375*std::pow(w[2][0], 0.5)*K_02*K_12*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[716] = 5e-06*std::pow(w[2][0], 0.5)*K_02*K_12*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[717] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_12*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_10 + K_11));
    G[718] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_20 + K_21));
    G[719] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_12*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[720] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_12*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[721] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_10*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_11 + K_12));
    G[722] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_21 + K_22));
    G[723] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_12*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[724] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_12*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[725] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_11*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_10 + K_12));
    G[726] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_20 + K_22));
    G[727] = 0.0025*K_12*det*(K_00 + K_01 + K_02);
    G[728] = 0.005*K_12*det*(K_00 + K_01 + K_02);
    G[729] = -0.005005*K_12*det*(K_00 + K_01 + K_02);
    G[730] = 1e-05*K_12*det*(K_00 + K_01 + K_02);
    G[731] = -0.00375*std::pow(w[2][0], 0.5)*K_02*K_10*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[732] = 5e-06*std::pow(w[2][0], 0.5)*K_02*K_10*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[733] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_12*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_10 + K_11));
    G[734] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_20 + K_21));
    G[735] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_10*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[736] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_10*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[737] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_10*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_11 + K_12));
    G[738] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_21 + K_22));
    G[739] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_10*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[740] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_10*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[741] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_11*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_10 + K_12));
    G[742] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_20 + K_22));
    G[743] = 0.0025*K_10*det*(K_00 + K_01 + K_02);
    G[744] = 0.005*K_10*det*(K_00 + K_01 + K_02);
    G[745] = -0.005005*K_10*det*(K_00 + K_01 + K_02);
    G[746] = 1e-05*K_10*det*(K_00 + K_01 + K_02);
    G[747] = -0.00375*std::pow(w[2][0], 0.5)*K_02*K_11*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[748] = 5e-06*std::pow(w[2][0], 0.5)*K_02*K_11*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[749] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_12*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_10 + K_11));
    G[750] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_20 + K_21));
    G[751] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_11*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[752] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_11*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[753] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_10*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_11 + K_12));
    G[754] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_21 + K_22));
    G[755] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_11*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[756] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_11*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[757] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_11*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_10 + K_12));
    G[758] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_20 + K_22));
    G[759] = 0.0025*K_11*det*(K_00 + K_01 + K_02);
    G[760] = 0.005*K_11*det*(K_00 + K_01 + K_02);
    G[761] = -0.005005*K_11*det*(K_00 + K_01 + K_02);
    G[762] = 1e-05*K_11*det*(K_00 + K_01 + K_02);
    G[763] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.05*K_02*(K_10 + K_11) + K_12*(0.025*(K_00 + K_01) + 0.075*K_02));
    G[764] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.05*K_00*(K_11 + K_12) + K_10*(0.025*(K_01 + K_02) + 0.075*K_00));
    G[765] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.05*K_01*(K_10 + K_12) + K_11*(0.025*(K_00 + K_02) + 0.075*K_01));
    G[766] = 0.5*det*w[2][0]*(std::pow(w[2][0], 0.5)*w[6][0]*(K_00*K_00 + K_01*K_01 + K_02*K_02) + w[10][0]*w[2][0]*w[5][0]*(K_00*K_00 + K_01*K_01 + K_02*K_02));
    G[767] = 0.125*std::pow(w[2][0], 0.5)*K_02*K_02*det*w[2][0]*w[4][0];
    G[768] = 0.25*std::pow(w[2][0], 0.5)*K_00*K_02*det*w[2][0]*w[4][0];
    G[769] = 0.25*std::pow(w[2][0], 0.5)*K_01*K_02*det*w[2][0]*w[4][0];
    G[770] = 0.25*std::pow(w[2][0], 0.5)*K_02*K_02*det*w[2][0]*w[4][0];
    G[771] = 0.125*std::pow(w[2][0], 0.5)*K_00*K_00*det*w[2][0]*w[4][0];
    G[772] = 0.25*std::pow(w[2][0], 0.5)*K_00*K_01*det*w[2][0]*w[4][0];
    G[773] = 0.25*std::pow(w[2][0], 0.5)*K_00*K_00*det*w[2][0]*w[4][0];
    G[774] = 0.125*std::pow(w[2][0], 0.5)*K_01*K_01*det*w[2][0]*w[4][0];
    G[775] = 0.25*std::pow(w[2][0], 0.5)*K_01*K_01*det*w[2][0]*w[4][0];
    G[776] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_01*(-0.001*K_01-0.002*K_00) + K_02*(-0.001*K_02-0.002*(K_00 + K_01))-0.001*K_00*K_00);
    G[777] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_01*(-0.002*K_01-0.004*K_00) + K_02*(-0.002*K_02-0.004*(K_00 + K_01))-0.002*K_00*K_00);
    G[778] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(3e-06*K_00*K_00 + K_01*(3e-06*K_01 + 6e-06*K_00) + K_02*(3e-06*K_02 + 6e-06*(K_00 + K_01)));
    G[779] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_01*(-2e-09*K_01-4e-09*K_00) + K_02*(-2e-09*K_02-4e-09*(K_00 + K_01))-2e-09*K_00*K_00);
    G[780] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_01*(-0.001*K_01-0.002*K_00) + K_02*(-0.001*K_02-0.002*(K_00 + K_01))-0.001*K_00*K_00);
    G[781] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_01*(-0.002*K_01-0.004*K_00) + K_02*(-0.002*K_02-0.004*(K_00 + K_01))-0.002*K_00*K_00);
    G[782] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(3e-06*K_00*K_00 + K_01*(3e-06*K_01 + 6e-06*K_00) + K_02*(3e-06*K_02 + 6e-06*(K_00 + K_01)));
    G[783] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_01*(-2e-09*K_01-4e-09*K_00) + K_02*(-2e-09*K_02-4e-09*(K_00 + K_01))-2e-09*K_00*K_00);
    G[784] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_01*(-0.001*K_01-0.002*K_00) + K_02*(-0.001*K_02-0.002*(K_00 + K_01))-0.001*K_00*K_00);
    G[785] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_01*(-0.002*K_01-0.004*K_00) + K_02*(-0.002*K_02-0.004*(K_00 + K_01))-0.002*K_00*K_00);
    G[786] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(3e-06*K_00*K_00 + K_01*(3e-06*K_01 + 6e-06*K_00) + K_02*(3e-06*K_02 + 6e-06*(K_00 + K_01)));
    G[787] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_01*(-2e-09*K_01-4e-09*K_00) + K_02*(-2e-09*K_02-4e-09*(K_00 + K_01))-2e-09*K_00*K_00);
    G[788] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.01*K_00*K_00 + K_01*(0.01*K_01 + 0.02*K_00) + K_02*(0.01*K_02 + 0.02*(K_00 + K_01)));
    G[789] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.02*K_00*K_00 + K_01*(0.02*K_01 + 0.04*K_00) + K_02*(0.02*K_02 + 0.04*(K_00 + K_01)));
    G[790] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(-3e-05*K_01-6e-05*K_00) + K_02*(-3e-05*K_02-6e-05*(K_00 + K_01))-3e-05*K_00*K_00);
    G[791] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2e-08*K_00*K_00 + K_01*(2e-08*K_01 + 4e-08*K_00) + K_02*(2e-08*K_02 + 4e-08*(K_00 + K_01)));
    G[792] = -0.00375*std::pow(w[2][0], 0.5)*K_02*K_02*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[793] = 5e-06*std::pow(w[2][0], 0.5)*K_02*K_02*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[794] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_12*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_10 + K_11));
    G[795] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_20 + K_21));
    G[796] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_02*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[797] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_02*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[798] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_10*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_11 + K_12));
    G[799] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_21 + K_22));
    G[800] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_02*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[801] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_02*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[802] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_11*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_10 + K_12));
    G[803] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_20 + K_22));
    G[804] = 0.0025*K_02*det*(K_00 + K_01 + K_02);
    G[805] = 0.005*K_02*det*(K_00 + K_01 + K_02);
    G[806] = -0.005005*K_02*det*(K_00 + K_01 + K_02);
    G[807] = 1e-05*K_02*det*(K_00 + K_01 + K_02);
    G[808] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_12*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_10 + K_11));
    G[809] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_20 + K_21));
    G[810] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_00*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[811] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_00*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[812] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_10*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_11 + K_12));
    G[813] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_21 + K_22));
    G[814] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_01*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[815] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_01*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[816] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_11*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_10 + K_12));
    G[817] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_20 + K_22));
    G[818] = 0.0025*K_00*det*(K_00 + K_01 + K_02);
    G[819] = 0.005*K_00*det*(K_00 + K_01 + K_02);
    G[820] = -0.005005*K_00*det*(K_00 + K_01 + K_02);
    G[821] = 1e-05*K_00*det*(K_00 + K_01 + K_02);
    G[822] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_12*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_10 + K_11));
    G[823] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_20 + K_21));
    G[824] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_10*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_11 + K_12));
    G[825] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_21 + K_22));
    G[826] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_01*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[827] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_01*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[828] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_11*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_10 + K_12));
    G[829] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_20 + K_22));
    G[830] = 0.0025*K_01*det*(K_00 + K_01 + K_02);
    G[831] = 0.005*K_01*det*(K_00 + K_01 + K_02);
    G[832] = -0.005005*K_01*det*(K_00 + K_01 + K_02);
    G[833] = 1e-05*K_01*det*(K_00 + K_01 + K_02);
    G[834] = 0.075*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[835] = -0.0001*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[836] = 0.075*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[837] = -0.0001*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[838] = 0.075*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[839] = -0.0001*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[840] = -0.1*det*(K_20 + K_21 + K_22);
    G[841] = 0.1001*det*(K_20 + K_21 + K_22);
    G[842] = -0.1*det*(K_10 + K_11 + K_12);
    G[843] = 0.1001*det*(K_10 + K_11 + K_12);
    G[844] = -0.1*det*(K_00 + K_01 + K_02);
    G[845] = 0.1001*det*(K_00 + K_01 + K_02);
    G[846] = 0.25*K_22*det;
    G[847] = 0.25*K_20*det;
    G[848] = 0.25*K_21*det;
    G[849] = -0.25*K_20*det;
    G[850] = -0.25*K_21*det;
    G[851] = -0.25*K_22*det;
    G[852] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(1e-06*K_00*K_00 + K_01*(1e-06*K_01 + 2e-06*K_00) + K_02*(1e-06*K_02 + 2e-06*(K_00 + K_01)));
    G[853] = 2e-06*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[854] = 2e-06*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[855] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(2e-06*K_00*K_00 + K_01*(2e-06*K_01 + 4e-06*K_00) + K_02*(2e-06*K_02 + 4e-06*(K_00 + K_01)));
    G[856] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(1e-06*K_10*K_10 + K_11*(1e-06*K_11 + 2e-06*K_10) + K_12*(1e-06*K_12 + 2e-06*(K_10 + K_11)));
    G[857] = 2e-06*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[858] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(2e-06*K_10*K_10 + K_11*(2e-06*K_11 + 4e-06*K_10) + K_12*(2e-06*K_12 + 4e-06*(K_10 + K_11)));
    G[859] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(1e-06*K_20*K_20 + K_21*(1e-06*K_21 + 2e-06*K_20) + K_22*(1e-06*K_22 + 2e-06*(K_20 + K_21)));
    G[860] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(2e-06*K_20*K_20 + K_21*(2e-06*K_21 + 4e-06*K_20) + K_22*(2e-06*K_22 + 4e-06*(K_20 + K_21)));
    G[861] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(1e-06*K_00*K_00 + K_01*(1e-06*K_01 + 2e-06*K_00) + K_02*(1e-06*K_02 + 2e-06*(K_00 + K_01)));
    G[862] = 2e-06*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[863] = 2e-06*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[864] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(2e-06*K_00*K_00 + K_01*(2e-06*K_01 + 4e-06*K_00) + K_02*(2e-06*K_02 + 4e-06*(K_00 + K_01)));
    G[865] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(1e-06*K_10*K_10 + K_11*(1e-06*K_11 + 2e-06*K_10) + K_12*(1e-06*K_12 + 2e-06*(K_10 + K_11)));
    G[866] = 2e-06*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[867] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(2e-06*K_10*K_10 + K_11*(2e-06*K_11 + 4e-06*K_10) + K_12*(2e-06*K_12 + 4e-06*(K_10 + K_11)));
    G[868] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(1e-06*K_20*K_20 + K_21*(1e-06*K_21 + 2e-06*K_20) + K_22*(1e-06*K_22 + 2e-06*(K_20 + K_21)));
    G[869] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(2e-06*K_20*K_20 + K_21*(2e-06*K_21 + 4e-06*K_20) + K_22*(2e-06*K_22 + 4e-06*(K_20 + K_21)));
    G[870] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(1e-06*K_00*K_00 + K_01*(1e-06*K_01 + 2e-06*K_00) + K_02*(1e-06*K_02 + 2e-06*(K_00 + K_01)));
    G[871] = 2e-06*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[872] = 2e-06*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[873] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(2e-06*K_00*K_00 + K_01*(2e-06*K_01 + 4e-06*K_00) + K_02*(2e-06*K_02 + 4e-06*(K_00 + K_01)));
    G[874] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(1e-06*K_10*K_10 + K_11*(1e-06*K_11 + 2e-06*K_10) + K_12*(1e-06*K_12 + 2e-06*(K_10 + K_11)));
    G[875] = 2e-06*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[876] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(2e-06*K_10*K_10 + K_11*(2e-06*K_11 + 4e-06*K_10) + K_12*(2e-06*K_12 + 4e-06*(K_10 + K_11)));
    G[877] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(1e-06*K_20*K_20 + K_21*(1e-06*K_21 + 2e-06*K_20) + K_22*(1e-06*K_22 + 2e-06*(K_20 + K_21)));
    G[878] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(2e-06*K_20*K_20 + K_21*(2e-06*K_21 + 4e-06*K_20) + K_22*(2e-06*K_22 + 4e-06*(K_20 + K_21)));
    G[879] = -2e-05*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[880] = -2e-05*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[881] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_21*(-2e-05*K_21-4e-05*K_20) + K_22*(-2e-05*K_22-4e-05*(K_20 + K_21))-2e-05*K_20*K_20);
    G[882] = -0.00125*std::pow(w[2][0], 0.5)*K_02*K_22*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[883] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01))-0.0025*K_02*K_12);
    G[884] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01))-0.0025*K_02*K_22);
    G[885] = -0.0025*std::pow(w[2][0], 0.5)*K_02*K_22*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[886] = -0.00125*std::pow(w[2][0], 0.5)*K_12*K_22*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[887] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(-0.00125*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11))-0.0025*K_12*K_22);
    G[888] = -0.0025*std::pow(w[2][0], 0.5)*K_12*K_22*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[889] = -0.00125*std::pow(w[2][0], 0.5)*K_22*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[890] = -0.0025*std::pow(w[2][0], 0.5)*K_22*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[891] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_22*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[892] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))-0.0025*K_00*K_10);
    G[893] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02))-0.0025*K_00*K_20);
    G[894] = -0.0025*std::pow(w[2][0], 0.5)*K_00*K_22*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[895] = -0.00125*std::pow(w[2][0], 0.5)*K_10*K_22*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[896] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(-0.00125*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12))-0.0025*K_10*K_20);
    G[897] = -0.0025*std::pow(w[2][0], 0.5)*K_10*K_22*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[898] = -0.00125*std::pow(w[2][0], 0.5)*K_20*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[899] = -0.0025*std::pow(w[2][0], 0.5)*K_20*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[900] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_22*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[901] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))-0.0025*K_01*K_11);
    G[902] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02))-0.0025*K_01*K_21);
    G[903] = -0.0025*std::pow(w[2][0], 0.5)*K_01*K_22*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[904] = -0.00125*std::pow(w[2][0], 0.5)*K_11*K_22*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[905] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(-0.00125*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12))-0.0025*K_11*K_21);
    G[906] = -0.0025*std::pow(w[2][0], 0.5)*K_11*K_22*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[907] = -0.00125*std::pow(w[2][0], 0.5)*K_21*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[908] = -0.0025*std::pow(w[2][0], 0.5)*K_21*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[909] = -0.00125*std::pow(w[2][0], 0.5)*K_02*K_20*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[910] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01))-0.0025*K_02*K_12);
    G[911] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01))-0.0025*K_02*K_22);
    G[912] = -0.0025*std::pow(w[2][0], 0.5)*K_02*K_20*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[913] = -0.00125*std::pow(w[2][0], 0.5)*K_12*K_20*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[914] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(-0.00125*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11))-0.0025*K_12*K_22);
    G[915] = -0.0025*std::pow(w[2][0], 0.5)*K_12*K_20*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[916] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_20*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[917] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))-0.0025*K_00*K_10);
    G[918] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02))-0.0025*K_00*K_20);
    G[919] = -0.0025*std::pow(w[2][0], 0.5)*K_00*K_20*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[920] = -0.00125*std::pow(w[2][0], 0.5)*K_10*K_20*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[921] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(-0.00125*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12))-0.0025*K_10*K_20);
    G[922] = -0.0025*std::pow(w[2][0], 0.5)*K_10*K_20*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[923] = -0.00125*std::pow(w[2][0], 0.5)*K_20*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[924] = -0.0025*std::pow(w[2][0], 0.5)*K_20*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[925] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_20*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[926] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))-0.0025*K_01*K_11);
    G[927] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02))-0.0025*K_01*K_21);
    G[928] = -0.0025*std::pow(w[2][0], 0.5)*K_01*K_20*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[929] = -0.00125*std::pow(w[2][0], 0.5)*K_11*K_20*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[930] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(-0.00125*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12))-0.0025*K_11*K_21);
    G[931] = -0.0025*std::pow(w[2][0], 0.5)*K_11*K_20*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[932] = -0.00125*std::pow(w[2][0], 0.5)*K_20*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[933] = -0.0025*std::pow(w[2][0], 0.5)*K_20*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[934] = -0.00125*std::pow(w[2][0], 0.5)*K_02*K_21*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[935] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01))-0.0025*K_02*K_12);
    G[936] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01))-0.0025*K_02*K_22);
    G[937] = -0.0025*std::pow(w[2][0], 0.5)*K_02*K_21*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[938] = -0.00125*std::pow(w[2][0], 0.5)*K_12*K_21*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[939] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(-0.00125*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11))-0.0025*K_12*K_22);
    G[940] = -0.0025*std::pow(w[2][0], 0.5)*K_12*K_21*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[941] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_21*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[942] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))-0.0025*K_00*K_10);
    G[943] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02))-0.0025*K_00*K_20);
    G[944] = -0.0025*std::pow(w[2][0], 0.5)*K_00*K_21*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[945] = -0.00125*std::pow(w[2][0], 0.5)*K_10*K_21*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[946] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(-0.00125*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12))-0.0025*K_10*K_20);
    G[947] = -0.0025*std::pow(w[2][0], 0.5)*K_10*K_21*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[948] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_21*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[949] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))-0.0025*K_01*K_11);
    G[950] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02))-0.0025*K_01*K_21);
    G[951] = -0.0025*std::pow(w[2][0], 0.5)*K_01*K_21*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[952] = -0.00125*std::pow(w[2][0], 0.5)*K_11*K_21*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[953] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(-0.00125*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12))-0.0025*K_11*K_21);
    G[954] = -0.0025*std::pow(w[2][0], 0.5)*K_11*K_21*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[955] = -0.00125*std::pow(w[2][0], 0.5)*K_21*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[956] = -0.0025*std::pow(w[2][0], 0.5)*K_21*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[957] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.025*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01)) + 0.05*K_02*K_22);
    G[958] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.025*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11)) + 0.05*K_12*K_22);
    G[959] = 0.05*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[960] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.025*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02)) + 0.05*K_00*K_20);
    G[961] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.025*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12)) + 0.05*K_10*K_20);
    G[962] = 0.05*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[963] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.025*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02)) + 0.05*K_01*K_21);
    G[964] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.025*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12)) + 0.05*K_11*K_21);
    G[965] = 0.05*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[966] = 0.25*K_12*det;
    G[967] = 0.25*K_10*det;
    G[968] = 0.25*K_11*det;
    G[969] = -0.25*K_10*det;
    G[970] = -0.25*K_11*det;
    G[971] = -0.25*K_12*det;
    G[972] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(1e-06*K_00*K_00 + K_01*(1e-06*K_01 + 2e-06*K_00) + K_02*(1e-06*K_02 + 2e-06*(K_00 + K_01)));
    G[973] = 2e-06*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[974] = 2e-06*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[975] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(2e-06*K_00*K_00 + K_01*(2e-06*K_01 + 4e-06*K_00) + K_02*(2e-06*K_02 + 4e-06*(K_00 + K_01)));
    G[976] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(1e-06*K_10*K_10 + K_11*(1e-06*K_11 + 2e-06*K_10) + K_12*(1e-06*K_12 + 2e-06*(K_10 + K_11)));
    G[977] = 2e-06*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[978] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(2e-06*K_10*K_10 + K_11*(2e-06*K_11 + 4e-06*K_10) + K_12*(2e-06*K_12 + 4e-06*(K_10 + K_11)));
    G[979] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(1e-06*K_20*K_20 + K_21*(1e-06*K_21 + 2e-06*K_20) + K_22*(1e-06*K_22 + 2e-06*(K_20 + K_21)));
    G[980] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(2e-06*K_20*K_20 + K_21*(2e-06*K_21 + 4e-06*K_20) + K_22*(2e-06*K_22 + 4e-06*(K_20 + K_21)));
    G[981] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(1e-06*K_00*K_00 + K_01*(1e-06*K_01 + 2e-06*K_00) + K_02*(1e-06*K_02 + 2e-06*(K_00 + K_01)));
    G[982] = 2e-06*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[983] = 2e-06*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[984] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(2e-06*K_00*K_00 + K_01*(2e-06*K_01 + 4e-06*K_00) + K_02*(2e-06*K_02 + 4e-06*(K_00 + K_01)));
    G[985] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(1e-06*K_10*K_10 + K_11*(1e-06*K_11 + 2e-06*K_10) + K_12*(1e-06*K_12 + 2e-06*(K_10 + K_11)));
    G[986] = 2e-06*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[987] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(2e-06*K_10*K_10 + K_11*(2e-06*K_11 + 4e-06*K_10) + K_12*(2e-06*K_12 + 4e-06*(K_10 + K_11)));
    G[988] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(1e-06*K_20*K_20 + K_21*(1e-06*K_21 + 2e-06*K_20) + K_22*(1e-06*K_22 + 2e-06*(K_20 + K_21)));
    G[989] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(2e-06*K_20*K_20 + K_21*(2e-06*K_21 + 4e-06*K_20) + K_22*(2e-06*K_22 + 4e-06*(K_20 + K_21)));
    G[990] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(1e-06*K_00*K_00 + K_01*(1e-06*K_01 + 2e-06*K_00) + K_02*(1e-06*K_02 + 2e-06*(K_00 + K_01)));
    G[991] = 2e-06*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[992] = 2e-06*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[993] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(2e-06*K_00*K_00 + K_01*(2e-06*K_01 + 4e-06*K_00) + K_02*(2e-06*K_02 + 4e-06*(K_00 + K_01)));
    G[994] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(1e-06*K_10*K_10 + K_11*(1e-06*K_11 + 2e-06*K_10) + K_12*(1e-06*K_12 + 2e-06*(K_10 + K_11)));
    G[995] = 2e-06*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[996] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(2e-06*K_10*K_10 + K_11*(2e-06*K_11 + 4e-06*K_10) + K_12*(2e-06*K_12 + 4e-06*(K_10 + K_11)));
    G[997] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(1e-06*K_20*K_20 + K_21*(1e-06*K_21 + 2e-06*K_20) + K_22*(1e-06*K_22 + 2e-06*(K_20 + K_21)));
    G[998] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(2e-06*K_20*K_20 + K_21*(2e-06*K_21 + 4e-06*K_20) + K_22*(2e-06*K_22 + 4e-06*(K_20 + K_21)));
    G[999] = -2e-05*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[1000] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(-2e-05*K_11-4e-05*K_10) + K_12*(-2e-05*K_12-4e-05*(K_10 + K_11))-2e-05*K_10*K_10);
    G[1001] = -0.00125*std::pow(w[2][0], 0.5)*K_02*K_12*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1002] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01))-0.0025*K_02*K_12);
    G[1003] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01))-0.0025*K_02*K_22);
    G[1004] = -0.0025*std::pow(w[2][0], 0.5)*K_02*K_12*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1005] = -0.00125*std::pow(w[2][0], 0.5)*K_12*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1006] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(-0.00125*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11))-0.0025*K_12*K_22);
    G[1007] = -0.0025*std::pow(w[2][0], 0.5)*K_12*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1008] = -0.00125*std::pow(w[2][0], 0.5)*K_12*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1009] = -0.0025*std::pow(w[2][0], 0.5)*K_12*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1010] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_12*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1011] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))-0.0025*K_00*K_10);
    G[1012] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02))-0.0025*K_00*K_20);
    G[1013] = -0.0025*std::pow(w[2][0], 0.5)*K_00*K_12*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1014] = -0.00125*std::pow(w[2][0], 0.5)*K_10*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1015] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(-0.00125*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12))-0.0025*K_10*K_20);
    G[1016] = -0.0025*std::pow(w[2][0], 0.5)*K_10*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1017] = -0.00125*std::pow(w[2][0], 0.5)*K_12*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1018] = -0.0025*std::pow(w[2][0], 0.5)*K_12*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1019] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_12*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1020] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))-0.0025*K_01*K_11);
    G[1021] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02))-0.0025*K_01*K_21);
    G[1022] = -0.0025*std::pow(w[2][0], 0.5)*K_01*K_12*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1023] = -0.00125*std::pow(w[2][0], 0.5)*K_11*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1024] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(-0.00125*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12))-0.0025*K_11*K_21);
    G[1025] = -0.0025*std::pow(w[2][0], 0.5)*K_11*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1026] = -0.00125*std::pow(w[2][0], 0.5)*K_12*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1027] = -0.0025*std::pow(w[2][0], 0.5)*K_12*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1028] = -0.00125*std::pow(w[2][0], 0.5)*K_02*K_10*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1029] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01))-0.0025*K_02*K_12);
    G[1030] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01))-0.0025*K_02*K_22);
    G[1031] = -0.0025*std::pow(w[2][0], 0.5)*K_02*K_10*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1032] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(-0.00125*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11))-0.0025*K_12*K_22);
    G[1033] = -0.00125*std::pow(w[2][0], 0.5)*K_10*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1034] = -0.0025*std::pow(w[2][0], 0.5)*K_10*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1035] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_10*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1036] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))-0.0025*K_00*K_10);
    G[1037] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02))-0.0025*K_00*K_20);
    G[1038] = -0.0025*std::pow(w[2][0], 0.5)*K_00*K_10*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1039] = -0.00125*std::pow(w[2][0], 0.5)*K_10*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1040] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(-0.00125*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12))-0.0025*K_10*K_20);
    G[1041] = -0.0025*std::pow(w[2][0], 0.5)*K_10*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1042] = -0.00125*std::pow(w[2][0], 0.5)*K_10*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1043] = -0.0025*std::pow(w[2][0], 0.5)*K_10*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1044] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_10*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1045] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))-0.0025*K_01*K_11);
    G[1046] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02))-0.0025*K_01*K_21);
    G[1047] = -0.0025*std::pow(w[2][0], 0.5)*K_01*K_10*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1048] = -0.00125*std::pow(w[2][0], 0.5)*K_10*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1049] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(-0.00125*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12))-0.0025*K_11*K_21);
    G[1050] = -0.0025*std::pow(w[2][0], 0.5)*K_10*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1051] = -0.00125*std::pow(w[2][0], 0.5)*K_10*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1052] = -0.0025*std::pow(w[2][0], 0.5)*K_10*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1053] = -0.00125*std::pow(w[2][0], 0.5)*K_02*K_11*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1054] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01))-0.0025*K_02*K_12);
    G[1055] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01))-0.0025*K_02*K_22);
    G[1056] = -0.0025*std::pow(w[2][0], 0.5)*K_02*K_11*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1057] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(-0.00125*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11))-0.0025*K_12*K_22);
    G[1058] = -0.00125*std::pow(w[2][0], 0.5)*K_11*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1059] = -0.0025*std::pow(w[2][0], 0.5)*K_11*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1060] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_11*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1061] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))-0.0025*K_00*K_10);
    G[1062] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02))-0.0025*K_00*K_20);
    G[1063] = -0.0025*std::pow(w[2][0], 0.5)*K_00*K_11*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1064] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(-0.00125*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12))-0.0025*K_10*K_20);
    G[1065] = -0.00125*std::pow(w[2][0], 0.5)*K_11*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1066] = -0.0025*std::pow(w[2][0], 0.5)*K_11*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1067] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_11*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1068] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))-0.0025*K_01*K_11);
    G[1069] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02))-0.0025*K_01*K_21);
    G[1070] = -0.0025*std::pow(w[2][0], 0.5)*K_01*K_11*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1071] = -0.00125*std::pow(w[2][0], 0.5)*K_11*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1072] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(-0.00125*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12))-0.0025*K_11*K_21);
    G[1073] = -0.0025*std::pow(w[2][0], 0.5)*K_11*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1074] = -0.00125*std::pow(w[2][0], 0.5)*K_11*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1075] = -0.0025*std::pow(w[2][0], 0.5)*K_11*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1076] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.025*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)) + 0.05*K_02*K_12);
    G[1077] = 0.05*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1078] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.025*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)) + 0.05*K_00*K_10);
    G[1079] = 0.05*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1080] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(0.025*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)) + 0.05*K_01*K_11);
    G[1081] = 0.05*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1082] = 0.25*K_02*det;
    G[1083] = 0.25*K_00*det;
    G[1084] = 0.25*K_01*det;
    G[1085] = -0.25*K_00*det;
    G[1086] = -0.25*K_01*det;
    G[1087] = -0.25*K_02*det;
    G[1088] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(1e-06*K_00*K_00 + K_01*(1e-06*K_01 + 2e-06*K_00) + K_02*(1e-06*K_02 + 2e-06*(K_00 + K_01)));
    G[1089] = 2e-06*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[1090] = 2e-06*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[1091] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(2e-06*K_00*K_00 + K_01*(2e-06*K_01 + 4e-06*K_00) + K_02*(2e-06*K_02 + 4e-06*(K_00 + K_01)));
    G[1092] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(1e-06*K_10*K_10 + K_11*(1e-06*K_11 + 2e-06*K_10) + K_12*(1e-06*K_12 + 2e-06*(K_10 + K_11)));
    G[1093] = 2e-06*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[1094] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(2e-06*K_10*K_10 + K_11*(2e-06*K_11 + 4e-06*K_10) + K_12*(2e-06*K_12 + 4e-06*(K_10 + K_11)));
    G[1095] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(1e-06*K_20*K_20 + K_21*(1e-06*K_21 + 2e-06*K_20) + K_22*(1e-06*K_22 + 2e-06*(K_20 + K_21)));
    G[1096] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(2e-06*K_20*K_20 + K_21*(2e-06*K_21 + 4e-06*K_20) + K_22*(2e-06*K_22 + 4e-06*(K_20 + K_21)));
    G[1097] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(1e-06*K_00*K_00 + K_01*(1e-06*K_01 + 2e-06*K_00) + K_02*(1e-06*K_02 + 2e-06*(K_00 + K_01)));
    G[1098] = 2e-06*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[1099] = 2e-06*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[1100] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(2e-06*K_00*K_00 + K_01*(2e-06*K_01 + 4e-06*K_00) + K_02*(2e-06*K_02 + 4e-06*(K_00 + K_01)));
    G[1101] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(1e-06*K_10*K_10 + K_11*(1e-06*K_11 + 2e-06*K_10) + K_12*(1e-06*K_12 + 2e-06*(K_10 + K_11)));
    G[1102] = 2e-06*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[1103] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(2e-06*K_10*K_10 + K_11*(2e-06*K_11 + 4e-06*K_10) + K_12*(2e-06*K_12 + 4e-06*(K_10 + K_11)));
    G[1104] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(1e-06*K_20*K_20 + K_21*(1e-06*K_21 + 2e-06*K_20) + K_22*(1e-06*K_22 + 2e-06*(K_20 + K_21)));
    G[1105] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(2e-06*K_20*K_20 + K_21*(2e-06*K_21 + 4e-06*K_20) + K_22*(2e-06*K_22 + 4e-06*(K_20 + K_21)));
    G[1106] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(1e-06*K_00*K_00 + K_01*(1e-06*K_01 + 2e-06*K_00) + K_02*(1e-06*K_02 + 2e-06*(K_00 + K_01)));
    G[1107] = 2e-06*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[1108] = 2e-06*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[1109] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(2e-06*K_00*K_00 + K_01*(2e-06*K_01 + 4e-06*K_00) + K_02*(2e-06*K_02 + 4e-06*(K_00 + K_01)));
    G[1110] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(1e-06*K_10*K_10 + K_11*(1e-06*K_11 + 2e-06*K_10) + K_12*(1e-06*K_12 + 2e-06*(K_10 + K_11)));
    G[1111] = 2e-06*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[1112] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(2e-06*K_10*K_10 + K_11*(2e-06*K_11 + 4e-06*K_10) + K_12*(2e-06*K_12 + 4e-06*(K_10 + K_11)));
    G[1113] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(1e-06*K_20*K_20 + K_21*(1e-06*K_21 + 2e-06*K_20) + K_22*(1e-06*K_22 + 2e-06*(K_20 + K_21)));
    G[1114] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(2e-06*K_20*K_20 + K_21*(2e-06*K_21 + 4e-06*K_20) + K_22*(2e-06*K_22 + 4e-06*(K_20 + K_21)));
    G[1115] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(-2e-05*K_01-4e-05*K_00) + K_02*(-2e-05*K_02-4e-05*(K_00 + K_01))-2e-05*K_00*K_00);
    G[1116] = -0.00125*std::pow(w[2][0], 0.5)*K_02*K_02*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1117] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01))-0.0025*K_02*K_12);
    G[1118] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01))-0.0025*K_02*K_22);
    G[1119] = -0.0025*std::pow(w[2][0], 0.5)*K_02*K_02*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1120] = -0.00125*std::pow(w[2][0], 0.5)*K_02*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1121] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(-0.00125*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11))-0.0025*K_12*K_22);
    G[1122] = -0.0025*std::pow(w[2][0], 0.5)*K_02*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1123] = -0.00125*std::pow(w[2][0], 0.5)*K_02*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1124] = -0.0025*std::pow(w[2][0], 0.5)*K_02*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1125] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_02*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1126] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))-0.0025*K_00*K_10);
    G[1127] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02))-0.0025*K_00*K_20);
    G[1128] = -0.0025*std::pow(w[2][0], 0.5)*K_00*K_02*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1129] = -0.00125*std::pow(w[2][0], 0.5)*K_02*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1130] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(-0.00125*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12))-0.0025*K_10*K_20);
    G[1131] = -0.0025*std::pow(w[2][0], 0.5)*K_02*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1132] = -0.00125*std::pow(w[2][0], 0.5)*K_02*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1133] = -0.0025*std::pow(w[2][0], 0.5)*K_02*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1134] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_02*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1135] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))-0.0025*K_01*K_11);
    G[1136] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02))-0.0025*K_01*K_21);
    G[1137] = -0.0025*std::pow(w[2][0], 0.5)*K_01*K_02*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1138] = -0.00125*std::pow(w[2][0], 0.5)*K_02*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1139] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(-0.00125*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12))-0.0025*K_11*K_21);
    G[1140] = -0.0025*std::pow(w[2][0], 0.5)*K_02*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1141] = -0.00125*std::pow(w[2][0], 0.5)*K_02*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1142] = -0.0025*std::pow(w[2][0], 0.5)*K_02*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1143] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01))-0.0025*K_02*K_12);
    G[1144] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01))-0.0025*K_02*K_22);
    G[1145] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1146] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(-0.00125*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11))-0.0025*K_12*K_22);
    G[1147] = -0.0025*std::pow(w[2][0], 0.5)*K_00*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1148] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1149] = -0.0025*std::pow(w[2][0], 0.5)*K_00*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1150] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_00*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1151] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))-0.0025*K_00*K_10);
    G[1152] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02))-0.0025*K_00*K_20);
    G[1153] = -0.0025*std::pow(w[2][0], 0.5)*K_00*K_00*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1154] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1155] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(-0.00125*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12))-0.0025*K_10*K_20);
    G[1156] = -0.0025*std::pow(w[2][0], 0.5)*K_00*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1157] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1158] = -0.0025*std::pow(w[2][0], 0.5)*K_00*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1159] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_01*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1160] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))-0.0025*K_01*K_11);
    G[1161] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02))-0.0025*K_01*K_21);
    G[1162] = -0.0025*std::pow(w[2][0], 0.5)*K_00*K_01*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1163] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1164] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(-0.00125*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12))-0.0025*K_11*K_21);
    G[1165] = -0.0025*std::pow(w[2][0], 0.5)*K_00*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1166] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1167] = -0.0025*std::pow(w[2][0], 0.5)*K_00*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1168] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01))-0.0025*K_02*K_12);
    G[1169] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01))-0.0025*K_02*K_22);
    G[1170] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1171] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(-0.00125*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11))-0.0025*K_12*K_22);
    G[1172] = -0.0025*std::pow(w[2][0], 0.5)*K_01*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1173] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1174] = -0.0025*std::pow(w[2][0], 0.5)*K_01*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1175] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))-0.0025*K_00*K_10);
    G[1176] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02))-0.0025*K_00*K_20);
    G[1177] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1178] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(-0.00125*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12))-0.0025*K_10*K_20);
    G[1179] = -0.0025*std::pow(w[2][0], 0.5)*K_01*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1180] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1181] = -0.0025*std::pow(w[2][0], 0.5)*K_01*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1182] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_01*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1183] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))-0.0025*K_01*K_11);
    G[1184] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02))-0.0025*K_01*K_21);
    G[1185] = -0.0025*std::pow(w[2][0], 0.5)*K_01*K_01*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1186] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1187] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(-0.00125*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12))-0.0025*K_11*K_21);
    G[1188] = -0.0025*std::pow(w[2][0], 0.5)*K_01*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1189] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1190] = -0.0025*std::pow(w[2][0], 0.5)*K_01*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1191] = 0.05*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1192] = 0.05*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1193] = 0.05*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1194] = det/w[3][0];
    G[1195] = 0.03125*std::pow(w[2][0], 0.5)*K_02*K_02*det*w[2][0]*w[4][0];
    G[1196] = 0.0625*std::pow(w[2][0], 0.5)*K_02*K_12*det*w[2][0]*w[4][0];
    G[1197] = 0.0625*std::pow(w[2][0], 0.5)*K_02*K_22*det*w[2][0]*w[4][0];
    G[1198] = 0.0625*std::pow(w[2][0], 0.5)*K_02*K_02*det*w[2][0]*w[4][0];
    G[1199] = 0.03125*std::pow(w[2][0], 0.5)*K_12*K_12*det*w[2][0]*w[4][0];
    G[1200] = 0.0625*std::pow(w[2][0], 0.5)*K_12*K_22*det*w[2][0]*w[4][0];
    G[1201] = 0.0625*std::pow(w[2][0], 0.5)*K_12*K_12*det*w[2][0]*w[4][0];
    G[1202] = 0.03125*std::pow(w[2][0], 0.5)*K_22*K_22*det*w[2][0]*w[4][0];
    G[1203] = 0.0625*std::pow(w[2][0], 0.5)*K_22*K_22*det*w[2][0]*w[4][0];
    G[1204] = 0.0625*std::pow(w[2][0], 0.5)*K_00*K_02*det*w[2][0]*w[4][0];
    G[1205] = 0.0625*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*K_12 + K_02*K_10);
    G[1206] = 0.0625*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*K_22 + K_02*K_20);
    G[1207] = 0.125*std::pow(w[2][0], 0.5)*K_00*K_02*det*w[2][0]*w[4][0];
    G[1208] = 0.0625*std::pow(w[2][0], 0.5)*K_10*K_12*det*w[2][0]*w[4][0];
    G[1209] = 0.0625*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_10*K_22 + K_12*K_20);
    G[1210] = 0.125*std::pow(w[2][0], 0.5)*K_10*K_12*det*w[2][0]*w[4][0];
    G[1211] = 0.0625*std::pow(w[2][0], 0.5)*K_20*K_22*det*w[2][0]*w[4][0];
    G[1212] = 0.125*std::pow(w[2][0], 0.5)*K_20*K_22*det*w[2][0]*w[4][0];
    G[1213] = 0.0625*std::pow(w[2][0], 0.5)*K_01*K_02*det*w[2][0]*w[4][0];
    G[1214] = 0.0625*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*K_12 + K_02*K_11);
    G[1215] = 0.0625*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*K_22 + K_02*K_21);
    G[1216] = 0.125*std::pow(w[2][0], 0.5)*K_01*K_02*det*w[2][0]*w[4][0];
    G[1217] = 0.0625*std::pow(w[2][0], 0.5)*K_11*K_12*det*w[2][0]*w[4][0];
    G[1218] = 0.0625*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*K_22 + K_12*K_21);
    G[1219] = 0.125*std::pow(w[2][0], 0.5)*K_11*K_12*det*w[2][0]*w[4][0];
    G[1220] = 0.0625*std::pow(w[2][0], 0.5)*K_21*K_22*det*w[2][0]*w[4][0];
    G[1221] = 0.125*std::pow(w[2][0], 0.5)*K_21*K_22*det*w[2][0]*w[4][0];
    G[1222] = -0.125*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0];
    G[1223] = -0.125*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0];
    G[1224] = -0.125*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0];
    G[1225] = 0.03125*std::pow(w[2][0], 0.5)*K_00*K_00*det*w[2][0]*w[4][0];
    G[1226] = 0.0625*std::pow(w[2][0], 0.5)*K_00*K_10*det*w[2][0]*w[4][0];
    G[1227] = 0.0625*std::pow(w[2][0], 0.5)*K_00*K_20*det*w[2][0]*w[4][0];
    G[1228] = 0.0625*std::pow(w[2][0], 0.5)*K_00*K_00*det*w[2][0]*w[4][0];
    G[1229] = 0.03125*std::pow(w[2][0], 0.5)*K_10*K_10*det*w[2][0]*w[4][0];
    G[1230] = 0.0625*std::pow(w[2][0], 0.5)*K_10*K_20*det*w[2][0]*w[4][0];
    G[1231] = 0.0625*std::pow(w[2][0], 0.5)*K_10*K_10*det*w[2][0]*w[4][0];
    G[1232] = 0.03125*std::pow(w[2][0], 0.5)*K_20*K_20*det*w[2][0]*w[4][0];
    G[1233] = 0.0625*std::pow(w[2][0], 0.5)*K_20*K_20*det*w[2][0]*w[4][0];
    G[1234] = 0.0625*std::pow(w[2][0], 0.5)*K_00*K_01*det*w[2][0]*w[4][0];
    G[1235] = 0.0625*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*K_11 + K_01*K_10);
    G[1236] = 0.0625*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*K_21 + K_01*K_20);
    G[1237] = 0.125*std::pow(w[2][0], 0.5)*K_00*K_01*det*w[2][0]*w[4][0];
    G[1238] = 0.0625*std::pow(w[2][0], 0.5)*K_10*K_11*det*w[2][0]*w[4][0];
    G[1239] = 0.0625*std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_10*K_21 + K_11*K_20);
    G[1240] = 0.125*std::pow(w[2][0], 0.5)*K_10*K_11*det*w[2][0]*w[4][0];
    G[1241] = 0.0625*std::pow(w[2][0], 0.5)*K_20*K_21*det*w[2][0]*w[4][0];
    G[1242] = 0.125*std::pow(w[2][0], 0.5)*K_20*K_21*det*w[2][0]*w[4][0];
    G[1243] = -0.125*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0];
    G[1244] = -0.125*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0];
    G[1245] = -0.125*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0];
    G[1246] = 0.03125*std::pow(w[2][0], 0.5)*K_01*K_01*det*w[2][0]*w[4][0];
    G[1247] = 0.0625*std::pow(w[2][0], 0.5)*K_01*K_11*det*w[2][0]*w[4][0];
    G[1248] = 0.0625*std::pow(w[2][0], 0.5)*K_01*K_21*det*w[2][0]*w[4][0];
    G[1249] = 0.0625*std::pow(w[2][0], 0.5)*K_01*K_01*det*w[2][0]*w[4][0];
    G[1250] = 0.03125*std::pow(w[2][0], 0.5)*K_11*K_11*det*w[2][0]*w[4][0];
    G[1251] = 0.0625*std::pow(w[2][0], 0.5)*K_11*K_21*det*w[2][0]*w[4][0];
    G[1252] = 0.0625*std::pow(w[2][0], 0.5)*K_11*K_11*det*w[2][0]*w[4][0];
    G[1253] = 0.03125*std::pow(w[2][0], 0.5)*K_21*K_21*det*w[2][0]*w[4][0];
    G[1254] = 0.0625*std::pow(w[2][0], 0.5)*K_21*K_21*det*w[2][0]*w[4][0];
    G[1255] = -0.125*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0];
    G[1256] = -0.125*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0];
    G[1257] = -0.125*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 616784
    for (unsigned int ip = 0; ip < 14; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      double F13 = 0.0;
      double F14 = 0.0;
      double F15 = 0.0;
      double F16 = 0.0;
      double F17 = 0.0;
      double F18 = 0.0;
      double F19 = 0.0;
      double F20 = 0.0;
      double F21 = 0.0;
      double F22 = 0.0;
      double F23 = 0.0;
      double F24 = 0.0;
      double F25 = 0.0;
      double F26 = 0.0;
      double F27 = 0.0;
      double F28 = 0.0;
      double F29 = 0.0;
      double F30 = 0.0;
      double F31 = 0.0;
      double F32 = 0.0;
      double F33 = 0.0;
      double F34 = 0.0;
      double F35 = 0.0;
      double F36 = 0.0;
      double F37 = 0.0;
      double F38 = 0.0;
      double F39 = 0.0;
      double F40 = 0.0;
      
      // Total number of operations to compute function values = 96
      for (unsigned int r = 0; r < 2; r++)
      {
        F3 += FE0_D001[ip][r]*w[0][nzc6[r]];
        F4 += FE0_D001[ip][r]*w[0][nzc5[r]];
        F5 += FE0_D001[ip][r]*w[0][nzc4[r]];
        F6 += FE0_D001[ip][r]*w[7][nzc6[r]];
        F7 += FE0_D001[ip][r]*w[7][nzc5[r]];
        F8 += FE0_D001[ip][r]*w[7][nzc4[r]];
        F13 += FE0_D001[ip][r]*w[0][nzc10[r]];
        F14 += FE0_D001[ip][r]*w[0][nzc9[r]];
        F15 += FE0_D001[ip][r]*w[0][nzc8[r]];
        F16 += FE0_D001[ip][r]*w[7][nzc10[r]];
        F17 += FE0_D001[ip][r]*w[7][nzc9[r]];
        F18 += FE0_D001[ip][r]*w[7][nzc8[r]];
        F20 += FE0_D001[ip][r]*w[0][nzc14[r]];
        F21 += FE0_D001[ip][r]*w[0][nzc13[r]];
        F22 += FE0_D001[ip][r]*w[0][nzc12[r]];
        F23 += FE0_D001[ip][r]*w[7][nzc14[r]];
        F24 += FE0_D001[ip][r]*w[7][nzc13[r]];
        F25 += FE0_D001[ip][r]*w[7][nzc12[r]];
        F27 += FE0_D001[ip][r]*w[1][nzc2[r]];
        F28 += FE0_D001[ip][r]*w[1][nzc1[r]];
        F29 += FE0_D001[ip][r]*w[1][nzc0[r]];
        F30 += FE0_D001[ip][r]*w[8][nzc2[r]];
        F31 += FE0_D001[ip][r]*w[8][nzc1[r]];
        F32 += FE0_D001[ip][r]*w[8][nzc0[r]];
      }// end loop over 'r'
      
      // Total number of operations to compute function values = 136
      for (unsigned int r = 0; r < 4; r++)
      {
        F0 += FE0[ip][r]*w[0][nzc11[r]];
        F1 += FE0[ip][r]*w[0][nzc3[r]];
        F2 += FE0[ip][r]*w[0][nzc7[r]];
        F9 += FE0[ip][r]*w[7][nzc3[r]];
        F10 += FE0[ip][r]*w[7][nzc7[r]];
        F11 += FE0[ip][r]*w[7][nzc11[r]];
        F12 += FE0[ip][r]*w[9][nzc3[r]];
        F19 += FE0[ip][r]*w[9][nzc7[r]];
        F26 += FE0[ip][r]*w[9][nzc11[r]];
        F33 += FE0[ip][r]*w[1][r];
        F34 += FE0[ip][r]*w[8][r];
        F35 += FE0[ip][r]*w[11][nzc3[r]];
        F36 += FE0[ip][r]*w[12][nzc3[r]];
        F37 += FE0[ip][r]*w[11][nzc7[r]];
        F38 += FE0[ip][r]*w[12][nzc7[r]];
        F39 += FE0[ip][r]*w[11][nzc11[r]];
        F40 += FE0[ip][r]*w[12][nzc11[r]];
      }// end loop over 'r'
      double C[6];
      // Compute conditional, operations: 13.
      C[0] = (0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22) < 0.0) ? -1.0 : 1.0;
      // Compute conditional, operations: 13.
      C[1] = (0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22) == 0.0) ? 0.0 : C[0];
      // Compute conditional, operations: 13.
      C[2] = (0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20) < 0.0) ? -1.0 : 1.0;
      // Compute conditional, operations: 13.
      C[3] = (0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20) == 0.0) ? 0.0 : C[2];
      // Compute conditional, operations: 13.
      C[4] = (0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21) < 0.0) ? -1.0 : 1.0;
      // Compute conditional, operations: 13.
      C[5] = (0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21) == 0.0) ? 0.0 : C[4];
      
      // Number of operations to compute ip constants: 43446
      double I[16];
      // Number of operations: 3070
      I[0] = W14[ip]*(F0*F0*G[1] + F1*(F0*G[2] + F1*G[5]) + F10*(F0*G[3] + F1*G[6] + F10*G[8]) + F11*(F0*G[4] + F1*G[2] + F10*G[3] + F11*G[1]) + F2*(F1*G[6] + F10*G[9] + F2*G[8] + G[3]*(F0 + F11)) + F9*(F1*G[7] + F9*G[5] + G[2]*(F0 + F11) + G[6]*(F10 + F2)) + G[0]*(std::abs(F0) + std::abs(F1) + std::abs(F2)) + (C[1]*F27*F33*F33*G[10] + C[1]*F27*F33*F34*G[11] + C[1]*F27*F33*G[12] + C[1]*F27*F34*F34*G[10] + C[1]*F27*F34*G[12] + C[1]*F27*G[13] + C[1]*F28*F33*F33*G[14] + C[1]*F28*F33*F34*G[15] + C[1]*F28*F33*G[16] + C[1]*F28*F34*F34*G[14] + C[1]*F28*F34*G[16] + C[1]*F28*G[17] + C[1]*F29*F33*F33*G[18] + C[1]*F29*F33*F34*G[19] + C[1]*F29*F33*G[20] + C[1]*F29*F34*F34*G[18] + C[1]*F29*F34*G[20] + C[1]*F29*G[21] + C[1]*F30*F33*F33*G[10] + C[1]*F30*F33*F34*G[11] + C[1]*F30*F33*G[12] + C[1]*F30*F34*F34*G[10] + C[1]*F30*F34*G[12] + C[1]*F30*G[13] + C[1]*F31*F33*F33*G[14] + C[1]*F31*F33*F34*G[15] + C[1]*F31*F33*G[16] + C[1]*F31*F34*F34*G[14] + C[1]*F31*F34*G[16] + C[1]*F31*G[17] + C[1]*F32*F33*F33*G[18] + C[1]*F32*F33*F34*G[19] + C[1]*F32*F33*G[20] + C[1]*F32*F34*F34*G[18] + C[1]*F32*F34*G[20] + C[1]*F32*G[21] + C[3]*F27*F33*F33*G[22] + C[3]*F27*F33*F34*G[23] + C[3]*F27*F33*G[24] + C[3]*F27*F34*F34*G[22] + C[3]*F27*F34*G[24] + C[3]*F27*G[25] + C[3]*F28*F33*F33*G[26] + C[3]*F28*F33*F34*G[27] + C[3]*F28*F33*G[28] + C[3]*F28*F34*F34*G[26] + C[3]*F28*F34*G[28] + C[3]*F28*G[29] + C[3]*F29*F33*F33*G[30] + C[3]*F29*F33*F34*G[31] + C[3]*F29*F33*G[32] + C[3]*F29*F34*F34*G[30] + C[3]*F29*F34*G[32] + C[3]*F29*G[33] + C[3]*F30*F33*F33*G[22] + C[3]*F30*F33*F34*G[23] + C[3]*F30*F33*G[24] + C[3]*F30*F34*F34*G[22] + C[3]*F30*F34*G[24] + C[3]*F30*G[25] + C[3]*F31*F33*F33*G[26] + C[3]*F31*F33*F34*G[27] + C[3]*F31*F33*G[28] + C[3]*F31*F34*F34*G[26] + C[3]*F31*F34*G[28] + C[3]*F31*G[29] + C[3]*F32*F33*F33*G[30] + C[3]*F32*F33*F34*G[31] + C[3]*F32*F33*G[32] + C[3]*F32*F34*F34*G[30] + C[3]*F32*F34*G[32] + C[3]*F32*G[33] + C[5]*F27*F33*F33*G[34] + C[5]*F27*F33*F34*G[35] + C[5]*F27*F33*G[36] + C[5]*F27*F34*F34*G[34] + C[5]*F27*F34*G[36] + C[5]*F27*G[37] + C[5]*F28*F33*F33*G[38] + C[5]*F28*F33*F34*G[39] + C[5]*F28*F33*G[40] + C[5]*F28*F34*F34*G[38] + C[5]*F28*F34*G[40] + C[5]*F28*G[41] + C[5]*F29*F33*F33*G[42] + C[5]*F29*F33*F34*G[43] + C[5]*F29*F33*G[44] + C[5]*F29*F34*F34*G[42] + C[5]*F29*F34*G[44] + C[5]*F29*G[45] + C[5]*F30*F33*F33*G[34] + C[5]*F30*F33*F34*G[35] + C[5]*F30*F33*G[36] + C[5]*F30*F34*F34*G[34] + C[5]*F30*F34*G[36] + C[5]*F30*G[37] + C[5]*F31*F33*F33*G[38] + C[5]*F31*F33*F34*G[39] + C[5]*F31*F33*G[40] + C[5]*F31*F34*F34*G[38] + C[5]*F31*F34*G[40] + C[5]*F31*G[41] + C[5]*F32*F33*F33*G[42] + C[5]*F32*F33*F34*G[43] + C[5]*F32*F33*G[44] + C[5]*F32*F34*F34*G[42] + C[5]*F32*F34*G[44] + C[5]*F32*G[45])/(1.0 + 0.001*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.001*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.001*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.006*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.03*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.03*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.03*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.06*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.06*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.06*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.3*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.3*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.3*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))) + (F0*F33*G[110] + F0*F34*G[110] + F0*G[111] + F1*F33*G[112] + F1*F34*G[112] + F1*G[113] + F10*F33*G[114] + F10*F34*G[114] + F10*G[115] + F11*F33*G[110] + F11*F34*G[110] + F11*G[111] + F2*F33*G[114] + F2*F34*G[114] + F2*G[115] + F33*F9*G[112] + F34*F9*G[112] + F9*G[113])/(1.0 + 0.1*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.1*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.1*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))) + (G[49] + C[1]*F0*F27*F33*G[50] + C[1]*F0*F27*F34*G[50] + C[1]*F0*F27*G[51] + C[1]*F0*F28*F33*G[52] + C[1]*F0*F28*F34*G[52] + C[1]*F0*F28*G[53] + C[1]*F0*F29*F33*G[54] + C[1]*F0*F29*F34*G[54] + C[1]*F0*F29*G[55] + C[1]*F0*F30*F33*G[50] + C[1]*F0*F30*F34*G[50] + C[1]*F0*F30*G[51] + C[1]*F0*F31*F33*G[52] + C[1]*F0*F31*F34*G[52] + C[1]*F0*F31*G[53] + C[1]*F0*F32*F33*G[54] + C[1]*F0*F32*F34*G[54] + C[1]*F0*F32*G[55] + C[1]*F1*F27*F33*G[56] + C[1]*F1*F27*F34*G[56] + C[1]*F1*F27*G[57] + C[1]*F1*F28*F33*G[58] + C[1]*F1*F28*F34*G[58] + C[1]*F1*F28*G[59] + C[1]*F1*F29*F33*G[60] + C[1]*F1*F29*F34*G[60] + C[1]*F1*F29*G[61] + C[1]*F1*F30*F33*G[56] + C[1]*F1*F30*F34*G[56] + C[1]*F1*F30*G[57] + C[1]*F1*F31*F33*G[58] + C[1]*F1*F31*F34*G[58] + C[1]*F1*F31*G[59] + C[1]*F1*F32*F33*G[60] + C[1]*F1*F32*F34*G[60] + C[1]*F1*F32*G[61] + C[1]*F10*F27*F33*G[62] + C[1]*F10*F27*F34*G[62] + C[1]*F10*F27*G[63] + C[1]*F10*F28*F33*G[64] + C[1]*F10*F28*F34*G[64] + C[1]*F10*F28*G[65] + C[1]*F10*F29*F33*G[66] + C[1]*F10*F29*F34*G[66] + C[1]*F10*F29*G[67] + C[1]*F10*F30*F33*G[62] + C[1]*F10*F30*F34*G[62] + C[1]*F10*F30*G[63] + C[1]*F10*F31*F33*G[64] + C[1]*F10*F31*F34*G[64] + C[1]*F10*F31*G[65] + C[1]*F10*F32*F33*G[66] + C[1]*F10*F32*F34*G[66] + C[1]*F10*F32*G[67] + C[1]*F11*F27*F33*G[50] + C[1]*F11*F27*F34*G[50] + C[1]*F11*F27*G[51] + C[1]*F11*F28*F33*G[52] + C[1]*F11*F28*F34*G[52] + C[1]*F11*F28*G[53] + C[1]*F11*F29*F33*G[54] + C[1]*F11*F29*F34*G[54] + C[1]*F11*F29*G[55] + C[1]*F11*F30*F33*G[50] + C[1]*F11*F30*F34*G[50] + C[1]*F11*F30*G[51] + C[1]*F11*F31*F33*G[52] + C[1]*F11*F31*F34*G[52] + C[1]*F11*F31*G[53] + C[1]*F11*F32*F33*G[54] + C[1]*F11*F32*F34*G[54] + C[1]*F11*F32*G[55] + C[1]*F2*F27*F33*G[62] + C[1]*F2*F27*F34*G[62] + C[1]*F2*F27*G[63] + C[1]*F2*F28*F33*G[64] + C[1]*F2*F28*F34*G[64] + C[1]*F2*F28*G[65] + C[1]*F2*F29*F33*G[66] + C[1]*F2*F29*F34*G[66] + C[1]*F2*F29*G[67] + C[1]*F2*F30*F33*G[62] + C[1]*F2*F30*F34*G[62] + C[1]*F2*F30*G[63] + C[1]*F2*F31*F33*G[64] + C[1]*F2*F31*F34*G[64] + C[1]*F2*F31*G[65] + C[1]*F2*F32*F33*G[66] + C[1]*F2*F32*F34*G[66] + C[1]*F2*F32*G[67] + C[1]*F27*F33*F9*G[56] + C[1]*F27*F34*F9*G[56] + C[1]*F27*F9*G[57] + C[1]*F28*F33*F9*G[58] + C[1]*F28*F34*F9*G[58] + C[1]*F28*F9*G[59] + C[1]*F29*F33*F9*G[60] + C[1]*F29*F34*F9*G[60] + C[1]*F29*F9*G[61] + C[1]*F30*F33*F9*G[56] + C[1]*F30*F34*F9*G[56] + C[1]*F30*F9*G[57] + C[1]*F31*F33*F9*G[58] + C[1]*F31*F34*F9*G[58] + C[1]*F31*F9*G[59] + C[1]*F32*F33*F9*G[60] + C[1]*F32*F34*F9*G[60] + C[1]*F32*F9*G[61] + C[1]*F33*F33*G[68] + C[1]*F33*F34*G[69] + C[1]*F33*G[70] + C[1]*F34*F34*G[68] + C[1]*F34*G[70] + C[1]*G[71] + C[3]*F0*F27*F33*G[72] + C[3]*F0*F27*F34*G[72] + C[3]*F0*F27*G[73] + C[3]*F0*F28*F33*G[74] + C[3]*F0*F28*F34*G[74] + C[3]*F0*F28*G[75] + C[3]*F0*F29*F33*G[60] + C[3]*F0*F29*F34*G[60] + C[3]*F0*F29*G[61] + C[3]*F0*F30*F33*G[72] + C[3]*F0*F30*F34*G[72] + C[3]*F0*F30*G[73] + C[3]*F0*F31*F33*G[74] + C[3]*F0*F31*F34*G[74] + C[3]*F0*F31*G[75] + C[3]*F0*F32*F33*G[60] + C[3]*F0*F32*F34*G[60] + C[3]*F0*F32*G[61] + C[3]*F1*F27*F33*G[76] + C[3]*F1*F27*F34*G[76] + C[3]*F1*F27*G[77] + C[3]*F1*F28*F33*G[78] + C[3]*F1*F28*F34*G[78] + C[3]*F1*F28*G[79] + C[3]*F1*F29*F33*G[80] + C[3]*F1*F29*F34*G[80] + C[3]*F1*F29*G[81] + C[3]*F1*F30*F33*G[76] + C[3]*F1*F30*F34*G[76] + C[3]*F1*F30*G[77] + C[3]*F1*F31*F33*G[78] + C[3]*F1*F31*F34*G[78] + C[3]*F1*F31*G[79] + C[3]*F1*F32*F33*G[80] + C[3]*F1*F32*F34*G[80] + C[3]*F1*F32*G[81] + C[3]*F10*F27*F33*G[82] + C[3]*F10*F27*F34*G[82] + C[3]*F10*F27*G[83] + C[3]*F10*F28*F33*G[84] + C[3]*F10*F28*F34*G[84] + C[3]*F10*F28*G[85] + C[3]*F10*F29*F33*G[86] + C[3]*F10*F29*F34*G[86] + C[3]*F10*F29*G[87] + C[3]*F10*F30*F33*G[82] + C[3]*F10*F30*F34*G[82] + C[3]*F10*F30*G[83] + C[3]*F10*F31*F33*G[84] + C[3]*F10*F31*F34*G[84] + C[3]*F10*F31*G[85] + C[3]*F10*F32*F33*G[86] + C[3]*F10*F32*F34*G[86] + C[3]*F10*F32*G[87] + C[3]*F11*F27*F33*G[72] + C[3]*F11*F27*F34*G[72] + C[3]*F11*F27*G[73] + C[3]*F11*F28*F33*G[74] + C[3]*F11*F28*F34*G[74] + C[3]*F11*F28*G[75] + C[3]*F11*F29*F33*G[60] + C[3]*F11*F29*F34*G[60] + C[3]*F11*F29*G[61] + C[3]*F11*F30*F33*G[72] + C[3]*F11*F30*F34*G[72] + C[3]*F11*F30*G[73] + C[3]*F11*F31*F33*G[74] + C[3]*F11*F31*F34*G[74] + C[3]*F11*F31*G[75] + C[3]*F11*F32*F33*G[60] + C[3]*F11*F32*F34*G[60] + C[3]*F11*F32*G[61] + C[3]*F2*F27*F33*G[82] + C[3]*F2*F27*F34*G[82] + C[3]*F2*F27*G[83] + C[3]*F2*F28*F33*G[84] + C[3]*F2*F28*F34*G[84] + C[3]*F2*F28*G[85] + C[3]*F2*F29*F33*G[86] + C[3]*F2*F29*F34*G[86] + C[3]*F2*F29*G[87] + C[3]*F2*F30*F33*G[82] + C[3]*F2*F30*F34*G[82] + C[3]*F2*F30*G[83] + C[3]*F2*F31*F33*G[84] + C[3]*F2*F31*F34*G[84] + C[3]*F2*F31*G[85] + C[3]*F2*F32*F33*G[86] + C[3]*F2*F32*F34*G[86] + C[3]*F2*F32*G[87] + C[3]*F27*F33*F9*G[76] + C[3]*F27*F34*F9*G[76] + C[3]*F27*F9*G[77] + C[3]*F28*F33*F9*G[78] + C[3]*F28*F34*F9*G[78] + C[3]*F28*F9*G[79] + C[3]*F29*F33*F9*G[80] + C[3]*F29*F34*F9*G[80] + C[3]*F29*F9*G[81] + C[3]*F30*F33*F9*G[76] + C[3]*F30*F34*F9*G[76] + C[3]*F30*F9*G[77] + C[3]*F31*F33*F9*G[78] + C[3]*F31*F34*F9*G[78] + C[3]*F31*F9*G[79] + C[3]*F32*F33*F9*G[80] + C[3]*F32*F34*F9*G[80] + C[3]*F32*F9*G[81] + C[3]*F33*F33*G[88] + C[3]*F33*F34*G[89] + C[3]*F33*G[90] + C[3]*F34*F34*G[88] + C[3]*F34*G[90] + C[3]*G[91] + C[5]*F0*F27*F33*G[92] + C[5]*F0*F27*F34*G[92] + C[5]*F0*F27*G[93] + C[5]*F0*F28*F33*G[94] + C[5]*F0*F28*F34*G[94] + C[5]*F0*F28*G[95] + C[5]*F0*F29*F33*G[66] + C[5]*F0*F29*F34*G[66] + C[5]*F0*F29*G[67] + C[5]*F0*F30*F33*G[92] + C[5]*F0*F30*F34*G[92] + C[5]*F0*F30*G[93] + C[5]*F0*F31*F33*G[94] + C[5]*F0*F31*F34*G[94] + C[5]*F0*F31*G[95] + C[5]*F0*F32*F33*G[66] + C[5]*F0*F32*F34*G[66] + C[5]*F0*F32*G[67] + C[5]*F1*F27*F33*G[96] + C[5]*F1*F27*F34*G[96] + C[5]*F1*F27*G[97] + C[5]*F1*F28*F33*G[98] + C[5]*F1*F28*F34*G[98] + C[5]*F1*F28*G[99] + C[5]*F1*F29*F33*G[86] + C[5]*F1*F29*F34*G[86] + C[5]*F1*F29*G[87] + C[5]*F1*F30*F33*G[96] + C[5]*F1*F30*F34*G[96] + C[5]*F1*F30*G[97] + C[5]*F1*F31*F33*G[98] + C[5]*F1*F31*F34*G[98] + C[5]*F1*F31*G[99] + C[5]*F1*F32*F33*G[86] + C[5]*F1*F32*F34*G[86] + C[5]*F1*F32*G[87] + C[5]*F10*F27*F33*G[100] + C[5]*F10*F27*F34*G[100] + C[5]*F10*F27*G[101] + C[5]*F10*F28*F33*G[102] + C[5]*F10*F28*F34*G[102] + C[5]*F10*F28*G[103] + C[5]*F10*F29*F33*G[104] + C[5]*F10*F29*F34*G[104] + C[5]*F10*F29*G[105] + C[5]*F10*F30*F33*G[100] + C[5]*F10*F30*F34*G[100] + C[5]*F10*F30*G[101] + C[5]*F10*F31*F33*G[102] + C[5]*F10*F31*F34*G[102] + C[5]*F10*F31*G[103] + C[5]*F10*F32*F33*G[104] + C[5]*F10*F32*F34*G[104] + C[5]*F10*F32*G[105] + C[5]*F11*F27*F33*G[92] + C[5]*F11*F27*F34*G[92] + C[5]*F11*F27*G[93] + C[5]*F11*F28*F33*G[94] + C[5]*F11*F28*F34*G[94] + C[5]*F11*F28*G[95] + C[5]*F11*F29*F33*G[66] + C[5]*F11*F29*F34*G[66] + C[5]*F11*F29*G[67] + C[5]*F11*F30*F33*G[92] + C[5]*F11*F30*F34*G[92] + C[5]*F11*F30*G[93] + C[5]*F11*F31*F33*G[94] + C[5]*F11*F31*F34*G[94] + C[5]*F11*F31*G[95] + C[5]*F11*F32*F33*G[66] + C[5]*F11*F32*F34*G[66] + C[5]*F11*F32*G[67] + C[5]*F2*F27*F33*G[100] + C[5]*F2*F27*F34*G[100] + C[5]*F2*F27*G[101] + C[5]*F2*F28*F33*G[102] + C[5]*F2*F28*F34*G[102] + C[5]*F2*F28*G[103] + C[5]*F2*F29*F33*G[104] + C[5]*F2*F29*F34*G[104] + C[5]*F2*F29*G[105] + C[5]*F2*F30*F33*G[100] + C[5]*F2*F30*F34*G[100] + C[5]*F2*F30*G[101] + C[5]*F2*F31*F33*G[102] + C[5]*F2*F31*F34*G[102] + C[5]*F2*F31*G[103] + C[5]*F2*F32*F33*G[104] + C[5]*F2*F32*F34*G[104] + C[5]*F2*F32*G[105] + C[5]*F27*F33*F9*G[96] + C[5]*F27*F34*F9*G[96] + C[5]*F27*F9*G[97] + C[5]*F28*F33*F9*G[98] + C[5]*F28*F34*F9*G[98] + C[5]*F28*F9*G[99] + C[5]*F29*F33*F9*G[86] + C[5]*F29*F34*F9*G[86] + C[5]*F29*F9*G[87] + C[5]*F30*F33*F9*G[96] + C[5]*F30*F34*F9*G[96] + C[5]*F30*F9*G[97] + C[5]*F31*F33*F9*G[98] + C[5]*F31*F34*F9*G[98] + C[5]*F31*F9*G[99] + C[5]*F32*F33*F9*G[86] + C[5]*F32*F34*F9*G[86] + C[5]*F32*F9*G[87] + C[5]*F33*F33*G[106] + C[5]*F33*F34*G[107] + C[5]*F33*G[108] + C[5]*F34*F34*G[106] + C[5]*F34*G[108] + C[5]*G[109] + F33*F33*G[46] + F33*F34*G[47] + F33*G[48] + F34*F34*G[46] + F34*G[48])/(1.0 + 0.01*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.01*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.01*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.2*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.2*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.2*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))));
      
      // Number of operations: 3070
      I[1] = W14[ip]*(F0*F0*G[117] + F1*(F0*G[118] + F1*G[121]) + F10*(F0*G[119] + F1*G[122] + F10*G[124]) + F11*(F0*G[120] + F1*G[118] + F10*G[119] + F11*G[117]) + F2*(F1*G[122] + F10*G[125] + F2*G[124] + G[119]*(F0 + F11)) + F9*(F1*G[123] + F9*G[121] + G[118]*(F0 + F11) + G[122]*(F10 + F2)) + G[116]*(std::abs(F0) + std::abs(F1) + std::abs(F2)) + (C[1]*F27*F33*F33*G[126] + C[1]*F27*F33*F34*G[127] + C[1]*F27*F33*G[128] + C[1]*F27*F34*F34*G[126] + C[1]*F27*F34*G[128] + C[1]*F27*G[129] + C[1]*F28*F33*F33*G[130] + C[1]*F28*F33*F34*G[131] + C[1]*F28*F33*G[132] + C[1]*F28*F34*F34*G[130] + C[1]*F28*F34*G[132] + C[1]*F28*G[133] + C[1]*F29*F33*F33*G[134] + C[1]*F29*F33*F34*G[135] + C[1]*F29*F33*G[136] + C[1]*F29*F34*F34*G[134] + C[1]*F29*F34*G[136] + C[1]*F29*G[137] + C[1]*F30*F33*F33*G[126] + C[1]*F30*F33*F34*G[127] + C[1]*F30*F33*G[128] + C[1]*F30*F34*F34*G[126] + C[1]*F30*F34*G[128] + C[1]*F30*G[129] + C[1]*F31*F33*F33*G[130] + C[1]*F31*F33*F34*G[131] + C[1]*F31*F33*G[132] + C[1]*F31*F34*F34*G[130] + C[1]*F31*F34*G[132] + C[1]*F31*G[133] + C[1]*F32*F33*F33*G[134] + C[1]*F32*F33*F34*G[135] + C[1]*F32*F33*G[136] + C[1]*F32*F34*F34*G[134] + C[1]*F32*F34*G[136] + C[1]*F32*G[137] + C[3]*F27*F33*F33*G[138] + C[3]*F27*F33*F34*G[139] + C[3]*F27*F33*G[140] + C[3]*F27*F34*F34*G[138] + C[3]*F27*F34*G[140] + C[3]*F27*G[141] + C[3]*F28*F33*F33*G[142] + C[3]*F28*F33*F34*G[143] + C[3]*F28*F33*G[144] + C[3]*F28*F34*F34*G[142] + C[3]*F28*F34*G[144] + C[3]*F28*G[145] + C[3]*F29*F33*F33*G[146] + C[3]*F29*F33*F34*G[147] + C[3]*F29*F33*G[148] + C[3]*F29*F34*F34*G[146] + C[3]*F29*F34*G[148] + C[3]*F29*G[149] + C[3]*F30*F33*F33*G[138] + C[3]*F30*F33*F34*G[139] + C[3]*F30*F33*G[140] + C[3]*F30*F34*F34*G[138] + C[3]*F30*F34*G[140] + C[3]*F30*G[141] + C[3]*F31*F33*F33*G[142] + C[3]*F31*F33*F34*G[143] + C[3]*F31*F33*G[144] + C[3]*F31*F34*F34*G[142] + C[3]*F31*F34*G[144] + C[3]*F31*G[145] + C[3]*F32*F33*F33*G[146] + C[3]*F32*F33*F34*G[147] + C[3]*F32*F33*G[148] + C[3]*F32*F34*F34*G[146] + C[3]*F32*F34*G[148] + C[3]*F32*G[149] + C[5]*F27*F33*F33*G[150] + C[5]*F27*F33*F34*G[151] + C[5]*F27*F33*G[152] + C[5]*F27*F34*F34*G[150] + C[5]*F27*F34*G[152] + C[5]*F27*G[153] + C[5]*F28*F33*F33*G[154] + C[5]*F28*F33*F34*G[155] + C[5]*F28*F33*G[156] + C[5]*F28*F34*F34*G[154] + C[5]*F28*F34*G[156] + C[5]*F28*G[157] + C[5]*F29*F33*F33*G[158] + C[5]*F29*F33*F34*G[159] + C[5]*F29*F33*G[160] + C[5]*F29*F34*F34*G[158] + C[5]*F29*F34*G[160] + C[5]*F29*G[161] + C[5]*F30*F33*F33*G[150] + C[5]*F30*F33*F34*G[151] + C[5]*F30*F33*G[152] + C[5]*F30*F34*F34*G[150] + C[5]*F30*F34*G[152] + C[5]*F30*G[153] + C[5]*F31*F33*F33*G[154] + C[5]*F31*F33*F34*G[155] + C[5]*F31*F33*G[156] + C[5]*F31*F34*F34*G[154] + C[5]*F31*F34*G[156] + C[5]*F31*G[157] + C[5]*F32*F33*F33*G[158] + C[5]*F32*F33*F34*G[159] + C[5]*F32*F33*G[160] + C[5]*F32*F34*F34*G[158] + C[5]*F32*F34*G[160] + C[5]*F32*G[161])/(1.0 + 0.001*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.001*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.001*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.006*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.03*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.03*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.03*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.06*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.06*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.06*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.3*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.3*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.3*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))) + (F0*F33*G[232] + F0*F34*G[232] + F0*G[233] + F1*F33*G[234] + F1*F34*G[234] + F1*G[235] + F10*F33*G[236] + F10*F34*G[236] + F10*G[237] + F11*F33*G[232] + F11*F34*G[232] + F11*G[233] + F2*F33*G[236] + F2*F34*G[236] + F2*G[237] + F33*F9*G[234] + F34*F9*G[234] + F9*G[235])/(1.0 + 0.1*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.1*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.1*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))) + (G[165] + C[1]*F0*F27*F33*G[166] + C[1]*F0*F27*F34*G[166] + C[1]*F0*F27*G[167] + C[1]*F0*F28*F33*G[168] + C[1]*F0*F28*F34*G[168] + C[1]*F0*F28*G[169] + C[1]*F0*F29*F33*G[170] + C[1]*F0*F29*F34*G[170] + C[1]*F0*F29*G[171] + C[1]*F0*F30*F33*G[166] + C[1]*F0*F30*F34*G[166] + C[1]*F0*F30*G[167] + C[1]*F0*F31*F33*G[168] + C[1]*F0*F31*F34*G[168] + C[1]*F0*F31*G[169] + C[1]*F0*F32*F33*G[170] + C[1]*F0*F32*F34*G[170] + C[1]*F0*F32*G[171] + C[1]*F1*F27*F33*G[172] + C[1]*F1*F27*F34*G[172] + C[1]*F1*F27*G[173] + C[1]*F1*F28*F33*G[174] + C[1]*F1*F28*F34*G[174] + C[1]*F1*F28*G[175] + C[1]*F1*F29*F33*G[176] + C[1]*F1*F29*F34*G[176] + C[1]*F1*F29*G[177] + C[1]*F1*F30*F33*G[172] + C[1]*F1*F30*F34*G[172] + C[1]*F1*F30*G[173] + C[1]*F1*F31*F33*G[174] + C[1]*F1*F31*F34*G[174] + C[1]*F1*F31*G[175] + C[1]*F1*F32*F33*G[176] + C[1]*F1*F32*F34*G[176] + C[1]*F1*F32*G[177] + C[1]*F10*F27*F33*G[178] + C[1]*F10*F27*F34*G[178] + C[1]*F10*F27*G[179] + C[1]*F10*F28*F33*G[180] + C[1]*F10*F28*F34*G[180] + C[1]*F10*F28*G[181] + C[1]*F10*F29*F33*G[182] + C[1]*F10*F29*F34*G[182] + C[1]*F10*F29*G[183] + C[1]*F10*F30*F33*G[178] + C[1]*F10*F30*F34*G[178] + C[1]*F10*F30*G[179] + C[1]*F10*F31*F33*G[180] + C[1]*F10*F31*F34*G[180] + C[1]*F10*F31*G[181] + C[1]*F10*F32*F33*G[182] + C[1]*F10*F32*F34*G[182] + C[1]*F10*F32*G[183] + C[1]*F11*F27*F33*G[166] + C[1]*F11*F27*F34*G[166] + C[1]*F11*F27*G[167] + C[1]*F11*F28*F33*G[168] + C[1]*F11*F28*F34*G[168] + C[1]*F11*F28*G[169] + C[1]*F11*F29*F33*G[170] + C[1]*F11*F29*F34*G[170] + C[1]*F11*F29*G[171] + C[1]*F11*F30*F33*G[166] + C[1]*F11*F30*F34*G[166] + C[1]*F11*F30*G[167] + C[1]*F11*F31*F33*G[168] + C[1]*F11*F31*F34*G[168] + C[1]*F11*F31*G[169] + C[1]*F11*F32*F33*G[170] + C[1]*F11*F32*F34*G[170] + C[1]*F11*F32*G[171] + C[1]*F2*F27*F33*G[178] + C[1]*F2*F27*F34*G[178] + C[1]*F2*F27*G[179] + C[1]*F2*F28*F33*G[180] + C[1]*F2*F28*F34*G[180] + C[1]*F2*F28*G[181] + C[1]*F2*F29*F33*G[182] + C[1]*F2*F29*F34*G[182] + C[1]*F2*F29*G[183] + C[1]*F2*F30*F33*G[178] + C[1]*F2*F30*F34*G[178] + C[1]*F2*F30*G[179] + C[1]*F2*F31*F33*G[180] + C[1]*F2*F31*F34*G[180] + C[1]*F2*F31*G[181] + C[1]*F2*F32*F33*G[182] + C[1]*F2*F32*F34*G[182] + C[1]*F2*F32*G[183] + C[1]*F27*F33*F9*G[172] + C[1]*F27*F34*F9*G[172] + C[1]*F27*F9*G[173] + C[1]*F28*F33*F9*G[174] + C[1]*F28*F34*F9*G[174] + C[1]*F28*F9*G[175] + C[1]*F29*F33*F9*G[176] + C[1]*F29*F34*F9*G[176] + C[1]*F29*F9*G[177] + C[1]*F30*F33*F9*G[172] + C[1]*F30*F34*F9*G[172] + C[1]*F30*F9*G[173] + C[1]*F31*F33*F9*G[174] + C[1]*F31*F34*F9*G[174] + C[1]*F31*F9*G[175] + C[1]*F32*F33*F9*G[176] + C[1]*F32*F34*F9*G[176] + C[1]*F32*F9*G[177] + C[1]*F33*F33*G[184] + C[1]*F33*F34*G[185] + C[1]*F33*G[186] + C[1]*F34*F34*G[184] + C[1]*F34*G[186] + C[1]*G[187] + C[3]*F0*F27*F33*G[188] + C[3]*F0*F27*F34*G[188] + C[3]*F0*F27*G[189] + C[3]*F0*F28*F33*G[190] + C[3]*F0*F28*F34*G[190] + C[3]*F0*F28*G[191] + C[3]*F0*F29*F33*G[192] + C[3]*F0*F29*F34*G[192] + C[3]*F0*F29*G[193] + C[3]*F0*F30*F33*G[188] + C[3]*F0*F30*F34*G[188] + C[3]*F0*F30*G[189] + C[3]*F0*F31*F33*G[190] + C[3]*F0*F31*F34*G[190] + C[3]*F0*F31*G[191] + C[3]*F0*F32*F33*G[192] + C[3]*F0*F32*F34*G[192] + C[3]*F0*F32*G[193] + C[3]*F1*F27*F33*G[194] + C[3]*F1*F27*F34*G[194] + C[3]*F1*F27*G[195] + C[3]*F1*F28*F33*G[196] + C[3]*F1*F28*F34*G[196] + C[3]*F1*F28*G[197] + C[3]*F1*F29*F33*G[198] + C[3]*F1*F29*F34*G[198] + C[3]*F1*F29*G[199] + C[3]*F1*F30*F33*G[194] + C[3]*F1*F30*F34*G[194] + C[3]*F1*F30*G[195] + C[3]*F1*F31*F33*G[196] + C[3]*F1*F31*F34*G[196] + C[3]*F1*F31*G[197] + C[3]*F1*F32*F33*G[198] + C[3]*F1*F32*F34*G[198] + C[3]*F1*F32*G[199] + C[3]*F10*F27*F33*G[200] + C[3]*F10*F27*F34*G[200] + C[3]*F10*F27*G[201] + C[3]*F10*F28*F33*G[202] + C[3]*F10*F28*F34*G[202] + C[3]*F10*F28*G[203] + C[3]*F10*F29*F33*G[204] + C[3]*F10*F29*F34*G[204] + C[3]*F10*F29*G[205] + C[3]*F10*F30*F33*G[200] + C[3]*F10*F30*F34*G[200] + C[3]*F10*F30*G[201] + C[3]*F10*F31*F33*G[202] + C[3]*F10*F31*F34*G[202] + C[3]*F10*F31*G[203] + C[3]*F10*F32*F33*G[204] + C[3]*F10*F32*F34*G[204] + C[3]*F10*F32*G[205] + C[3]*F11*F27*F33*G[188] + C[3]*F11*F27*F34*G[188] + C[3]*F11*F27*G[189] + C[3]*F11*F28*F33*G[190] + C[3]*F11*F28*F34*G[190] + C[3]*F11*F28*G[191] + C[3]*F11*F29*F33*G[192] + C[3]*F11*F29*F34*G[192] + C[3]*F11*F29*G[193] + C[3]*F11*F30*F33*G[188] + C[3]*F11*F30*F34*G[188] + C[3]*F11*F30*G[189] + C[3]*F11*F31*F33*G[190] + C[3]*F11*F31*F34*G[190] + C[3]*F11*F31*G[191] + C[3]*F11*F32*F33*G[192] + C[3]*F11*F32*F34*G[192] + C[3]*F11*F32*G[193] + C[3]*F2*F27*F33*G[200] + C[3]*F2*F27*F34*G[200] + C[3]*F2*F27*G[201] + C[3]*F2*F28*F33*G[202] + C[3]*F2*F28*F34*G[202] + C[3]*F2*F28*G[203] + C[3]*F2*F29*F33*G[204] + C[3]*F2*F29*F34*G[204] + C[3]*F2*F29*G[205] + C[3]*F2*F30*F33*G[200] + C[3]*F2*F30*F34*G[200] + C[3]*F2*F30*G[201] + C[3]*F2*F31*F33*G[202] + C[3]*F2*F31*F34*G[202] + C[3]*F2*F31*G[203] + C[3]*F2*F32*F33*G[204] + C[3]*F2*F32*F34*G[204] + C[3]*F2*F32*G[205] + C[3]*F27*F33*F9*G[194] + C[3]*F27*F34*F9*G[194] + C[3]*F27*F9*G[195] + C[3]*F28*F33*F9*G[196] + C[3]*F28*F34*F9*G[196] + C[3]*F28*F9*G[197] + C[3]*F29*F33*F9*G[198] + C[3]*F29*F34*F9*G[198] + C[3]*F29*F9*G[199] + C[3]*F30*F33*F9*G[194] + C[3]*F30*F34*F9*G[194] + C[3]*F30*F9*G[195] + C[3]*F31*F33*F9*G[196] + C[3]*F31*F34*F9*G[196] + C[3]*F31*F9*G[197] + C[3]*F32*F33*F9*G[198] + C[3]*F32*F34*F9*G[198] + C[3]*F32*F9*G[199] + C[3]*F33*F33*G[206] + C[3]*F33*F34*G[207] + C[3]*F33*G[208] + C[3]*F34*F34*G[206] + C[3]*F34*G[208] + C[3]*G[209] + C[5]*F0*F27*F33*G[210] + C[5]*F0*F27*F34*G[210] + C[5]*F0*F27*G[211] + C[5]*F0*F28*F33*G[212] + C[5]*F0*F28*F34*G[212] + C[5]*F0*F28*G[213] + C[5]*F0*F29*F33*G[214] + C[5]*F0*F29*F34*G[214] + C[5]*F0*F29*G[215] + C[5]*F0*F30*F33*G[210] + C[5]*F0*F30*F34*G[210] + C[5]*F0*F30*G[211] + C[5]*F0*F31*F33*G[212] + C[5]*F0*F31*F34*G[212] + C[5]*F0*F31*G[213] + C[5]*F0*F32*F33*G[214] + C[5]*F0*F32*F34*G[214] + C[5]*F0*F32*G[215] + C[5]*F1*F27*F33*G[216] + C[5]*F1*F27*F34*G[216] + C[5]*F1*F27*G[217] + C[5]*F1*F28*F33*G[218] + C[5]*F1*F28*F34*G[218] + C[5]*F1*F28*G[219] + C[5]*F1*F29*F33*G[220] + C[5]*F1*F29*F34*G[220] + C[5]*F1*F29*G[221] + C[5]*F1*F30*F33*G[216] + C[5]*F1*F30*F34*G[216] + C[5]*F1*F30*G[217] + C[5]*F1*F31*F33*G[218] + C[5]*F1*F31*F34*G[218] + C[5]*F1*F31*G[219] + C[5]*F1*F32*F33*G[220] + C[5]*F1*F32*F34*G[220] + C[5]*F1*F32*G[221] + C[5]*F10*F27*F33*G[222] + C[5]*F10*F27*F34*G[222] + C[5]*F10*F27*G[223] + C[5]*F10*F28*F33*G[224] + C[5]*F10*F28*F34*G[224] + C[5]*F10*F28*G[225] + C[5]*F10*F29*F33*G[226] + C[5]*F10*F29*F34*G[226] + C[5]*F10*F29*G[227] + C[5]*F10*F30*F33*G[222] + C[5]*F10*F30*F34*G[222] + C[5]*F10*F30*G[223] + C[5]*F10*F31*F33*G[224] + C[5]*F10*F31*F34*G[224] + C[5]*F10*F31*G[225] + C[5]*F10*F32*F33*G[226] + C[5]*F10*F32*F34*G[226] + C[5]*F10*F32*G[227] + C[5]*F11*F27*F33*G[210] + C[5]*F11*F27*F34*G[210] + C[5]*F11*F27*G[211] + C[5]*F11*F28*F33*G[212] + C[5]*F11*F28*F34*G[212] + C[5]*F11*F28*G[213] + C[5]*F11*F29*F33*G[214] + C[5]*F11*F29*F34*G[214] + C[5]*F11*F29*G[215] + C[5]*F11*F30*F33*G[210] + C[5]*F11*F30*F34*G[210] + C[5]*F11*F30*G[211] + C[5]*F11*F31*F33*G[212] + C[5]*F11*F31*F34*G[212] + C[5]*F11*F31*G[213] + C[5]*F11*F32*F33*G[214] + C[5]*F11*F32*F34*G[214] + C[5]*F11*F32*G[215] + C[5]*F2*F27*F33*G[222] + C[5]*F2*F27*F34*G[222] + C[5]*F2*F27*G[223] + C[5]*F2*F28*F33*G[224] + C[5]*F2*F28*F34*G[224] + C[5]*F2*F28*G[225] + C[5]*F2*F29*F33*G[226] + C[5]*F2*F29*F34*G[226] + C[5]*F2*F29*G[227] + C[5]*F2*F30*F33*G[222] + C[5]*F2*F30*F34*G[222] + C[5]*F2*F30*G[223] + C[5]*F2*F31*F33*G[224] + C[5]*F2*F31*F34*G[224] + C[5]*F2*F31*G[225] + C[5]*F2*F32*F33*G[226] + C[5]*F2*F32*F34*G[226] + C[5]*F2*F32*G[227] + C[5]*F27*F33*F9*G[216] + C[5]*F27*F34*F9*G[216] + C[5]*F27*F9*G[217] + C[5]*F28*F33*F9*G[218] + C[5]*F28*F34*F9*G[218] + C[5]*F28*F9*G[219] + C[5]*F29*F33*F9*G[220] + C[5]*F29*F34*F9*G[220] + C[5]*F29*F9*G[221] + C[5]*F30*F33*F9*G[216] + C[5]*F30*F34*F9*G[216] + C[5]*F30*F9*G[217] + C[5]*F31*F33*F9*G[218] + C[5]*F31*F34*F9*G[218] + C[5]*F31*F9*G[219] + C[5]*F32*F33*F9*G[220] + C[5]*F32*F34*F9*G[220] + C[5]*F32*F9*G[221] + C[5]*F33*F33*G[228] + C[5]*F33*F34*G[229] + C[5]*F33*G[230] + C[5]*F34*F34*G[228] + C[5]*F34*G[230] + C[5]*G[231] + F33*F33*G[162] + F33*F34*G[163] + F33*G[164] + F34*F34*G[162] + F34*G[164])/(1.0 + 0.01*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.01*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.01*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.2*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.2*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.2*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))));
      
      // Number of operations: 3070
      I[2] = W14[ip]*(F0*F0*G[239] + F1*(F0*G[240] + F1*G[243]) + F10*(F0*G[241] + F1*G[244] + F10*G[246]) + F11*(F0*G[242] + F1*G[240] + F10*G[241] + F11*G[239]) + F2*(F1*G[244] + F10*G[247] + F2*G[246] + G[241]*(F0 + F11)) + F9*(F1*G[245] + F9*G[243] + G[240]*(F0 + F11) + G[244]*(F10 + F2)) + G[238]*(std::abs(F0) + std::abs(F1) + std::abs(F2)) + (C[1]*F27*F33*F33*G[248] + C[1]*F27*F33*F34*G[249] + C[1]*F27*F33*G[250] + C[1]*F27*F34*F34*G[248] + C[1]*F27*F34*G[250] + C[1]*F27*G[251] + C[1]*F28*F33*F33*G[252] + C[1]*F28*F33*F34*G[253] + C[1]*F28*F33*G[254] + C[1]*F28*F34*F34*G[252] + C[1]*F28*F34*G[254] + C[1]*F28*G[255] + C[1]*F29*F33*F33*G[256] + C[1]*F29*F33*F34*G[257] + C[1]*F29*F33*G[258] + C[1]*F29*F34*F34*G[256] + C[1]*F29*F34*G[258] + C[1]*F29*G[259] + C[1]*F30*F33*F33*G[248] + C[1]*F30*F33*F34*G[249] + C[1]*F30*F33*G[250] + C[1]*F30*F34*F34*G[248] + C[1]*F30*F34*G[250] + C[1]*F30*G[251] + C[1]*F31*F33*F33*G[252] + C[1]*F31*F33*F34*G[253] + C[1]*F31*F33*G[254] + C[1]*F31*F34*F34*G[252] + C[1]*F31*F34*G[254] + C[1]*F31*G[255] + C[1]*F32*F33*F33*G[256] + C[1]*F32*F33*F34*G[257] + C[1]*F32*F33*G[258] + C[1]*F32*F34*F34*G[256] + C[1]*F32*F34*G[258] + C[1]*F32*G[259] + C[3]*F27*F33*F33*G[260] + C[3]*F27*F33*F34*G[261] + C[3]*F27*F33*G[262] + C[3]*F27*F34*F34*G[260] + C[3]*F27*F34*G[262] + C[3]*F27*G[263] + C[3]*F28*F33*F33*G[264] + C[3]*F28*F33*F34*G[265] + C[3]*F28*F33*G[266] + C[3]*F28*F34*F34*G[264] + C[3]*F28*F34*G[266] + C[3]*F28*G[267] + C[3]*F29*F33*F33*G[268] + C[3]*F29*F33*F34*G[269] + C[3]*F29*F33*G[270] + C[3]*F29*F34*F34*G[268] + C[3]*F29*F34*G[270] + C[3]*F29*G[271] + C[3]*F30*F33*F33*G[260] + C[3]*F30*F33*F34*G[261] + C[3]*F30*F33*G[262] + C[3]*F30*F34*F34*G[260] + C[3]*F30*F34*G[262] + C[3]*F30*G[263] + C[3]*F31*F33*F33*G[264] + C[3]*F31*F33*F34*G[265] + C[3]*F31*F33*G[266] + C[3]*F31*F34*F34*G[264] + C[3]*F31*F34*G[266] + C[3]*F31*G[267] + C[3]*F32*F33*F33*G[268] + C[3]*F32*F33*F34*G[269] + C[3]*F32*F33*G[270] + C[3]*F32*F34*F34*G[268] + C[3]*F32*F34*G[270] + C[3]*F32*G[271] + C[5]*F27*F33*F33*G[272] + C[5]*F27*F33*F34*G[273] + C[5]*F27*F33*G[274] + C[5]*F27*F34*F34*G[272] + C[5]*F27*F34*G[274] + C[5]*F27*G[275] + C[5]*F28*F33*F33*G[276] + C[5]*F28*F33*F34*G[277] + C[5]*F28*F33*G[278] + C[5]*F28*F34*F34*G[276] + C[5]*F28*F34*G[278] + C[5]*F28*G[279] + C[5]*F29*F33*F33*G[280] + C[5]*F29*F33*F34*G[281] + C[5]*F29*F33*G[282] + C[5]*F29*F34*F34*G[280] + C[5]*F29*F34*G[282] + C[5]*F29*G[283] + C[5]*F30*F33*F33*G[272] + C[5]*F30*F33*F34*G[273] + C[5]*F30*F33*G[274] + C[5]*F30*F34*F34*G[272] + C[5]*F30*F34*G[274] + C[5]*F30*G[275] + C[5]*F31*F33*F33*G[276] + C[5]*F31*F33*F34*G[277] + C[5]*F31*F33*G[278] + C[5]*F31*F34*F34*G[276] + C[5]*F31*F34*G[278] + C[5]*F31*G[279] + C[5]*F32*F33*F33*G[280] + C[5]*F32*F33*F34*G[281] + C[5]*F32*F33*G[282] + C[5]*F32*F34*F34*G[280] + C[5]*F32*F34*G[282] + C[5]*F32*G[283])/(1.0 + 0.001*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.001*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.001*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.006*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.03*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.03*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.03*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.06*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.06*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.06*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.3*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.3*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.3*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))) + (F0*F33*G[354] + F0*F34*G[354] + F0*G[355] + F1*F33*G[356] + F1*F34*G[356] + F1*G[357] + F10*F33*G[358] + F10*F34*G[358] + F10*G[359] + F11*F33*G[354] + F11*F34*G[354] + F11*G[355] + F2*F33*G[358] + F2*F34*G[358] + F2*G[359] + F33*F9*G[356] + F34*F9*G[356] + F9*G[357])/(1.0 + 0.1*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.1*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.1*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))) + (G[287] + C[1]*F0*F27*F33*G[288] + C[1]*F0*F27*F34*G[288] + C[1]*F0*F27*G[289] + C[1]*F0*F28*F33*G[290] + C[1]*F0*F28*F34*G[290] + C[1]*F0*F28*G[291] + C[1]*F0*F29*F33*G[292] + C[1]*F0*F29*F34*G[292] + C[1]*F0*F29*G[293] + C[1]*F0*F30*F33*G[288] + C[1]*F0*F30*F34*G[288] + C[1]*F0*F30*G[289] + C[1]*F0*F31*F33*G[290] + C[1]*F0*F31*F34*G[290] + C[1]*F0*F31*G[291] + C[1]*F0*F32*F33*G[292] + C[1]*F0*F32*F34*G[292] + C[1]*F0*F32*G[293] + C[1]*F1*F27*F33*G[294] + C[1]*F1*F27*F34*G[294] + C[1]*F1*F27*G[295] + C[1]*F1*F28*F33*G[296] + C[1]*F1*F28*F34*G[296] + C[1]*F1*F28*G[297] + C[1]*F1*F29*F33*G[298] + C[1]*F1*F29*F34*G[298] + C[1]*F1*F29*G[299] + C[1]*F1*F30*F33*G[294] + C[1]*F1*F30*F34*G[294] + C[1]*F1*F30*G[295] + C[1]*F1*F31*F33*G[296] + C[1]*F1*F31*F34*G[296] + C[1]*F1*F31*G[297] + C[1]*F1*F32*F33*G[298] + C[1]*F1*F32*F34*G[298] + C[1]*F1*F32*G[299] + C[1]*F10*F27*F33*G[300] + C[1]*F10*F27*F34*G[300] + C[1]*F10*F27*G[301] + C[1]*F10*F28*F33*G[302] + C[1]*F10*F28*F34*G[302] + C[1]*F10*F28*G[303] + C[1]*F10*F29*F33*G[304] + C[1]*F10*F29*F34*G[304] + C[1]*F10*F29*G[305] + C[1]*F10*F30*F33*G[300] + C[1]*F10*F30*F34*G[300] + C[1]*F10*F30*G[301] + C[1]*F10*F31*F33*G[302] + C[1]*F10*F31*F34*G[302] + C[1]*F10*F31*G[303] + C[1]*F10*F32*F33*G[304] + C[1]*F10*F32*F34*G[304] + C[1]*F10*F32*G[305] + C[1]*F11*F27*F33*G[288] + C[1]*F11*F27*F34*G[288] + C[1]*F11*F27*G[289] + C[1]*F11*F28*F33*G[290] + C[1]*F11*F28*F34*G[290] + C[1]*F11*F28*G[291] + C[1]*F11*F29*F33*G[292] + C[1]*F11*F29*F34*G[292] + C[1]*F11*F29*G[293] + C[1]*F11*F30*F33*G[288] + C[1]*F11*F30*F34*G[288] + C[1]*F11*F30*G[289] + C[1]*F11*F31*F33*G[290] + C[1]*F11*F31*F34*G[290] + C[1]*F11*F31*G[291] + C[1]*F11*F32*F33*G[292] + C[1]*F11*F32*F34*G[292] + C[1]*F11*F32*G[293] + C[1]*F2*F27*F33*G[300] + C[1]*F2*F27*F34*G[300] + C[1]*F2*F27*G[301] + C[1]*F2*F28*F33*G[302] + C[1]*F2*F28*F34*G[302] + C[1]*F2*F28*G[303] + C[1]*F2*F29*F33*G[304] + C[1]*F2*F29*F34*G[304] + C[1]*F2*F29*G[305] + C[1]*F2*F30*F33*G[300] + C[1]*F2*F30*F34*G[300] + C[1]*F2*F30*G[301] + C[1]*F2*F31*F33*G[302] + C[1]*F2*F31*F34*G[302] + C[1]*F2*F31*G[303] + C[1]*F2*F32*F33*G[304] + C[1]*F2*F32*F34*G[304] + C[1]*F2*F32*G[305] + C[1]*F27*F33*F9*G[294] + C[1]*F27*F34*F9*G[294] + C[1]*F27*F9*G[295] + C[1]*F28*F33*F9*G[296] + C[1]*F28*F34*F9*G[296] + C[1]*F28*F9*G[297] + C[1]*F29*F33*F9*G[298] + C[1]*F29*F34*F9*G[298] + C[1]*F29*F9*G[299] + C[1]*F30*F33*F9*G[294] + C[1]*F30*F34*F9*G[294] + C[1]*F30*F9*G[295] + C[1]*F31*F33*F9*G[296] + C[1]*F31*F34*F9*G[296] + C[1]*F31*F9*G[297] + C[1]*F32*F33*F9*G[298] + C[1]*F32*F34*F9*G[298] + C[1]*F32*F9*G[299] + C[1]*F33*F33*G[306] + C[1]*F33*F34*G[307] + C[1]*F33*G[308] + C[1]*F34*F34*G[306] + C[1]*F34*G[308] + C[1]*G[309] + C[3]*F0*F27*F33*G[310] + C[3]*F0*F27*F34*G[310] + C[3]*F0*F27*G[311] + C[3]*F0*F28*F33*G[312] + C[3]*F0*F28*F34*G[312] + C[3]*F0*F28*G[313] + C[3]*F0*F29*F33*G[314] + C[3]*F0*F29*F34*G[314] + C[3]*F0*F29*G[315] + C[3]*F0*F30*F33*G[310] + C[3]*F0*F30*F34*G[310] + C[3]*F0*F30*G[311] + C[3]*F0*F31*F33*G[312] + C[3]*F0*F31*F34*G[312] + C[3]*F0*F31*G[313] + C[3]*F0*F32*F33*G[314] + C[3]*F0*F32*F34*G[314] + C[3]*F0*F32*G[315] + C[3]*F1*F27*F33*G[316] + C[3]*F1*F27*F34*G[316] + C[3]*F1*F27*G[317] + C[3]*F1*F28*F33*G[318] + C[3]*F1*F28*F34*G[318] + C[3]*F1*F28*G[319] + C[3]*F1*F29*F33*G[320] + C[3]*F1*F29*F34*G[320] + C[3]*F1*F29*G[321] + C[3]*F1*F30*F33*G[316] + C[3]*F1*F30*F34*G[316] + C[3]*F1*F30*G[317] + C[3]*F1*F31*F33*G[318] + C[3]*F1*F31*F34*G[318] + C[3]*F1*F31*G[319] + C[3]*F1*F32*F33*G[320] + C[3]*F1*F32*F34*G[320] + C[3]*F1*F32*G[321] + C[3]*F10*F27*F33*G[322] + C[3]*F10*F27*F34*G[322] + C[3]*F10*F27*G[323] + C[3]*F10*F28*F33*G[324] + C[3]*F10*F28*F34*G[324] + C[3]*F10*F28*G[325] + C[3]*F10*F29*F33*G[326] + C[3]*F10*F29*F34*G[326] + C[3]*F10*F29*G[327] + C[3]*F10*F30*F33*G[322] + C[3]*F10*F30*F34*G[322] + C[3]*F10*F30*G[323] + C[3]*F10*F31*F33*G[324] + C[3]*F10*F31*F34*G[324] + C[3]*F10*F31*G[325] + C[3]*F10*F32*F33*G[326] + C[3]*F10*F32*F34*G[326] + C[3]*F10*F32*G[327] + C[3]*F11*F27*F33*G[310] + C[3]*F11*F27*F34*G[310] + C[3]*F11*F27*G[311] + C[3]*F11*F28*F33*G[312] + C[3]*F11*F28*F34*G[312] + C[3]*F11*F28*G[313] + C[3]*F11*F29*F33*G[314] + C[3]*F11*F29*F34*G[314] + C[3]*F11*F29*G[315] + C[3]*F11*F30*F33*G[310] + C[3]*F11*F30*F34*G[310] + C[3]*F11*F30*G[311] + C[3]*F11*F31*F33*G[312] + C[3]*F11*F31*F34*G[312] + C[3]*F11*F31*G[313] + C[3]*F11*F32*F33*G[314] + C[3]*F11*F32*F34*G[314] + C[3]*F11*F32*G[315] + C[3]*F2*F27*F33*G[322] + C[3]*F2*F27*F34*G[322] + C[3]*F2*F27*G[323] + C[3]*F2*F28*F33*G[324] + C[3]*F2*F28*F34*G[324] + C[3]*F2*F28*G[325] + C[3]*F2*F29*F33*G[326] + C[3]*F2*F29*F34*G[326] + C[3]*F2*F29*G[327] + C[3]*F2*F30*F33*G[322] + C[3]*F2*F30*F34*G[322] + C[3]*F2*F30*G[323] + C[3]*F2*F31*F33*G[324] + C[3]*F2*F31*F34*G[324] + C[3]*F2*F31*G[325] + C[3]*F2*F32*F33*G[326] + C[3]*F2*F32*F34*G[326] + C[3]*F2*F32*G[327] + C[3]*F27*F33*F9*G[316] + C[3]*F27*F34*F9*G[316] + C[3]*F27*F9*G[317] + C[3]*F28*F33*F9*G[318] + C[3]*F28*F34*F9*G[318] + C[3]*F28*F9*G[319] + C[3]*F29*F33*F9*G[320] + C[3]*F29*F34*F9*G[320] + C[3]*F29*F9*G[321] + C[3]*F30*F33*F9*G[316] + C[3]*F30*F34*F9*G[316] + C[3]*F30*F9*G[317] + C[3]*F31*F33*F9*G[318] + C[3]*F31*F34*F9*G[318] + C[3]*F31*F9*G[319] + C[3]*F32*F33*F9*G[320] + C[3]*F32*F34*F9*G[320] + C[3]*F32*F9*G[321] + C[3]*F33*F33*G[328] + C[3]*F33*F34*G[329] + C[3]*F33*G[330] + C[3]*F34*F34*G[328] + C[3]*F34*G[330] + C[3]*G[331] + C[5]*F0*F27*F33*G[332] + C[5]*F0*F27*F34*G[332] + C[5]*F0*F27*G[333] + C[5]*F0*F28*F33*G[334] + C[5]*F0*F28*F34*G[334] + C[5]*F0*F28*G[335] + C[5]*F0*F29*F33*G[336] + C[5]*F0*F29*F34*G[336] + C[5]*F0*F29*G[337] + C[5]*F0*F30*F33*G[332] + C[5]*F0*F30*F34*G[332] + C[5]*F0*F30*G[333] + C[5]*F0*F31*F33*G[334] + C[5]*F0*F31*F34*G[334] + C[5]*F0*F31*G[335] + C[5]*F0*F32*F33*G[336] + C[5]*F0*F32*F34*G[336] + C[5]*F0*F32*G[337] + C[5]*F1*F27*F33*G[338] + C[5]*F1*F27*F34*G[338] + C[5]*F1*F27*G[339] + C[5]*F1*F28*F33*G[340] + C[5]*F1*F28*F34*G[340] + C[5]*F1*F28*G[341] + C[5]*F1*F29*F33*G[342] + C[5]*F1*F29*F34*G[342] + C[5]*F1*F29*G[343] + C[5]*F1*F30*F33*G[338] + C[5]*F1*F30*F34*G[338] + C[5]*F1*F30*G[339] + C[5]*F1*F31*F33*G[340] + C[5]*F1*F31*F34*G[340] + C[5]*F1*F31*G[341] + C[5]*F1*F32*F33*G[342] + C[5]*F1*F32*F34*G[342] + C[5]*F1*F32*G[343] + C[5]*F10*F27*F33*G[344] + C[5]*F10*F27*F34*G[344] + C[5]*F10*F27*G[345] + C[5]*F10*F28*F33*G[346] + C[5]*F10*F28*F34*G[346] + C[5]*F10*F28*G[347] + C[5]*F10*F29*F33*G[348] + C[5]*F10*F29*F34*G[348] + C[5]*F10*F29*G[349] + C[5]*F10*F30*F33*G[344] + C[5]*F10*F30*F34*G[344] + C[5]*F10*F30*G[345] + C[5]*F10*F31*F33*G[346] + C[5]*F10*F31*F34*G[346] + C[5]*F10*F31*G[347] + C[5]*F10*F32*F33*G[348] + C[5]*F10*F32*F34*G[348] + C[5]*F10*F32*G[349] + C[5]*F11*F27*F33*G[332] + C[5]*F11*F27*F34*G[332] + C[5]*F11*F27*G[333] + C[5]*F11*F28*F33*G[334] + C[5]*F11*F28*F34*G[334] + C[5]*F11*F28*G[335] + C[5]*F11*F29*F33*G[336] + C[5]*F11*F29*F34*G[336] + C[5]*F11*F29*G[337] + C[5]*F11*F30*F33*G[332] + C[5]*F11*F30*F34*G[332] + C[5]*F11*F30*G[333] + C[5]*F11*F31*F33*G[334] + C[5]*F11*F31*F34*G[334] + C[5]*F11*F31*G[335] + C[5]*F11*F32*F33*G[336] + C[5]*F11*F32*F34*G[336] + C[5]*F11*F32*G[337] + C[5]*F2*F27*F33*G[344] + C[5]*F2*F27*F34*G[344] + C[5]*F2*F27*G[345] + C[5]*F2*F28*F33*G[346] + C[5]*F2*F28*F34*G[346] + C[5]*F2*F28*G[347] + C[5]*F2*F29*F33*G[348] + C[5]*F2*F29*F34*G[348] + C[5]*F2*F29*G[349] + C[5]*F2*F30*F33*G[344] + C[5]*F2*F30*F34*G[344] + C[5]*F2*F30*G[345] + C[5]*F2*F31*F33*G[346] + C[5]*F2*F31*F34*G[346] + C[5]*F2*F31*G[347] + C[5]*F2*F32*F33*G[348] + C[5]*F2*F32*F34*G[348] + C[5]*F2*F32*G[349] + C[5]*F27*F33*F9*G[338] + C[5]*F27*F34*F9*G[338] + C[5]*F27*F9*G[339] + C[5]*F28*F33*F9*G[340] + C[5]*F28*F34*F9*G[340] + C[5]*F28*F9*G[341] + C[5]*F29*F33*F9*G[342] + C[5]*F29*F34*F9*G[342] + C[5]*F29*F9*G[343] + C[5]*F30*F33*F9*G[338] + C[5]*F30*F34*F9*G[338] + C[5]*F30*F9*G[339] + C[5]*F31*F33*F9*G[340] + C[5]*F31*F34*F9*G[340] + C[5]*F31*F9*G[341] + C[5]*F32*F33*F9*G[342] + C[5]*F32*F34*F9*G[342] + C[5]*F32*F9*G[343] + C[5]*F33*F33*G[350] + C[5]*F33*F34*G[351] + C[5]*F33*G[352] + C[5]*F34*F34*G[350] + C[5]*F34*G[352] + C[5]*G[353] + F33*F33*G[284] + F33*F34*G[285] + F33*G[286] + F34*F34*G[284] + F34*G[286])/(1.0 + 0.01*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.01*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.01*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.2*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.2*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.2*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))));
      
      // Number of operations: 3070
      I[3] = W14[ip]*(F0*F0*G[117] + F1*(F0*G[118] + F1*G[121]) + F10*(F0*G[119] + F1*G[122] + F10*G[124]) + F11*(F0*G[120] + F1*G[118] + F10*G[119] + F11*G[117]) + F2*(F1*G[122] + F10*G[125] + F2*G[124] + G[119]*(F0 + F11)) + F9*(F1*G[123] + F9*G[121] + G[118]*(F0 + F11) + G[122]*(F10 + F2)) + G[116]*(std::abs(F0) + std::abs(F1) + std::abs(F2)) + (C[1]*F27*F33*F33*G[360] + C[1]*F27*F33*F34*G[361] + C[1]*F27*F33*G[362] + C[1]*F27*F34*F34*G[360] + C[1]*F27*F34*G[362] + C[1]*F27*G[363] + C[1]*F28*F33*F33*G[364] + C[1]*F28*F33*F34*G[365] + C[1]*F28*F33*G[366] + C[1]*F28*F34*F34*G[364] + C[1]*F28*F34*G[366] + C[1]*F28*G[367] + C[1]*F29*F33*F33*G[14] + C[1]*F29*F33*F34*G[15] + C[1]*F29*F33*G[16] + C[1]*F29*F34*F34*G[14] + C[1]*F29*F34*G[16] + C[1]*F29*G[17] + C[1]*F30*F33*F33*G[360] + C[1]*F30*F33*F34*G[361] + C[1]*F30*F33*G[362] + C[1]*F30*F34*F34*G[360] + C[1]*F30*F34*G[362] + C[1]*F30*G[363] + C[1]*F31*F33*F33*G[364] + C[1]*F31*F33*F34*G[365] + C[1]*F31*F33*G[366] + C[1]*F31*F34*F34*G[364] + C[1]*F31*F34*G[366] + C[1]*F31*G[367] + C[1]*F32*F33*F33*G[14] + C[1]*F32*F33*F34*G[15] + C[1]*F32*F33*G[16] + C[1]*F32*F34*F34*G[14] + C[1]*F32*F34*G[16] + C[1]*F32*G[17] + C[3]*F27*F33*F33*G[368] + C[3]*F27*F33*F34*G[369] + C[3]*F27*F33*G[370] + C[3]*F27*F34*F34*G[368] + C[3]*F27*F34*G[370] + C[3]*F27*G[371] + C[3]*F28*F33*F33*G[372] + C[3]*F28*F33*F34*G[373] + C[3]*F28*F33*G[374] + C[3]*F28*F34*F34*G[372] + C[3]*F28*F34*G[374] + C[3]*F28*G[375] + C[3]*F29*F33*F33*G[26] + C[3]*F29*F33*F34*G[27] + C[3]*F29*F33*G[28] + C[3]*F29*F34*F34*G[26] + C[3]*F29*F34*G[28] + C[3]*F29*G[29] + C[3]*F30*F33*F33*G[368] + C[3]*F30*F33*F34*G[369] + C[3]*F30*F33*G[370] + C[3]*F30*F34*F34*G[368] + C[3]*F30*F34*G[370] + C[3]*F30*G[371] + C[3]*F31*F33*F33*G[372] + C[3]*F31*F33*F34*G[373] + C[3]*F31*F33*G[374] + C[3]*F31*F34*F34*G[372] + C[3]*F31*F34*G[374] + C[3]*F31*G[375] + C[3]*F32*F33*F33*G[26] + C[3]*F32*F33*F34*G[27] + C[3]*F32*F33*G[28] + C[3]*F32*F34*F34*G[26] + C[3]*F32*F34*G[28] + C[3]*F32*G[29] + C[5]*F27*F33*F33*G[376] + C[5]*F27*F33*F34*G[377] + C[5]*F27*F33*G[378] + C[5]*F27*F34*F34*G[376] + C[5]*F27*F34*G[378] + C[5]*F27*G[379] + C[5]*F28*F33*F33*G[380] + C[5]*F28*F33*F34*G[381] + C[5]*F28*F33*G[382] + C[5]*F28*F34*F34*G[380] + C[5]*F28*F34*G[382] + C[5]*F28*G[383] + C[5]*F29*F33*F33*G[38] + C[5]*F29*F33*F34*G[39] + C[5]*F29*F33*G[40] + C[5]*F29*F34*F34*G[38] + C[5]*F29*F34*G[40] + C[5]*F29*G[41] + C[5]*F30*F33*F33*G[376] + C[5]*F30*F33*F34*G[377] + C[5]*F30*F33*G[378] + C[5]*F30*F34*F34*G[376] + C[5]*F30*F34*G[378] + C[5]*F30*G[379] + C[5]*F31*F33*F33*G[380] + C[5]*F31*F33*F34*G[381] + C[5]*F31*F33*G[382] + C[5]*F31*F34*F34*G[380] + C[5]*F31*F34*G[382] + C[5]*F31*G[383] + C[5]*F32*F33*F33*G[38] + C[5]*F32*F33*F34*G[39] + C[5]*F32*F33*G[40] + C[5]*F32*F34*F34*G[38] + C[5]*F32*F34*G[40] + C[5]*F32*G[41])/(1.0 + 0.001*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.001*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.001*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.006*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.03*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.03*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.03*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.06*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.06*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.06*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.3*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.3*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.3*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))) + (F0*F33*G[441] + F0*F34*G[441] + F0*G[233] + F1*F33*G[442] + F1*F34*G[442] + F1*G[235] + F10*F33*G[443] + F10*F34*G[443] + F10*G[237] + F11*F33*G[441] + F11*F34*G[441] + F11*G[233] + F2*F33*G[443] + F2*F34*G[443] + F2*G[237] + F33*F9*G[442] + F34*F9*G[442] + F9*G[235])/(1.0 + 0.1*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.1*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.1*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))) + (G[165] + C[1]*F0*F27*F33*G[384] + C[1]*F0*F27*F34*G[384] + C[1]*F0*F27*G[385] + C[1]*F0*F28*F33*G[386] + C[1]*F0*F28*F34*G[386] + C[1]*F0*F28*G[387] + C[1]*F0*F29*F33*G[388] + C[1]*F0*F29*F34*G[388] + C[1]*F0*F29*G[53] + C[1]*F0*F30*F33*G[384] + C[1]*F0*F30*F34*G[384] + C[1]*F0*F30*G[385] + C[1]*F0*F31*F33*G[386] + C[1]*F0*F31*F34*G[386] + C[1]*F0*F31*G[387] + C[1]*F0*F32*F33*G[388] + C[1]*F0*F32*F34*G[388] + C[1]*F0*F32*G[53] + C[1]*F1*F27*F33*G[389] + C[1]*F1*F27*F34*G[389] + C[1]*F1*F27*G[390] + C[1]*F1*F28*F33*G[391] + C[1]*F1*F28*F34*G[391] + C[1]*F1*F28*G[392] + C[1]*F1*F29*F33*G[393] + C[1]*F1*F29*F34*G[393] + C[1]*F1*F29*G[59] + C[1]*F1*F30*F33*G[389] + C[1]*F1*F30*F34*G[389] + C[1]*F1*F30*G[390] + C[1]*F1*F31*F33*G[391] + C[1]*F1*F31*F34*G[391] + C[1]*F1*F31*G[392] + C[1]*F1*F32*F33*G[393] + C[1]*F1*F32*F34*G[393] + C[1]*F1*F32*G[59] + C[1]*F10*F27*F33*G[394] + C[1]*F10*F27*F34*G[394] + C[1]*F10*F27*G[395] + C[1]*F10*F28*F33*G[396] + C[1]*F10*F28*F34*G[396] + C[1]*F10*F28*G[397] + C[1]*F10*F29*F33*G[398] + C[1]*F10*F29*F34*G[398] + C[1]*F10*F29*G[65] + C[1]*F10*F30*F33*G[394] + C[1]*F10*F30*F34*G[394] + C[1]*F10*F30*G[395] + C[1]*F10*F31*F33*G[396] + C[1]*F10*F31*F34*G[396] + C[1]*F10*F31*G[397] + C[1]*F10*F32*F33*G[398] + C[1]*F10*F32*F34*G[398] + C[1]*F10*F32*G[65] + C[1]*F11*F27*F33*G[384] + C[1]*F11*F27*F34*G[384] + C[1]*F11*F27*G[385] + C[1]*F11*F28*F33*G[386] + C[1]*F11*F28*F34*G[386] + C[1]*F11*F28*G[387] + C[1]*F11*F29*F33*G[388] + C[1]*F11*F29*F34*G[388] + C[1]*F11*F29*G[53] + C[1]*F11*F30*F33*G[384] + C[1]*F11*F30*F34*G[384] + C[1]*F11*F30*G[385] + C[1]*F11*F31*F33*G[386] + C[1]*F11*F31*F34*G[386] + C[1]*F11*F31*G[387] + C[1]*F11*F32*F33*G[388] + C[1]*F11*F32*F34*G[388] + C[1]*F11*F32*G[53] + C[1]*F2*F27*F33*G[394] + C[1]*F2*F27*F34*G[394] + C[1]*F2*F27*G[395] + C[1]*F2*F28*F33*G[396] + C[1]*F2*F28*F34*G[396] + C[1]*F2*F28*G[397] + C[1]*F2*F29*F33*G[398] + C[1]*F2*F29*F34*G[398] + C[1]*F2*F29*G[65] + C[1]*F2*F30*F33*G[394] + C[1]*F2*F30*F34*G[394] + C[1]*F2*F30*G[395] + C[1]*F2*F31*F33*G[396] + C[1]*F2*F31*F34*G[396] + C[1]*F2*F31*G[397] + C[1]*F2*F32*F33*G[398] + C[1]*F2*F32*F34*G[398] + C[1]*F2*F32*G[65] + C[1]*F27*F33*F9*G[389] + C[1]*F27*F34*F9*G[389] + C[1]*F27*F9*G[390] + C[1]*F28*F33*F9*G[391] + C[1]*F28*F34*F9*G[391] + C[1]*F28*F9*G[392] + C[1]*F29*F33*F9*G[393] + C[1]*F29*F34*F9*G[393] + C[1]*F29*F9*G[59] + C[1]*F30*F33*F9*G[389] + C[1]*F30*F34*F9*G[389] + C[1]*F30*F9*G[390] + C[1]*F31*F33*F9*G[391] + C[1]*F31*F34*F9*G[391] + C[1]*F31*F9*G[392] + C[1]*F32*F33*F9*G[393] + C[1]*F32*F34*F9*G[393] + C[1]*F32*F9*G[59] + C[1]*F33*F33*G[399] + C[1]*F33*F34*G[400] + C[1]*F33*G[401] + C[1]*F34*F34*G[399] + C[1]*F34*G[401] + C[1]*G[402] + C[3]*F0*F27*F33*G[403] + C[3]*F0*F27*F34*G[403] + C[3]*F0*F27*G[404] + C[3]*F0*F28*F33*G[405] + C[3]*F0*F28*F34*G[405] + C[3]*F0*F28*G[406] + C[3]*F0*F29*F33*G[407] + C[3]*F0*F29*F34*G[407] + C[3]*F0*F29*G[75] + C[3]*F0*F30*F33*G[403] + C[3]*F0*F30*F34*G[403] + C[3]*F0*F30*G[404] + C[3]*F0*F31*F33*G[405] + C[3]*F0*F31*F34*G[405] + C[3]*F0*F31*G[406] + C[3]*F0*F32*F33*G[407] + C[3]*F0*F32*F34*G[407] + C[3]*F0*F32*G[75] + C[3]*F1*F27*F33*G[408] + C[3]*F1*F27*F34*G[408] + C[3]*F1*F27*G[409] + C[3]*F1*F28*F33*G[410] + C[3]*F1*F28*F34*G[410] + C[3]*F1*F28*G[411] + C[3]*F1*F29*F33*G[412] + C[3]*F1*F29*F34*G[412] + C[3]*F1*F29*G[79] + C[3]*F1*F30*F33*G[408] + C[3]*F1*F30*F34*G[408] + C[3]*F1*F30*G[409] + C[3]*F1*F31*F33*G[410] + C[3]*F1*F31*F34*G[410] + C[3]*F1*F31*G[411] + C[3]*F1*F32*F33*G[412] + C[3]*F1*F32*F34*G[412] + C[3]*F1*F32*G[79] + C[3]*F10*F27*F33*G[413] + C[3]*F10*F27*F34*G[413] + C[3]*F10*F27*G[414] + C[3]*F10*F28*F33*G[415] + C[3]*F10*F28*F34*G[415] + C[3]*F10*F28*G[416] + C[3]*F10*F29*F33*G[417] + C[3]*F10*F29*F34*G[417] + C[3]*F10*F29*G[85] + C[3]*F10*F30*F33*G[413] + C[3]*F10*F30*F34*G[413] + C[3]*F10*F30*G[414] + C[3]*F10*F31*F33*G[415] + C[3]*F10*F31*F34*G[415] + C[3]*F10*F31*G[416] + C[3]*F10*F32*F33*G[417] + C[3]*F10*F32*F34*G[417] + C[3]*F10*F32*G[85] + C[3]*F11*F27*F33*G[403] + C[3]*F11*F27*F34*G[403] + C[3]*F11*F27*G[404] + C[3]*F11*F28*F33*G[405] + C[3]*F11*F28*F34*G[405] + C[3]*F11*F28*G[406] + C[3]*F11*F29*F33*G[407] + C[3]*F11*F29*F34*G[407] + C[3]*F11*F29*G[75] + C[3]*F11*F30*F33*G[403] + C[3]*F11*F30*F34*G[403] + C[3]*F11*F30*G[404] + C[3]*F11*F31*F33*G[405] + C[3]*F11*F31*F34*G[405] + C[3]*F11*F31*G[406] + C[3]*F11*F32*F33*G[407] + C[3]*F11*F32*F34*G[407] + C[3]*F11*F32*G[75] + C[3]*F2*F27*F33*G[413] + C[3]*F2*F27*F34*G[413] + C[3]*F2*F27*G[414] + C[3]*F2*F28*F33*G[415] + C[3]*F2*F28*F34*G[415] + C[3]*F2*F28*G[416] + C[3]*F2*F29*F33*G[417] + C[3]*F2*F29*F34*G[417] + C[3]*F2*F29*G[85] + C[3]*F2*F30*F33*G[413] + C[3]*F2*F30*F34*G[413] + C[3]*F2*F30*G[414] + C[3]*F2*F31*F33*G[415] + C[3]*F2*F31*F34*G[415] + C[3]*F2*F31*G[416] + C[3]*F2*F32*F33*G[417] + C[3]*F2*F32*F34*G[417] + C[3]*F2*F32*G[85] + C[3]*F27*F33*F9*G[408] + C[3]*F27*F34*F9*G[408] + C[3]*F27*F9*G[409] + C[3]*F28*F33*F9*G[410] + C[3]*F28*F34*F9*G[410] + C[3]*F28*F9*G[411] + C[3]*F29*F33*F9*G[412] + C[3]*F29*F34*F9*G[412] + C[3]*F29*F9*G[79] + C[3]*F30*F33*F9*G[408] + C[3]*F30*F34*F9*G[408] + C[3]*F30*F9*G[409] + C[3]*F31*F33*F9*G[410] + C[3]*F31*F34*F9*G[410] + C[3]*F31*F9*G[411] + C[3]*F32*F33*F9*G[412] + C[3]*F32*F34*F9*G[412] + C[3]*F32*F9*G[79] + C[3]*F33*F33*G[418] + C[3]*F33*F34*G[419] + C[3]*F33*G[420] + C[3]*F34*F34*G[418] + C[3]*F34*G[420] + C[3]*G[421] + C[5]*F0*F27*F33*G[422] + C[5]*F0*F27*F34*G[422] + C[5]*F0*F27*G[423] + C[5]*F0*F28*F33*G[424] + C[5]*F0*F28*F34*G[424] + C[5]*F0*F28*G[425] + C[5]*F0*F29*F33*G[426] + C[5]*F0*F29*F34*G[426] + C[5]*F0*F29*G[95] + C[5]*F0*F30*F33*G[422] + C[5]*F0*F30*F34*G[422] + C[5]*F0*F30*G[423] + C[5]*F0*F31*F33*G[424] + C[5]*F0*F31*F34*G[424] + C[5]*F0*F31*G[425] + C[5]*F0*F32*F33*G[426] + C[5]*F0*F32*F34*G[426] + C[5]*F0*F32*G[95] + C[5]*F1*F27*F33*G[427] + C[5]*F1*F27*F34*G[427] + C[5]*F1*F27*G[428] + C[5]*F1*F28*F33*G[429] + C[5]*F1*F28*F34*G[429] + C[5]*F1*F28*G[430] + C[5]*F1*F29*F33*G[431] + C[5]*F1*F29*F34*G[431] + C[5]*F1*F29*G[99] + C[5]*F1*F30*F33*G[427] + C[5]*F1*F30*F34*G[427] + C[5]*F1*F30*G[428] + C[5]*F1*F31*F33*G[429] + C[5]*F1*F31*F34*G[429] + C[5]*F1*F31*G[430] + C[5]*F1*F32*F33*G[431] + C[5]*F1*F32*F34*G[431] + C[5]*F1*F32*G[99] + C[5]*F10*F27*F33*G[432] + C[5]*F10*F27*F34*G[432] + C[5]*F10*F27*G[433] + C[5]*F10*F28*F33*G[434] + C[5]*F10*F28*F34*G[434] + C[5]*F10*F28*G[435] + C[5]*F10*F29*F33*G[436] + C[5]*F10*F29*F34*G[436] + C[5]*F10*F29*G[103] + C[5]*F10*F30*F33*G[432] + C[5]*F10*F30*F34*G[432] + C[5]*F10*F30*G[433] + C[5]*F10*F31*F33*G[434] + C[5]*F10*F31*F34*G[434] + C[5]*F10*F31*G[435] + C[5]*F10*F32*F33*G[436] + C[5]*F10*F32*F34*G[436] + C[5]*F10*F32*G[103] + C[5]*F11*F27*F33*G[422] + C[5]*F11*F27*F34*G[422] + C[5]*F11*F27*G[423] + C[5]*F11*F28*F33*G[424] + C[5]*F11*F28*F34*G[424] + C[5]*F11*F28*G[425] + C[5]*F11*F29*F33*G[426] + C[5]*F11*F29*F34*G[426] + C[5]*F11*F29*G[95] + C[5]*F11*F30*F33*G[422] + C[5]*F11*F30*F34*G[422] + C[5]*F11*F30*G[423] + C[5]*F11*F31*F33*G[424] + C[5]*F11*F31*F34*G[424] + C[5]*F11*F31*G[425] + C[5]*F11*F32*F33*G[426] + C[5]*F11*F32*F34*G[426] + C[5]*F11*F32*G[95] + C[5]*F2*F27*F33*G[432] + C[5]*F2*F27*F34*G[432] + C[5]*F2*F27*G[433] + C[5]*F2*F28*F33*G[434] + C[5]*F2*F28*F34*G[434] + C[5]*F2*F28*G[435] + C[5]*F2*F29*F33*G[436] + C[5]*F2*F29*F34*G[436] + C[5]*F2*F29*G[103] + C[5]*F2*F30*F33*G[432] + C[5]*F2*F30*F34*G[432] + C[5]*F2*F30*G[433] + C[5]*F2*F31*F33*G[434] + C[5]*F2*F31*F34*G[434] + C[5]*F2*F31*G[435] + C[5]*F2*F32*F33*G[436] + C[5]*F2*F32*F34*G[436] + C[5]*F2*F32*G[103] + C[5]*F27*F33*F9*G[427] + C[5]*F27*F34*F9*G[427] + C[5]*F27*F9*G[428] + C[5]*F28*F33*F9*G[429] + C[5]*F28*F34*F9*G[429] + C[5]*F28*F9*G[430] + C[5]*F29*F33*F9*G[431] + C[5]*F29*F34*F9*G[431] + C[5]*F29*F9*G[99] + C[5]*F30*F33*F9*G[427] + C[5]*F30*F34*F9*G[427] + C[5]*F30*F9*G[428] + C[5]*F31*F33*F9*G[429] + C[5]*F31*F34*F9*G[429] + C[5]*F31*F9*G[430] + C[5]*F32*F33*F9*G[431] + C[5]*F32*F34*F9*G[431] + C[5]*F32*F9*G[99] + C[5]*F33*F33*G[437] + C[5]*F33*F34*G[438] + C[5]*F33*G[439] + C[5]*F34*F34*G[437] + C[5]*F34*G[439] + C[5]*G[440] + F33*F33*G[162] + F33*F34*G[163] + F33*G[164] + F34*F34*G[162] + F34*G[164])/(1.0 + 0.01*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.01*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.01*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.2*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.2*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.2*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))));
      
      // Number of operations: 3070
      I[4] = W14[ip]*(F0*F0*G[445] + F1*(F0*G[446] + F1*G[449]) + F10*(F0*G[447] + F1*G[450] + F10*G[452]) + F11*(F0*G[448] + F1*G[446] + F10*G[447] + F11*G[445]) + F2*(F1*G[450] + F10*G[453] + F2*G[452] + G[447]*(F0 + F11)) + F9*(F1*G[451] + F9*G[449] + G[446]*(F0 + F11) + G[450]*(F10 + F2)) + G[444]*(std::abs(F0) + std::abs(F1) + std::abs(F2)) + (C[1]*F27*F33*F33*G[454] + C[1]*F27*F33*F34*G[455] + C[1]*F27*F33*G[456] + C[1]*F27*F34*F34*G[454] + C[1]*F27*F34*G[456] + C[1]*F27*G[457] + C[1]*F28*F33*F33*G[458] + C[1]*F28*F33*F34*G[459] + C[1]*F28*F33*G[460] + C[1]*F28*F34*F34*G[458] + C[1]*F28*F34*G[460] + C[1]*F28*G[461] + C[1]*F29*F33*F33*G[130] + C[1]*F29*F33*F34*G[131] + C[1]*F29*F33*G[132] + C[1]*F29*F34*F34*G[130] + C[1]*F29*F34*G[132] + C[1]*F29*G[133] + C[1]*F30*F33*F33*G[454] + C[1]*F30*F33*F34*G[455] + C[1]*F30*F33*G[456] + C[1]*F30*F34*F34*G[454] + C[1]*F30*F34*G[456] + C[1]*F30*G[457] + C[1]*F31*F33*F33*G[458] + C[1]*F31*F33*F34*G[459] + C[1]*F31*F33*G[460] + C[1]*F31*F34*F34*G[458] + C[1]*F31*F34*G[460] + C[1]*F31*G[461] + C[1]*F32*F33*F33*G[130] + C[1]*F32*F33*F34*G[131] + C[1]*F32*F33*G[132] + C[1]*F32*F34*F34*G[130] + C[1]*F32*F34*G[132] + C[1]*F32*G[133] + C[3]*F27*F33*F33*G[462] + C[3]*F27*F33*F34*G[463] + C[3]*F27*F33*G[464] + C[3]*F27*F34*F34*G[462] + C[3]*F27*F34*G[464] + C[3]*F27*G[465] + C[3]*F28*F33*F33*G[466] + C[3]*F28*F33*F34*G[467] + C[3]*F28*F33*G[468] + C[3]*F28*F34*F34*G[466] + C[3]*F28*F34*G[468] + C[3]*F28*G[469] + C[3]*F29*F33*F33*G[142] + C[3]*F29*F33*F34*G[143] + C[3]*F29*F33*G[144] + C[3]*F29*F34*F34*G[142] + C[3]*F29*F34*G[144] + C[3]*F29*G[145] + C[3]*F30*F33*F33*G[462] + C[3]*F30*F33*F34*G[463] + C[3]*F30*F33*G[464] + C[3]*F30*F34*F34*G[462] + C[3]*F30*F34*G[464] + C[3]*F30*G[465] + C[3]*F31*F33*F33*G[466] + C[3]*F31*F33*F34*G[467] + C[3]*F31*F33*G[468] + C[3]*F31*F34*F34*G[466] + C[3]*F31*F34*G[468] + C[3]*F31*G[469] + C[3]*F32*F33*F33*G[142] + C[3]*F32*F33*F34*G[143] + C[3]*F32*F33*G[144] + C[3]*F32*F34*F34*G[142] + C[3]*F32*F34*G[144] + C[3]*F32*G[145] + C[5]*F27*F33*F33*G[470] + C[5]*F27*F33*F34*G[471] + C[5]*F27*F33*G[472] + C[5]*F27*F34*F34*G[470] + C[5]*F27*F34*G[472] + C[5]*F27*G[473] + C[5]*F28*F33*F33*G[474] + C[5]*F28*F33*F34*G[475] + C[5]*F28*F33*G[476] + C[5]*F28*F34*F34*G[474] + C[5]*F28*F34*G[476] + C[5]*F28*G[477] + C[5]*F29*F33*F33*G[154] + C[5]*F29*F33*F34*G[155] + C[5]*F29*F33*G[156] + C[5]*F29*F34*F34*G[154] + C[5]*F29*F34*G[156] + C[5]*F29*G[157] + C[5]*F30*F33*F33*G[470] + C[5]*F30*F33*F34*G[471] + C[5]*F30*F33*G[472] + C[5]*F30*F34*F34*G[470] + C[5]*F30*F34*G[472] + C[5]*F30*G[473] + C[5]*F31*F33*F33*G[474] + C[5]*F31*F33*F34*G[475] + C[5]*F31*F33*G[476] + C[5]*F31*F34*F34*G[474] + C[5]*F31*F34*G[476] + C[5]*F31*G[477] + C[5]*F32*F33*F33*G[154] + C[5]*F32*F33*F34*G[155] + C[5]*F32*F33*G[156] + C[5]*F32*F34*F34*G[154] + C[5]*F32*F34*G[156] + C[5]*F32*G[157])/(1.0 + 0.001*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.001*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.001*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.006*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.03*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.03*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.03*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.06*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.06*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.06*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.3*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.3*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.3*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))) + (F0*F33*G[533] + F0*F34*G[533] + F0*G[534] + F1*F33*G[535] + F1*F34*G[535] + F1*G[536] + F10*F33*G[537] + F10*F34*G[537] + F10*G[538] + F11*F33*G[533] + F11*F34*G[533] + F11*G[534] + F2*F33*G[537] + F2*F34*G[537] + F2*G[538] + F33*F9*G[535] + F34*F9*G[535] + F9*G[536])/(1.0 + 0.1*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.1*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.1*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))) + (G[481] + C[1]*F0*F27*F33*G[482] + C[1]*F0*F27*F34*G[482] + C[1]*F0*F27*G[483] + C[1]*F0*F28*F33*G[484] + C[1]*F0*F28*F34*G[484] + C[1]*F0*F28*G[485] + C[1]*F0*F29*F33*G[486] + C[1]*F0*F29*F34*G[486] + C[1]*F0*F29*G[169] + C[1]*F0*F30*F33*G[482] + C[1]*F0*F30*F34*G[482] + C[1]*F0*F30*G[483] + C[1]*F0*F31*F33*G[484] + C[1]*F0*F31*F34*G[484] + C[1]*F0*F31*G[485] + C[1]*F0*F32*F33*G[486] + C[1]*F0*F32*F34*G[486] + C[1]*F0*F32*G[169] + C[1]*F1*F27*F33*G[487] + C[1]*F1*F27*F34*G[487] + C[1]*F1*F27*G[488] + C[1]*F1*F28*F33*G[489] + C[1]*F1*F28*F34*G[489] + C[1]*F1*F28*G[490] + C[1]*F1*F29*F33*G[491] + C[1]*F1*F29*F34*G[491] + C[1]*F1*F29*G[175] + C[1]*F1*F30*F33*G[487] + C[1]*F1*F30*F34*G[487] + C[1]*F1*F30*G[488] + C[1]*F1*F31*F33*G[489] + C[1]*F1*F31*F34*G[489] + C[1]*F1*F31*G[490] + C[1]*F1*F32*F33*G[491] + C[1]*F1*F32*F34*G[491] + C[1]*F1*F32*G[175] + C[1]*F10*F27*F33*G[492] + C[1]*F10*F27*F34*G[492] + C[1]*F10*F27*G[493] + C[1]*F10*F28*F33*G[494] + C[1]*F10*F28*F34*G[494] + C[1]*F10*F28*G[495] + C[1]*F10*F29*F33*G[496] + C[1]*F10*F29*F34*G[496] + C[1]*F10*F29*G[181] + C[1]*F10*F30*F33*G[492] + C[1]*F10*F30*F34*G[492] + C[1]*F10*F30*G[493] + C[1]*F10*F31*F33*G[494] + C[1]*F10*F31*F34*G[494] + C[1]*F10*F31*G[495] + C[1]*F10*F32*F33*G[496] + C[1]*F10*F32*F34*G[496] + C[1]*F10*F32*G[181] + C[1]*F11*F27*F33*G[482] + C[1]*F11*F27*F34*G[482] + C[1]*F11*F27*G[483] + C[1]*F11*F28*F33*G[484] + C[1]*F11*F28*F34*G[484] + C[1]*F11*F28*G[485] + C[1]*F11*F29*F33*G[486] + C[1]*F11*F29*F34*G[486] + C[1]*F11*F29*G[169] + C[1]*F11*F30*F33*G[482] + C[1]*F11*F30*F34*G[482] + C[1]*F11*F30*G[483] + C[1]*F11*F31*F33*G[484] + C[1]*F11*F31*F34*G[484] + C[1]*F11*F31*G[485] + C[1]*F11*F32*F33*G[486] + C[1]*F11*F32*F34*G[486] + C[1]*F11*F32*G[169] + C[1]*F2*F27*F33*G[492] + C[1]*F2*F27*F34*G[492] + C[1]*F2*F27*G[493] + C[1]*F2*F28*F33*G[494] + C[1]*F2*F28*F34*G[494] + C[1]*F2*F28*G[495] + C[1]*F2*F29*F33*G[496] + C[1]*F2*F29*F34*G[496] + C[1]*F2*F29*G[181] + C[1]*F2*F30*F33*G[492] + C[1]*F2*F30*F34*G[492] + C[1]*F2*F30*G[493] + C[1]*F2*F31*F33*G[494] + C[1]*F2*F31*F34*G[494] + C[1]*F2*F31*G[495] + C[1]*F2*F32*F33*G[496] + C[1]*F2*F32*F34*G[496] + C[1]*F2*F32*G[181] + C[1]*F27*F33*F9*G[487] + C[1]*F27*F34*F9*G[487] + C[1]*F27*F9*G[488] + C[1]*F28*F33*F9*G[489] + C[1]*F28*F34*F9*G[489] + C[1]*F28*F9*G[490] + C[1]*F29*F33*F9*G[491] + C[1]*F29*F34*F9*G[491] + C[1]*F29*F9*G[175] + C[1]*F30*F33*F9*G[487] + C[1]*F30*F34*F9*G[487] + C[1]*F30*F9*G[488] + C[1]*F31*F33*F9*G[489] + C[1]*F31*F34*F9*G[489] + C[1]*F31*F9*G[490] + C[1]*F32*F33*F9*G[491] + C[1]*F32*F34*F9*G[491] + C[1]*F32*F9*G[175] + C[1]*F33*F33*G[497] + C[1]*F33*F34*G[498] + C[1]*F33*G[499] + C[1]*F34*F34*G[497] + C[1]*F34*G[499] + C[1]*G[500] + C[3]*F0*F27*F33*G[501] + C[3]*F0*F27*F34*G[501] + C[3]*F0*F27*G[502] + C[3]*F0*F28*F33*G[489] + C[3]*F0*F28*F34*G[489] + C[3]*F0*F28*G[490] + C[3]*F0*F29*F33*G[503] + C[3]*F0*F29*F34*G[503] + C[3]*F0*F29*G[191] + C[3]*F0*F30*F33*G[501] + C[3]*F0*F30*F34*G[501] + C[3]*F0*F30*G[502] + C[3]*F0*F31*F33*G[489] + C[3]*F0*F31*F34*G[489] + C[3]*F0*F31*G[490] + C[3]*F0*F32*F33*G[503] + C[3]*F0*F32*F34*G[503] + C[3]*F0*F32*G[191] + C[3]*F1*F27*F33*G[504] + C[3]*F1*F27*F34*G[504] + C[3]*F1*F27*G[505] + C[3]*F1*F28*F33*G[506] + C[3]*F1*F28*F34*G[506] + C[3]*F1*F28*G[507] + C[3]*F1*F29*F33*G[508] + C[3]*F1*F29*F34*G[508] + C[3]*F1*F29*G[197] + C[3]*F1*F30*F33*G[504] + C[3]*F1*F30*F34*G[504] + C[3]*F1*F30*G[505] + C[3]*F1*F31*F33*G[506] + C[3]*F1*F31*F34*G[506] + C[3]*F1*F31*G[507] + C[3]*F1*F32*F33*G[508] + C[3]*F1*F32*F34*G[508] + C[3]*F1*F32*G[197] + C[3]*F10*F27*F33*G[509] + C[3]*F10*F27*F34*G[509] + C[3]*F10*F27*G[510] + C[3]*F10*F28*F33*G[511] + C[3]*F10*F28*F34*G[511] + C[3]*F10*F28*G[512] + C[3]*F10*F29*F33*G[513] + C[3]*F10*F29*F34*G[513] + C[3]*F10*F29*G[203] + C[3]*F10*F30*F33*G[509] + C[3]*F10*F30*F34*G[509] + C[3]*F10*F30*G[510] + C[3]*F10*F31*F33*G[511] + C[3]*F10*F31*F34*G[511] + C[3]*F10*F31*G[512] + C[3]*F10*F32*F33*G[513] + C[3]*F10*F32*F34*G[513] + C[3]*F10*F32*G[203] + C[3]*F11*F27*F33*G[501] + C[3]*F11*F27*F34*G[501] + C[3]*F11*F27*G[502] + C[3]*F11*F28*F33*G[489] + C[3]*F11*F28*F34*G[489] + C[3]*F11*F28*G[490] + C[3]*F11*F29*F33*G[503] + C[3]*F11*F29*F34*G[503] + C[3]*F11*F29*G[191] + C[3]*F11*F30*F33*G[501] + C[3]*F11*F30*F34*G[501] + C[3]*F11*F30*G[502] + C[3]*F11*F31*F33*G[489] + C[3]*F11*F31*F34*G[489] + C[3]*F11*F31*G[490] + C[3]*F11*F32*F33*G[503] + C[3]*F11*F32*F34*G[503] + C[3]*F11*F32*G[191] + C[3]*F2*F27*F33*G[509] + C[3]*F2*F27*F34*G[509] + C[3]*F2*F27*G[510] + C[3]*F2*F28*F33*G[511] + C[3]*F2*F28*F34*G[511] + C[3]*F2*F28*G[512] + C[3]*F2*F29*F33*G[513] + C[3]*F2*F29*F34*G[513] + C[3]*F2*F29*G[203] + C[3]*F2*F30*F33*G[509] + C[3]*F2*F30*F34*G[509] + C[3]*F2*F30*G[510] + C[3]*F2*F31*F33*G[511] + C[3]*F2*F31*F34*G[511] + C[3]*F2*F31*G[512] + C[3]*F2*F32*F33*G[513] + C[3]*F2*F32*F34*G[513] + C[3]*F2*F32*G[203] + C[3]*F27*F33*F9*G[504] + C[3]*F27*F34*F9*G[504] + C[3]*F27*F9*G[505] + C[3]*F28*F33*F9*G[506] + C[3]*F28*F34*F9*G[506] + C[3]*F28*F9*G[507] + C[3]*F29*F33*F9*G[508] + C[3]*F29*F34*F9*G[508] + C[3]*F29*F9*G[197] + C[3]*F30*F33*F9*G[504] + C[3]*F30*F34*F9*G[504] + C[3]*F30*F9*G[505] + C[3]*F31*F33*F9*G[506] + C[3]*F31*F34*F9*G[506] + C[3]*F31*F9*G[507] + C[3]*F32*F33*F9*G[508] + C[3]*F32*F34*F9*G[508] + C[3]*F32*F9*G[197] + C[3]*F33*F33*G[514] + C[3]*F33*F34*G[515] + C[3]*F33*G[516] + C[3]*F34*F34*G[514] + C[3]*F34*G[516] + C[3]*G[517] + C[5]*F0*F27*F33*G[518] + C[5]*F0*F27*F34*G[518] + C[5]*F0*F27*G[519] + C[5]*F0*F28*F33*G[494] + C[5]*F0*F28*F34*G[494] + C[5]*F0*F28*G[495] + C[5]*F0*F29*F33*G[520] + C[5]*F0*F29*F34*G[520] + C[5]*F0*F29*G[213] + C[5]*F0*F30*F33*G[518] + C[5]*F0*F30*F34*G[518] + C[5]*F0*F30*G[519] + C[5]*F0*F31*F33*G[494] + C[5]*F0*F31*F34*G[494] + C[5]*F0*F31*G[495] + C[5]*F0*F32*F33*G[520] + C[5]*F0*F32*F34*G[520] + C[5]*F0*F32*G[213] + C[5]*F1*F27*F33*G[521] + C[5]*F1*F27*F34*G[521] + C[5]*F1*F27*G[522] + C[5]*F1*F28*F33*G[511] + C[5]*F1*F28*F34*G[511] + C[5]*F1*F28*G[512] + C[5]*F1*F29*F33*G[523] + C[5]*F1*F29*F34*G[523] + C[5]*F1*F29*G[219] + C[5]*F1*F30*F33*G[521] + C[5]*F1*F30*F34*G[521] + C[5]*F1*F30*G[522] + C[5]*F1*F31*F33*G[511] + C[5]*F1*F31*F34*G[511] + C[5]*F1*F31*G[512] + C[5]*F1*F32*F33*G[523] + C[5]*F1*F32*F34*G[523] + C[5]*F1*F32*G[219] + C[5]*F10*F27*F33*G[524] + C[5]*F10*F27*F34*G[524] + C[5]*F10*F27*G[525] + C[5]*F10*F28*F33*G[526] + C[5]*F10*F28*F34*G[526] + C[5]*F10*F28*G[527] + C[5]*F10*F29*F33*G[528] + C[5]*F10*F29*F34*G[528] + C[5]*F10*F29*G[225] + C[5]*F10*F30*F33*G[524] + C[5]*F10*F30*F34*G[524] + C[5]*F10*F30*G[525] + C[5]*F10*F31*F33*G[526] + C[5]*F10*F31*F34*G[526] + C[5]*F10*F31*G[527] + C[5]*F10*F32*F33*G[528] + C[5]*F10*F32*F34*G[528] + C[5]*F10*F32*G[225] + C[5]*F11*F27*F33*G[518] + C[5]*F11*F27*F34*G[518] + C[5]*F11*F27*G[519] + C[5]*F11*F28*F33*G[494] + C[5]*F11*F28*F34*G[494] + C[5]*F11*F28*G[495] + C[5]*F11*F29*F33*G[520] + C[5]*F11*F29*F34*G[520] + C[5]*F11*F29*G[213] + C[5]*F11*F30*F33*G[518] + C[5]*F11*F30*F34*G[518] + C[5]*F11*F30*G[519] + C[5]*F11*F31*F33*G[494] + C[5]*F11*F31*F34*G[494] + C[5]*F11*F31*G[495] + C[5]*F11*F32*F33*G[520] + C[5]*F11*F32*F34*G[520] + C[5]*F11*F32*G[213] + C[5]*F2*F27*F33*G[524] + C[5]*F2*F27*F34*G[524] + C[5]*F2*F27*G[525] + C[5]*F2*F28*F33*G[526] + C[5]*F2*F28*F34*G[526] + C[5]*F2*F28*G[527] + C[5]*F2*F29*F33*G[528] + C[5]*F2*F29*F34*G[528] + C[5]*F2*F29*G[225] + C[5]*F2*F30*F33*G[524] + C[5]*F2*F30*F34*G[524] + C[5]*F2*F30*G[525] + C[5]*F2*F31*F33*G[526] + C[5]*F2*F31*F34*G[526] + C[5]*F2*F31*G[527] + C[5]*F2*F32*F33*G[528] + C[5]*F2*F32*F34*G[528] + C[5]*F2*F32*G[225] + C[5]*F27*F33*F9*G[521] + C[5]*F27*F34*F9*G[521] + C[5]*F27*F9*G[522] + C[5]*F28*F33*F9*G[511] + C[5]*F28*F34*F9*G[511] + C[5]*F28*F9*G[512] + C[5]*F29*F33*F9*G[523] + C[5]*F29*F34*F9*G[523] + C[5]*F29*F9*G[219] + C[5]*F30*F33*F9*G[521] + C[5]*F30*F34*F9*G[521] + C[5]*F30*F9*G[522] + C[5]*F31*F33*F9*G[511] + C[5]*F31*F34*F9*G[511] + C[5]*F31*F9*G[512] + C[5]*F32*F33*F9*G[523] + C[5]*F32*F34*F9*G[523] + C[5]*F32*F9*G[219] + C[5]*F33*F33*G[529] + C[5]*F33*F34*G[530] + C[5]*F33*G[531] + C[5]*F34*F34*G[529] + C[5]*F34*G[531] + C[5]*G[532] + F33*F33*G[478] + F33*F34*G[479] + F33*G[480] + F34*F34*G[478] + F34*G[480])/(1.0 + 0.01*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.01*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.01*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.2*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.2*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.2*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))));
      
      // Number of operations: 3070
      I[5] = W14[ip]*(F0*F0*G[540] + F1*(F0*G[541] + F1*G[544]) + F10*(F0*G[542] + F1*G[545] + F10*G[547]) + F11*(F0*G[543] + F1*G[541] + F10*G[542] + F11*G[540]) + F2*(F1*G[545] + F10*G[548] + F2*G[547] + G[542]*(F0 + F11)) + F9*(F1*G[546] + F9*G[544] + G[541]*(F0 + F11) + G[545]*(F10 + F2)) + G[539]*(std::abs(F0) + std::abs(F1) + std::abs(F2)) + (C[1]*F27*F33*F33*G[549] + C[1]*F27*F33*F34*G[550] + C[1]*F27*F33*G[551] + C[1]*F27*F34*F34*G[549] + C[1]*F27*F34*G[551] + C[1]*F27*G[552] + C[1]*F28*F33*F33*G[553] + C[1]*F28*F33*F34*G[554] + C[1]*F28*F33*G[555] + C[1]*F28*F34*F34*G[553] + C[1]*F28*F34*G[555] + C[1]*F28*G[556] + C[1]*F29*F33*F33*G[252] + C[1]*F29*F33*F34*G[253] + C[1]*F29*F33*G[254] + C[1]*F29*F34*F34*G[252] + C[1]*F29*F34*G[254] + C[1]*F29*G[255] + C[1]*F30*F33*F33*G[549] + C[1]*F30*F33*F34*G[550] + C[1]*F30*F33*G[551] + C[1]*F30*F34*F34*G[549] + C[1]*F30*F34*G[551] + C[1]*F30*G[552] + C[1]*F31*F33*F33*G[553] + C[1]*F31*F33*F34*G[554] + C[1]*F31*F33*G[555] + C[1]*F31*F34*F34*G[553] + C[1]*F31*F34*G[555] + C[1]*F31*G[556] + C[1]*F32*F33*F33*G[252] + C[1]*F32*F33*F34*G[253] + C[1]*F32*F33*G[254] + C[1]*F32*F34*F34*G[252] + C[1]*F32*F34*G[254] + C[1]*F32*G[255] + C[3]*F27*F33*F33*G[557] + C[3]*F27*F33*F34*G[558] + C[3]*F27*F33*G[559] + C[3]*F27*F34*F34*G[557] + C[3]*F27*F34*G[559] + C[3]*F27*G[560] + C[3]*F28*F33*F33*G[561] + C[3]*F28*F33*F34*G[562] + C[3]*F28*F33*G[563] + C[3]*F28*F34*F34*G[561] + C[3]*F28*F34*G[563] + C[3]*F28*G[564] + C[3]*F29*F33*F33*G[264] + C[3]*F29*F33*F34*G[265] + C[3]*F29*F33*G[266] + C[3]*F29*F34*F34*G[264] + C[3]*F29*F34*G[266] + C[3]*F29*G[267] + C[3]*F30*F33*F33*G[557] + C[3]*F30*F33*F34*G[558] + C[3]*F30*F33*G[559] + C[3]*F30*F34*F34*G[557] + C[3]*F30*F34*G[559] + C[3]*F30*G[560] + C[3]*F31*F33*F33*G[561] + C[3]*F31*F33*F34*G[562] + C[3]*F31*F33*G[563] + C[3]*F31*F34*F34*G[561] + C[3]*F31*F34*G[563] + C[3]*F31*G[564] + C[3]*F32*F33*F33*G[264] + C[3]*F32*F33*F34*G[265] + C[3]*F32*F33*G[266] + C[3]*F32*F34*F34*G[264] + C[3]*F32*F34*G[266] + C[3]*F32*G[267] + C[5]*F27*F33*F33*G[565] + C[5]*F27*F33*F34*G[566] + C[5]*F27*F33*G[567] + C[5]*F27*F34*F34*G[565] + C[5]*F27*F34*G[567] + C[5]*F27*G[568] + C[5]*F28*F33*F33*G[569] + C[5]*F28*F33*F34*G[570] + C[5]*F28*F33*G[571] + C[5]*F28*F34*F34*G[569] + C[5]*F28*F34*G[571] + C[5]*F28*G[572] + C[5]*F29*F33*F33*G[276] + C[5]*F29*F33*F34*G[277] + C[5]*F29*F33*G[278] + C[5]*F29*F34*F34*G[276] + C[5]*F29*F34*G[278] + C[5]*F29*G[279] + C[5]*F30*F33*F33*G[565] + C[5]*F30*F33*F34*G[566] + C[5]*F30*F33*G[567] + C[5]*F30*F34*F34*G[565] + C[5]*F30*F34*G[567] + C[5]*F30*G[568] + C[5]*F31*F33*F33*G[569] + C[5]*F31*F33*F34*G[570] + C[5]*F31*F33*G[571] + C[5]*F31*F34*F34*G[569] + C[5]*F31*F34*G[571] + C[5]*F31*G[572] + C[5]*F32*F33*F33*G[276] + C[5]*F32*F33*F34*G[277] + C[5]*F32*F33*G[278] + C[5]*F32*F34*F34*G[276] + C[5]*F32*F34*G[278] + C[5]*F32*G[279])/(1.0 + 0.001*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.001*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.001*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.006*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.03*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.03*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.03*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.06*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.06*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.06*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.3*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.3*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.3*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))) + (F0*F33*G[634] + F0*F34*G[634] + F0*G[635] + F1*F33*G[636] + F1*F34*G[636] + F1*G[637] + F10*F33*G[638] + F10*F34*G[638] + F10*G[639] + F11*F33*G[634] + F11*F34*G[634] + F11*G[635] + F2*F33*G[638] + F2*F34*G[638] + F2*G[639] + F33*F9*G[636] + F34*F9*G[636] + F9*G[637])/(1.0 + 0.1*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.1*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.1*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))) + (G[576] + C[1]*F0*F27*F33*G[577] + C[1]*F0*F27*F34*G[577] + C[1]*F0*F27*G[578] + C[1]*F0*F28*F33*G[579] + C[1]*F0*F28*F34*G[579] + C[1]*F0*F28*G[580] + C[1]*F0*F29*F33*G[581] + C[1]*F0*F29*F34*G[581] + C[1]*F0*F29*G[291] + C[1]*F0*F30*F33*G[577] + C[1]*F0*F30*F34*G[577] + C[1]*F0*F30*G[578] + C[1]*F0*F31*F33*G[579] + C[1]*F0*F31*F34*G[579] + C[1]*F0*F31*G[580] + C[1]*F0*F32*F33*G[581] + C[1]*F0*F32*F34*G[581] + C[1]*F0*F32*G[291] + C[1]*F1*F27*F33*G[582] + C[1]*F1*F27*F34*G[582] + C[1]*F1*F27*G[583] + C[1]*F1*F28*F33*G[584] + C[1]*F1*F28*F34*G[584] + C[1]*F1*F28*G[585] + C[1]*F1*F29*F33*G[586] + C[1]*F1*F29*F34*G[586] + C[1]*F1*F29*G[297] + C[1]*F1*F30*F33*G[582] + C[1]*F1*F30*F34*G[582] + C[1]*F1*F30*G[583] + C[1]*F1*F31*F33*G[584] + C[1]*F1*F31*F34*G[584] + C[1]*F1*F31*G[585] + C[1]*F1*F32*F33*G[586] + C[1]*F1*F32*F34*G[586] + C[1]*F1*F32*G[297] + C[1]*F10*F27*F33*G[587] + C[1]*F10*F27*F34*G[587] + C[1]*F10*F27*G[588] + C[1]*F10*F28*F33*G[589] + C[1]*F10*F28*F34*G[589] + C[1]*F10*F28*G[590] + C[1]*F10*F29*F33*G[591] + C[1]*F10*F29*F34*G[591] + C[1]*F10*F29*G[303] + C[1]*F10*F30*F33*G[587] + C[1]*F10*F30*F34*G[587] + C[1]*F10*F30*G[588] + C[1]*F10*F31*F33*G[589] + C[1]*F10*F31*F34*G[589] + C[1]*F10*F31*G[590] + C[1]*F10*F32*F33*G[591] + C[1]*F10*F32*F34*G[591] + C[1]*F10*F32*G[303] + C[1]*F11*F27*F33*G[577] + C[1]*F11*F27*F34*G[577] + C[1]*F11*F27*G[578] + C[1]*F11*F28*F33*G[579] + C[1]*F11*F28*F34*G[579] + C[1]*F11*F28*G[580] + C[1]*F11*F29*F33*G[581] + C[1]*F11*F29*F34*G[581] + C[1]*F11*F29*G[291] + C[1]*F11*F30*F33*G[577] + C[1]*F11*F30*F34*G[577] + C[1]*F11*F30*G[578] + C[1]*F11*F31*F33*G[579] + C[1]*F11*F31*F34*G[579] + C[1]*F11*F31*G[580] + C[1]*F11*F32*F33*G[581] + C[1]*F11*F32*F34*G[581] + C[1]*F11*F32*G[291] + C[1]*F2*F27*F33*G[587] + C[1]*F2*F27*F34*G[587] + C[1]*F2*F27*G[588] + C[1]*F2*F28*F33*G[589] + C[1]*F2*F28*F34*G[589] + C[1]*F2*F28*G[590] + C[1]*F2*F29*F33*G[591] + C[1]*F2*F29*F34*G[591] + C[1]*F2*F29*G[303] + C[1]*F2*F30*F33*G[587] + C[1]*F2*F30*F34*G[587] + C[1]*F2*F30*G[588] + C[1]*F2*F31*F33*G[589] + C[1]*F2*F31*F34*G[589] + C[1]*F2*F31*G[590] + C[1]*F2*F32*F33*G[591] + C[1]*F2*F32*F34*G[591] + C[1]*F2*F32*G[303] + C[1]*F27*F33*F9*G[582] + C[1]*F27*F34*F9*G[582] + C[1]*F27*F9*G[583] + C[1]*F28*F33*F9*G[584] + C[1]*F28*F34*F9*G[584] + C[1]*F28*F9*G[585] + C[1]*F29*F33*F9*G[586] + C[1]*F29*F34*F9*G[586] + C[1]*F29*F9*G[297] + C[1]*F30*F33*F9*G[582] + C[1]*F30*F34*F9*G[582] + C[1]*F30*F9*G[583] + C[1]*F31*F33*F9*G[584] + C[1]*F31*F34*F9*G[584] + C[1]*F31*F9*G[585] + C[1]*F32*F33*F9*G[586] + C[1]*F32*F34*F9*G[586] + C[1]*F32*F9*G[297] + C[1]*F33*F33*G[592] + C[1]*F33*F34*G[593] + C[1]*F33*G[594] + C[1]*F34*F34*G[592] + C[1]*F34*G[594] + C[1]*G[595] + C[3]*F0*F27*F33*G[596] + C[3]*F0*F27*F34*G[596] + C[3]*F0*F27*G[597] + C[3]*F0*F28*F33*G[598] + C[3]*F0*F28*F34*G[598] + C[3]*F0*F28*G[599] + C[3]*F0*F29*F33*G[600] + C[3]*F0*F29*F34*G[600] + C[3]*F0*F29*G[313] + C[3]*F0*F30*F33*G[596] + C[3]*F0*F30*F34*G[596] + C[3]*F0*F30*G[597] + C[3]*F0*F31*F33*G[598] + C[3]*F0*F31*F34*G[598] + C[3]*F0*F31*G[599] + C[3]*F0*F32*F33*G[600] + C[3]*F0*F32*F34*G[600] + C[3]*F0*F32*G[313] + C[3]*F1*F27*F33*G[601] + C[3]*F1*F27*F34*G[601] + C[3]*F1*F27*G[602] + C[3]*F1*F28*F33*G[603] + C[3]*F1*F28*F34*G[603] + C[3]*F1*F28*G[604] + C[3]*F1*F29*F33*G[605] + C[3]*F1*F29*F34*G[605] + C[3]*F1*F29*G[319] + C[3]*F1*F30*F33*G[601] + C[3]*F1*F30*F34*G[601] + C[3]*F1*F30*G[602] + C[3]*F1*F31*F33*G[603] + C[3]*F1*F31*F34*G[603] + C[3]*F1*F31*G[604] + C[3]*F1*F32*F33*G[605] + C[3]*F1*F32*F34*G[605] + C[3]*F1*F32*G[319] + C[3]*F10*F27*F33*G[606] + C[3]*F10*F27*F34*G[606] + C[3]*F10*F27*G[607] + C[3]*F10*F28*F33*G[608] + C[3]*F10*F28*F34*G[608] + C[3]*F10*F28*G[609] + C[3]*F10*F29*F33*G[610] + C[3]*F10*F29*F34*G[610] + C[3]*F10*F29*G[325] + C[3]*F10*F30*F33*G[606] + C[3]*F10*F30*F34*G[606] + C[3]*F10*F30*G[607] + C[3]*F10*F31*F33*G[608] + C[3]*F10*F31*F34*G[608] + C[3]*F10*F31*G[609] + C[3]*F10*F32*F33*G[610] + C[3]*F10*F32*F34*G[610] + C[3]*F10*F32*G[325] + C[3]*F11*F27*F33*G[596] + C[3]*F11*F27*F34*G[596] + C[3]*F11*F27*G[597] + C[3]*F11*F28*F33*G[598] + C[3]*F11*F28*F34*G[598] + C[3]*F11*F28*G[599] + C[3]*F11*F29*F33*G[600] + C[3]*F11*F29*F34*G[600] + C[3]*F11*F29*G[313] + C[3]*F11*F30*F33*G[596] + C[3]*F11*F30*F34*G[596] + C[3]*F11*F30*G[597] + C[3]*F11*F31*F33*G[598] + C[3]*F11*F31*F34*G[598] + C[3]*F11*F31*G[599] + C[3]*F11*F32*F33*G[600] + C[3]*F11*F32*F34*G[600] + C[3]*F11*F32*G[313] + C[3]*F2*F27*F33*G[606] + C[3]*F2*F27*F34*G[606] + C[3]*F2*F27*G[607] + C[3]*F2*F28*F33*G[608] + C[3]*F2*F28*F34*G[608] + C[3]*F2*F28*G[609] + C[3]*F2*F29*F33*G[610] + C[3]*F2*F29*F34*G[610] + C[3]*F2*F29*G[325] + C[3]*F2*F30*F33*G[606] + C[3]*F2*F30*F34*G[606] + C[3]*F2*F30*G[607] + C[3]*F2*F31*F33*G[608] + C[3]*F2*F31*F34*G[608] + C[3]*F2*F31*G[609] + C[3]*F2*F32*F33*G[610] + C[3]*F2*F32*F34*G[610] + C[3]*F2*F32*G[325] + C[3]*F27*F33*F9*G[601] + C[3]*F27*F34*F9*G[601] + C[3]*F27*F9*G[602] + C[3]*F28*F33*F9*G[603] + C[3]*F28*F34*F9*G[603] + C[3]*F28*F9*G[604] + C[3]*F29*F33*F9*G[605] + C[3]*F29*F34*F9*G[605] + C[3]*F29*F9*G[319] + C[3]*F30*F33*F9*G[601] + C[3]*F30*F34*F9*G[601] + C[3]*F30*F9*G[602] + C[3]*F31*F33*F9*G[603] + C[3]*F31*F34*F9*G[603] + C[3]*F31*F9*G[604] + C[3]*F32*F33*F9*G[605] + C[3]*F32*F34*F9*G[605] + C[3]*F32*F9*G[319] + C[3]*F33*F33*G[611] + C[3]*F33*F34*G[612] + C[3]*F33*G[613] + C[3]*F34*F34*G[611] + C[3]*F34*G[613] + C[3]*G[614] + C[5]*F0*F27*F33*G[615] + C[5]*F0*F27*F34*G[615] + C[5]*F0*F27*G[616] + C[5]*F0*F28*F33*G[617] + C[5]*F0*F28*F34*G[617] + C[5]*F0*F28*G[618] + C[5]*F0*F29*F33*G[619] + C[5]*F0*F29*F34*G[619] + C[5]*F0*F29*G[335] + C[5]*F0*F30*F33*G[615] + C[5]*F0*F30*F34*G[615] + C[5]*F0*F30*G[616] + C[5]*F0*F31*F33*G[617] + C[5]*F0*F31*F34*G[617] + C[5]*F0*F31*G[618] + C[5]*F0*F32*F33*G[619] + C[5]*F0*F32*F34*G[619] + C[5]*F0*F32*G[335] + C[5]*F1*F27*F33*G[620] + C[5]*F1*F27*F34*G[620] + C[5]*F1*F27*G[621] + C[5]*F1*F28*F33*G[622] + C[5]*F1*F28*F34*G[622] + C[5]*F1*F28*G[623] + C[5]*F1*F29*F33*G[624] + C[5]*F1*F29*F34*G[624] + C[5]*F1*F29*G[341] + C[5]*F1*F30*F33*G[620] + C[5]*F1*F30*F34*G[620] + C[5]*F1*F30*G[621] + C[5]*F1*F31*F33*G[622] + C[5]*F1*F31*F34*G[622] + C[5]*F1*F31*G[623] + C[5]*F1*F32*F33*G[624] + C[5]*F1*F32*F34*G[624] + C[5]*F1*F32*G[341] + C[5]*F10*F27*F33*G[625] + C[5]*F10*F27*F34*G[625] + C[5]*F10*F27*G[626] + C[5]*F10*F28*F33*G[627] + C[5]*F10*F28*F34*G[627] + C[5]*F10*F28*G[628] + C[5]*F10*F29*F33*G[629] + C[5]*F10*F29*F34*G[629] + C[5]*F10*F29*G[347] + C[5]*F10*F30*F33*G[625] + C[5]*F10*F30*F34*G[625] + C[5]*F10*F30*G[626] + C[5]*F10*F31*F33*G[627] + C[5]*F10*F31*F34*G[627] + C[5]*F10*F31*G[628] + C[5]*F10*F32*F33*G[629] + C[5]*F10*F32*F34*G[629] + C[5]*F10*F32*G[347] + C[5]*F11*F27*F33*G[615] + C[5]*F11*F27*F34*G[615] + C[5]*F11*F27*G[616] + C[5]*F11*F28*F33*G[617] + C[5]*F11*F28*F34*G[617] + C[5]*F11*F28*G[618] + C[5]*F11*F29*F33*G[619] + C[5]*F11*F29*F34*G[619] + C[5]*F11*F29*G[335] + C[5]*F11*F30*F33*G[615] + C[5]*F11*F30*F34*G[615] + C[5]*F11*F30*G[616] + C[5]*F11*F31*F33*G[617] + C[5]*F11*F31*F34*G[617] + C[5]*F11*F31*G[618] + C[5]*F11*F32*F33*G[619] + C[5]*F11*F32*F34*G[619] + C[5]*F11*F32*G[335] + C[5]*F2*F27*F33*G[625] + C[5]*F2*F27*F34*G[625] + C[5]*F2*F27*G[626] + C[5]*F2*F28*F33*G[627] + C[5]*F2*F28*F34*G[627] + C[5]*F2*F28*G[628] + C[5]*F2*F29*F33*G[629] + C[5]*F2*F29*F34*G[629] + C[5]*F2*F29*G[347] + C[5]*F2*F30*F33*G[625] + C[5]*F2*F30*F34*G[625] + C[5]*F2*F30*G[626] + C[5]*F2*F31*F33*G[627] + C[5]*F2*F31*F34*G[627] + C[5]*F2*F31*G[628] + C[5]*F2*F32*F33*G[629] + C[5]*F2*F32*F34*G[629] + C[5]*F2*F32*G[347] + C[5]*F27*F33*F9*G[620] + C[5]*F27*F34*F9*G[620] + C[5]*F27*F9*G[621] + C[5]*F28*F33*F9*G[622] + C[5]*F28*F34*F9*G[622] + C[5]*F28*F9*G[623] + C[5]*F29*F33*F9*G[624] + C[5]*F29*F34*F9*G[624] + C[5]*F29*F9*G[341] + C[5]*F30*F33*F9*G[620] + C[5]*F30*F34*F9*G[620] + C[5]*F30*F9*G[621] + C[5]*F31*F33*F9*G[622] + C[5]*F31*F34*F9*G[622] + C[5]*F31*F9*G[623] + C[5]*F32*F33*F9*G[624] + C[5]*F32*F34*F9*G[624] + C[5]*F32*F9*G[341] + C[5]*F33*F33*G[630] + C[5]*F33*F34*G[631] + C[5]*F33*G[632] + C[5]*F34*F34*G[630] + C[5]*F34*G[632] + C[5]*G[633] + F33*F33*G[573] + F33*F34*G[574] + F33*G[575] + F34*F34*G[573] + F34*G[575])/(1.0 + 0.01*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.01*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.01*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.2*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.2*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.2*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))));
      
      // Number of operations: 3070
      I[6] = W14[ip]*(F0*F0*G[239] + F1*(F0*G[240] + F1*G[243]) + F10*(F0*G[241] + F1*G[244] + F10*G[246]) + F11*(F0*G[242] + F1*G[240] + F10*G[241] + F11*G[239]) + F2*(F1*G[244] + F10*G[247] + F2*G[246] + G[241]*(F0 + F11)) + F9*(F1*G[245] + F9*G[243] + G[240]*(F0 + F11) + G[244]*(F10 + F2)) + G[238]*(std::abs(F0) + std::abs(F1) + std::abs(F2)) + (C[1]*F27*F33*F33*G[640] + C[1]*F27*F33*F34*G[641] + C[1]*F27*F33*G[642] + C[1]*F27*F34*F34*G[640] + C[1]*F27*F34*G[642] + C[1]*F27*G[643] + C[1]*F28*F33*F33*G[360] + C[1]*F28*F33*F34*G[361] + C[1]*F28*F33*G[362] + C[1]*F28*F34*F34*G[360] + C[1]*F28*F34*G[362] + C[1]*F28*G[363] + C[1]*F29*F33*F33*G[10] + C[1]*F29*F33*F34*G[11] + C[1]*F29*F33*G[12] + C[1]*F29*F34*F34*G[10] + C[1]*F29*F34*G[12] + C[1]*F29*G[13] + C[1]*F30*F33*F33*G[640] + C[1]*F30*F33*F34*G[641] + C[1]*F30*F33*G[642] + C[1]*F30*F34*F34*G[640] + C[1]*F30*F34*G[642] + C[1]*F30*G[643] + C[1]*F31*F33*F33*G[360] + C[1]*F31*F33*F34*G[361] + C[1]*F31*F33*G[362] + C[1]*F31*F34*F34*G[360] + C[1]*F31*F34*G[362] + C[1]*F31*G[363] + C[1]*F32*F33*F33*G[10] + C[1]*F32*F33*F34*G[11] + C[1]*F32*F33*G[12] + C[1]*F32*F34*F34*G[10] + C[1]*F32*F34*G[12] + C[1]*F32*G[13] + C[3]*F27*F33*F33*G[644] + C[3]*F27*F33*F34*G[645] + C[3]*F27*F33*G[646] + C[3]*F27*F34*F34*G[644] + C[3]*F27*F34*G[646] + C[3]*F27*G[647] + C[3]*F28*F33*F33*G[368] + C[3]*F28*F33*F34*G[369] + C[3]*F28*F33*G[370] + C[3]*F28*F34*F34*G[368] + C[3]*F28*F34*G[370] + C[3]*F28*G[371] + C[3]*F29*F33*F33*G[22] + C[3]*F29*F33*F34*G[23] + C[3]*F29*F33*G[24] + C[3]*F29*F34*F34*G[22] + C[3]*F29*F34*G[24] + C[3]*F29*G[25] + C[3]*F30*F33*F33*G[644] + C[3]*F30*F33*F34*G[645] + C[3]*F30*F33*G[646] + C[3]*F30*F34*F34*G[644] + C[3]*F30*F34*G[646] + C[3]*F30*G[647] + C[3]*F31*F33*F33*G[368] + C[3]*F31*F33*F34*G[369] + C[3]*F31*F33*G[370] + C[3]*F31*F34*F34*G[368] + C[3]*F31*F34*G[370] + C[3]*F31*G[371] + C[3]*F32*F33*F33*G[22] + C[3]*F32*F33*F34*G[23] + C[3]*F32*F33*G[24] + C[3]*F32*F34*F34*G[22] + C[3]*F32*F34*G[24] + C[3]*F32*G[25] + C[5]*F27*F33*F33*G[648] + C[5]*F27*F33*F34*G[649] + C[5]*F27*F33*G[650] + C[5]*F27*F34*F34*G[648] + C[5]*F27*F34*G[650] + C[5]*F27*G[651] + C[5]*F28*F33*F33*G[376] + C[5]*F28*F33*F34*G[377] + C[5]*F28*F33*G[378] + C[5]*F28*F34*F34*G[376] + C[5]*F28*F34*G[378] + C[5]*F28*G[379] + C[5]*F29*F33*F33*G[34] + C[5]*F29*F33*F34*G[35] + C[5]*F29*F33*G[36] + C[5]*F29*F34*F34*G[34] + C[5]*F29*F34*G[36] + C[5]*F29*G[37] + C[5]*F30*F33*F33*G[648] + C[5]*F30*F33*F34*G[649] + C[5]*F30*F33*G[650] + C[5]*F30*F34*F34*G[648] + C[5]*F30*F34*G[650] + C[5]*F30*G[651] + C[5]*F31*F33*F33*G[376] + C[5]*F31*F33*F34*G[377] + C[5]*F31*F33*G[378] + C[5]*F31*F34*F34*G[376] + C[5]*F31*F34*G[378] + C[5]*F31*G[379] + C[5]*F32*F33*F33*G[34] + C[5]*F32*F33*F34*G[35] + C[5]*F32*F33*G[36] + C[5]*F32*F34*F34*G[34] + C[5]*F32*F34*G[36] + C[5]*F32*G[37])/(1.0 + 0.001*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.001*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.001*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.006*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.03*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.03*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.03*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.06*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.06*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.06*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.3*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.3*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.3*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))) + (F0*F33*G[700] + F0*F34*G[700] + F0*G[355] + F1*F33*G[701] + F1*F34*G[701] + F1*G[357] + F10*F33*G[702] + F10*F34*G[702] + F10*G[359] + F11*F33*G[700] + F11*F34*G[700] + F11*G[355] + F2*F33*G[702] + F2*F34*G[702] + F2*G[359] + F33*F9*G[701] + F34*F9*G[701] + F9*G[357])/(1.0 + 0.1*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.1*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.1*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))) + (G[287] + C[1]*F0*F27*F33*G[652] + C[1]*F0*F27*F34*G[652] + C[1]*F0*F27*G[653] + C[1]*F0*F28*F33*G[654] + C[1]*F0*F28*F34*G[654] + C[1]*F0*F28*G[385] + C[1]*F0*F29*F33*G[655] + C[1]*F0*F29*F34*G[655] + C[1]*F0*F29*G[51] + C[1]*F0*F30*F33*G[652] + C[1]*F0*F30*F34*G[652] + C[1]*F0*F30*G[653] + C[1]*F0*F31*F33*G[654] + C[1]*F0*F31*F34*G[654] + C[1]*F0*F31*G[385] + C[1]*F0*F32*F33*G[655] + C[1]*F0*F32*F34*G[655] + C[1]*F0*F32*G[51] + C[1]*F1*F27*F33*G[656] + C[1]*F1*F27*F34*G[656] + C[1]*F1*F27*G[657] + C[1]*F1*F28*F33*G[658] + C[1]*F1*F28*F34*G[658] + C[1]*F1*F28*G[390] + C[1]*F1*F29*F33*G[659] + C[1]*F1*F29*F34*G[659] + C[1]*F1*F29*G[57] + C[1]*F1*F30*F33*G[656] + C[1]*F1*F30*F34*G[656] + C[1]*F1*F30*G[657] + C[1]*F1*F31*F33*G[658] + C[1]*F1*F31*F34*G[658] + C[1]*F1*F31*G[390] + C[1]*F1*F32*F33*G[659] + C[1]*F1*F32*F34*G[659] + C[1]*F1*F32*G[57] + C[1]*F10*F27*F33*G[660] + C[1]*F10*F27*F34*G[660] + C[1]*F10*F27*G[661] + C[1]*F10*F28*F33*G[662] + C[1]*F10*F28*F34*G[662] + C[1]*F10*F28*G[395] + C[1]*F10*F29*F33*G[663] + C[1]*F10*F29*F34*G[663] + C[1]*F10*F29*G[63] + C[1]*F10*F30*F33*G[660] + C[1]*F10*F30*F34*G[660] + C[1]*F10*F30*G[661] + C[1]*F10*F31*F33*G[662] + C[1]*F10*F31*F34*G[662] + C[1]*F10*F31*G[395] + C[1]*F10*F32*F33*G[663] + C[1]*F10*F32*F34*G[663] + C[1]*F10*F32*G[63] + C[1]*F11*F27*F33*G[652] + C[1]*F11*F27*F34*G[652] + C[1]*F11*F27*G[653] + C[1]*F11*F28*F33*G[654] + C[1]*F11*F28*F34*G[654] + C[1]*F11*F28*G[385] + C[1]*F11*F29*F33*G[655] + C[1]*F11*F29*F34*G[655] + C[1]*F11*F29*G[51] + C[1]*F11*F30*F33*G[652] + C[1]*F11*F30*F34*G[652] + C[1]*F11*F30*G[653] + C[1]*F11*F31*F33*G[654] + C[1]*F11*F31*F34*G[654] + C[1]*F11*F31*G[385] + C[1]*F11*F32*F33*G[655] + C[1]*F11*F32*F34*G[655] + C[1]*F11*F32*G[51] + C[1]*F2*F27*F33*G[660] + C[1]*F2*F27*F34*G[660] + C[1]*F2*F27*G[661] + C[1]*F2*F28*F33*G[662] + C[1]*F2*F28*F34*G[662] + C[1]*F2*F28*G[395] + C[1]*F2*F29*F33*G[663] + C[1]*F2*F29*F34*G[663] + C[1]*F2*F29*G[63] + C[1]*F2*F30*F33*G[660] + C[1]*F2*F30*F34*G[660] + C[1]*F2*F30*G[661] + C[1]*F2*F31*F33*G[662] + C[1]*F2*F31*F34*G[662] + C[1]*F2*F31*G[395] + C[1]*F2*F32*F33*G[663] + C[1]*F2*F32*F34*G[663] + C[1]*F2*F32*G[63] + C[1]*F27*F33*F9*G[656] + C[1]*F27*F34*F9*G[656] + C[1]*F27*F9*G[657] + C[1]*F28*F33*F9*G[658] + C[1]*F28*F34*F9*G[658] + C[1]*F28*F9*G[390] + C[1]*F29*F33*F9*G[659] + C[1]*F29*F34*F9*G[659] + C[1]*F29*F9*G[57] + C[1]*F30*F33*F9*G[656] + C[1]*F30*F34*F9*G[656] + C[1]*F30*F9*G[657] + C[1]*F31*F33*F9*G[658] + C[1]*F31*F34*F9*G[658] + C[1]*F31*F9*G[390] + C[1]*F32*F33*F9*G[659] + C[1]*F32*F34*F9*G[659] + C[1]*F32*F9*G[57] + C[1]*F33*F33*G[664] + C[1]*F33*F34*G[665] + C[1]*F33*G[666] + C[1]*F34*F34*G[664] + C[1]*F34*G[666] + C[1]*G[667] + C[3]*F0*F27*F33*G[668] + C[3]*F0*F27*F34*G[668] + C[3]*F0*F27*G[669] + C[3]*F0*F28*F33*G[670] + C[3]*F0*F28*F34*G[670] + C[3]*F0*F28*G[404] + C[3]*F0*F29*F33*G[671] + C[3]*F0*F29*F34*G[671] + C[3]*F0*F29*G[73] + C[3]*F0*F30*F33*G[668] + C[3]*F0*F30*F34*G[668] + C[3]*F0*F30*G[669] + C[3]*F0*F31*F33*G[670] + C[3]*F0*F31*F34*G[670] + C[3]*F0*F31*G[404] + C[3]*F0*F32*F33*G[671] + C[3]*F0*F32*F34*G[671] + C[3]*F0*F32*G[73] + C[3]*F1*F27*F33*G[672] + C[3]*F1*F27*F34*G[672] + C[3]*F1*F27*G[673] + C[3]*F1*F28*F33*G[674] + C[3]*F1*F28*F34*G[674] + C[3]*F1*F28*G[409] + C[3]*F1*F29*F33*G[675] + C[3]*F1*F29*F34*G[675] + C[3]*F1*F29*G[77] + C[3]*F1*F30*F33*G[672] + C[3]*F1*F30*F34*G[672] + C[3]*F1*F30*G[673] + C[3]*F1*F31*F33*G[674] + C[3]*F1*F31*F34*G[674] + C[3]*F1*F31*G[409] + C[3]*F1*F32*F33*G[675] + C[3]*F1*F32*F34*G[675] + C[3]*F1*F32*G[77] + C[3]*F10*F27*F33*G[676] + C[3]*F10*F27*F34*G[676] + C[3]*F10*F27*G[677] + C[3]*F10*F28*F33*G[678] + C[3]*F10*F28*F34*G[678] + C[3]*F10*F28*G[414] + C[3]*F10*F29*F33*G[679] + C[3]*F10*F29*F34*G[679] + C[3]*F10*F29*G[83] + C[3]*F10*F30*F33*G[676] + C[3]*F10*F30*F34*G[676] + C[3]*F10*F30*G[677] + C[3]*F10*F31*F33*G[678] + C[3]*F10*F31*F34*G[678] + C[3]*F10*F31*G[414] + C[3]*F10*F32*F33*G[679] + C[3]*F10*F32*F34*G[679] + C[3]*F10*F32*G[83] + C[3]*F11*F27*F33*G[668] + C[3]*F11*F27*F34*G[668] + C[3]*F11*F27*G[669] + C[3]*F11*F28*F33*G[670] + C[3]*F11*F28*F34*G[670] + C[3]*F11*F28*G[404] + C[3]*F11*F29*F33*G[671] + C[3]*F11*F29*F34*G[671] + C[3]*F11*F29*G[73] + C[3]*F11*F30*F33*G[668] + C[3]*F11*F30*F34*G[668] + C[3]*F11*F30*G[669] + C[3]*F11*F31*F33*G[670] + C[3]*F11*F31*F34*G[670] + C[3]*F11*F31*G[404] + C[3]*F11*F32*F33*G[671] + C[3]*F11*F32*F34*G[671] + C[3]*F11*F32*G[73] + C[3]*F2*F27*F33*G[676] + C[3]*F2*F27*F34*G[676] + C[3]*F2*F27*G[677] + C[3]*F2*F28*F33*G[678] + C[3]*F2*F28*F34*G[678] + C[3]*F2*F28*G[414] + C[3]*F2*F29*F33*G[679] + C[3]*F2*F29*F34*G[679] + C[3]*F2*F29*G[83] + C[3]*F2*F30*F33*G[676] + C[3]*F2*F30*F34*G[676] + C[3]*F2*F30*G[677] + C[3]*F2*F31*F33*G[678] + C[3]*F2*F31*F34*G[678] + C[3]*F2*F31*G[414] + C[3]*F2*F32*F33*G[679] + C[3]*F2*F32*F34*G[679] + C[3]*F2*F32*G[83] + C[3]*F27*F33*F9*G[672] + C[3]*F27*F34*F9*G[672] + C[3]*F27*F9*G[673] + C[3]*F28*F33*F9*G[674] + C[3]*F28*F34*F9*G[674] + C[3]*F28*F9*G[409] + C[3]*F29*F33*F9*G[675] + C[3]*F29*F34*F9*G[675] + C[3]*F29*F9*G[77] + C[3]*F30*F33*F9*G[672] + C[3]*F30*F34*F9*G[672] + C[3]*F30*F9*G[673] + C[3]*F31*F33*F9*G[674] + C[3]*F31*F34*F9*G[674] + C[3]*F31*F9*G[409] + C[3]*F32*F33*F9*G[675] + C[3]*F32*F34*F9*G[675] + C[3]*F32*F9*G[77] + C[3]*F33*F33*G[680] + C[3]*F33*F34*G[681] + C[3]*F33*G[682] + C[3]*F34*F34*G[680] + C[3]*F34*G[682] + C[3]*G[683] + C[5]*F0*F27*F33*G[684] + C[5]*F0*F27*F34*G[684] + C[5]*F0*F27*G[685] + C[5]*F0*F28*F33*G[686] + C[5]*F0*F28*F34*G[686] + C[5]*F0*F28*G[423] + C[5]*F0*F29*F33*G[687] + C[5]*F0*F29*F34*G[687] + C[5]*F0*F29*G[93] + C[5]*F0*F30*F33*G[684] + C[5]*F0*F30*F34*G[684] + C[5]*F0*F30*G[685] + C[5]*F0*F31*F33*G[686] + C[5]*F0*F31*F34*G[686] + C[5]*F0*F31*G[423] + C[5]*F0*F32*F33*G[687] + C[5]*F0*F32*F34*G[687] + C[5]*F0*F32*G[93] + C[5]*F1*F27*F33*G[688] + C[5]*F1*F27*F34*G[688] + C[5]*F1*F27*G[689] + C[5]*F1*F28*F33*G[690] + C[5]*F1*F28*F34*G[690] + C[5]*F1*F28*G[428] + C[5]*F1*F29*F33*G[691] + C[5]*F1*F29*F34*G[691] + C[5]*F1*F29*G[97] + C[5]*F1*F30*F33*G[688] + C[5]*F1*F30*F34*G[688] + C[5]*F1*F30*G[689] + C[5]*F1*F31*F33*G[690] + C[5]*F1*F31*F34*G[690] + C[5]*F1*F31*G[428] + C[5]*F1*F32*F33*G[691] + C[5]*F1*F32*F34*G[691] + C[5]*F1*F32*G[97] + C[5]*F10*F27*F33*G[692] + C[5]*F10*F27*F34*G[692] + C[5]*F10*F27*G[693] + C[5]*F10*F28*F33*G[694] + C[5]*F10*F28*F34*G[694] + C[5]*F10*F28*G[433] + C[5]*F10*F29*F33*G[695] + C[5]*F10*F29*F34*G[695] + C[5]*F10*F29*G[101] + C[5]*F10*F30*F33*G[692] + C[5]*F10*F30*F34*G[692] + C[5]*F10*F30*G[693] + C[5]*F10*F31*F33*G[694] + C[5]*F10*F31*F34*G[694] + C[5]*F10*F31*G[433] + C[5]*F10*F32*F33*G[695] + C[5]*F10*F32*F34*G[695] + C[5]*F10*F32*G[101] + C[5]*F11*F27*F33*G[684] + C[5]*F11*F27*F34*G[684] + C[5]*F11*F27*G[685] + C[5]*F11*F28*F33*G[686] + C[5]*F11*F28*F34*G[686] + C[5]*F11*F28*G[423] + C[5]*F11*F29*F33*G[687] + C[5]*F11*F29*F34*G[687] + C[5]*F11*F29*G[93] + C[5]*F11*F30*F33*G[684] + C[5]*F11*F30*F34*G[684] + C[5]*F11*F30*G[685] + C[5]*F11*F31*F33*G[686] + C[5]*F11*F31*F34*G[686] + C[5]*F11*F31*G[423] + C[5]*F11*F32*F33*G[687] + C[5]*F11*F32*F34*G[687] + C[5]*F11*F32*G[93] + C[5]*F2*F27*F33*G[692] + C[5]*F2*F27*F34*G[692] + C[5]*F2*F27*G[693] + C[5]*F2*F28*F33*G[694] + C[5]*F2*F28*F34*G[694] + C[5]*F2*F28*G[433] + C[5]*F2*F29*F33*G[695] + C[5]*F2*F29*F34*G[695] + C[5]*F2*F29*G[101] + C[5]*F2*F30*F33*G[692] + C[5]*F2*F30*F34*G[692] + C[5]*F2*F30*G[693] + C[5]*F2*F31*F33*G[694] + C[5]*F2*F31*F34*G[694] + C[5]*F2*F31*G[433] + C[5]*F2*F32*F33*G[695] + C[5]*F2*F32*F34*G[695] + C[5]*F2*F32*G[101] + C[5]*F27*F33*F9*G[688] + C[5]*F27*F34*F9*G[688] + C[5]*F27*F9*G[689] + C[5]*F28*F33*F9*G[690] + C[5]*F28*F34*F9*G[690] + C[5]*F28*F9*G[428] + C[5]*F29*F33*F9*G[691] + C[5]*F29*F34*F9*G[691] + C[5]*F29*F9*G[97] + C[5]*F30*F33*F9*G[688] + C[5]*F30*F34*F9*G[688] + C[5]*F30*F9*G[689] + C[5]*F31*F33*F9*G[690] + C[5]*F31*F34*F9*G[690] + C[5]*F31*F9*G[428] + C[5]*F32*F33*F9*G[691] + C[5]*F32*F34*F9*G[691] + C[5]*F32*F9*G[97] + C[5]*F33*F33*G[696] + C[5]*F33*F34*G[697] + C[5]*F33*G[698] + C[5]*F34*F34*G[696] + C[5]*F34*G[698] + C[5]*G[699] + F33*F33*G[284] + F33*F34*G[285] + F33*G[286] + F34*F34*G[284] + F34*G[286])/(1.0 + 0.01*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.01*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.01*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.2*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.2*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.2*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))));
      
      // Number of operations: 3070
      I[7] = W14[ip]*(F0*F0*G[540] + F1*(F0*G[541] + F1*G[544]) + F10*(F0*G[542] + F1*G[545] + F10*G[547]) + F11*(F0*G[543] + F1*G[541] + F10*G[542] + F11*G[540]) + F2*(F1*G[545] + F10*G[548] + F2*G[547] + G[542]*(F0 + F11)) + F9*(F1*G[546] + F9*G[544] + G[541]*(F0 + F11) + G[545]*(F10 + F2)) + G[539]*(std::abs(F0) + std::abs(F1) + std::abs(F2)) + (C[1]*F27*F33*F33*G[703] + C[1]*F27*F33*F34*G[704] + C[1]*F27*F33*G[705] + C[1]*F27*F34*F34*G[703] + C[1]*F27*F34*G[705] + C[1]*F27*G[706] + C[1]*F28*F33*F33*G[454] + C[1]*F28*F33*F34*G[455] + C[1]*F28*F33*G[456] + C[1]*F28*F34*F34*G[454] + C[1]*F28*F34*G[456] + C[1]*F28*G[457] + C[1]*F29*F33*F33*G[126] + C[1]*F29*F33*F34*G[127] + C[1]*F29*F33*G[128] + C[1]*F29*F34*F34*G[126] + C[1]*F29*F34*G[128] + C[1]*F29*G[129] + C[1]*F30*F33*F33*G[703] + C[1]*F30*F33*F34*G[704] + C[1]*F30*F33*G[705] + C[1]*F30*F34*F34*G[703] + C[1]*F30*F34*G[705] + C[1]*F30*G[706] + C[1]*F31*F33*F33*G[454] + C[1]*F31*F33*F34*G[455] + C[1]*F31*F33*G[456] + C[1]*F31*F34*F34*G[454] + C[1]*F31*F34*G[456] + C[1]*F31*G[457] + C[1]*F32*F33*F33*G[126] + C[1]*F32*F33*F34*G[127] + C[1]*F32*F33*G[128] + C[1]*F32*F34*F34*G[126] + C[1]*F32*F34*G[128] + C[1]*F32*G[129] + C[3]*F27*F33*F33*G[707] + C[3]*F27*F33*F34*G[708] + C[3]*F27*F33*G[709] + C[3]*F27*F34*F34*G[707] + C[3]*F27*F34*G[709] + C[3]*F27*G[710] + C[3]*F28*F33*F33*G[462] + C[3]*F28*F33*F34*G[463] + C[3]*F28*F33*G[464] + C[3]*F28*F34*F34*G[462] + C[3]*F28*F34*G[464] + C[3]*F28*G[465] + C[3]*F29*F33*F33*G[138] + C[3]*F29*F33*F34*G[139] + C[3]*F29*F33*G[140] + C[3]*F29*F34*F34*G[138] + C[3]*F29*F34*G[140] + C[3]*F29*G[141] + C[3]*F30*F33*F33*G[707] + C[3]*F30*F33*F34*G[708] + C[3]*F30*F33*G[709] + C[3]*F30*F34*F34*G[707] + C[3]*F30*F34*G[709] + C[3]*F30*G[710] + C[3]*F31*F33*F33*G[462] + C[3]*F31*F33*F34*G[463] + C[3]*F31*F33*G[464] + C[3]*F31*F34*F34*G[462] + C[3]*F31*F34*G[464] + C[3]*F31*G[465] + C[3]*F32*F33*F33*G[138] + C[3]*F32*F33*F34*G[139] + C[3]*F32*F33*G[140] + C[3]*F32*F34*F34*G[138] + C[3]*F32*F34*G[140] + C[3]*F32*G[141] + C[5]*F27*F33*F33*G[711] + C[5]*F27*F33*F34*G[712] + C[5]*F27*F33*G[713] + C[5]*F27*F34*F34*G[711] + C[5]*F27*F34*G[713] + C[5]*F27*G[714] + C[5]*F28*F33*F33*G[470] + C[5]*F28*F33*F34*G[471] + C[5]*F28*F33*G[472] + C[5]*F28*F34*F34*G[470] + C[5]*F28*F34*G[472] + C[5]*F28*G[473] + C[5]*F29*F33*F33*G[150] + C[5]*F29*F33*F34*G[151] + C[5]*F29*F33*G[152] + C[5]*F29*F34*F34*G[150] + C[5]*F29*F34*G[152] + C[5]*F29*G[153] + C[5]*F30*F33*F33*G[711] + C[5]*F30*F33*F34*G[712] + C[5]*F30*F33*G[713] + C[5]*F30*F34*F34*G[711] + C[5]*F30*F34*G[713] + C[5]*F30*G[714] + C[5]*F31*F33*F33*G[470] + C[5]*F31*F33*F34*G[471] + C[5]*F31*F33*G[472] + C[5]*F31*F34*F34*G[470] + C[5]*F31*F34*G[472] + C[5]*F31*G[473] + C[5]*F32*F33*F33*G[150] + C[5]*F32*F33*F34*G[151] + C[5]*F32*F33*G[152] + C[5]*F32*F34*F34*G[150] + C[5]*F32*F34*G[152] + C[5]*F32*G[153])/(1.0 + 0.001*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.001*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.001*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.006*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.03*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.03*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.03*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.06*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.06*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.06*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.3*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.3*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.3*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))) + (F0*F33*G[763] + F0*F34*G[763] + F0*G[635] + F1*F33*G[764] + F1*F34*G[764] + F1*G[637] + F10*F33*G[765] + F10*F34*G[765] + F10*G[639] + F11*F33*G[763] + F11*F34*G[763] + F11*G[635] + F2*F33*G[765] + F2*F34*G[765] + F2*G[639] + F33*F9*G[764] + F34*F9*G[764] + F9*G[637])/(1.0 + 0.1*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.1*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.1*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))) + (G[576] + C[1]*F0*F27*F33*G[715] + C[1]*F0*F27*F34*G[715] + C[1]*F0*F27*G[716] + C[1]*F0*F28*F33*G[717] + C[1]*F0*F28*F34*G[717] + C[1]*F0*F28*G[483] + C[1]*F0*F29*F33*G[718] + C[1]*F0*F29*F34*G[718] + C[1]*F0*F29*G[167] + C[1]*F0*F30*F33*G[715] + C[1]*F0*F30*F34*G[715] + C[1]*F0*F30*G[716] + C[1]*F0*F31*F33*G[717] + C[1]*F0*F31*F34*G[717] + C[1]*F0*F31*G[483] + C[1]*F0*F32*F33*G[718] + C[1]*F0*F32*F34*G[718] + C[1]*F0*F32*G[167] + C[1]*F1*F27*F33*G[719] + C[1]*F1*F27*F34*G[719] + C[1]*F1*F27*G[720] + C[1]*F1*F28*F33*G[721] + C[1]*F1*F28*F34*G[721] + C[1]*F1*F28*G[488] + C[1]*F1*F29*F33*G[722] + C[1]*F1*F29*F34*G[722] + C[1]*F1*F29*G[173] + C[1]*F1*F30*F33*G[719] + C[1]*F1*F30*F34*G[719] + C[1]*F1*F30*G[720] + C[1]*F1*F31*F33*G[721] + C[1]*F1*F31*F34*G[721] + C[1]*F1*F31*G[488] + C[1]*F1*F32*F33*G[722] + C[1]*F1*F32*F34*G[722] + C[1]*F1*F32*G[173] + C[1]*F10*F27*F33*G[723] + C[1]*F10*F27*F34*G[723] + C[1]*F10*F27*G[724] + C[1]*F10*F28*F33*G[725] + C[1]*F10*F28*F34*G[725] + C[1]*F10*F28*G[493] + C[1]*F10*F29*F33*G[726] + C[1]*F10*F29*F34*G[726] + C[1]*F10*F29*G[179] + C[1]*F10*F30*F33*G[723] + C[1]*F10*F30*F34*G[723] + C[1]*F10*F30*G[724] + C[1]*F10*F31*F33*G[725] + C[1]*F10*F31*F34*G[725] + C[1]*F10*F31*G[493] + C[1]*F10*F32*F33*G[726] + C[1]*F10*F32*F34*G[726] + C[1]*F10*F32*G[179] + C[1]*F11*F27*F33*G[715] + C[1]*F11*F27*F34*G[715] + C[1]*F11*F27*G[716] + C[1]*F11*F28*F33*G[717] + C[1]*F11*F28*F34*G[717] + C[1]*F11*F28*G[483] + C[1]*F11*F29*F33*G[718] + C[1]*F11*F29*F34*G[718] + C[1]*F11*F29*G[167] + C[1]*F11*F30*F33*G[715] + C[1]*F11*F30*F34*G[715] + C[1]*F11*F30*G[716] + C[1]*F11*F31*F33*G[717] + C[1]*F11*F31*F34*G[717] + C[1]*F11*F31*G[483] + C[1]*F11*F32*F33*G[718] + C[1]*F11*F32*F34*G[718] + C[1]*F11*F32*G[167] + C[1]*F2*F27*F33*G[723] + C[1]*F2*F27*F34*G[723] + C[1]*F2*F27*G[724] + C[1]*F2*F28*F33*G[725] + C[1]*F2*F28*F34*G[725] + C[1]*F2*F28*G[493] + C[1]*F2*F29*F33*G[726] + C[1]*F2*F29*F34*G[726] + C[1]*F2*F29*G[179] + C[1]*F2*F30*F33*G[723] + C[1]*F2*F30*F34*G[723] + C[1]*F2*F30*G[724] + C[1]*F2*F31*F33*G[725] + C[1]*F2*F31*F34*G[725] + C[1]*F2*F31*G[493] + C[1]*F2*F32*F33*G[726] + C[1]*F2*F32*F34*G[726] + C[1]*F2*F32*G[179] + C[1]*F27*F33*F9*G[719] + C[1]*F27*F34*F9*G[719] + C[1]*F27*F9*G[720] + C[1]*F28*F33*F9*G[721] + C[1]*F28*F34*F9*G[721] + C[1]*F28*F9*G[488] + C[1]*F29*F33*F9*G[722] + C[1]*F29*F34*F9*G[722] + C[1]*F29*F9*G[173] + C[1]*F30*F33*F9*G[719] + C[1]*F30*F34*F9*G[719] + C[1]*F30*F9*G[720] + C[1]*F31*F33*F9*G[721] + C[1]*F31*F34*F9*G[721] + C[1]*F31*F9*G[488] + C[1]*F32*F33*F9*G[722] + C[1]*F32*F34*F9*G[722] + C[1]*F32*F9*G[173] + C[1]*F33*F33*G[727] + C[1]*F33*F34*G[728] + C[1]*F33*G[729] + C[1]*F34*F34*G[727] + C[1]*F34*G[729] + C[1]*G[730] + C[3]*F0*F27*F33*G[731] + C[3]*F0*F27*F34*G[731] + C[3]*F0*F27*G[732] + C[3]*F0*F28*F33*G[733] + C[3]*F0*F28*F34*G[733] + C[3]*F0*F28*G[502] + C[3]*F0*F29*F33*G[734] + C[3]*F0*F29*F34*G[734] + C[3]*F0*F29*G[189] + C[3]*F0*F30*F33*G[731] + C[3]*F0*F30*F34*G[731] + C[3]*F0*F30*G[732] + C[3]*F0*F31*F33*G[733] + C[3]*F0*F31*F34*G[733] + C[3]*F0*F31*G[502] + C[3]*F0*F32*F33*G[734] + C[3]*F0*F32*F34*G[734] + C[3]*F0*F32*G[189] + C[3]*F1*F27*F33*G[735] + C[3]*F1*F27*F34*G[735] + C[3]*F1*F27*G[736] + C[3]*F1*F28*F33*G[737] + C[3]*F1*F28*F34*G[737] + C[3]*F1*F28*G[505] + C[3]*F1*F29*F33*G[738] + C[3]*F1*F29*F34*G[738] + C[3]*F1*F29*G[195] + C[3]*F1*F30*F33*G[735] + C[3]*F1*F30*F34*G[735] + C[3]*F1*F30*G[736] + C[3]*F1*F31*F33*G[737] + C[3]*F1*F31*F34*G[737] + C[3]*F1*F31*G[505] + C[3]*F1*F32*F33*G[738] + C[3]*F1*F32*F34*G[738] + C[3]*F1*F32*G[195] + C[3]*F10*F27*F33*G[739] + C[3]*F10*F27*F34*G[739] + C[3]*F10*F27*G[740] + C[3]*F10*F28*F33*G[741] + C[3]*F10*F28*F34*G[741] + C[3]*F10*F28*G[510] + C[3]*F10*F29*F33*G[742] + C[3]*F10*F29*F34*G[742] + C[3]*F10*F29*G[201] + C[3]*F10*F30*F33*G[739] + C[3]*F10*F30*F34*G[739] + C[3]*F10*F30*G[740] + C[3]*F10*F31*F33*G[741] + C[3]*F10*F31*F34*G[741] + C[3]*F10*F31*G[510] + C[3]*F10*F32*F33*G[742] + C[3]*F10*F32*F34*G[742] + C[3]*F10*F32*G[201] + C[3]*F11*F27*F33*G[731] + C[3]*F11*F27*F34*G[731] + C[3]*F11*F27*G[732] + C[3]*F11*F28*F33*G[733] + C[3]*F11*F28*F34*G[733] + C[3]*F11*F28*G[502] + C[3]*F11*F29*F33*G[734] + C[3]*F11*F29*F34*G[734] + C[3]*F11*F29*G[189] + C[3]*F11*F30*F33*G[731] + C[3]*F11*F30*F34*G[731] + C[3]*F11*F30*G[732] + C[3]*F11*F31*F33*G[733] + C[3]*F11*F31*F34*G[733] + C[3]*F11*F31*G[502] + C[3]*F11*F32*F33*G[734] + C[3]*F11*F32*F34*G[734] + C[3]*F11*F32*G[189] + C[3]*F2*F27*F33*G[739] + C[3]*F2*F27*F34*G[739] + C[3]*F2*F27*G[740] + C[3]*F2*F28*F33*G[741] + C[3]*F2*F28*F34*G[741] + C[3]*F2*F28*G[510] + C[3]*F2*F29*F33*G[742] + C[3]*F2*F29*F34*G[742] + C[3]*F2*F29*G[201] + C[3]*F2*F30*F33*G[739] + C[3]*F2*F30*F34*G[739] + C[3]*F2*F30*G[740] + C[3]*F2*F31*F33*G[741] + C[3]*F2*F31*F34*G[741] + C[3]*F2*F31*G[510] + C[3]*F2*F32*F33*G[742] + C[3]*F2*F32*F34*G[742] + C[3]*F2*F32*G[201] + C[3]*F27*F33*F9*G[735] + C[3]*F27*F34*F9*G[735] + C[3]*F27*F9*G[736] + C[3]*F28*F33*F9*G[737] + C[3]*F28*F34*F9*G[737] + C[3]*F28*F9*G[505] + C[3]*F29*F33*F9*G[738] + C[3]*F29*F34*F9*G[738] + C[3]*F29*F9*G[195] + C[3]*F30*F33*F9*G[735] + C[3]*F30*F34*F9*G[735] + C[3]*F30*F9*G[736] + C[3]*F31*F33*F9*G[737] + C[3]*F31*F34*F9*G[737] + C[3]*F31*F9*G[505] + C[3]*F32*F33*F9*G[738] + C[3]*F32*F34*F9*G[738] + C[3]*F32*F9*G[195] + C[3]*F33*F33*G[743] + C[3]*F33*F34*G[744] + C[3]*F33*G[745] + C[3]*F34*F34*G[743] + C[3]*F34*G[745] + C[3]*G[746] + C[5]*F0*F27*F33*G[747] + C[5]*F0*F27*F34*G[747] + C[5]*F0*F27*G[748] + C[5]*F0*F28*F33*G[749] + C[5]*F0*F28*F34*G[749] + C[5]*F0*F28*G[519] + C[5]*F0*F29*F33*G[750] + C[5]*F0*F29*F34*G[750] + C[5]*F0*F29*G[211] + C[5]*F0*F30*F33*G[747] + C[5]*F0*F30*F34*G[747] + C[5]*F0*F30*G[748] + C[5]*F0*F31*F33*G[749] + C[5]*F0*F31*F34*G[749] + C[5]*F0*F31*G[519] + C[5]*F0*F32*F33*G[750] + C[5]*F0*F32*F34*G[750] + C[5]*F0*F32*G[211] + C[5]*F1*F27*F33*G[751] + C[5]*F1*F27*F34*G[751] + C[5]*F1*F27*G[752] + C[5]*F1*F28*F33*G[753] + C[5]*F1*F28*F34*G[753] + C[5]*F1*F28*G[522] + C[5]*F1*F29*F33*G[754] + C[5]*F1*F29*F34*G[754] + C[5]*F1*F29*G[217] + C[5]*F1*F30*F33*G[751] + C[5]*F1*F30*F34*G[751] + C[5]*F1*F30*G[752] + C[5]*F1*F31*F33*G[753] + C[5]*F1*F31*F34*G[753] + C[5]*F1*F31*G[522] + C[5]*F1*F32*F33*G[754] + C[5]*F1*F32*F34*G[754] + C[5]*F1*F32*G[217] + C[5]*F10*F27*F33*G[755] + C[5]*F10*F27*F34*G[755] + C[5]*F10*F27*G[756] + C[5]*F10*F28*F33*G[757] + C[5]*F10*F28*F34*G[757] + C[5]*F10*F28*G[525] + C[5]*F10*F29*F33*G[758] + C[5]*F10*F29*F34*G[758] + C[5]*F10*F29*G[223] + C[5]*F10*F30*F33*G[755] + C[5]*F10*F30*F34*G[755] + C[5]*F10*F30*G[756] + C[5]*F10*F31*F33*G[757] + C[5]*F10*F31*F34*G[757] + C[5]*F10*F31*G[525] + C[5]*F10*F32*F33*G[758] + C[5]*F10*F32*F34*G[758] + C[5]*F10*F32*G[223] + C[5]*F11*F27*F33*G[747] + C[5]*F11*F27*F34*G[747] + C[5]*F11*F27*G[748] + C[5]*F11*F28*F33*G[749] + C[5]*F11*F28*F34*G[749] + C[5]*F11*F28*G[519] + C[5]*F11*F29*F33*G[750] + C[5]*F11*F29*F34*G[750] + C[5]*F11*F29*G[211] + C[5]*F11*F30*F33*G[747] + C[5]*F11*F30*F34*G[747] + C[5]*F11*F30*G[748] + C[5]*F11*F31*F33*G[749] + C[5]*F11*F31*F34*G[749] + C[5]*F11*F31*G[519] + C[5]*F11*F32*F33*G[750] + C[5]*F11*F32*F34*G[750] + C[5]*F11*F32*G[211] + C[5]*F2*F27*F33*G[755] + C[5]*F2*F27*F34*G[755] + C[5]*F2*F27*G[756] + C[5]*F2*F28*F33*G[757] + C[5]*F2*F28*F34*G[757] + C[5]*F2*F28*G[525] + C[5]*F2*F29*F33*G[758] + C[5]*F2*F29*F34*G[758] + C[5]*F2*F29*G[223] + C[5]*F2*F30*F33*G[755] + C[5]*F2*F30*F34*G[755] + C[5]*F2*F30*G[756] + C[5]*F2*F31*F33*G[757] + C[5]*F2*F31*F34*G[757] + C[5]*F2*F31*G[525] + C[5]*F2*F32*F33*G[758] + C[5]*F2*F32*F34*G[758] + C[5]*F2*F32*G[223] + C[5]*F27*F33*F9*G[751] + C[5]*F27*F34*F9*G[751] + C[5]*F27*F9*G[752] + C[5]*F28*F33*F9*G[753] + C[5]*F28*F34*F9*G[753] + C[5]*F28*F9*G[522] + C[5]*F29*F33*F9*G[754] + C[5]*F29*F34*F9*G[754] + C[5]*F29*F9*G[217] + C[5]*F30*F33*F9*G[751] + C[5]*F30*F34*F9*G[751] + C[5]*F30*F9*G[752] + C[5]*F31*F33*F9*G[753] + C[5]*F31*F34*F9*G[753] + C[5]*F31*F9*G[522] + C[5]*F32*F33*F9*G[754] + C[5]*F32*F34*F9*G[754] + C[5]*F32*F9*G[217] + C[5]*F33*F33*G[759] + C[5]*F33*F34*G[760] + C[5]*F33*G[761] + C[5]*F34*F34*G[759] + C[5]*F34*G[761] + C[5]*G[762] + F33*F33*G[573] + F33*F34*G[574] + F33*G[575] + F34*F34*G[573] + F34*G[575])/(1.0 + 0.01*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.01*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.01*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.2*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.2*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.2*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))));
      
      // Number of operations: 3070
      I[8] = W14[ip]*(F0*F0*G[767] + F1*(F0*G[768] + F1*G[771]) + F10*(F0*G[769] + F1*G[772] + F10*G[774]) + F11*(F0*G[770] + F1*G[768] + F10*G[769] + F11*G[767]) + F2*(F1*G[772] + F10*G[775] + F2*G[774] + G[769]*(F0 + F11)) + F9*(F1*G[773] + F9*G[771] + G[768]*(F0 + F11) + G[772]*(F10 + F2)) + G[766]*(std::abs(F0) + std::abs(F1) + std::abs(F2)) + (C[1]*F27*F33*F33*G[776] + C[1]*F27*F33*F34*G[777] + C[1]*F27*F33*G[778] + C[1]*F27*F34*F34*G[776] + C[1]*F27*F34*G[778] + C[1]*F27*G[779] + C[1]*F28*F33*F33*G[549] + C[1]*F28*F33*F34*G[550] + C[1]*F28*F33*G[551] + C[1]*F28*F34*F34*G[549] + C[1]*F28*F34*G[551] + C[1]*F28*G[552] + C[1]*F29*F33*F33*G[248] + C[1]*F29*F33*F34*G[249] + C[1]*F29*F33*G[250] + C[1]*F29*F34*F34*G[248] + C[1]*F29*F34*G[250] + C[1]*F29*G[251] + C[1]*F30*F33*F33*G[776] + C[1]*F30*F33*F34*G[777] + C[1]*F30*F33*G[778] + C[1]*F30*F34*F34*G[776] + C[1]*F30*F34*G[778] + C[1]*F30*G[779] + C[1]*F31*F33*F33*G[549] + C[1]*F31*F33*F34*G[550] + C[1]*F31*F33*G[551] + C[1]*F31*F34*F34*G[549] + C[1]*F31*F34*G[551] + C[1]*F31*G[552] + C[1]*F32*F33*F33*G[248] + C[1]*F32*F33*F34*G[249] + C[1]*F32*F33*G[250] + C[1]*F32*F34*F34*G[248] + C[1]*F32*F34*G[250] + C[1]*F32*G[251] + C[3]*F27*F33*F33*G[780] + C[3]*F27*F33*F34*G[781] + C[3]*F27*F33*G[782] + C[3]*F27*F34*F34*G[780] + C[3]*F27*F34*G[782] + C[3]*F27*G[783] + C[3]*F28*F33*F33*G[557] + C[3]*F28*F33*F34*G[558] + C[3]*F28*F33*G[559] + C[3]*F28*F34*F34*G[557] + C[3]*F28*F34*G[559] + C[3]*F28*G[560] + C[3]*F29*F33*F33*G[260] + C[3]*F29*F33*F34*G[261] + C[3]*F29*F33*G[262] + C[3]*F29*F34*F34*G[260] + C[3]*F29*F34*G[262] + C[3]*F29*G[263] + C[3]*F30*F33*F33*G[780] + C[3]*F30*F33*F34*G[781] + C[3]*F30*F33*G[782] + C[3]*F30*F34*F34*G[780] + C[3]*F30*F34*G[782] + C[3]*F30*G[783] + C[3]*F31*F33*F33*G[557] + C[3]*F31*F33*F34*G[558] + C[3]*F31*F33*G[559] + C[3]*F31*F34*F34*G[557] + C[3]*F31*F34*G[559] + C[3]*F31*G[560] + C[3]*F32*F33*F33*G[260] + C[3]*F32*F33*F34*G[261] + C[3]*F32*F33*G[262] + C[3]*F32*F34*F34*G[260] + C[3]*F32*F34*G[262] + C[3]*F32*G[263] + C[5]*F27*F33*F33*G[784] + C[5]*F27*F33*F34*G[785] + C[5]*F27*F33*G[786] + C[5]*F27*F34*F34*G[784] + C[5]*F27*F34*G[786] + C[5]*F27*G[787] + C[5]*F28*F33*F33*G[565] + C[5]*F28*F33*F34*G[566] + C[5]*F28*F33*G[567] + C[5]*F28*F34*F34*G[565] + C[5]*F28*F34*G[567] + C[5]*F28*G[568] + C[5]*F29*F33*F33*G[272] + C[5]*F29*F33*F34*G[273] + C[5]*F29*F33*G[274] + C[5]*F29*F34*F34*G[272] + C[5]*F29*F34*G[274] + C[5]*F29*G[275] + C[5]*F30*F33*F33*G[784] + C[5]*F30*F33*F34*G[785] + C[5]*F30*F33*G[786] + C[5]*F30*F34*F34*G[784] + C[5]*F30*F34*G[786] + C[5]*F30*G[787] + C[5]*F31*F33*F33*G[565] + C[5]*F31*F33*F34*G[566] + C[5]*F31*F33*G[567] + C[5]*F31*F34*F34*G[565] + C[5]*F31*F34*G[567] + C[5]*F31*G[568] + C[5]*F32*F33*F33*G[272] + C[5]*F32*F33*F34*G[273] + C[5]*F32*F33*G[274] + C[5]*F32*F34*F34*G[272] + C[5]*F32*F34*G[274] + C[5]*F32*G[275])/(1.0 + 0.001*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.001*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.001*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.006*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.03*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.03*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.03*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.06*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.06*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.06*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.3*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.3*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.3*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))) + (F0*F33*G[834] + F0*F34*G[834] + F0*G[835] + F1*F33*G[836] + F1*F34*G[836] + F1*G[837] + F10*F33*G[838] + F10*F34*G[838] + F10*G[839] + F11*F33*G[834] + F11*F34*G[834] + F11*G[835] + F2*F33*G[838] + F2*F34*G[838] + F2*G[839] + F33*F9*G[836] + F34*F9*G[836] + F9*G[837])/(1.0 + 0.1*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.1*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.1*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))) + (G[791] + C[1]*F0*F27*F33*G[792] + C[1]*F0*F27*F34*G[792] + C[1]*F0*F27*G[793] + C[1]*F0*F28*F33*G[794] + C[1]*F0*F28*F34*G[794] + C[1]*F0*F28*G[578] + C[1]*F0*F29*F33*G[795] + C[1]*F0*F29*F34*G[795] + C[1]*F0*F29*G[289] + C[1]*F0*F30*F33*G[792] + C[1]*F0*F30*F34*G[792] + C[1]*F0*F30*G[793] + C[1]*F0*F31*F33*G[794] + C[1]*F0*F31*F34*G[794] + C[1]*F0*F31*G[578] + C[1]*F0*F32*F33*G[795] + C[1]*F0*F32*F34*G[795] + C[1]*F0*F32*G[289] + C[1]*F1*F27*F33*G[796] + C[1]*F1*F27*F34*G[796] + C[1]*F1*F27*G[797] + C[1]*F1*F28*F33*G[798] + C[1]*F1*F28*F34*G[798] + C[1]*F1*F28*G[583] + C[1]*F1*F29*F33*G[799] + C[1]*F1*F29*F34*G[799] + C[1]*F1*F29*G[295] + C[1]*F1*F30*F33*G[796] + C[1]*F1*F30*F34*G[796] + C[1]*F1*F30*G[797] + C[1]*F1*F31*F33*G[798] + C[1]*F1*F31*F34*G[798] + C[1]*F1*F31*G[583] + C[1]*F1*F32*F33*G[799] + C[1]*F1*F32*F34*G[799] + C[1]*F1*F32*G[295] + C[1]*F10*F27*F33*G[800] + C[1]*F10*F27*F34*G[800] + C[1]*F10*F27*G[801] + C[1]*F10*F28*F33*G[802] + C[1]*F10*F28*F34*G[802] + C[1]*F10*F28*G[588] + C[1]*F10*F29*F33*G[803] + C[1]*F10*F29*F34*G[803] + C[1]*F10*F29*G[301] + C[1]*F10*F30*F33*G[800] + C[1]*F10*F30*F34*G[800] + C[1]*F10*F30*G[801] + C[1]*F10*F31*F33*G[802] + C[1]*F10*F31*F34*G[802] + C[1]*F10*F31*G[588] + C[1]*F10*F32*F33*G[803] + C[1]*F10*F32*F34*G[803] + C[1]*F10*F32*G[301] + C[1]*F11*F27*F33*G[792] + C[1]*F11*F27*F34*G[792] + C[1]*F11*F27*G[793] + C[1]*F11*F28*F33*G[794] + C[1]*F11*F28*F34*G[794] + C[1]*F11*F28*G[578] + C[1]*F11*F29*F33*G[795] + C[1]*F11*F29*F34*G[795] + C[1]*F11*F29*G[289] + C[1]*F11*F30*F33*G[792] + C[1]*F11*F30*F34*G[792] + C[1]*F11*F30*G[793] + C[1]*F11*F31*F33*G[794] + C[1]*F11*F31*F34*G[794] + C[1]*F11*F31*G[578] + C[1]*F11*F32*F33*G[795] + C[1]*F11*F32*F34*G[795] + C[1]*F11*F32*G[289] + C[1]*F2*F27*F33*G[800] + C[1]*F2*F27*F34*G[800] + C[1]*F2*F27*G[801] + C[1]*F2*F28*F33*G[802] + C[1]*F2*F28*F34*G[802] + C[1]*F2*F28*G[588] + C[1]*F2*F29*F33*G[803] + C[1]*F2*F29*F34*G[803] + C[1]*F2*F29*G[301] + C[1]*F2*F30*F33*G[800] + C[1]*F2*F30*F34*G[800] + C[1]*F2*F30*G[801] + C[1]*F2*F31*F33*G[802] + C[1]*F2*F31*F34*G[802] + C[1]*F2*F31*G[588] + C[1]*F2*F32*F33*G[803] + C[1]*F2*F32*F34*G[803] + C[1]*F2*F32*G[301] + C[1]*F27*F33*F9*G[796] + C[1]*F27*F34*F9*G[796] + C[1]*F27*F9*G[797] + C[1]*F28*F33*F9*G[798] + C[1]*F28*F34*F9*G[798] + C[1]*F28*F9*G[583] + C[1]*F29*F33*F9*G[799] + C[1]*F29*F34*F9*G[799] + C[1]*F29*F9*G[295] + C[1]*F30*F33*F9*G[796] + C[1]*F30*F34*F9*G[796] + C[1]*F30*F9*G[797] + C[1]*F31*F33*F9*G[798] + C[1]*F31*F34*F9*G[798] + C[1]*F31*F9*G[583] + C[1]*F32*F33*F9*G[799] + C[1]*F32*F34*F9*G[799] + C[1]*F32*F9*G[295] + C[1]*F33*F33*G[804] + C[1]*F33*F34*G[805] + C[1]*F33*G[806] + C[1]*F34*F34*G[804] + C[1]*F34*G[806] + C[1]*G[807] + C[3]*F0*F27*F33*G[796] + C[3]*F0*F27*F34*G[796] + C[3]*F0*F27*G[797] + C[3]*F0*F28*F33*G[808] + C[3]*F0*F28*F34*G[808] + C[3]*F0*F28*G[597] + C[3]*F0*F29*F33*G[809] + C[3]*F0*F29*F34*G[809] + C[3]*F0*F29*G[311] + C[3]*F0*F30*F33*G[796] + C[3]*F0*F30*F34*G[796] + C[3]*F0*F30*G[797] + C[3]*F0*F31*F33*G[808] + C[3]*F0*F31*F34*G[808] + C[3]*F0*F31*G[597] + C[3]*F0*F32*F33*G[809] + C[3]*F0*F32*F34*G[809] + C[3]*F0*F32*G[311] + C[3]*F1*F27*F33*G[810] + C[3]*F1*F27*F34*G[810] + C[3]*F1*F27*G[811] + C[3]*F1*F28*F33*G[812] + C[3]*F1*F28*F34*G[812] + C[3]*F1*F28*G[602] + C[3]*F1*F29*F33*G[813] + C[3]*F1*F29*F34*G[813] + C[3]*F1*F29*G[317] + C[3]*F1*F30*F33*G[810] + C[3]*F1*F30*F34*G[810] + C[3]*F1*F30*G[811] + C[3]*F1*F31*F33*G[812] + C[3]*F1*F31*F34*G[812] + C[3]*F1*F31*G[602] + C[3]*F1*F32*F33*G[813] + C[3]*F1*F32*F34*G[813] + C[3]*F1*F32*G[317] + C[3]*F10*F27*F33*G[814] + C[3]*F10*F27*F34*G[814] + C[3]*F10*F27*G[815] + C[3]*F10*F28*F33*G[816] + C[3]*F10*F28*F34*G[816] + C[3]*F10*F28*G[607] + C[3]*F10*F29*F33*G[817] + C[3]*F10*F29*F34*G[817] + C[3]*F10*F29*G[323] + C[3]*F10*F30*F33*G[814] + C[3]*F10*F30*F34*G[814] + C[3]*F10*F30*G[815] + C[3]*F10*F31*F33*G[816] + C[3]*F10*F31*F34*G[816] + C[3]*F10*F31*G[607] + C[3]*F10*F32*F33*G[817] + C[3]*F10*F32*F34*G[817] + C[3]*F10*F32*G[323] + C[3]*F11*F27*F33*G[796] + C[3]*F11*F27*F34*G[796] + C[3]*F11*F27*G[797] + C[3]*F11*F28*F33*G[808] + C[3]*F11*F28*F34*G[808] + C[3]*F11*F28*G[597] + C[3]*F11*F29*F33*G[809] + C[3]*F11*F29*F34*G[809] + C[3]*F11*F29*G[311] + C[3]*F11*F30*F33*G[796] + C[3]*F11*F30*F34*G[796] + C[3]*F11*F30*G[797] + C[3]*F11*F31*F33*G[808] + C[3]*F11*F31*F34*G[808] + C[3]*F11*F31*G[597] + C[3]*F11*F32*F33*G[809] + C[3]*F11*F32*F34*G[809] + C[3]*F11*F32*G[311] + C[3]*F2*F27*F33*G[814] + C[3]*F2*F27*F34*G[814] + C[3]*F2*F27*G[815] + C[3]*F2*F28*F33*G[816] + C[3]*F2*F28*F34*G[816] + C[3]*F2*F28*G[607] + C[3]*F2*F29*F33*G[817] + C[3]*F2*F29*F34*G[817] + C[3]*F2*F29*G[323] + C[3]*F2*F30*F33*G[814] + C[3]*F2*F30*F34*G[814] + C[3]*F2*F30*G[815] + C[3]*F2*F31*F33*G[816] + C[3]*F2*F31*F34*G[816] + C[3]*F2*F31*G[607] + C[3]*F2*F32*F33*G[817] + C[3]*F2*F32*F34*G[817] + C[3]*F2*F32*G[323] + C[3]*F27*F33*F9*G[810] + C[3]*F27*F34*F9*G[810] + C[3]*F27*F9*G[811] + C[3]*F28*F33*F9*G[812] + C[3]*F28*F34*F9*G[812] + C[3]*F28*F9*G[602] + C[3]*F29*F33*F9*G[813] + C[3]*F29*F34*F9*G[813] + C[3]*F29*F9*G[317] + C[3]*F30*F33*F9*G[810] + C[3]*F30*F34*F9*G[810] + C[3]*F30*F9*G[811] + C[3]*F31*F33*F9*G[812] + C[3]*F31*F34*F9*G[812] + C[3]*F31*F9*G[602] + C[3]*F32*F33*F9*G[813] + C[3]*F32*F34*F9*G[813] + C[3]*F32*F9*G[317] + C[3]*F33*F33*G[818] + C[3]*F33*F34*G[819] + C[3]*F33*G[820] + C[3]*F34*F34*G[818] + C[3]*F34*G[820] + C[3]*G[821] + C[5]*F0*F27*F33*G[800] + C[5]*F0*F27*F34*G[800] + C[5]*F0*F27*G[801] + C[5]*F0*F28*F33*G[822] + C[5]*F0*F28*F34*G[822] + C[5]*F0*F28*G[616] + C[5]*F0*F29*F33*G[823] + C[5]*F0*F29*F34*G[823] + C[5]*F0*F29*G[333] + C[5]*F0*F30*F33*G[800] + C[5]*F0*F30*F34*G[800] + C[5]*F0*F30*G[801] + C[5]*F0*F31*F33*G[822] + C[5]*F0*F31*F34*G[822] + C[5]*F0*F31*G[616] + C[5]*F0*F32*F33*G[823] + C[5]*F0*F32*F34*G[823] + C[5]*F0*F32*G[333] + C[5]*F1*F27*F33*G[814] + C[5]*F1*F27*F34*G[814] + C[5]*F1*F27*G[815] + C[5]*F1*F28*F33*G[824] + C[5]*F1*F28*F34*G[824] + C[5]*F1*F28*G[621] + C[5]*F1*F29*F33*G[825] + C[5]*F1*F29*F34*G[825] + C[5]*F1*F29*G[339] + C[5]*F1*F30*F33*G[814] + C[5]*F1*F30*F34*G[814] + C[5]*F1*F30*G[815] + C[5]*F1*F31*F33*G[824] + C[5]*F1*F31*F34*G[824] + C[5]*F1*F31*G[621] + C[5]*F1*F32*F33*G[825] + C[5]*F1*F32*F34*G[825] + C[5]*F1*F32*G[339] + C[5]*F10*F27*F33*G[826] + C[5]*F10*F27*F34*G[826] + C[5]*F10*F27*G[827] + C[5]*F10*F28*F33*G[828] + C[5]*F10*F28*F34*G[828] + C[5]*F10*F28*G[626] + C[5]*F10*F29*F33*G[829] + C[5]*F10*F29*F34*G[829] + C[5]*F10*F29*G[345] + C[5]*F10*F30*F33*G[826] + C[5]*F10*F30*F34*G[826] + C[5]*F10*F30*G[827] + C[5]*F10*F31*F33*G[828] + C[5]*F10*F31*F34*G[828] + C[5]*F10*F31*G[626] + C[5]*F10*F32*F33*G[829] + C[5]*F10*F32*F34*G[829] + C[5]*F10*F32*G[345] + C[5]*F11*F27*F33*G[800] + C[5]*F11*F27*F34*G[800] + C[5]*F11*F27*G[801] + C[5]*F11*F28*F33*G[822] + C[5]*F11*F28*F34*G[822] + C[5]*F11*F28*G[616] + C[5]*F11*F29*F33*G[823] + C[5]*F11*F29*F34*G[823] + C[5]*F11*F29*G[333] + C[5]*F11*F30*F33*G[800] + C[5]*F11*F30*F34*G[800] + C[5]*F11*F30*G[801] + C[5]*F11*F31*F33*G[822] + C[5]*F11*F31*F34*G[822] + C[5]*F11*F31*G[616] + C[5]*F11*F32*F33*G[823] + C[5]*F11*F32*F34*G[823] + C[5]*F11*F32*G[333] + C[5]*F2*F27*F33*G[826] + C[5]*F2*F27*F34*G[826] + C[5]*F2*F27*G[827] + C[5]*F2*F28*F33*G[828] + C[5]*F2*F28*F34*G[828] + C[5]*F2*F28*G[626] + C[5]*F2*F29*F33*G[829] + C[5]*F2*F29*F34*G[829] + C[5]*F2*F29*G[345] + C[5]*F2*F30*F33*G[826] + C[5]*F2*F30*F34*G[826] + C[5]*F2*F30*G[827] + C[5]*F2*F31*F33*G[828] + C[5]*F2*F31*F34*G[828] + C[5]*F2*F31*G[626] + C[5]*F2*F32*F33*G[829] + C[5]*F2*F32*F34*G[829] + C[5]*F2*F32*G[345] + C[5]*F27*F33*F9*G[814] + C[5]*F27*F34*F9*G[814] + C[5]*F27*F9*G[815] + C[5]*F28*F33*F9*G[824] + C[5]*F28*F34*F9*G[824] + C[5]*F28*F9*G[621] + C[5]*F29*F33*F9*G[825] + C[5]*F29*F34*F9*G[825] + C[5]*F29*F9*G[339] + C[5]*F30*F33*F9*G[814] + C[5]*F30*F34*F9*G[814] + C[5]*F30*F9*G[815] + C[5]*F31*F33*F9*G[824] + C[5]*F31*F34*F9*G[824] + C[5]*F31*F9*G[621] + C[5]*F32*F33*F9*G[825] + C[5]*F32*F34*F9*G[825] + C[5]*F32*F9*G[339] + C[5]*F33*F33*G[830] + C[5]*F33*F34*G[831] + C[5]*F33*G[832] + C[5]*F34*F34*G[830] + C[5]*F34*G[832] + C[5]*G[833] + F33*F33*G[788] + F33*F34*G[789] + F33*G[790] + F34*F34*G[788] + F34*G[790])/(1.0 + 0.01*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.01*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.01*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.2*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.2*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.2*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))));
      
      // Number of operations: 427
      I[9] = W14[ip]*((F27*F33*G[285] + F27*F34*G[285] + F27*G[286] + F28*F33*G[163] + F28*F34*G[163] + F28*G[164] + F29*F33*G[47] + F29*F34*G[47] + F29*G[48] + F30*F33*G[285] + F30*F34*G[285] + F30*G[286] + F31*F33*G[163] + F31*F34*G[163] + F31*G[164] + F32*F33*G[47] + F32*F34*G[47] + F32*G[48])/(1.0 + 0.01*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.01*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.01*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.2*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.2*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.2*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))) + (G[841] + F0*F27*G[354] + F0*F28*G[232] + F0*F29*G[110] + F0*F30*G[354] + F0*F31*G[232] + F0*F32*G[110] + F1*F27*G[356] + F1*F28*G[234] + F1*F29*G[112] + F1*F30*G[356] + F1*F31*G[234] + F1*F32*G[112] + F10*F27*G[358] + F10*F28*G[236] + F10*F29*G[114] + F10*F30*G[358] + F10*F31*G[236] + F10*F32*G[114] + F11*F27*G[354] + F11*F28*G[232] + F11*F29*G[110] + F11*F30*G[354] + F11*F31*G[232] + F11*F32*G[110] + F2*F27*G[358] + F2*F28*G[236] + F2*F29*G[114] + F2*F30*G[358] + F2*F31*G[236] + F2*F32*G[114] + F27*F9*G[356] + F28*F9*G[234] + F29*F9*G[112] + F30*F9*G[356] + F31*F9*G[234] + F32*F9*G[112] + F33*G[840] + F34*G[840])/(1.0 + 0.1*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.1*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.1*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))));
      
      // Number of operations: 427
      I[10] = W14[ip]*((F27*F33*G[574] + F27*F34*G[574] + F27*G[575] + F28*F33*G[479] + F28*F34*G[479] + F28*G[480] + F29*F33*G[163] + F29*F34*G[163] + F29*G[164] + F30*F33*G[574] + F30*F34*G[574] + F30*G[575] + F31*F33*G[479] + F31*F34*G[479] + F31*G[480] + F32*F33*G[163] + F32*F34*G[163] + F32*G[164])/(1.0 + 0.01*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.01*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.01*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.2*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.2*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.2*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))) + (G[843] + F0*F27*G[634] + F0*F28*G[533] + F0*F29*G[441] + F0*F30*G[634] + F0*F31*G[533] + F0*F32*G[441] + F1*F27*G[636] + F1*F28*G[535] + F1*F29*G[442] + F1*F30*G[636] + F1*F31*G[535] + F1*F32*G[442] + F10*F27*G[638] + F10*F28*G[537] + F10*F29*G[443] + F10*F30*G[638] + F10*F31*G[537] + F10*F32*G[443] + F11*F27*G[634] + F11*F28*G[533] + F11*F29*G[441] + F11*F30*G[634] + F11*F31*G[533] + F11*F32*G[441] + F2*F27*G[638] + F2*F28*G[537] + F2*F29*G[443] + F2*F30*G[638] + F2*F31*G[537] + F2*F32*G[443] + F27*F9*G[636] + F28*F9*G[535] + F29*F9*G[442] + F30*F9*G[636] + F31*F9*G[535] + F32*F9*G[442] + F33*G[842] + F34*G[842])/(1.0 + 0.1*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.1*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.1*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))));
      
      // Number of operations: 427
      I[11] = W14[ip]*((F27*F33*G[789] + F27*F34*G[789] + F27*G[790] + F28*F33*G[574] + F28*F34*G[574] + F28*G[575] + F29*F33*G[285] + F29*F34*G[285] + F29*G[286] + F30*F33*G[789] + F30*F34*G[789] + F30*G[790] + F31*F33*G[574] + F31*F34*G[574] + F31*G[575] + F32*F33*G[285] + F32*F34*G[285] + F32*G[286])/(1.0 + 0.01*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.01*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.01*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.2*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.2*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.2*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))) + (G[845] + F0*F27*G[834] + F0*F28*G[763] + F0*F29*G[700] + F0*F30*G[834] + F0*F31*G[763] + F0*F32*G[700] + F1*F27*G[836] + F1*F28*G[764] + F1*F29*G[701] + F1*F30*G[836] + F1*F31*G[764] + F1*F32*G[701] + F10*F27*G[838] + F10*F28*G[765] + F10*F29*G[702] + F10*F30*G[838] + F10*F31*G[765] + F10*F32*G[702] + F11*F27*G[834] + F11*F28*G[763] + F11*F29*G[700] + F11*F30*G[834] + F11*F31*G[763] + F11*F32*G[700] + F2*F27*G[838] + F2*F28*G[765] + F2*F29*G[702] + F2*F30*G[838] + F2*F31*G[765] + F2*F32*G[702] + F27*F9*G[836] + F28*F9*G[764] + F29*F9*G[701] + F30*F9*G[836] + F31*F9*G[764] + F32*F9*G[701] + F33*G[844] + F34*G[844])/(1.0 + 0.1*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.1*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.1*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))));
      
      // Number of operations: 3862
      I[12] = W14[ip]*(G[846]*(F0 + F11) + G[847]*(F1 + F9) + G[848]*(F10 + F2) + G[849]*(F35 + F36) + G[850]*(F37 + F38) + G[851]*(F39 + F40) + (C[1]*F0*F27*F27*G[882] + C[1]*F0*F27*F28*G[883] + C[1]*F0*F27*F29*G[884] + C[1]*F0*F27*F30*G[885] + C[1]*F0*F27*F31*G[883] + C[1]*F0*F27*F32*G[884] + C[1]*F0*F28*F28*G[886] + C[1]*F0*F28*F29*G[887] + C[1]*F0*F28*F30*G[883] + C[1]*F0*F28*F31*G[888] + C[1]*F0*F28*F32*G[887] + C[1]*F0*F29*F29*G[889] + C[1]*F0*F29*F30*G[884] + C[1]*F0*F29*F31*G[887] + C[1]*F0*F29*F32*G[890] + C[1]*F0*F30*F30*G[882] + C[1]*F0*F30*F31*G[883] + C[1]*F0*F30*F32*G[884] + C[1]*F0*F31*F31*G[886] + C[1]*F0*F31*F32*G[887] + C[1]*F0*F32*F32*G[889] + C[1]*F1*F27*F27*G[891] + C[1]*F1*F27*F28*G[892] + C[1]*F1*F27*F29*G[893] + C[1]*F1*F27*F30*G[894] + C[1]*F1*F27*F31*G[892] + C[1]*F1*F27*F32*G[893] + C[1]*F1*F28*F28*G[895] + C[1]*F1*F28*F29*G[896] + C[1]*F1*F28*F30*G[892] + C[1]*F1*F28*F31*G[897] + C[1]*F1*F28*F32*G[896] + C[1]*F1*F29*F29*G[898] + C[1]*F1*F29*F30*G[893] + C[1]*F1*F29*F31*G[896] + C[1]*F1*F29*F32*G[899] + C[1]*F1*F30*F30*G[891] + C[1]*F1*F30*F31*G[892] + C[1]*F1*F30*F32*G[893] + C[1]*F1*F31*F31*G[895] + C[1]*F1*F31*F32*G[896] + C[1]*F1*F32*F32*G[898] + C[1]*F10*F27*F27*G[900] + C[1]*F10*F27*F28*G[901] + C[1]*F10*F27*F29*G[902] + C[1]*F10*F27*F30*G[903] + C[1]*F10*F27*F31*G[901] + C[1]*F10*F27*F32*G[902] + C[1]*F10*F28*F28*G[904] + C[1]*F10*F28*F29*G[905] + C[1]*F10*F28*F30*G[901] + C[1]*F10*F28*F31*G[906] + C[1]*F10*F28*F32*G[905] + C[1]*F10*F29*F29*G[907] + C[1]*F10*F29*F30*G[902] + C[1]*F10*F29*F31*G[905] + C[1]*F10*F29*F32*G[908] + C[1]*F10*F30*F30*G[900] + C[1]*F10*F30*F31*G[901] + C[1]*F10*F30*F32*G[902] + C[1]*F10*F31*F31*G[904] + C[1]*F10*F31*F32*G[905] + C[1]*F10*F32*F32*G[907] + C[1]*F11*F27*F27*G[882] + C[1]*F11*F27*F28*G[883] + C[1]*F11*F27*F29*G[884] + C[1]*F11*F27*F30*G[885] + C[1]*F11*F27*F31*G[883] + C[1]*F11*F27*F32*G[884] + C[1]*F11*F28*F28*G[886] + C[1]*F11*F28*F29*G[887] + C[1]*F11*F28*F30*G[883] + C[1]*F11*F28*F31*G[888] + C[1]*F11*F28*F32*G[887] + C[1]*F11*F29*F29*G[889] + C[1]*F11*F29*F30*G[884] + C[1]*F11*F29*F31*G[887] + C[1]*F11*F29*F32*G[890] + C[1]*F11*F30*F30*G[882] + C[1]*F11*F30*F31*G[883] + C[1]*F11*F30*F32*G[884] + C[1]*F11*F31*F31*G[886] + C[1]*F11*F31*F32*G[887] + C[1]*F11*F32*F32*G[889] + C[1]*F2*F27*F27*G[900] + C[1]*F2*F27*F28*G[901] + C[1]*F2*F27*F29*G[902] + C[1]*F2*F27*F30*G[903] + C[1]*F2*F27*F31*G[901] + C[1]*F2*F27*F32*G[902] + C[1]*F2*F28*F28*G[904] + C[1]*F2*F28*F29*G[905] + C[1]*F2*F28*F30*G[901] + C[1]*F2*F28*F31*G[906] + C[1]*F2*F28*F32*G[905] + C[1]*F2*F29*F29*G[907] + C[1]*F2*F29*F30*G[902] + C[1]*F2*F29*F31*G[905] + C[1]*F2*F29*F32*G[908] + C[1]*F2*F30*F30*G[900] + C[1]*F2*F30*F31*G[901] + C[1]*F2*F30*F32*G[902] + C[1]*F2*F31*F31*G[904] + C[1]*F2*F31*F32*G[905] + C[1]*F2*F32*F32*G[907] + C[1]*F27*F27*F9*G[891] + C[1]*F27*F28*F9*G[892] + C[1]*F27*F29*F9*G[893] + C[1]*F27*F30*F9*G[894] + C[1]*F27*F31*F9*G[892] + C[1]*F27*F32*F9*G[893] + C[1]*F28*F28*F9*G[895] + C[1]*F28*F29*F9*G[896] + C[1]*F28*F30*F9*G[892] + C[1]*F28*F31*F9*G[897] + C[1]*F28*F32*F9*G[896] + C[1]*F29*F29*F9*G[898] + C[1]*F29*F30*F9*G[893] + C[1]*F29*F31*F9*G[896] + C[1]*F29*F32*F9*G[899] + C[1]*F30*F30*F9*G[891] + C[1]*F30*F31*F9*G[892] + C[1]*F30*F32*F9*G[893] + C[1]*F31*F31*F9*G[895] + C[1]*F31*F32*F9*G[896] + C[1]*F32*F32*F9*G[898] + C[3]*F0*F27*F27*G[909] + C[3]*F0*F27*F28*G[910] + C[3]*F0*F27*F29*G[911] + C[3]*F0*F27*F30*G[912] + C[3]*F0*F27*F31*G[910] + C[3]*F0*F27*F32*G[911] + C[3]*F0*F28*F28*G[913] + C[3]*F0*F28*F29*G[914] + C[3]*F0*F28*F30*G[910] + C[3]*F0*F28*F31*G[915] + C[3]*F0*F28*F32*G[914] + C[3]*F0*F29*F29*G[898] + C[3]*F0*F29*F30*G[911] + C[3]*F0*F29*F31*G[914] + C[3]*F0*F29*F32*G[899] + C[3]*F0*F30*F30*G[909] + C[3]*F0*F30*F31*G[910] + C[3]*F0*F30*F32*G[911] + C[3]*F0*F31*F31*G[913] + C[3]*F0*F31*F32*G[914] + C[3]*F0*F32*F32*G[898] + C[3]*F1*F27*F27*G[916] + C[3]*F1*F27*F28*G[917] + C[3]*F1*F27*F29*G[918] + C[3]*F1*F27*F30*G[919] + C[3]*F1*F27*F31*G[917] + C[3]*F1*F27*F32*G[918] + C[3]*F1*F28*F28*G[920] + C[3]*F1*F28*F29*G[921] + C[3]*F1*F28*F30*G[917] + C[3]*F1*F28*F31*G[922] + C[3]*F1*F28*F32*G[921] + C[3]*F1*F29*F29*G[923] + C[3]*F1*F29*F30*G[918] + C[3]*F1*F29*F31*G[921] + C[3]*F1*F29*F32*G[924] + C[3]*F1*F30*F30*G[916] + C[3]*F1*F30*F31*G[917] + C[3]*F1*F30*F32*G[918] + C[3]*F1*F31*F31*G[920] + C[3]*F1*F31*F32*G[921] + C[3]*F1*F32*F32*G[923] + C[3]*F10*F27*F27*G[925] + C[3]*F10*F27*F28*G[926] + C[3]*F10*F27*F29*G[927] + C[3]*F10*F27*F30*G[928] + C[3]*F10*F27*F31*G[926] + C[3]*F10*F27*F32*G[927] + C[3]*F10*F28*F28*G[929] + C[3]*F10*F28*F29*G[930] + C[3]*F10*F28*F30*G[926] + C[3]*F10*F28*F31*G[931] + C[3]*F10*F28*F32*G[930] + C[3]*F10*F29*F29*G[932] + C[3]*F10*F29*F30*G[927] + C[3]*F10*F29*F31*G[930] + C[3]*F10*F29*F32*G[933] + C[3]*F10*F30*F30*G[925] + C[3]*F10*F30*F31*G[926] + C[3]*F10*F30*F32*G[927] + C[3]*F10*F31*F31*G[929] + C[3]*F10*F31*F32*G[930] + C[3]*F10*F32*F32*G[932] + C[3]*F11*F27*F27*G[909] + C[3]*F11*F27*F28*G[910] + C[3]*F11*F27*F29*G[911] + C[3]*F11*F27*F30*G[912] + C[3]*F11*F27*F31*G[910] + C[3]*F11*F27*F32*G[911] + C[3]*F11*F28*F28*G[913] + C[3]*F11*F28*F29*G[914] + C[3]*F11*F28*F30*G[910] + C[3]*F11*F28*F31*G[915] + C[3]*F11*F28*F32*G[914] + C[3]*F11*F29*F29*G[898] + C[3]*F11*F29*F30*G[911] + C[3]*F11*F29*F31*G[914] + C[3]*F11*F29*F32*G[899] + C[3]*F11*F30*F30*G[909] + C[3]*F11*F30*F31*G[910] + C[3]*F11*F30*F32*G[911] + C[3]*F11*F31*F31*G[913] + C[3]*F11*F31*F32*G[914] + C[3]*F11*F32*F32*G[898] + C[3]*F2*F27*F27*G[925] + C[3]*F2*F27*F28*G[926] + C[3]*F2*F27*F29*G[927] + C[3]*F2*F27*F30*G[928] + C[3]*F2*F27*F31*G[926] + C[3]*F2*F27*F32*G[927] + C[3]*F2*F28*F28*G[929] + C[3]*F2*F28*F29*G[930] + C[3]*F2*F28*F30*G[926] + C[3]*F2*F28*F31*G[931] + C[3]*F2*F28*F32*G[930] + C[3]*F2*F29*F29*G[932] + C[3]*F2*F29*F30*G[927] + C[3]*F2*F29*F31*G[930] + C[3]*F2*F29*F32*G[933] + C[3]*F2*F30*F30*G[925] + C[3]*F2*F30*F31*G[926] + C[3]*F2*F30*F32*G[927] + C[3]*F2*F31*F31*G[929] + C[3]*F2*F31*F32*G[930] + C[3]*F2*F32*F32*G[932] + C[3]*F27*F27*F9*G[916] + C[3]*F27*F28*F9*G[917] + C[3]*F27*F29*F9*G[918] + C[3]*F27*F30*F9*G[919] + C[3]*F27*F31*F9*G[917] + C[3]*F27*F32*F9*G[918] + C[3]*F28*F28*F9*G[920] + C[3]*F28*F29*F9*G[921] + C[3]*F28*F30*F9*G[917] + C[3]*F28*F31*F9*G[922] + C[3]*F28*F32*F9*G[921] + C[3]*F29*F29*F9*G[923] + C[3]*F29*F30*F9*G[918] + C[3]*F29*F31*F9*G[921] + C[3]*F29*F32*F9*G[924] + C[3]*F30*F30*F9*G[916] + C[3]*F30*F31*F9*G[917] + C[3]*F30*F32*F9*G[918] + C[3]*F31*F31*F9*G[920] + C[3]*F31*F32*F9*G[921] + C[3]*F32*F32*F9*G[923] + C[5]*F0*F27*F27*G[934] + C[5]*F0*F27*F28*G[935] + C[5]*F0*F27*F29*G[936] + C[5]*F0*F27*F30*G[937] + C[5]*F0*F27*F31*G[935] + C[5]*F0*F27*F32*G[936] + C[5]*F0*F28*F28*G[938] + C[5]*F0*F28*F29*G[939] + C[5]*F0*F28*F30*G[935] + C[5]*F0*F28*F31*G[940] + C[5]*F0*F28*F32*G[939] + C[5]*F0*F29*F29*G[907] + C[5]*F0*F29*F30*G[936] + C[5]*F0*F29*F31*G[939] + C[5]*F0*F29*F32*G[908] + C[5]*F0*F30*F30*G[934] + C[5]*F0*F30*F31*G[935] + C[5]*F0*F30*F32*G[936] + C[5]*F0*F31*F31*G[938] + C[5]*F0*F31*F32*G[939] + C[5]*F0*F32*F32*G[907] + C[5]*F1*F27*F27*G[941] + C[5]*F1*F27*F28*G[942] + C[5]*F1*F27*F29*G[943] + C[5]*F1*F27*F30*G[944] + C[5]*F1*F27*F31*G[942] + C[5]*F1*F27*F32*G[943] + C[5]*F1*F28*F28*G[945] + C[5]*F1*F28*F29*G[946] + C[5]*F1*F28*F30*G[942] + C[5]*F1*F28*F31*G[947] + C[5]*F1*F28*F32*G[946] + C[5]*F1*F29*F29*G[932] + C[5]*F1*F29*F30*G[943] + C[5]*F1*F29*F31*G[946] + C[5]*F1*F29*F32*G[933] + C[5]*F1*F30*F30*G[941] + C[5]*F1*F30*F31*G[942] + C[5]*F1*F30*F32*G[943] + C[5]*F1*F31*F31*G[945] + C[5]*F1*F31*F32*G[946] + C[5]*F1*F32*F32*G[932] + C[5]*F10*F27*F27*G[948] + C[5]*F10*F27*F28*G[949] + C[5]*F10*F27*F29*G[950] + C[5]*F10*F27*F30*G[951] + C[5]*F10*F27*F31*G[949] + C[5]*F10*F27*F32*G[950] + C[5]*F10*F28*F28*G[952] + C[5]*F10*F28*F29*G[953] + C[5]*F10*F28*F30*G[949] + C[5]*F10*F28*F31*G[954] + C[5]*F10*F28*F32*G[953] + C[5]*F10*F29*F29*G[955] + C[5]*F10*F29*F30*G[950] + C[5]*F10*F29*F31*G[953] + C[5]*F10*F29*F32*G[956] + C[5]*F10*F30*F30*G[948] + C[5]*F10*F30*F31*G[949] + C[5]*F10*F30*F32*G[950] + C[5]*F10*F31*F31*G[952] + C[5]*F10*F31*F32*G[953] + C[5]*F10*F32*F32*G[955] + C[5]*F11*F27*F27*G[934] + C[5]*F11*F27*F28*G[935] + C[5]*F11*F27*F29*G[936] + C[5]*F11*F27*F30*G[937] + C[5]*F11*F27*F31*G[935] + C[5]*F11*F27*F32*G[936] + C[5]*F11*F28*F28*G[938] + C[5]*F11*F28*F29*G[939] + C[5]*F11*F28*F30*G[935] + C[5]*F11*F28*F31*G[940] + C[5]*F11*F28*F32*G[939] + C[5]*F11*F29*F29*G[907] + C[5]*F11*F29*F30*G[936] + C[5]*F11*F29*F31*G[939] + C[5]*F11*F29*F32*G[908] + C[5]*F11*F30*F30*G[934] + C[5]*F11*F30*F31*G[935] + C[5]*F11*F30*F32*G[936] + C[5]*F11*F31*F31*G[938] + C[5]*F11*F31*F32*G[939] + C[5]*F11*F32*F32*G[907] + C[5]*F2*F27*F27*G[948] + C[5]*F2*F27*F28*G[949] + C[5]*F2*F27*F29*G[950] + C[5]*F2*F27*F30*G[951] + C[5]*F2*F27*F31*G[949] + C[5]*F2*F27*F32*G[950] + C[5]*F2*F28*F28*G[952] + C[5]*F2*F28*F29*G[953] + C[5]*F2*F28*F30*G[949] + C[5]*F2*F28*F31*G[954] + C[5]*F2*F28*F32*G[953] + C[5]*F2*F29*F29*G[955] + C[5]*F2*F29*F30*G[950] + C[5]*F2*F29*F31*G[953] + C[5]*F2*F29*F32*G[956] + C[5]*F2*F30*F30*G[948] + C[5]*F2*F30*F31*G[949] + C[5]*F2*F30*F32*G[950] + C[5]*F2*F31*F31*G[952] + C[5]*F2*F31*F32*G[953] + C[5]*F2*F32*F32*G[955] + C[5]*F27*F27*F9*G[941] + C[5]*F27*F28*F9*G[942] + C[5]*F27*F29*F9*G[943] + C[5]*F27*F30*F9*G[944] + C[5]*F27*F31*F9*G[942] + C[5]*F27*F32*F9*G[943] + C[5]*F28*F28*F9*G[945] + C[5]*F28*F29*F9*G[946] + C[5]*F28*F30*F9*G[942] + C[5]*F28*F31*F9*G[947] + C[5]*F28*F32*F9*G[946] + C[5]*F29*F29*F9*G[932] + C[5]*F29*F30*F9*G[943] + C[5]*F29*F31*F9*G[946] + C[5]*F29*F32*F9*G[933] + C[5]*F30*F30*F9*G[941] + C[5]*F30*F31*F9*G[942] + C[5]*F30*F32*F9*G[943] + C[5]*F31*F31*F9*G[945] + C[5]*F31*F32*F9*G[946] + C[5]*F32*F32*F9*G[932] + F27*F33*G[285] + F27*F34*G[285] + F27*G[879] + F28*F33*G[163] + F28*F34*G[163] + F28*G[880] + F29*F33*G[47] + F29*F34*G[47] + F29*G[881] + F30*F33*G[285] + F30*F34*G[285] + F30*G[879] + F31*F33*G[163] + F31*F34*G[163] + F31*G[880] + F32*F33*G[47] + F32*F34*G[47] + F32*G[881])/(1.0 + 0.01*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.01*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.01*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.2*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.2*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.2*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))) + (C[1]*F27*F27*F33*G[640] + C[1]*F27*F27*F34*G[640] + C[1]*F27*F27*G[852] + C[1]*F27*F28*F33*G[361] + C[1]*F27*F28*F34*G[361] + C[1]*F27*F28*G[853] + C[1]*F27*F29*F33*G[11] + C[1]*F27*F29*F34*G[11] + C[1]*F27*F29*G[854] + C[1]*F27*F30*F33*G[641] + C[1]*F27*F30*F34*G[641] + C[1]*F27*F30*G[855] + C[1]*F27*F31*F33*G[361] + C[1]*F27*F31*F34*G[361] + C[1]*F27*F31*G[853] + C[1]*F27*F32*F33*G[11] + C[1]*F27*F32*F34*G[11] + C[1]*F27*F32*G[854] + C[1]*F28*F28*F33*G[364] + C[1]*F28*F28*F34*G[364] + C[1]*F28*F28*G[856] + C[1]*F28*F29*F33*G[15] + C[1]*F28*F29*F34*G[15] + C[1]*F28*F29*G[857] + C[1]*F28*F30*F33*G[361] + C[1]*F28*F30*F34*G[361] + C[1]*F28*F30*G[853] + C[1]*F28*F31*F33*G[365] + C[1]*F28*F31*F34*G[365] + C[1]*F28*F31*G[858] + C[1]*F28*F32*F33*G[15] + C[1]*F28*F32*F34*G[15] + C[1]*F28*F32*G[857] + C[1]*F29*F29*F33*G[18] + C[1]*F29*F29*F34*G[18] + C[1]*F29*F29*G[859] + C[1]*F29*F30*F33*G[11] + C[1]*F29*F30*F34*G[11] + C[1]*F29*F30*G[854] + C[1]*F29*F31*F33*G[15] + C[1]*F29*F31*F34*G[15] + C[1]*F29*F31*G[857] + C[1]*F29*F32*F33*G[19] + C[1]*F29*F32*F34*G[19] + C[1]*F29*F32*G[860] + C[1]*F30*F30*F33*G[640] + C[1]*F30*F30*F34*G[640] + C[1]*F30*F30*G[852] + C[1]*F30*F31*F33*G[361] + C[1]*F30*F31*F34*G[361] + C[1]*F30*F31*G[853] + C[1]*F30*F32*F33*G[11] + C[1]*F30*F32*F34*G[11] + C[1]*F30*F32*G[854] + C[1]*F31*F31*F33*G[364] + C[1]*F31*F31*F34*G[364] + C[1]*F31*F31*G[856] + C[1]*F31*F32*F33*G[15] + C[1]*F31*F32*F34*G[15] + C[1]*F31*F32*G[857] + C[1]*F32*F32*F33*G[18] + C[1]*F32*F32*F34*G[18] + C[1]*F32*F32*G[859] + C[3]*F27*F27*F33*G[644] + C[3]*F27*F27*F34*G[644] + C[3]*F27*F27*G[861] + C[3]*F27*F28*F33*G[369] + C[3]*F27*F28*F34*G[369] + C[3]*F27*F28*G[862] + C[3]*F27*F29*F33*G[23] + C[3]*F27*F29*F34*G[23] + C[3]*F27*F29*G[863] + C[3]*F27*F30*F33*G[645] + C[3]*F27*F30*F34*G[645] + C[3]*F27*F30*G[864] + C[3]*F27*F31*F33*G[369] + C[3]*F27*F31*F34*G[369] + C[3]*F27*F31*G[862] + C[3]*F27*F32*F33*G[23] + C[3]*F27*F32*F34*G[23] + C[3]*F27*F32*G[863] + C[3]*F28*F28*F33*G[372] + C[3]*F28*F28*F34*G[372] + C[3]*F28*F28*G[865] + C[3]*F28*F29*F33*G[27] + C[3]*F28*F29*F34*G[27] + C[3]*F28*F29*G[866] + C[3]*F28*F30*F33*G[369] + C[3]*F28*F30*F34*G[369] + C[3]*F28*F30*G[862] + C[3]*F28*F31*F33*G[373] + C[3]*F28*F31*F34*G[373] + C[3]*F28*F31*G[867] + C[3]*F28*F32*F33*G[27] + C[3]*F28*F32*F34*G[27] + C[3]*F28*F32*G[866] + C[3]*F29*F29*F33*G[30] + C[3]*F29*F29*F34*G[30] + C[3]*F29*F29*G[868] + C[3]*F29*F30*F33*G[23] + C[3]*F29*F30*F34*G[23] + C[3]*F29*F30*G[863] + C[3]*F29*F31*F33*G[27] + C[3]*F29*F31*F34*G[27] + C[3]*F29*F31*G[866] + C[3]*F29*F32*F33*G[31] + C[3]*F29*F32*F34*G[31] + C[3]*F29*F32*G[869] + C[3]*F30*F30*F33*G[644] + C[3]*F30*F30*F34*G[644] + C[3]*F30*F30*G[861] + C[3]*F30*F31*F33*G[369] + C[3]*F30*F31*F34*G[369] + C[3]*F30*F31*G[862] + C[3]*F30*F32*F33*G[23] + C[3]*F30*F32*F34*G[23] + C[3]*F30*F32*G[863] + C[3]*F31*F31*F33*G[372] + C[3]*F31*F31*F34*G[372] + C[3]*F31*F31*G[865] + C[3]*F31*F32*F33*G[27] + C[3]*F31*F32*F34*G[27] + C[3]*F31*F32*G[866] + C[3]*F32*F32*F33*G[30] + C[3]*F32*F32*F34*G[30] + C[3]*F32*F32*G[868] + C[5]*F27*F27*F33*G[648] + C[5]*F27*F27*F34*G[648] + C[5]*F27*F27*G[870] + C[5]*F27*F28*F33*G[377] + C[5]*F27*F28*F34*G[377] + C[5]*F27*F28*G[871] + C[5]*F27*F29*F33*G[35] + C[5]*F27*F29*F34*G[35] + C[5]*F27*F29*G[872] + C[5]*F27*F30*F33*G[649] + C[5]*F27*F30*F34*G[649] + C[5]*F27*F30*G[873] + C[5]*F27*F31*F33*G[377] + C[5]*F27*F31*F34*G[377] + C[5]*F27*F31*G[871] + C[5]*F27*F32*F33*G[35] + C[5]*F27*F32*F34*G[35] + C[5]*F27*F32*G[872] + C[5]*F28*F28*F33*G[380] + C[5]*F28*F28*F34*G[380] + C[5]*F28*F28*G[874] + C[5]*F28*F29*F33*G[39] + C[5]*F28*F29*F34*G[39] + C[5]*F28*F29*G[875] + C[5]*F28*F30*F33*G[377] + C[5]*F28*F30*F34*G[377] + C[5]*F28*F30*G[871] + C[5]*F28*F31*F33*G[381] + C[5]*F28*F31*F34*G[381] + C[5]*F28*F31*G[876] + C[5]*F28*F32*F33*G[39] + C[5]*F28*F32*F34*G[39] + C[5]*F28*F32*G[875] + C[5]*F29*F29*F33*G[42] + C[5]*F29*F29*F34*G[42] + C[5]*F29*F29*G[877] + C[5]*F29*F30*F33*G[35] + C[5]*F29*F30*F34*G[35] + C[5]*F29*F30*G[872] + C[5]*F29*F31*F33*G[39] + C[5]*F29*F31*F34*G[39] + C[5]*F29*F31*G[875] + C[5]*F29*F32*F33*G[43] + C[5]*F29*F32*F34*G[43] + C[5]*F29*F32*G[878] + C[5]*F30*F30*F33*G[648] + C[5]*F30*F30*F34*G[648] + C[5]*F30*F30*G[870] + C[5]*F30*F31*F33*G[377] + C[5]*F30*F31*F34*G[377] + C[5]*F30*F31*G[871] + C[5]*F30*F32*F33*G[35] + C[5]*F30*F32*F34*G[35] + C[5]*F30*F32*G[872] + C[5]*F31*F31*F33*G[380] + C[5]*F31*F31*F34*G[380] + C[5]*F31*F31*G[874] + C[5]*F31*F32*F33*G[39] + C[5]*F31*F32*F34*G[39] + C[5]*F31*F32*G[875] + C[5]*F32*F32*F33*G[42] + C[5]*F32*F32*F34*G[42] + C[5]*F32*F32*G[877])/(1.0 + 0.001*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.001*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.001*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.006*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.03*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.03*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.03*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.06*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.06*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.06*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.3*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.3*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.3*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))) + (F0*F27*G[957] + F0*F28*G[958] + F0*F29*G[959] + F0*F30*G[957] + F0*F31*G[958] + F0*F32*G[959] + F1*F27*G[960] + F1*F28*G[961] + F1*F29*G[962] + F1*F30*G[960] + F1*F31*G[961] + F1*F32*G[962] + F10*F27*G[963] + F10*F28*G[964] + F10*F29*G[965] + F10*F30*G[963] + F10*F31*G[964] + F10*F32*G[965] + F11*F27*G[957] + F11*F28*G[958] + F11*F29*G[959] + F11*F30*G[957] + F11*F31*G[958] + F11*F32*G[959] + F2*F27*G[963] + F2*F28*G[964] + F2*F29*G[965] + F2*F30*G[963] + F2*F31*G[964] + F2*F32*G[965] + F27*F9*G[960] + F28*F9*G[961] + F29*F9*G[962] + F30*F9*G[960] + F31*F9*G[961] + F32*F9*G[962])/(1.0 + 0.1*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.1*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.1*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))));
      
      // Number of operations: 3862
      I[13] = W14[ip]*(G[966]*(F0 + F11) + G[967]*(F1 + F9) + G[968]*(F10 + F2) + G[969]*(F35 + F36) + G[970]*(F37 + F38) + G[971]*(F39 + F40) + (C[1]*F0*F27*F27*G[1001] + C[1]*F0*F27*F28*G[1002] + C[1]*F0*F27*F29*G[1003] + C[1]*F0*F27*F30*G[1004] + C[1]*F0*F27*F31*G[1002] + C[1]*F0*F27*F32*G[1003] + C[1]*F0*F28*F28*G[1005] + C[1]*F0*F28*F29*G[1006] + C[1]*F0*F28*F30*G[1002] + C[1]*F0*F28*F31*G[1007] + C[1]*F0*F28*F32*G[1006] + C[1]*F0*F29*F29*G[1008] + C[1]*F0*F29*F30*G[1003] + C[1]*F0*F29*F31*G[1006] + C[1]*F0*F29*F32*G[1009] + C[1]*F0*F30*F30*G[1001] + C[1]*F0*F30*F31*G[1002] + C[1]*F0*F30*F32*G[1003] + C[1]*F0*F31*F31*G[1005] + C[1]*F0*F31*F32*G[1006] + C[1]*F0*F32*F32*G[1008] + C[1]*F1*F27*F27*G[1010] + C[1]*F1*F27*F28*G[1011] + C[1]*F1*F27*F29*G[1012] + C[1]*F1*F27*F30*G[1013] + C[1]*F1*F27*F31*G[1011] + C[1]*F1*F27*F32*G[1012] + C[1]*F1*F28*F28*G[1014] + C[1]*F1*F28*F29*G[1015] + C[1]*F1*F28*F30*G[1011] + C[1]*F1*F28*F31*G[1016] + C[1]*F1*F28*F32*G[1015] + C[1]*F1*F29*F29*G[1017] + C[1]*F1*F29*F30*G[1012] + C[1]*F1*F29*F31*G[1015] + C[1]*F1*F29*F32*G[1018] + C[1]*F1*F30*F30*G[1010] + C[1]*F1*F30*F31*G[1011] + C[1]*F1*F30*F32*G[1012] + C[1]*F1*F31*F31*G[1014] + C[1]*F1*F31*F32*G[1015] + C[1]*F1*F32*F32*G[1017] + C[1]*F10*F27*F27*G[1019] + C[1]*F10*F27*F28*G[1020] + C[1]*F10*F27*F29*G[1021] + C[1]*F10*F27*F30*G[1022] + C[1]*F10*F27*F31*G[1020] + C[1]*F10*F27*F32*G[1021] + C[1]*F10*F28*F28*G[1023] + C[1]*F10*F28*F29*G[1024] + C[1]*F10*F28*F30*G[1020] + C[1]*F10*F28*F31*G[1025] + C[1]*F10*F28*F32*G[1024] + C[1]*F10*F29*F29*G[1026] + C[1]*F10*F29*F30*G[1021] + C[1]*F10*F29*F31*G[1024] + C[1]*F10*F29*F32*G[1027] + C[1]*F10*F30*F30*G[1019] + C[1]*F10*F30*F31*G[1020] + C[1]*F10*F30*F32*G[1021] + C[1]*F10*F31*F31*G[1023] + C[1]*F10*F31*F32*G[1024] + C[1]*F10*F32*F32*G[1026] + C[1]*F11*F27*F27*G[1001] + C[1]*F11*F27*F28*G[1002] + C[1]*F11*F27*F29*G[1003] + C[1]*F11*F27*F30*G[1004] + C[1]*F11*F27*F31*G[1002] + C[1]*F11*F27*F32*G[1003] + C[1]*F11*F28*F28*G[1005] + C[1]*F11*F28*F29*G[1006] + C[1]*F11*F28*F30*G[1002] + C[1]*F11*F28*F31*G[1007] + C[1]*F11*F28*F32*G[1006] + C[1]*F11*F29*F29*G[1008] + C[1]*F11*F29*F30*G[1003] + C[1]*F11*F29*F31*G[1006] + C[1]*F11*F29*F32*G[1009] + C[1]*F11*F30*F30*G[1001] + C[1]*F11*F30*F31*G[1002] + C[1]*F11*F30*F32*G[1003] + C[1]*F11*F31*F31*G[1005] + C[1]*F11*F31*F32*G[1006] + C[1]*F11*F32*F32*G[1008] + C[1]*F2*F27*F27*G[1019] + C[1]*F2*F27*F28*G[1020] + C[1]*F2*F27*F29*G[1021] + C[1]*F2*F27*F30*G[1022] + C[1]*F2*F27*F31*G[1020] + C[1]*F2*F27*F32*G[1021] + C[1]*F2*F28*F28*G[1023] + C[1]*F2*F28*F29*G[1024] + C[1]*F2*F28*F30*G[1020] + C[1]*F2*F28*F31*G[1025] + C[1]*F2*F28*F32*G[1024] + C[1]*F2*F29*F29*G[1026] + C[1]*F2*F29*F30*G[1021] + C[1]*F2*F29*F31*G[1024] + C[1]*F2*F29*F32*G[1027] + C[1]*F2*F30*F30*G[1019] + C[1]*F2*F30*F31*G[1020] + C[1]*F2*F30*F32*G[1021] + C[1]*F2*F31*F31*G[1023] + C[1]*F2*F31*F32*G[1024] + C[1]*F2*F32*F32*G[1026] + C[1]*F27*F27*F9*G[1010] + C[1]*F27*F28*F9*G[1011] + C[1]*F27*F29*F9*G[1012] + C[1]*F27*F30*F9*G[1013] + C[1]*F27*F31*F9*G[1011] + C[1]*F27*F32*F9*G[1012] + C[1]*F28*F28*F9*G[1014] + C[1]*F28*F29*F9*G[1015] + C[1]*F28*F30*F9*G[1011] + C[1]*F28*F31*F9*G[1016] + C[1]*F28*F32*F9*G[1015] + C[1]*F29*F29*F9*G[1017] + C[1]*F29*F30*F9*G[1012] + C[1]*F29*F31*F9*G[1015] + C[1]*F29*F32*F9*G[1018] + C[1]*F30*F30*F9*G[1010] + C[1]*F30*F31*F9*G[1011] + C[1]*F30*F32*F9*G[1012] + C[1]*F31*F31*F9*G[1014] + C[1]*F31*F32*F9*G[1015] + C[1]*F32*F32*F9*G[1017] + C[3]*F0*F27*F27*G[1028] + C[3]*F0*F27*F28*G[1029] + C[3]*F0*F27*F29*G[1030] + C[3]*F0*F27*F30*G[1031] + C[3]*F0*F27*F31*G[1029] + C[3]*F0*F27*F32*G[1030] + C[3]*F0*F28*F28*G[1014] + C[3]*F0*F28*F29*G[1032] + C[3]*F0*F28*F30*G[1029] + C[3]*F0*F28*F31*G[1016] + C[3]*F0*F28*F32*G[1032] + C[3]*F0*F29*F29*G[1033] + C[3]*F0*F29*F30*G[1030] + C[3]*F0*F29*F31*G[1032] + C[3]*F0*F29*F32*G[1034] + C[3]*F0*F30*F30*G[1028] + C[3]*F0*F30*F31*G[1029] + C[3]*F0*F30*F32*G[1030] + C[3]*F0*F31*F31*G[1014] + C[3]*F0*F31*F32*G[1032] + C[3]*F0*F32*F32*G[1033] + C[3]*F1*F27*F27*G[1035] + C[3]*F1*F27*F28*G[1036] + C[3]*F1*F27*F29*G[1037] + C[3]*F1*F27*F30*G[1038] + C[3]*F1*F27*F31*G[1036] + C[3]*F1*F27*F32*G[1037] + C[3]*F1*F28*F28*G[1039] + C[3]*F1*F28*F29*G[1040] + C[3]*F1*F28*F30*G[1036] + C[3]*F1*F28*F31*G[1041] + C[3]*F1*F28*F32*G[1040] + C[3]*F1*F29*F29*G[1042] + C[3]*F1*F29*F30*G[1037] + C[3]*F1*F29*F31*G[1040] + C[3]*F1*F29*F32*G[1043] + C[3]*F1*F30*F30*G[1035] + C[3]*F1*F30*F31*G[1036] + C[3]*F1*F30*F32*G[1037] + C[3]*F1*F31*F31*G[1039] + C[3]*F1*F31*F32*G[1040] + C[3]*F1*F32*F32*G[1042] + C[3]*F10*F27*F27*G[1044] + C[3]*F10*F27*F28*G[1045] + C[3]*F10*F27*F29*G[1046] + C[3]*F10*F27*F30*G[1047] + C[3]*F10*F27*F31*G[1045] + C[3]*F10*F27*F32*G[1046] + C[3]*F10*F28*F28*G[1048] + C[3]*F10*F28*F29*G[1049] + C[3]*F10*F28*F30*G[1045] + C[3]*F10*F28*F31*G[1050] + C[3]*F10*F28*F32*G[1049] + C[3]*F10*F29*F29*G[1051] + C[3]*F10*F29*F30*G[1046] + C[3]*F10*F29*F31*G[1049] + C[3]*F10*F29*F32*G[1052] + C[3]*F10*F30*F30*G[1044] + C[3]*F10*F30*F31*G[1045] + C[3]*F10*F30*F32*G[1046] + C[3]*F10*F31*F31*G[1048] + C[3]*F10*F31*F32*G[1049] + C[3]*F10*F32*F32*G[1051] + C[3]*F11*F27*F27*G[1028] + C[3]*F11*F27*F28*G[1029] + C[3]*F11*F27*F29*G[1030] + C[3]*F11*F27*F30*G[1031] + C[3]*F11*F27*F31*G[1029] + C[3]*F11*F27*F32*G[1030] + C[3]*F11*F28*F28*G[1014] + C[3]*F11*F28*F29*G[1032] + C[3]*F11*F28*F30*G[1029] + C[3]*F11*F28*F31*G[1016] + C[3]*F11*F28*F32*G[1032] + C[3]*F11*F29*F29*G[1033] + C[3]*F11*F29*F30*G[1030] + C[3]*F11*F29*F31*G[1032] + C[3]*F11*F29*F32*G[1034] + C[3]*F11*F30*F30*G[1028] + C[3]*F11*F30*F31*G[1029] + C[3]*F11*F30*F32*G[1030] + C[3]*F11*F31*F31*G[1014] + C[3]*F11*F31*F32*G[1032] + C[3]*F11*F32*F32*G[1033] + C[3]*F2*F27*F27*G[1044] + C[3]*F2*F27*F28*G[1045] + C[3]*F2*F27*F29*G[1046] + C[3]*F2*F27*F30*G[1047] + C[3]*F2*F27*F31*G[1045] + C[3]*F2*F27*F32*G[1046] + C[3]*F2*F28*F28*G[1048] + C[3]*F2*F28*F29*G[1049] + C[3]*F2*F28*F30*G[1045] + C[3]*F2*F28*F31*G[1050] + C[3]*F2*F28*F32*G[1049] + C[3]*F2*F29*F29*G[1051] + C[3]*F2*F29*F30*G[1046] + C[3]*F2*F29*F31*G[1049] + C[3]*F2*F29*F32*G[1052] + C[3]*F2*F30*F30*G[1044] + C[3]*F2*F30*F31*G[1045] + C[3]*F2*F30*F32*G[1046] + C[3]*F2*F31*F31*G[1048] + C[3]*F2*F31*F32*G[1049] + C[3]*F2*F32*F32*G[1051] + C[3]*F27*F27*F9*G[1035] + C[3]*F27*F28*F9*G[1036] + C[3]*F27*F29*F9*G[1037] + C[3]*F27*F30*F9*G[1038] + C[3]*F27*F31*F9*G[1036] + C[3]*F27*F32*F9*G[1037] + C[3]*F28*F28*F9*G[1039] + C[3]*F28*F29*F9*G[1040] + C[3]*F28*F30*F9*G[1036] + C[3]*F28*F31*F9*G[1041] + C[3]*F28*F32*F9*G[1040] + C[3]*F29*F29*F9*G[1042] + C[3]*F29*F30*F9*G[1037] + C[3]*F29*F31*F9*G[1040] + C[3]*F29*F32*F9*G[1043] + C[3]*F30*F30*F9*G[1035] + C[3]*F30*F31*F9*G[1036] + C[3]*F30*F32*F9*G[1037] + C[3]*F31*F31*F9*G[1039] + C[3]*F31*F32*F9*G[1040] + C[3]*F32*F32*F9*G[1042] + C[5]*F0*F27*F27*G[1053] + C[5]*F0*F27*F28*G[1054] + C[5]*F0*F27*F29*G[1055] + C[5]*F0*F27*F30*G[1056] + C[5]*F0*F27*F31*G[1054] + C[5]*F0*F27*F32*G[1055] + C[5]*F0*F28*F28*G[1023] + C[5]*F0*F28*F29*G[1057] + C[5]*F0*F28*F30*G[1054] + C[5]*F0*F28*F31*G[1025] + C[5]*F0*F28*F32*G[1057] + C[5]*F0*F29*F29*G[1058] + C[5]*F0*F29*F30*G[1055] + C[5]*F0*F29*F31*G[1057] + C[5]*F0*F29*F32*G[1059] + C[5]*F0*F30*F30*G[1053] + C[5]*F0*F30*F31*G[1054] + C[5]*F0*F30*F32*G[1055] + C[5]*F0*F31*F31*G[1023] + C[5]*F0*F31*F32*G[1057] + C[5]*F0*F32*F32*G[1058] + C[5]*F1*F27*F27*G[1060] + C[5]*F1*F27*F28*G[1061] + C[5]*F1*F27*F29*G[1062] + C[5]*F1*F27*F30*G[1063] + C[5]*F1*F27*F31*G[1061] + C[5]*F1*F27*F32*G[1062] + C[5]*F1*F28*F28*G[1048] + C[5]*F1*F28*F29*G[1064] + C[5]*F1*F28*F30*G[1061] + C[5]*F1*F28*F31*G[1050] + C[5]*F1*F28*F32*G[1064] + C[5]*F1*F29*F29*G[1065] + C[5]*F1*F29*F30*G[1062] + C[5]*F1*F29*F31*G[1064] + C[5]*F1*F29*F32*G[1066] + C[5]*F1*F30*F30*G[1060] + C[5]*F1*F30*F31*G[1061] + C[5]*F1*F30*F32*G[1062] + C[5]*F1*F31*F31*G[1048] + C[5]*F1*F31*F32*G[1064] + C[5]*F1*F32*F32*G[1065] + C[5]*F10*F27*F27*G[1067] + C[5]*F10*F27*F28*G[1068] + C[5]*F10*F27*F29*G[1069] + C[5]*F10*F27*F30*G[1070] + C[5]*F10*F27*F31*G[1068] + C[5]*F10*F27*F32*G[1069] + C[5]*F10*F28*F28*G[1071] + C[5]*F10*F28*F29*G[1072] + C[5]*F10*F28*F30*G[1068] + C[5]*F10*F28*F31*G[1073] + C[5]*F10*F28*F32*G[1072] + C[5]*F10*F29*F29*G[1074] + C[5]*F10*F29*F30*G[1069] + C[5]*F10*F29*F31*G[1072] + C[5]*F10*F29*F32*G[1075] + C[5]*F10*F30*F30*G[1067] + C[5]*F10*F30*F31*G[1068] + C[5]*F10*F30*F32*G[1069] + C[5]*F10*F31*F31*G[1071] + C[5]*F10*F31*F32*G[1072] + C[5]*F10*F32*F32*G[1074] + C[5]*F11*F27*F27*G[1053] + C[5]*F11*F27*F28*G[1054] + C[5]*F11*F27*F29*G[1055] + C[5]*F11*F27*F30*G[1056] + C[5]*F11*F27*F31*G[1054] + C[5]*F11*F27*F32*G[1055] + C[5]*F11*F28*F28*G[1023] + C[5]*F11*F28*F29*G[1057] + C[5]*F11*F28*F30*G[1054] + C[5]*F11*F28*F31*G[1025] + C[5]*F11*F28*F32*G[1057] + C[5]*F11*F29*F29*G[1058] + C[5]*F11*F29*F30*G[1055] + C[5]*F11*F29*F31*G[1057] + C[5]*F11*F29*F32*G[1059] + C[5]*F11*F30*F30*G[1053] + C[5]*F11*F30*F31*G[1054] + C[5]*F11*F30*F32*G[1055] + C[5]*F11*F31*F31*G[1023] + C[5]*F11*F31*F32*G[1057] + C[5]*F11*F32*F32*G[1058] + C[5]*F2*F27*F27*G[1067] + C[5]*F2*F27*F28*G[1068] + C[5]*F2*F27*F29*G[1069] + C[5]*F2*F27*F30*G[1070] + C[5]*F2*F27*F31*G[1068] + C[5]*F2*F27*F32*G[1069] + C[5]*F2*F28*F28*G[1071] + C[5]*F2*F28*F29*G[1072] + C[5]*F2*F28*F30*G[1068] + C[5]*F2*F28*F31*G[1073] + C[5]*F2*F28*F32*G[1072] + C[5]*F2*F29*F29*G[1074] + C[5]*F2*F29*F30*G[1069] + C[5]*F2*F29*F31*G[1072] + C[5]*F2*F29*F32*G[1075] + C[5]*F2*F30*F30*G[1067] + C[5]*F2*F30*F31*G[1068] + C[5]*F2*F30*F32*G[1069] + C[5]*F2*F31*F31*G[1071] + C[5]*F2*F31*F32*G[1072] + C[5]*F2*F32*F32*G[1074] + C[5]*F27*F27*F9*G[1060] + C[5]*F27*F28*F9*G[1061] + C[5]*F27*F29*F9*G[1062] + C[5]*F27*F30*F9*G[1063] + C[5]*F27*F31*F9*G[1061] + C[5]*F27*F32*F9*G[1062] + C[5]*F28*F28*F9*G[1048] + C[5]*F28*F29*F9*G[1064] + C[5]*F28*F30*F9*G[1061] + C[5]*F28*F31*F9*G[1050] + C[5]*F28*F32*F9*G[1064] + C[5]*F29*F29*F9*G[1065] + C[5]*F29*F30*F9*G[1062] + C[5]*F29*F31*F9*G[1064] + C[5]*F29*F32*F9*G[1066] + C[5]*F30*F30*F9*G[1060] + C[5]*F30*F31*F9*G[1061] + C[5]*F30*F32*F9*G[1062] + C[5]*F31*F31*F9*G[1048] + C[5]*F31*F32*F9*G[1064] + C[5]*F32*F32*F9*G[1065] + F27*F33*G[574] + F27*F34*G[574] + F27*G[999] + F28*F33*G[479] + F28*F34*G[479] + F28*G[1000] + F29*F33*G[163] + F29*F34*G[163] + F29*G[880] + F30*F33*G[574] + F30*F34*G[574] + F30*G[999] + F31*F33*G[479] + F31*F34*G[479] + F31*G[1000] + F32*F33*G[163] + F32*F34*G[163] + F32*G[880])/(1.0 + 0.01*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.01*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.01*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.2*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.2*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.2*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))) + (C[1]*F27*F27*F33*G[703] + C[1]*F27*F27*F34*G[703] + C[1]*F27*F27*G[972] + C[1]*F27*F28*F33*G[455] + C[1]*F27*F28*F34*G[455] + C[1]*F27*F28*G[973] + C[1]*F27*F29*F33*G[127] + C[1]*F27*F29*F34*G[127] + C[1]*F27*F29*G[974] + C[1]*F27*F30*F33*G[704] + C[1]*F27*F30*F34*G[704] + C[1]*F27*F30*G[975] + C[1]*F27*F31*F33*G[455] + C[1]*F27*F31*F34*G[455] + C[1]*F27*F31*G[973] + C[1]*F27*F32*F33*G[127] + C[1]*F27*F32*F34*G[127] + C[1]*F27*F32*G[974] + C[1]*F28*F28*F33*G[458] + C[1]*F28*F28*F34*G[458] + C[1]*F28*F28*G[976] + C[1]*F28*F29*F33*G[131] + C[1]*F28*F29*F34*G[131] + C[1]*F28*F29*G[977] + C[1]*F28*F30*F33*G[455] + C[1]*F28*F30*F34*G[455] + C[1]*F28*F30*G[973] + C[1]*F28*F31*F33*G[459] + C[1]*F28*F31*F34*G[459] + C[1]*F28*F31*G[978] + C[1]*F28*F32*F33*G[131] + C[1]*F28*F32*F34*G[131] + C[1]*F28*F32*G[977] + C[1]*F29*F29*F33*G[134] + C[1]*F29*F29*F34*G[134] + C[1]*F29*F29*G[979] + C[1]*F29*F30*F33*G[127] + C[1]*F29*F30*F34*G[127] + C[1]*F29*F30*G[974] + C[1]*F29*F31*F33*G[131] + C[1]*F29*F31*F34*G[131] + C[1]*F29*F31*G[977] + C[1]*F29*F32*F33*G[135] + C[1]*F29*F32*F34*G[135] + C[1]*F29*F32*G[980] + C[1]*F30*F30*F33*G[703] + C[1]*F30*F30*F34*G[703] + C[1]*F30*F30*G[972] + C[1]*F30*F31*F33*G[455] + C[1]*F30*F31*F34*G[455] + C[1]*F30*F31*G[973] + C[1]*F30*F32*F33*G[127] + C[1]*F30*F32*F34*G[127] + C[1]*F30*F32*G[974] + C[1]*F31*F31*F33*G[458] + C[1]*F31*F31*F34*G[458] + C[1]*F31*F31*G[976] + C[1]*F31*F32*F33*G[131] + C[1]*F31*F32*F34*G[131] + C[1]*F31*F32*G[977] + C[1]*F32*F32*F33*G[134] + C[1]*F32*F32*F34*G[134] + C[1]*F32*F32*G[979] + C[3]*F27*F27*F33*G[707] + C[3]*F27*F27*F34*G[707] + C[3]*F27*F27*G[981] + C[3]*F27*F28*F33*G[463] + C[3]*F27*F28*F34*G[463] + C[3]*F27*F28*G[982] + C[3]*F27*F29*F33*G[139] + C[3]*F27*F29*F34*G[139] + C[3]*F27*F29*G[983] + C[3]*F27*F30*F33*G[708] + C[3]*F27*F30*F34*G[708] + C[3]*F27*F30*G[984] + C[3]*F27*F31*F33*G[463] + C[3]*F27*F31*F34*G[463] + C[3]*F27*F31*G[982] + C[3]*F27*F32*F33*G[139] + C[3]*F27*F32*F34*G[139] + C[3]*F27*F32*G[983] + C[3]*F28*F28*F33*G[466] + C[3]*F28*F28*F34*G[466] + C[3]*F28*F28*G[985] + C[3]*F28*F29*F33*G[143] + C[3]*F28*F29*F34*G[143] + C[3]*F28*F29*G[986] + C[3]*F28*F30*F33*G[463] + C[3]*F28*F30*F34*G[463] + C[3]*F28*F30*G[982] + C[3]*F28*F31*F33*G[467] + C[3]*F28*F31*F34*G[467] + C[3]*F28*F31*G[987] + C[3]*F28*F32*F33*G[143] + C[3]*F28*F32*F34*G[143] + C[3]*F28*F32*G[986] + C[3]*F29*F29*F33*G[146] + C[3]*F29*F29*F34*G[146] + C[3]*F29*F29*G[988] + C[3]*F29*F30*F33*G[139] + C[3]*F29*F30*F34*G[139] + C[3]*F29*F30*G[983] + C[3]*F29*F31*F33*G[143] + C[3]*F29*F31*F34*G[143] + C[3]*F29*F31*G[986] + C[3]*F29*F32*F33*G[147] + C[3]*F29*F32*F34*G[147] + C[3]*F29*F32*G[989] + C[3]*F30*F30*F33*G[707] + C[3]*F30*F30*F34*G[707] + C[3]*F30*F30*G[981] + C[3]*F30*F31*F33*G[463] + C[3]*F30*F31*F34*G[463] + C[3]*F30*F31*G[982] + C[3]*F30*F32*F33*G[139] + C[3]*F30*F32*F34*G[139] + C[3]*F30*F32*G[983] + C[3]*F31*F31*F33*G[466] + C[3]*F31*F31*F34*G[466] + C[3]*F31*F31*G[985] + C[3]*F31*F32*F33*G[143] + C[3]*F31*F32*F34*G[143] + C[3]*F31*F32*G[986] + C[3]*F32*F32*F33*G[146] + C[3]*F32*F32*F34*G[146] + C[3]*F32*F32*G[988] + C[5]*F27*F27*F33*G[711] + C[5]*F27*F27*F34*G[711] + C[5]*F27*F27*G[990] + C[5]*F27*F28*F33*G[471] + C[5]*F27*F28*F34*G[471] + C[5]*F27*F28*G[991] + C[5]*F27*F29*F33*G[151] + C[5]*F27*F29*F34*G[151] + C[5]*F27*F29*G[992] + C[5]*F27*F30*F33*G[712] + C[5]*F27*F30*F34*G[712] + C[5]*F27*F30*G[993] + C[5]*F27*F31*F33*G[471] + C[5]*F27*F31*F34*G[471] + C[5]*F27*F31*G[991] + C[5]*F27*F32*F33*G[151] + C[5]*F27*F32*F34*G[151] + C[5]*F27*F32*G[992] + C[5]*F28*F28*F33*G[474] + C[5]*F28*F28*F34*G[474] + C[5]*F28*F28*G[994] + C[5]*F28*F29*F33*G[155] + C[5]*F28*F29*F34*G[155] + C[5]*F28*F29*G[995] + C[5]*F28*F30*F33*G[471] + C[5]*F28*F30*F34*G[471] + C[5]*F28*F30*G[991] + C[5]*F28*F31*F33*G[475] + C[5]*F28*F31*F34*G[475] + C[5]*F28*F31*G[996] + C[5]*F28*F32*F33*G[155] + C[5]*F28*F32*F34*G[155] + C[5]*F28*F32*G[995] + C[5]*F29*F29*F33*G[158] + C[5]*F29*F29*F34*G[158] + C[5]*F29*F29*G[997] + C[5]*F29*F30*F33*G[151] + C[5]*F29*F30*F34*G[151] + C[5]*F29*F30*G[992] + C[5]*F29*F31*F33*G[155] + C[5]*F29*F31*F34*G[155] + C[5]*F29*F31*G[995] + C[5]*F29*F32*F33*G[159] + C[5]*F29*F32*F34*G[159] + C[5]*F29*F32*G[998] + C[5]*F30*F30*F33*G[711] + C[5]*F30*F30*F34*G[711] + C[5]*F30*F30*G[990] + C[5]*F30*F31*F33*G[471] + C[5]*F30*F31*F34*G[471] + C[5]*F30*F31*G[991] + C[5]*F30*F32*F33*G[151] + C[5]*F30*F32*F34*G[151] + C[5]*F30*F32*G[992] + C[5]*F31*F31*F33*G[474] + C[5]*F31*F31*F34*G[474] + C[5]*F31*F31*G[994] + C[5]*F31*F32*F33*G[155] + C[5]*F31*F32*F34*G[155] + C[5]*F31*F32*G[995] + C[5]*F32*F32*F33*G[158] + C[5]*F32*F32*F34*G[158] + C[5]*F32*F32*G[997])/(1.0 + 0.001*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.001*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.001*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.006*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.03*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.03*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.03*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.06*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.06*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.06*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.3*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.3*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.3*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))) + (F0*F27*G[1076] + F0*F28*G[1077] + F0*F29*G[958] + F0*F30*G[1076] + F0*F31*G[1077] + F0*F32*G[958] + F1*F27*G[1078] + F1*F28*G[1079] + F1*F29*G[961] + F1*F30*G[1078] + F1*F31*G[1079] + F1*F32*G[961] + F10*F27*G[1080] + F10*F28*G[1081] + F10*F29*G[964] + F10*F30*G[1080] + F10*F31*G[1081] + F10*F32*G[964] + F11*F27*G[1076] + F11*F28*G[1077] + F11*F29*G[958] + F11*F30*G[1076] + F11*F31*G[1077] + F11*F32*G[958] + F2*F27*G[1080] + F2*F28*G[1081] + F2*F29*G[964] + F2*F30*G[1080] + F2*F31*G[1081] + F2*F32*G[964] + F27*F9*G[1078] + F28*F9*G[1079] + F29*F9*G[961] + F30*F9*G[1078] + F31*F9*G[1079] + F32*F9*G[961])/(1.0 + 0.1*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.1*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.1*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))));
      
      // Number of operations: 3862
      I[14] = W14[ip]*(G[1082]*(F0 + F11) + G[1083]*(F1 + F9) + G[1084]*(F10 + F2) + G[1085]*(F35 + F36) + G[1086]*(F37 + F38) + G[1087]*(F39 + F40) + (C[1]*F0*F27*F27*G[1116] + C[1]*F0*F27*F28*G[1117] + C[1]*F0*F27*F29*G[1118] + C[1]*F0*F27*F30*G[1119] + C[1]*F0*F27*F31*G[1117] + C[1]*F0*F27*F32*G[1118] + C[1]*F0*F28*F28*G[1120] + C[1]*F0*F28*F29*G[1121] + C[1]*F0*F28*F30*G[1117] + C[1]*F0*F28*F31*G[1122] + C[1]*F0*F28*F32*G[1121] + C[1]*F0*F29*F29*G[1123] + C[1]*F0*F29*F30*G[1118] + C[1]*F0*F29*F31*G[1121] + C[1]*F0*F29*F32*G[1124] + C[1]*F0*F30*F30*G[1116] + C[1]*F0*F30*F31*G[1117] + C[1]*F0*F30*F32*G[1118] + C[1]*F0*F31*F31*G[1120] + C[1]*F0*F31*F32*G[1121] + C[1]*F0*F32*F32*G[1123] + C[1]*F1*F27*F27*G[1125] + C[1]*F1*F27*F28*G[1126] + C[1]*F1*F27*F29*G[1127] + C[1]*F1*F27*F30*G[1128] + C[1]*F1*F27*F31*G[1126] + C[1]*F1*F27*F32*G[1127] + C[1]*F1*F28*F28*G[1129] + C[1]*F1*F28*F29*G[1130] + C[1]*F1*F28*F30*G[1126] + C[1]*F1*F28*F31*G[1131] + C[1]*F1*F28*F32*G[1130] + C[1]*F1*F29*F29*G[1132] + C[1]*F1*F29*F30*G[1127] + C[1]*F1*F29*F31*G[1130] + C[1]*F1*F29*F32*G[1133] + C[1]*F1*F30*F30*G[1125] + C[1]*F1*F30*F31*G[1126] + C[1]*F1*F30*F32*G[1127] + C[1]*F1*F31*F31*G[1129] + C[1]*F1*F31*F32*G[1130] + C[1]*F1*F32*F32*G[1132] + C[1]*F10*F27*F27*G[1134] + C[1]*F10*F27*F28*G[1135] + C[1]*F10*F27*F29*G[1136] + C[1]*F10*F27*F30*G[1137] + C[1]*F10*F27*F31*G[1135] + C[1]*F10*F27*F32*G[1136] + C[1]*F10*F28*F28*G[1138] + C[1]*F10*F28*F29*G[1139] + C[1]*F10*F28*F30*G[1135] + C[1]*F10*F28*F31*G[1140] + C[1]*F10*F28*F32*G[1139] + C[1]*F10*F29*F29*G[1141] + C[1]*F10*F29*F30*G[1136] + C[1]*F10*F29*F31*G[1139] + C[1]*F10*F29*F32*G[1142] + C[1]*F10*F30*F30*G[1134] + C[1]*F10*F30*F31*G[1135] + C[1]*F10*F30*F32*G[1136] + C[1]*F10*F31*F31*G[1138] + C[1]*F10*F31*F32*G[1139] + C[1]*F10*F32*F32*G[1141] + C[1]*F11*F27*F27*G[1116] + C[1]*F11*F27*F28*G[1117] + C[1]*F11*F27*F29*G[1118] + C[1]*F11*F27*F30*G[1119] + C[1]*F11*F27*F31*G[1117] + C[1]*F11*F27*F32*G[1118] + C[1]*F11*F28*F28*G[1120] + C[1]*F11*F28*F29*G[1121] + C[1]*F11*F28*F30*G[1117] + C[1]*F11*F28*F31*G[1122] + C[1]*F11*F28*F32*G[1121] + C[1]*F11*F29*F29*G[1123] + C[1]*F11*F29*F30*G[1118] + C[1]*F11*F29*F31*G[1121] + C[1]*F11*F29*F32*G[1124] + C[1]*F11*F30*F30*G[1116] + C[1]*F11*F30*F31*G[1117] + C[1]*F11*F30*F32*G[1118] + C[1]*F11*F31*F31*G[1120] + C[1]*F11*F31*F32*G[1121] + C[1]*F11*F32*F32*G[1123] + C[1]*F2*F27*F27*G[1134] + C[1]*F2*F27*F28*G[1135] + C[1]*F2*F27*F29*G[1136] + C[1]*F2*F27*F30*G[1137] + C[1]*F2*F27*F31*G[1135] + C[1]*F2*F27*F32*G[1136] + C[1]*F2*F28*F28*G[1138] + C[1]*F2*F28*F29*G[1139] + C[1]*F2*F28*F30*G[1135] + C[1]*F2*F28*F31*G[1140] + C[1]*F2*F28*F32*G[1139] + C[1]*F2*F29*F29*G[1141] + C[1]*F2*F29*F30*G[1136] + C[1]*F2*F29*F31*G[1139] + C[1]*F2*F29*F32*G[1142] + C[1]*F2*F30*F30*G[1134] + C[1]*F2*F30*F31*G[1135] + C[1]*F2*F30*F32*G[1136] + C[1]*F2*F31*F31*G[1138] + C[1]*F2*F31*F32*G[1139] + C[1]*F2*F32*F32*G[1141] + C[1]*F27*F27*F9*G[1125] + C[1]*F27*F28*F9*G[1126] + C[1]*F27*F29*F9*G[1127] + C[1]*F27*F30*F9*G[1128] + C[1]*F27*F31*F9*G[1126] + C[1]*F27*F32*F9*G[1127] + C[1]*F28*F28*F9*G[1129] + C[1]*F28*F29*F9*G[1130] + C[1]*F28*F30*F9*G[1126] + C[1]*F28*F31*F9*G[1131] + C[1]*F28*F32*F9*G[1130] + C[1]*F29*F29*F9*G[1132] + C[1]*F29*F30*F9*G[1127] + C[1]*F29*F31*F9*G[1130] + C[1]*F29*F32*F9*G[1133] + C[1]*F30*F30*F9*G[1125] + C[1]*F30*F31*F9*G[1126] + C[1]*F30*F32*F9*G[1127] + C[1]*F31*F31*F9*G[1129] + C[1]*F31*F32*F9*G[1130] + C[1]*F32*F32*F9*G[1132] + C[3]*F0*F27*F27*G[1125] + C[3]*F0*F27*F28*G[1143] + C[3]*F0*F27*F29*G[1144] + C[3]*F0*F27*F30*G[1128] + C[3]*F0*F27*F31*G[1143] + C[3]*F0*F27*F32*G[1144] + C[3]*F0*F28*F28*G[1145] + C[3]*F0*F28*F29*G[1146] + C[3]*F0*F28*F30*G[1143] + C[3]*F0*F28*F31*G[1147] + C[3]*F0*F28*F32*G[1146] + C[3]*F0*F29*F29*G[1148] + C[3]*F0*F29*F30*G[1144] + C[3]*F0*F29*F31*G[1146] + C[3]*F0*F29*F32*G[1149] + C[3]*F0*F30*F30*G[1125] + C[3]*F0*F30*F31*G[1143] + C[3]*F0*F30*F32*G[1144] + C[3]*F0*F31*F31*G[1145] + C[3]*F0*F31*F32*G[1146] + C[3]*F0*F32*F32*G[1148] + C[3]*F1*F27*F27*G[1150] + C[3]*F1*F27*F28*G[1151] + C[3]*F1*F27*F29*G[1152] + C[3]*F1*F27*F30*G[1153] + C[3]*F1*F27*F31*G[1151] + C[3]*F1*F27*F32*G[1152] + C[3]*F1*F28*F28*G[1154] + C[3]*F1*F28*F29*G[1155] + C[3]*F1*F28*F30*G[1151] + C[3]*F1*F28*F31*G[1156] + C[3]*F1*F28*F32*G[1155] + C[3]*F1*F29*F29*G[1157] + C[3]*F1*F29*F30*G[1152] + C[3]*F1*F29*F31*G[1155] + C[3]*F1*F29*F32*G[1158] + C[3]*F1*F30*F30*G[1150] + C[3]*F1*F30*F31*G[1151] + C[3]*F1*F30*F32*G[1152] + C[3]*F1*F31*F31*G[1154] + C[3]*F1*F31*F32*G[1155] + C[3]*F1*F32*F32*G[1157] + C[3]*F10*F27*F27*G[1159] + C[3]*F10*F27*F28*G[1160] + C[3]*F10*F27*F29*G[1161] + C[3]*F10*F27*F30*G[1162] + C[3]*F10*F27*F31*G[1160] + C[3]*F10*F27*F32*G[1161] + C[3]*F10*F28*F28*G[1163] + C[3]*F10*F28*F29*G[1164] + C[3]*F10*F28*F30*G[1160] + C[3]*F10*F28*F31*G[1165] + C[3]*F10*F28*F32*G[1164] + C[3]*F10*F29*F29*G[1166] + C[3]*F10*F29*F30*G[1161] + C[3]*F10*F29*F31*G[1164] + C[3]*F10*F29*F32*G[1167] + C[3]*F10*F30*F30*G[1159] + C[3]*F10*F30*F31*G[1160] + C[3]*F10*F30*F32*G[1161] + C[3]*F10*F31*F31*G[1163] + C[3]*F10*F31*F32*G[1164] + C[3]*F10*F32*F32*G[1166] + C[3]*F11*F27*F27*G[1125] + C[3]*F11*F27*F28*G[1143] + C[3]*F11*F27*F29*G[1144] + C[3]*F11*F27*F30*G[1128] + C[3]*F11*F27*F31*G[1143] + C[3]*F11*F27*F32*G[1144] + C[3]*F11*F28*F28*G[1145] + C[3]*F11*F28*F29*G[1146] + C[3]*F11*F28*F30*G[1143] + C[3]*F11*F28*F31*G[1147] + C[3]*F11*F28*F32*G[1146] + C[3]*F11*F29*F29*G[1148] + C[3]*F11*F29*F30*G[1144] + C[3]*F11*F29*F31*G[1146] + C[3]*F11*F29*F32*G[1149] + C[3]*F11*F30*F30*G[1125] + C[3]*F11*F30*F31*G[1143] + C[3]*F11*F30*F32*G[1144] + C[3]*F11*F31*F31*G[1145] + C[3]*F11*F31*F32*G[1146] + C[3]*F11*F32*F32*G[1148] + C[3]*F2*F27*F27*G[1159] + C[3]*F2*F27*F28*G[1160] + C[3]*F2*F27*F29*G[1161] + C[3]*F2*F27*F30*G[1162] + C[3]*F2*F27*F31*G[1160] + C[3]*F2*F27*F32*G[1161] + C[3]*F2*F28*F28*G[1163] + C[3]*F2*F28*F29*G[1164] + C[3]*F2*F28*F30*G[1160] + C[3]*F2*F28*F31*G[1165] + C[3]*F2*F28*F32*G[1164] + C[3]*F2*F29*F29*G[1166] + C[3]*F2*F29*F30*G[1161] + C[3]*F2*F29*F31*G[1164] + C[3]*F2*F29*F32*G[1167] + C[3]*F2*F30*F30*G[1159] + C[3]*F2*F30*F31*G[1160] + C[3]*F2*F30*F32*G[1161] + C[3]*F2*F31*F31*G[1163] + C[3]*F2*F31*F32*G[1164] + C[3]*F2*F32*F32*G[1166] + C[3]*F27*F27*F9*G[1150] + C[3]*F27*F28*F9*G[1151] + C[3]*F27*F29*F9*G[1152] + C[3]*F27*F30*F9*G[1153] + C[3]*F27*F31*F9*G[1151] + C[3]*F27*F32*F9*G[1152] + C[3]*F28*F28*F9*G[1154] + C[3]*F28*F29*F9*G[1155] + C[3]*F28*F30*F9*G[1151] + C[3]*F28*F31*F9*G[1156] + C[3]*F28*F32*F9*G[1155] + C[3]*F29*F29*F9*G[1157] + C[3]*F29*F30*F9*G[1152] + C[3]*F29*F31*F9*G[1155] + C[3]*F29*F32*F9*G[1158] + C[3]*F30*F30*F9*G[1150] + C[3]*F30*F31*F9*G[1151] + C[3]*F30*F32*F9*G[1152] + C[3]*F31*F31*F9*G[1154] + C[3]*F31*F32*F9*G[1155] + C[3]*F32*F32*F9*G[1157] + C[5]*F0*F27*F27*G[1134] + C[5]*F0*F27*F28*G[1168] + C[5]*F0*F27*F29*G[1169] + C[5]*F0*F27*F30*G[1137] + C[5]*F0*F27*F31*G[1168] + C[5]*F0*F27*F32*G[1169] + C[5]*F0*F28*F28*G[1170] + C[5]*F0*F28*F29*G[1171] + C[5]*F0*F28*F30*G[1168] + C[5]*F0*F28*F31*G[1172] + C[5]*F0*F28*F32*G[1171] + C[5]*F0*F29*F29*G[1173] + C[5]*F0*F29*F30*G[1169] + C[5]*F0*F29*F31*G[1171] + C[5]*F0*F29*F32*G[1174] + C[5]*F0*F30*F30*G[1134] + C[5]*F0*F30*F31*G[1168] + C[5]*F0*F30*F32*G[1169] + C[5]*F0*F31*F31*G[1170] + C[5]*F0*F31*F32*G[1171] + C[5]*F0*F32*F32*G[1173] + C[5]*F1*F27*F27*G[1159] + C[5]*F1*F27*F28*G[1175] + C[5]*F1*F27*F29*G[1176] + C[5]*F1*F27*F30*G[1162] + C[5]*F1*F27*F31*G[1175] + C[5]*F1*F27*F32*G[1176] + C[5]*F1*F28*F28*G[1177] + C[5]*F1*F28*F29*G[1178] + C[5]*F1*F28*F30*G[1175] + C[5]*F1*F28*F31*G[1179] + C[5]*F1*F28*F32*G[1178] + C[5]*F1*F29*F29*G[1180] + C[5]*F1*F29*F30*G[1176] + C[5]*F1*F29*F31*G[1178] + C[5]*F1*F29*F32*G[1181] + C[5]*F1*F30*F30*G[1159] + C[5]*F1*F30*F31*G[1175] + C[5]*F1*F30*F32*G[1176] + C[5]*F1*F31*F31*G[1177] + C[5]*F1*F31*F32*G[1178] + C[5]*F1*F32*F32*G[1180] + C[5]*F10*F27*F27*G[1182] + C[5]*F10*F27*F28*G[1183] + C[5]*F10*F27*F29*G[1184] + C[5]*F10*F27*F30*G[1185] + C[5]*F10*F27*F31*G[1183] + C[5]*F10*F27*F32*G[1184] + C[5]*F10*F28*F28*G[1186] + C[5]*F10*F28*F29*G[1187] + C[5]*F10*F28*F30*G[1183] + C[5]*F10*F28*F31*G[1188] + C[5]*F10*F28*F32*G[1187] + C[5]*F10*F29*F29*G[1189] + C[5]*F10*F29*F30*G[1184] + C[5]*F10*F29*F31*G[1187] + C[5]*F10*F29*F32*G[1190] + C[5]*F10*F30*F30*G[1182] + C[5]*F10*F30*F31*G[1183] + C[5]*F10*F30*F32*G[1184] + C[5]*F10*F31*F31*G[1186] + C[5]*F10*F31*F32*G[1187] + C[5]*F10*F32*F32*G[1189] + C[5]*F11*F27*F27*G[1134] + C[5]*F11*F27*F28*G[1168] + C[5]*F11*F27*F29*G[1169] + C[5]*F11*F27*F30*G[1137] + C[5]*F11*F27*F31*G[1168] + C[5]*F11*F27*F32*G[1169] + C[5]*F11*F28*F28*G[1170] + C[5]*F11*F28*F29*G[1171] + C[5]*F11*F28*F30*G[1168] + C[5]*F11*F28*F31*G[1172] + C[5]*F11*F28*F32*G[1171] + C[5]*F11*F29*F29*G[1173] + C[5]*F11*F29*F30*G[1169] + C[5]*F11*F29*F31*G[1171] + C[5]*F11*F29*F32*G[1174] + C[5]*F11*F30*F30*G[1134] + C[5]*F11*F30*F31*G[1168] + C[5]*F11*F30*F32*G[1169] + C[5]*F11*F31*F31*G[1170] + C[5]*F11*F31*F32*G[1171] + C[5]*F11*F32*F32*G[1173] + C[5]*F2*F27*F27*G[1182] + C[5]*F2*F27*F28*G[1183] + C[5]*F2*F27*F29*G[1184] + C[5]*F2*F27*F30*G[1185] + C[5]*F2*F27*F31*G[1183] + C[5]*F2*F27*F32*G[1184] + C[5]*F2*F28*F28*G[1186] + C[5]*F2*F28*F29*G[1187] + C[5]*F2*F28*F30*G[1183] + C[5]*F2*F28*F31*G[1188] + C[5]*F2*F28*F32*G[1187] + C[5]*F2*F29*F29*G[1189] + C[5]*F2*F29*F30*G[1184] + C[5]*F2*F29*F31*G[1187] + C[5]*F2*F29*F32*G[1190] + C[5]*F2*F30*F30*G[1182] + C[5]*F2*F30*F31*G[1183] + C[5]*F2*F30*F32*G[1184] + C[5]*F2*F31*F31*G[1186] + C[5]*F2*F31*F32*G[1187] + C[5]*F2*F32*F32*G[1189] + C[5]*F27*F27*F9*G[1159] + C[5]*F27*F28*F9*G[1175] + C[5]*F27*F29*F9*G[1176] + C[5]*F27*F30*F9*G[1162] + C[5]*F27*F31*F9*G[1175] + C[5]*F27*F32*F9*G[1176] + C[5]*F28*F28*F9*G[1177] + C[5]*F28*F29*F9*G[1178] + C[5]*F28*F30*F9*G[1175] + C[5]*F28*F31*F9*G[1179] + C[5]*F28*F32*F9*G[1178] + C[5]*F29*F29*F9*G[1180] + C[5]*F29*F30*F9*G[1176] + C[5]*F29*F31*F9*G[1178] + C[5]*F29*F32*F9*G[1181] + C[5]*F30*F30*F9*G[1159] + C[5]*F30*F31*F9*G[1175] + C[5]*F30*F32*F9*G[1176] + C[5]*F31*F31*F9*G[1177] + C[5]*F31*F32*F9*G[1178] + C[5]*F32*F32*F9*G[1180] + F27*F33*G[789] + F27*F34*G[789] + F27*G[1115] + F28*F33*G[574] + F28*F34*G[574] + F28*G[999] + F29*F33*G[285] + F29*F34*G[285] + F29*G[879] + F30*F33*G[789] + F30*F34*G[789] + F30*G[1115] + F31*F33*G[574] + F31*F34*G[574] + F31*G[999] + F32*F33*G[285] + F32*F34*G[285] + F32*G[879])/(1.0 + 0.01*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.01*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.01*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.2*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.2*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.2*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))) + (C[1]*F27*F27*F33*G[776] + C[1]*F27*F27*F34*G[776] + C[1]*F27*F27*G[1088] + C[1]*F27*F28*F33*G[550] + C[1]*F27*F28*F34*G[550] + C[1]*F27*F28*G[1089] + C[1]*F27*F29*F33*G[249] + C[1]*F27*F29*F34*G[249] + C[1]*F27*F29*G[1090] + C[1]*F27*F30*F33*G[777] + C[1]*F27*F30*F34*G[777] + C[1]*F27*F30*G[1091] + C[1]*F27*F31*F33*G[550] + C[1]*F27*F31*F34*G[550] + C[1]*F27*F31*G[1089] + C[1]*F27*F32*F33*G[249] + C[1]*F27*F32*F34*G[249] + C[1]*F27*F32*G[1090] + C[1]*F28*F28*F33*G[553] + C[1]*F28*F28*F34*G[553] + C[1]*F28*F28*G[1092] + C[1]*F28*F29*F33*G[253] + C[1]*F28*F29*F34*G[253] + C[1]*F28*F29*G[1093] + C[1]*F28*F30*F33*G[550] + C[1]*F28*F30*F34*G[550] + C[1]*F28*F30*G[1089] + C[1]*F28*F31*F33*G[554] + C[1]*F28*F31*F34*G[554] + C[1]*F28*F31*G[1094] + C[1]*F28*F32*F33*G[253] + C[1]*F28*F32*F34*G[253] + C[1]*F28*F32*G[1093] + C[1]*F29*F29*F33*G[256] + C[1]*F29*F29*F34*G[256] + C[1]*F29*F29*G[1095] + C[1]*F29*F30*F33*G[249] + C[1]*F29*F30*F34*G[249] + C[1]*F29*F30*G[1090] + C[1]*F29*F31*F33*G[253] + C[1]*F29*F31*F34*G[253] + C[1]*F29*F31*G[1093] + C[1]*F29*F32*F33*G[257] + C[1]*F29*F32*F34*G[257] + C[1]*F29*F32*G[1096] + C[1]*F30*F30*F33*G[776] + C[1]*F30*F30*F34*G[776] + C[1]*F30*F30*G[1088] + C[1]*F30*F31*F33*G[550] + C[1]*F30*F31*F34*G[550] + C[1]*F30*F31*G[1089] + C[1]*F30*F32*F33*G[249] + C[1]*F30*F32*F34*G[249] + C[1]*F30*F32*G[1090] + C[1]*F31*F31*F33*G[553] + C[1]*F31*F31*F34*G[553] + C[1]*F31*F31*G[1092] + C[1]*F31*F32*F33*G[253] + C[1]*F31*F32*F34*G[253] + C[1]*F31*F32*G[1093] + C[1]*F32*F32*F33*G[256] + C[1]*F32*F32*F34*G[256] + C[1]*F32*F32*G[1095] + C[3]*F27*F27*F33*G[780] + C[3]*F27*F27*F34*G[780] + C[3]*F27*F27*G[1097] + C[3]*F27*F28*F33*G[558] + C[3]*F27*F28*F34*G[558] + C[3]*F27*F28*G[1098] + C[3]*F27*F29*F33*G[261] + C[3]*F27*F29*F34*G[261] + C[3]*F27*F29*G[1099] + C[3]*F27*F30*F33*G[781] + C[3]*F27*F30*F34*G[781] + C[3]*F27*F30*G[1100] + C[3]*F27*F31*F33*G[558] + C[3]*F27*F31*F34*G[558] + C[3]*F27*F31*G[1098] + C[3]*F27*F32*F33*G[261] + C[3]*F27*F32*F34*G[261] + C[3]*F27*F32*G[1099] + C[3]*F28*F28*F33*G[561] + C[3]*F28*F28*F34*G[561] + C[3]*F28*F28*G[1101] + C[3]*F28*F29*F33*G[265] + C[3]*F28*F29*F34*G[265] + C[3]*F28*F29*G[1102] + C[3]*F28*F30*F33*G[558] + C[3]*F28*F30*F34*G[558] + C[3]*F28*F30*G[1098] + C[3]*F28*F31*F33*G[562] + C[3]*F28*F31*F34*G[562] + C[3]*F28*F31*G[1103] + C[3]*F28*F32*F33*G[265] + C[3]*F28*F32*F34*G[265] + C[3]*F28*F32*G[1102] + C[3]*F29*F29*F33*G[268] + C[3]*F29*F29*F34*G[268] + C[3]*F29*F29*G[1104] + C[3]*F29*F30*F33*G[261] + C[3]*F29*F30*F34*G[261] + C[3]*F29*F30*G[1099] + C[3]*F29*F31*F33*G[265] + C[3]*F29*F31*F34*G[265] + C[3]*F29*F31*G[1102] + C[3]*F29*F32*F33*G[269] + C[3]*F29*F32*F34*G[269] + C[3]*F29*F32*G[1105] + C[3]*F30*F30*F33*G[780] + C[3]*F30*F30*F34*G[780] + C[3]*F30*F30*G[1097] + C[3]*F30*F31*F33*G[558] + C[3]*F30*F31*F34*G[558] + C[3]*F30*F31*G[1098] + C[3]*F30*F32*F33*G[261] + C[3]*F30*F32*F34*G[261] + C[3]*F30*F32*G[1099] + C[3]*F31*F31*F33*G[561] + C[3]*F31*F31*F34*G[561] + C[3]*F31*F31*G[1101] + C[3]*F31*F32*F33*G[265] + C[3]*F31*F32*F34*G[265] + C[3]*F31*F32*G[1102] + C[3]*F32*F32*F33*G[268] + C[3]*F32*F32*F34*G[268] + C[3]*F32*F32*G[1104] + C[5]*F27*F27*F33*G[784] + C[5]*F27*F27*F34*G[784] + C[5]*F27*F27*G[1106] + C[5]*F27*F28*F33*G[566] + C[5]*F27*F28*F34*G[566] + C[5]*F27*F28*G[1107] + C[5]*F27*F29*F33*G[273] + C[5]*F27*F29*F34*G[273] + C[5]*F27*F29*G[1108] + C[5]*F27*F30*F33*G[785] + C[5]*F27*F30*F34*G[785] + C[5]*F27*F30*G[1109] + C[5]*F27*F31*F33*G[566] + C[5]*F27*F31*F34*G[566] + C[5]*F27*F31*G[1107] + C[5]*F27*F32*F33*G[273] + C[5]*F27*F32*F34*G[273] + C[5]*F27*F32*G[1108] + C[5]*F28*F28*F33*G[569] + C[5]*F28*F28*F34*G[569] + C[5]*F28*F28*G[1110] + C[5]*F28*F29*F33*G[277] + C[5]*F28*F29*F34*G[277] + C[5]*F28*F29*G[1111] + C[5]*F28*F30*F33*G[566] + C[5]*F28*F30*F34*G[566] + C[5]*F28*F30*G[1107] + C[5]*F28*F31*F33*G[570] + C[5]*F28*F31*F34*G[570] + C[5]*F28*F31*G[1112] + C[5]*F28*F32*F33*G[277] + C[5]*F28*F32*F34*G[277] + C[5]*F28*F32*G[1111] + C[5]*F29*F29*F33*G[280] + C[5]*F29*F29*F34*G[280] + C[5]*F29*F29*G[1113] + C[5]*F29*F30*F33*G[273] + C[5]*F29*F30*F34*G[273] + C[5]*F29*F30*G[1108] + C[5]*F29*F31*F33*G[277] + C[5]*F29*F31*F34*G[277] + C[5]*F29*F31*G[1111] + C[5]*F29*F32*F33*G[281] + C[5]*F29*F32*F34*G[281] + C[5]*F29*F32*G[1114] + C[5]*F30*F30*F33*G[784] + C[5]*F30*F30*F34*G[784] + C[5]*F30*F30*G[1106] + C[5]*F30*F31*F33*G[566] + C[5]*F30*F31*F34*G[566] + C[5]*F30*F31*G[1107] + C[5]*F30*F32*F33*G[273] + C[5]*F30*F32*F34*G[273] + C[5]*F30*F32*G[1108] + C[5]*F31*F31*F33*G[569] + C[5]*F31*F31*F34*G[569] + C[5]*F31*F31*G[1110] + C[5]*F31*F32*F33*G[277] + C[5]*F31*F32*F34*G[277] + C[5]*F31*F32*G[1111] + C[5]*F32*F32*F33*G[280] + C[5]*F32*F32*F34*G[280] + C[5]*F32*F32*G[1113])/(1.0 + 0.001*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.001*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.001*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.003*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.003*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.006*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.03*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.03*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.03*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.06*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.06*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.06*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.3*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.3*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.3*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))) + (F0*F27*G[1191] + F0*F28*G[1076] + F0*F29*G[957] + F0*F30*G[1191] + F0*F31*G[1076] + F0*F32*G[957] + F1*F27*G[1192] + F1*F28*G[1078] + F1*F29*G[960] + F1*F30*G[1192] + F1*F31*G[1078] + F1*F32*G[960] + F10*F27*G[1193] + F10*F28*G[1080] + F10*F29*G[963] + F10*F30*G[1193] + F10*F31*G[1080] + F10*F32*G[963] + F11*F27*G[1191] + F11*F28*G[1076] + F11*F29*G[957] + F11*F30*G[1191] + F11*F31*G[1076] + F11*F32*G[957] + F2*F27*G[1193] + F2*F28*G[1080] + F2*F29*G[963] + F2*F30*G[1193] + F2*F31*G[1080] + F2*F32*G[963] + F27*F9*G[1192] + F28*F9*G[1078] + F29*F9*G[960] + F30*F9*G[1192] + F31*F9*G[1078] + F32*F9*G[960])/(1.0 + 0.1*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.1*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.1*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))));
      
      // Number of operations: 2949
      I[15] = W14[ip]*(G[1194] + F0*(G[1222]*(F12*(F3 + F6) + F19*(F13 + F16) + F26*(F20 + F23)) + G[1223]*(F12*(F4 + F7) + F19*(F14 + F17) + F26*(F21 + F24)) + G[1224]*(F12*(F5 + F8) + F19*(F15 + F18) + F26*(F22 + F25))) + F0*F0*(G[1195]*(F13*F13 + F16*F16 + F20*F20 + F23*F23 + F3*F3 + F6*F6) + G[1196]*(F14*(F13 + F16) + F17*(F13 + F16) + F21*(F20 + F23) + F24*(F20 + F23) + F4*(F3 + F6) + F7*(F3 + F6)) + G[1197]*(F15*(F13 + F16) + F18*(F13 + F16) + F22*(F20 + F23) + F25*(F20 + F23) + F5*(F3 + F6) + F8*(F3 + F6)) + G[1198]*(F13*F16 + F20*F23 + F3*F6) + G[1199]*(F14*F14 + F17*F17 + F21*F21 + F24*F24 + F4*F4 + F7*F7) + G[1200]*(F15*(F14 + F17) + F18*(F14 + F17) + F22*(F21 + F24) + F25*(F21 + F24) + F5*(F4 + F7) + F8*(F4 + F7)) + G[1201]*(F14*F17 + F21*F24 + F4*F7) + G[1202]*(F15*F15 + F18*F18 + F22*F22 + F25*F25 + F5*F5 + F8*F8) + G[1203]*(F15*F18 + F22*F25 + F5*F8)) + F1*(F0*(G[1204]*(F13*F13 + F16*F16 + F20*F20 + F23*F23 + F3*F3 + F6*F6) + G[1205]*(F14*(F13 + F16) + F17*(F13 + F16) + F21*(F20 + F23) + F24*(F20 + F23) + F4*(F3 + F6) + F7*(F3 + F6)) + G[1206]*(F15*(F13 + F16) + F18*(F13 + F16) + F22*(F20 + F23) + F25*(F20 + F23) + F5*(F3 + F6) + F8*(F3 + F6)) + G[1207]*(F13*F16 + F20*F23 + F3*F6) + G[1208]*(F14*F14 + F17*F17 + F21*F21 + F24*F24 + F4*F4 + F7*F7) + G[1209]*(F15*(F14 + F17) + F18*(F14 + F17) + F22*(F21 + F24) + F25*(F21 + F24) + F5*(F4 + F7) + F8*(F4 + F7)) + G[1210]*(F14*F17 + F21*F24 + F4*F7) + G[1211]*(F15*F15 + F18*F18 + F22*F22 + F25*F25 + F5*F5 + F8*F8) + G[1212]*(F15*F18 + F22*F25 + F5*F8)) + F1*(G[1225]*(F13*F13 + F16*F16 + F20*F20 + F23*F23 + F3*F3 + F6*F6) + G[1226]*(F14*(F13 + F16) + F17*(F13 + F16) + F21*(F20 + F23) + F24*(F20 + F23) + F4*(F3 + F6) + F7*(F3 + F6)) + G[1227]*(F15*(F13 + F16) + F18*(F13 + F16) + F22*(F20 + F23) + F25*(F20 + F23) + F5*(F3 + F6) + F8*(F3 + F6)) + G[1228]*(F13*F16 + F20*F23 + F3*F6) + G[1229]*(F14*F14 + F17*F17 + F21*F21 + F24*F24 + F4*F4 + F7*F7) + G[1230]*(F15*(F14 + F17) + F18*(F14 + F17) + F22*(F21 + F24) + F25*(F21 + F24) + F5*(F4 + F7) + F8*(F4 + F7)) + G[1231]*(F14*F17 + F21*F24 + F4*F7) + G[1232]*(F15*F15 + F18*F18 + F22*F22 + F25*F25 + F5*F5 + F8*F8) + G[1233]*(F15*F18 + F22*F25 + F5*F8)) + G[1243]*(F12*(F3 + F6) + F19*(F13 + F16) + F26*(F20 + F23)) + G[1244]*(F12*(F4 + F7) + F19*(F14 + F17) + F26*(F21 + F24)) + G[1245]*(F12*(F5 + F8) + F19*(F15 + F18) + F26*(F22 + F25))) + F10*(F0*(G[1213]*(F13*F13 + F16*F16 + F20*F20 + F23*F23 + F3*F3 + F6*F6) + G[1214]*(F14*(F13 + F16) + F17*(F13 + F16) + F21*(F20 + F23) + F24*(F20 + F23) + F4*(F3 + F6) + F7*(F3 + F6)) + G[1215]*(F15*(F13 + F16) + F18*(F13 + F16) + F22*(F20 + F23) + F25*(F20 + F23) + F5*(F3 + F6) + F8*(F3 + F6)) + G[1216]*(F13*F16 + F20*F23 + F3*F6) + G[1217]*(F14*F14 + F17*F17 + F21*F21 + F24*F24 + F4*F4 + F7*F7) + G[1218]*(F15*(F14 + F17) + F18*(F14 + F17) + F22*(F21 + F24) + F25*(F21 + F24) + F5*(F4 + F7) + F8*(F4 + F7)) + G[1219]*(F14*F17 + F21*F24 + F4*F7) + G[1220]*(F15*F15 + F18*F18 + F22*F22 + F25*F25 + F5*F5 + F8*F8) + G[1221]*(F15*F18 + F22*F25 + F5*F8)) + F1*(G[1234]*(F13*F13 + F16*F16 + F20*F20 + F23*F23 + F3*F3 + F6*F6) + G[1235]*(F14*(F13 + F16) + F17*(F13 + F16) + F21*(F20 + F23) + F24*(F20 + F23) + F4*(F3 + F6) + F7*(F3 + F6)) + G[1236]*(F15*(F13 + F16) + F18*(F13 + F16) + F22*(F20 + F23) + F25*(F20 + F23) + F5*(F3 + F6) + F8*(F3 + F6)) + G[1237]*(F13*F16 + F20*F23 + F3*F6) + G[1238]*(F14*F14 + F17*F17 + F21*F21 + F24*F24 + F4*F4 + F7*F7) + G[1239]*(F15*(F14 + F17) + F18*(F14 + F17) + F22*(F21 + F24) + F25*(F21 + F24) + F5*(F4 + F7) + F8*(F4 + F7)) + G[1240]*(F14*F17 + F21*F24 + F4*F7) + G[1241]*(F15*F15 + F18*F18 + F22*F22 + F25*F25 + F5*F5 + F8*F8) + G[1242]*(F15*F18 + F22*F25 + F5*F8)) + F10*(G[1246]*(F13*F13 + F16*F16 + F20*F20 + F23*F23 + F3*F3 + F6*F6) + G[1247]*(F14*(F13 + F16) + F17*(F13 + F16) + F21*(F20 + F23) + F24*(F20 + F23) + F4*(F3 + F6) + F7*(F3 + F6)) + G[1248]*(F15*(F13 + F16) + F18*(F13 + F16) + F22*(F20 + F23) + F25*(F20 + F23) + F5*(F3 + F6) + F8*(F3 + F6)) + G[1249]*(F13*F16 + F20*F23 + F3*F6) + G[1250]*(F14*F14 + F17*F17 + F21*F21 + F24*F24 + F4*F4 + F7*F7) + G[1251]*(F15*(F14 + F17) + F18*(F14 + F17) + F22*(F21 + F24) + F25*(F21 + F24) + F5*(F4 + F7) + F8*(F4 + F7)) + G[1252]*(F14*F17 + F21*F24 + F4*F7) + G[1253]*(F15*F15 + F18*F18 + F22*F22 + F25*F25 + F5*F5 + F8*F8) + G[1254]*(F15*F18 + F22*F25 + F5*F8)) + G[1255]*(F12*(F3 + F6) + F19*(F13 + F16) + F26*(F20 + F23)) + G[1256]*(F12*(F4 + F7) + F19*(F14 + F17) + F26*(F21 + F24)) + G[1257]*(F12*(F5 + F8) + F19*(F15 + F18) + F26*(F22 + F25))) + F11*(F0*(G[117]*(F15*(F14 + F17) + F18*(F14 + F17) + F22*(F21 + F24) + F25*(F21 + F24) + F5*(F4 + F7) + F8*(F4 + F7)) + G[1198]*(F13*F13 + F16*F16 + F20*F20 + F23*F23 + F3*F3 + F6*F6) + G[1201]*(F14*F14 + F17*F17 + F21*F21 + F24*F24 + F4*F4 + F7*F7) + G[1203]*(F15*F15 + F18*F18 + F22*F22 + F25*F25 + F5*F5 + F8*F8) + G[1]*(F15*F18 + F22*F25 + F5*F8) + G[239]*(F15*(F13 + F16) + F18*(F13 + F16) + F22*(F20 + F23) + F25*(F20 + F23) + F5*(F3 + F6) + F8*(F3 + F6)) + G[445]*(F14*F17 + F21*F24 + F4*F7) + G[540]*(F14*(F13 + F16) + F17*(F13 + F16) + F21*(F20 + F23) + F24*(F20 + F23) + F4*(F3 + F6) + F7*(F3 + F6)) + G[767]*(F13*F16 + F20*F23 + F3*F6)) + F1*(G[1204]*(F13*F13 + F16*F16 + F20*F20 + F23*F23 + F3*F3 + F6*F6) + G[1205]*(F14*(F13 + F16) + F17*(F13 + F16) + F21*(F20 + F23) + F24*(F20 + F23) + F4*(F3 + F6) + F7*(F3 + F6)) + G[1206]*(F15*(F13 + F16) + F18*(F13 + F16) + F22*(F20 + F23) + F25*(F20 + F23) + F5*(F3 + F6) + F8*(F3 + F6)) + G[1207]*(F13*F16 + F20*F23 + F3*F6) + G[1208]*(F14*F14 + F17*F17 + F21*F21 + F24*F24 + F4*F4 + F7*F7) + G[1209]*(F15*(F14 + F17) + F18*(F14 + F17) + F22*(F21 + F24) + F25*(F21 + F24) + F5*(F4 + F7) + F8*(F4 + F7)) + G[1210]*(F14*F17 + F21*F24 + F4*F7) + G[1211]*(F15*F15 + F18*F18 + F22*F22 + F25*F25 + F5*F5 + F8*F8) + G[1212]*(F15*F18 + F22*F25 + F5*F8)) + F10*(G[1213]*(F13*F13 + F16*F16 + F20*F20 + F23*F23 + F3*F3 + F6*F6) + G[1214]*(F14*(F13 + F16) + F17*(F13 + F16) + F21*(F20 + F23) + F24*(F20 + F23) + F4*(F3 + F6) + F7*(F3 + F6)) + G[1215]*(F15*(F13 + F16) + F18*(F13 + F16) + F22*(F20 + F23) + F25*(F20 + F23) + F5*(F3 + F6) + F8*(F3 + F6)) + G[1216]*(F13*F16 + F20*F23 + F3*F6) + G[1217]*(F14*F14 + F17*F17 + F21*F21 + F24*F24 + F4*F4 + F7*F7) + G[1218]*(F15*(F14 + F17) + F18*(F14 + F17) + F22*(F21 + F24) + F25*(F21 + F24) + F5*(F4 + F7) + F8*(F4 + F7)) + G[1219]*(F14*F17 + F21*F24 + F4*F7) + G[1220]*(F15*F15 + F18*F18 + F22*F22 + F25*F25 + F5*F5 + F8*F8) + G[1221]*(F15*F18 + F22*F25 + F5*F8)) + F11*(G[1195]*(F13*F13 + F16*F16 + F20*F20 + F23*F23 + F3*F3 + F6*F6) + G[1196]*(F14*(F13 + F16) + F17*(F13 + F16) + F21*(F20 + F23) + F24*(F20 + F23) + F4*(F3 + F6) + F7*(F3 + F6)) + G[1197]*(F15*(F13 + F16) + F18*(F13 + F16) + F22*(F20 + F23) + F25*(F20 + F23) + F5*(F3 + F6) + F8*(F3 + F6)) + G[1198]*(F13*F16 + F20*F23 + F3*F6) + G[1199]*(F14*F14 + F17*F17 + F21*F21 + F24*F24 + F4*F4 + F7*F7) + G[1200]*(F15*(F14 + F17) + F18*(F14 + F17) + F22*(F21 + F24) + F25*(F21 + F24) + F5*(F4 + F7) + F8*(F4 + F7)) + G[1201]*(F14*F17 + F21*F24 + F4*F7) + G[1202]*(F15*F15 + F18*F18 + F22*F22 + F25*F25 + F5*F5 + F8*F8) + G[1203]*(F15*F18 + F22*F25 + F5*F8)) + G[1222]*(F12*(F3 + F6) + F19*(F13 + F16) + F26*(F20 + F23)) + G[1223]*(F12*(F4 + F7) + F19*(F14 + F17) + F26*(F21 + F24)) + G[1224]*(F12*(F5 + F8) + F19*(F15 + F18) + F26*(F22 + F25))) + F2*(F0*(G[1213]*(F13*F13 + F16*F16 + F20*F20 + F23*F23 + F3*F3 + F6*F6) + G[1214]*(F14*(F13 + F16) + F17*(F13 + F16) + F21*(F20 + F23) + F24*(F20 + F23) + F4*(F3 + F6) + F7*(F3 + F6)) + G[1215]*(F15*(F13 + F16) + F18*(F13 + F16) + F22*(F20 + F23) + F25*(F20 + F23) + F5*(F3 + F6) + F8*(F3 + F6)) + G[1216]*(F13*F16 + F20*F23 + F3*F6) + G[1217]*(F14*F14 + F17*F17 + F21*F21 + F24*F24 + F4*F4 + F7*F7) + G[1218]*(F15*(F14 + F17) + F18*(F14 + F17) + F22*(F21 + F24) + F25*(F21 + F24) + F5*(F4 + F7) + F8*(F4 + F7)) + G[1219]*(F14*F17 + F21*F24 + F4*F7) + G[1220]*(F15*F15 + F18*F18 + F22*F22 + F25*F25 + F5*F5 + F8*F8) + G[1221]*(F15*F18 + F22*F25 + F5*F8)) + F1*(G[1234]*(F13*F13 + F16*F16 + F20*F20 + F23*F23 + F3*F3 + F6*F6) + G[1235]*(F14*(F13 + F16) + F17*(F13 + F16) + F21*(F20 + F23) + F24*(F20 + F23) + F4*(F3 + F6) + F7*(F3 + F6)) + G[1236]*(F15*(F13 + F16) + F18*(F13 + F16) + F22*(F20 + F23) + F25*(F20 + F23) + F5*(F3 + F6) + F8*(F3 + F6)) + G[1237]*(F13*F16 + F20*F23 + F3*F6) + G[1238]*(F14*F14 + F17*F17 + F21*F21 + F24*F24 + F4*F4 + F7*F7) + G[1239]*(F15*(F14 + F17) + F18*(F14 + F17) + F22*(F21 + F24) + F25*(F21 + F24) + F5*(F4 + F7) + F8*(F4 + F7)) + G[1240]*(F14*F17 + F21*F24 + F4*F7) + G[1241]*(F15*F15 + F18*F18 + F22*F22 + F25*F25 + F5*F5 + F8*F8) + G[1242]*(F15*F18 + F22*F25 + F5*F8)) + F10*(G[1249]*(F13*F13 + F16*F16 + F20*F20 + F23*F23 + F3*F3 + F6*F6) + G[124]*(F15*(F14 + F17) + F18*(F14 + F17) + F22*(F21 + F24) + F25*(F21 + F24) + F5*(F4 + F7) + F8*(F4 + F7)) + G[1252]*(F14*F14 + F17*F17 + F21*F21 + F24*F24 + F4*F4 + F7*F7) + G[1254]*(F15*F15 + F18*F18 + F22*F22 + F25*F25 + F5*F5 + F8*F8) + G[246]*(F15*(F13 + F16) + F18*(F13 + F16) + F22*(F20 + F23) + F25*(F20 + F23) + F5*(F3 + F6) + F8*(F3 + F6)) + G[452]*(F14*F17 + F21*F24 + F4*F7) + G[547]*(F14*(F13 + F16) + F17*(F13 + F16) + F21*(F20 + F23) + F24*(F20 + F23) + F4*(F3 + F6) + F7*(F3 + F6)) + G[774]*(F13*F16 + F20*F23 + F3*F6) + G[8]*(F15*F18 + F22*F25 + F5*F8)) + F11*(G[1213]*(F13*F13 + F16*F16 + F20*F20 + F23*F23 + F3*F3 + F6*F6) + G[1214]*(F14*(F13 + F16) + F17*(F13 + F16) + F21*(F20 + F23) + F24*(F20 + F23) + F4*(F3 + F6) + F7*(F3 + F6)) + G[1215]*(F15*(F13 + F16) + F18*(F13 + F16) + F22*(F20 + F23) + F25*(F20 + F23) + F5*(F3 + F6) + F8*(F3 + F6)) + G[1216]*(F13*F16 + F20*F23 + F3*F6) + G[1217]*(F14*F14 + F17*F17 + F21*F21 + F24*F24 + F4*F4 + F7*F7) + G[1218]*(F15*(F14 + F17) + F18*(F14 + F17) + F22*(F21 + F24) + F25*(F21 + F24) + F5*(F4 + F7) + F8*(F4 + F7)) + G[1219]*(F14*F17 + F21*F24 + F4*F7) + G[1220]*(F15*F15 + F18*F18 + F22*F22 + F25*F25 + F5*F5 + F8*F8) + G[1221]*(F15*F18 + F22*F25 + F5*F8)) + F2*(G[1246]*(F13*F13 + F16*F16 + F20*F20 + F23*F23 + F3*F3 + F6*F6) + G[1247]*(F14*(F13 + F16) + F17*(F13 + F16) + F21*(F20 + F23) + F24*(F20 + F23) + F4*(F3 + F6) + F7*(F3 + F6)) + G[1248]*(F15*(F13 + F16) + F18*(F13 + F16) + F22*(F20 + F23) + F25*(F20 + F23) + F5*(F3 + F6) + F8*(F3 + F6)) + G[1249]*(F13*F16 + F20*F23 + F3*F6) + G[1250]*(F14*F14 + F17*F17 + F21*F21 + F24*F24 + F4*F4 + F7*F7) + G[1251]*(F15*(F14 + F17) + F18*(F14 + F17) + F22*(F21 + F24) + F25*(F21 + F24) + F5*(F4 + F7) + F8*(F4 + F7)) + G[1252]*(F14*F17 + F21*F24 + F4*F7) + G[1253]*(F15*F15 + F18*F18 + F22*F22 + F25*F25 + F5*F5 + F8*F8) + G[1254]*(F15*F18 + F22*F25 + F5*F8)) + G[1255]*(F12*(F3 + F6) + F19*(F13 + F16) + F26*(F20 + F23)) + G[1256]*(F12*(F4 + F7) + F19*(F14 + F17) + F26*(F21 + F24)) + G[1257]*(F12*(F5 + F8) + F19*(F15 + F18) + F26*(F22 + F25))) + F9*(F0*(G[1204]*(F13*F13 + F16*F16 + F20*F20 + F23*F23 + F3*F3 + F6*F6) + G[1205]*(F14*(F13 + F16) + F17*(F13 + F16) + F21*(F20 + F23) + F24*(F20 + F23) + F4*(F3 + F6) + F7*(F3 + F6)) + G[1206]*(F15*(F13 + F16) + F18*(F13 + F16) + F22*(F20 + F23) + F25*(F20 + F23) + F5*(F3 + F6) + F8*(F3 + F6)) + G[1207]*(F13*F16 + F20*F23 + F3*F6) + G[1208]*(F14*F14 + F17*F17 + F21*F21 + F24*F24 + F4*F4 + F7*F7) + G[1209]*(F15*(F14 + F17) + F18*(F14 + F17) + F22*(F21 + F24) + F25*(F21 + F24) + F5*(F4 + F7) + F8*(F4 + F7)) + G[1210]*(F14*F17 + F21*F24 + F4*F7) + G[1211]*(F15*F15 + F18*F18 + F22*F22 + F25*F25 + F5*F5 + F8*F8) + G[1212]*(F15*F18 + F22*F25 + F5*F8)) + F1*(G[121]*(F15*(F14 + F17) + F18*(F14 + F17) + F22*(F21 + F24) + F25*(F21 + F24) + F5*(F4 + F7) + F8*(F4 + F7)) + G[1228]*(F13*F13 + F16*F16 + F20*F20 + F23*F23 + F3*F3 + F6*F6) + G[1231]*(F14*F14 + F17*F17 + F21*F21 + F24*F24 + F4*F4 + F7*F7) + G[1233]*(F15*F15 + F18*F18 + F22*F22 + F25*F25 + F5*F5 + F8*F8) + G[243]*(F15*(F13 + F16) + F18*(F13 + F16) + F22*(F20 + F23) + F25*(F20 + F23) + F5*(F3 + F6) + F8*(F3 + F6)) + G[449]*(F14*F17 + F21*F24 + F4*F7) + G[544]*(F14*(F13 + F16) + F17*(F13 + F16) + F21*(F20 + F23) + F24*(F20 + F23) + F4*(F3 + F6) + F7*(F3 + F6)) + G[5]*(F15*F18 + F22*F25 + F5*F8) + G[771]*(F13*F16 + F20*F23 + F3*F6)) + F10*(G[1234]*(F13*F13 + F16*F16 + F20*F20 + F23*F23 + F3*F3 + F6*F6) + G[1235]*(F14*(F13 + F16) + F17*(F13 + F16) + F21*(F20 + F23) + F24*(F20 + F23) + F4*(F3 + F6) + F7*(F3 + F6)) + G[1236]*(F15*(F13 + F16) + F18*(F13 + F16) + F22*(F20 + F23) + F25*(F20 + F23) + F5*(F3 + F6) + F8*(F3 + F6)) + G[1237]*(F13*F16 + F20*F23 + F3*F6) + G[1238]*(F14*F14 + F17*F17 + F21*F21 + F24*F24 + F4*F4 + F7*F7) + G[1239]*(F15*(F14 + F17) + F18*(F14 + F17) + F22*(F21 + F24) + F25*(F21 + F24) + F5*(F4 + F7) + F8*(F4 + F7)) + G[1240]*(F14*F17 + F21*F24 + F4*F7) + G[1241]*(F15*F15 + F18*F18 + F22*F22 + F25*F25 + F5*F5 + F8*F8) + G[1242]*(F15*F18 + F22*F25 + F5*F8)) + F11*(G[1204]*(F13*F13 + F16*F16 + F20*F20 + F23*F23 + F3*F3 + F6*F6) + G[1205]*(F14*(F13 + F16) + F17*(F13 + F16) + F21*(F20 + F23) + F24*(F20 + F23) + F4*(F3 + F6) + F7*(F3 + F6)) + G[1206]*(F15*(F13 + F16) + F18*(F13 + F16) + F22*(F20 + F23) + F25*(F20 + F23) + F5*(F3 + F6) + F8*(F3 + F6)) + G[1207]*(F13*F16 + F20*F23 + F3*F6) + G[1208]*(F14*F14 + F17*F17 + F21*F21 + F24*F24 + F4*F4 + F7*F7) + G[1209]*(F15*(F14 + F17) + F18*(F14 + F17) + F22*(F21 + F24) + F25*(F21 + F24) + F5*(F4 + F7) + F8*(F4 + F7)) + G[1210]*(F14*F17 + F21*F24 + F4*F7) + G[1211]*(F15*F15 + F18*F18 + F22*F22 + F25*F25 + F5*F5 + F8*F8) + G[1212]*(F15*F18 + F22*F25 + F5*F8)) + F2*(G[1234]*(F13*F13 + F16*F16 + F20*F20 + F23*F23 + F3*F3 + F6*F6) + G[1235]*(F14*(F13 + F16) + F17*(F13 + F16) + F21*(F20 + F23) + F24*(F20 + F23) + F4*(F3 + F6) + F7*(F3 + F6)) + G[1236]*(F15*(F13 + F16) + F18*(F13 + F16) + F22*(F20 + F23) + F25*(F20 + F23) + F5*(F3 + F6) + F8*(F3 + F6)) + G[1237]*(F13*F16 + F20*F23 + F3*F6) + G[1238]*(F14*F14 + F17*F17 + F21*F21 + F24*F24 + F4*F4 + F7*F7) + G[1239]*(F15*(F14 + F17) + F18*(F14 + F17) + F22*(F21 + F24) + F25*(F21 + F24) + F5*(F4 + F7) + F8*(F4 + F7)) + G[1240]*(F14*F17 + F21*F24 + F4*F7) + G[1241]*(F15*F15 + F18*F18 + F22*F22 + F25*F25 + F5*F5 + F8*F8) + G[1242]*(F15*F18 + F22*F25 + F5*F8)) + F9*(G[1225]*(F13*F13 + F16*F16 + F20*F20 + F23*F23 + F3*F3 + F6*F6) + G[1226]*(F14*(F13 + F16) + F17*(F13 + F16) + F21*(F20 + F23) + F24*(F20 + F23) + F4*(F3 + F6) + F7*(F3 + F6)) + G[1227]*(F15*(F13 + F16) + F18*(F13 + F16) + F22*(F20 + F23) + F25*(F20 + F23) + F5*(F3 + F6) + F8*(F3 + F6)) + G[1228]*(F13*F16 + F20*F23 + F3*F6) + G[1229]*(F14*F14 + F17*F17 + F21*F21 + F24*F24 + F4*F4 + F7*F7) + G[1230]*(F15*(F14 + F17) + F18*(F14 + F17) + F22*(F21 + F24) + F25*(F21 + F24) + F5*(F4 + F7) + F8*(F4 + F7)) + G[1231]*(F14*F17 + F21*F24 + F4*F7) + G[1232]*(F15*F15 + F18*F18 + F22*F22 + F25*F25 + F5*F5 + F8*F8) + G[1233]*(F15*F18 + F22*F25 + F5*F8)) + G[1243]*(F12*(F3 + F6) + F19*(F13 + F16) + F26*(F20 + F23)) + G[1244]*(F12*(F4 + F7) + F19*(F14 + F17) + F26*(F21 + F24)) + G[1245]*(F12*(F5 + F8) + F19*(F15 + F18) + F26*(F22 + F25))) + (F27*F27*G[788] + F27*F28*G[574] + F27*F29*G[285] + F27*F30*G[789] + F27*F31*G[574] + F27*F32*G[285] + F28*F28*G[478] + F28*F29*G[163] + F28*F30*G[574] + F28*F31*G[479] + F28*F32*G[163] + F29*F29*G[46] + F29*F30*G[285] + F29*F31*G[163] + F29*F32*G[47] + F30*F30*G[788] + F30*F31*G[574] + F30*F32*G[285] + F31*F31*G[478] + F31*F32*G[163] + F32*F32*G[46])/(1.0 + 0.01*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.01*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.01*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.02*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.02*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21))*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22)) + 0.2*std::abs(0.5*(F27*K_00 + F28*K_10 + F29*K_20 + F30*K_00 + F31*K_10 + F32*K_20)) + 0.2*std::abs(0.5*(F27*K_01 + F28*K_11 + F29*K_21 + F30*K_01 + F31*K_11 + F32*K_21)) + 0.2*std::abs(0.5*(F27*K_02 + F28*K_12 + F29*K_22 + F30*K_02 + F31*K_12 + F32*K_22))));
      
      
      // Number of operations for primary indices: 72
      for (unsigned int j = 0; j < 2; j++)
      {
        for (unsigned int k = 0; k < 4; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc0[j]*4 + k] += FE0[ip][k]*FE0_D001[ip][j]*I[9];
          // Number of operations to compute entry: 3
          A[nzc1[j]*4 + k] += FE0[ip][k]*FE0_D001[ip][j]*I[10];
          // Number of operations to compute entry: 3
          A[nzc2[j]*4 + k] += FE0[ip][k]*FE0_D001[ip][j]*I[11];
        }// end loop over 'k'
      }// end loop over 'j'
      
      // Number of operations for primary indices: 72
      for (unsigned int j = 0; j < 4; j++)
      {
        for (unsigned int k = 0; k < 2; k++)
        {
          // Number of operations to compute entry: 3
          A[j*4 + nzc0[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[12];
          // Number of operations to compute entry: 3
          A[j*4 + nzc1[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[13];
          // Number of operations to compute entry: 3
          A[j*4 + nzc2[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[14];
        }// end loop over 'k'
      }// end loop over 'j'
      
      // Number of operations for primary indices: 108
      for (unsigned int j = 0; j < 2; j++)
      {
        for (unsigned int k = 0; k < 2; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc0[j]*4 + nzc0[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[0];
          // Number of operations to compute entry: 3
          A[nzc0[j]*4 + nzc1[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[1];
          // Number of operations to compute entry: 3
          A[nzc0[j]*4 + nzc2[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[2];
          // Number of operations to compute entry: 3
          A[nzc1[j]*4 + nzc0[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[3];
          // Number of operations to compute entry: 3
          A[nzc1[j]*4 + nzc1[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[4];
          // Number of operations to compute entry: 3
          A[nzc1[j]*4 + nzc2[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[5];
          // Number of operations to compute entry: 3
          A[nzc2[j]*4 + nzc0[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[6];
          // Number of operations to compute entry: 3
          A[nzc2[j]*4 + nzc1[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[7];
          // Number of operations to compute entry: 3
          A[nzc2[j]*4 + nzc2[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[8];
        }// end loop over 'k'
      }// end loop over 'j'
      
      // Number of operations for primary indices: 48
      for (unsigned int j = 0; j < 4; j++)
      {
        for (unsigned int k = 0; k < 4; k++)
        {
          // Number of operations to compute entry: 3
          A[j*4 + k] += FE0[ip][j]*FE0[ip][k]*I[15];
        }// end loop over 'k'
      }// end loop over 'j'
    }// end loop over 'ip'
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Tabulate the tensor for the contribution from a local cell
/// using the specified reference cell quadrature points/weights
void nsedensity3d_cell_integral_0_0::tabulate_tensor(double* A,
                     const double * const * w,
                     const ufc::cell& c,
                     unsigned int num_quadrature_points,
                     const double * const * quadrature_points,
                     const double* quadrature_weights) const
{
    throw std::runtime_error("Quadrature version of tabulate_tensor not yet implemented (introduced in UFC 2.0).");
}
#endif

/// Constructor
nsedensity3d_cell_integral_1_0::nsedensity3d_cell_integral_1_0() : ufc::cell_integral()
{
    // Do nothing
}

/// Destructor
nsedensity3d_cell_integral_1_0::~nsedensity3d_cell_integral_1_0()
{
    // Do nothing
}

/// Tabulate the tensor for the contribution from a local cell
void nsedensity3d_cell_integral_1_0::tabulate_tensor(double* A,
                                    const double * const * w,
                                    const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Cell Volume.
    
    // Compute circumradius.
    
    
    // Facet Area (divide by two because 'det' is scaled by area of reference triangle).
    
    // Array of quadrature weights.
    static const double W14[14] = {0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.0147649707904968, 0.0147649707904968, 0.0147649707904968, 0.0147649707904968, 0.0221397911142651, 0.0221397911142651, 0.0221397911142651, 0.0221397911142651};
    // Quadrature points on the UFC reference element: (0.0, 0.5, 0.5), (0.5, 0.0, 0.5), (0.5, 0.5, 0.0), (0.5, 0.0, 0.0), (0.0, 0.5, 0.0), (0.0, 0.0, 0.5), (0.698419704324387, 0.100526765225204, 0.100526765225204), (0.100526765225204, 0.100526765225204, 0.100526765225204), (0.100526765225204, 0.100526765225204, 0.698419704324387), (0.100526765225204, 0.698419704324387, 0.100526765225204), (0.0568813795204234, 0.314372873493192, 0.314372873493192), (0.314372873493192, 0.314372873493192, 0.314372873493192), (0.314372873493192, 0.314372873493192, 0.0568813795204234), (0.314372873493192, 0.0568813795204234, 0.314372873493192)
    
    // Value of basis functions at quadrature points.
    static const double FE0[14][4] = \
    {{0.0, 0.0, 0.5, 0.5},
    {0.0, 0.5, 0.0, 0.5},
    {0.0, 0.5, 0.5, 0.0},
    {0.5, 0.5, 0.0, 0.0},
    {0.5, 0.0, 0.5, 0.0},
    {0.5, 0.0, 0.0, 0.5},
    {0.100526765225205, 0.698419704324386, 0.100526765225205, 0.100526765225205},
    {0.698419704324387, 0.100526765225204, 0.100526765225205, 0.100526765225205},
    {0.100526765225205, 0.100526765225204, 0.100526765225205, 0.698419704324386},
    {0.100526765225205, 0.100526765225204, 0.698419704324386, 0.100526765225205},
    {0.314372873493192, 0.0568813795204234, 0.314372873493192, 0.314372873493192},
    {0.0568813795204235, 0.314372873493192, 0.314372873493192, 0.314372873493192},
    {0.314372873493192, 0.314372873493192, 0.314372873493192, 0.0568813795204234},
    {0.314372873493192, 0.314372873493192, 0.0568813795204235, 0.314372873493192}};
    
    // Array of non-zero columns
    static const unsigned int nzc7[4] = {4, 5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc3[4] = {0, 1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc11[4] = {8, 9, 10, 11};
    
    static const double FE0_D001[14][2] = \
    {{-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc9[2] = {4, 6};
    
    // Array of non-zero columns
    static const unsigned int nzc13[2] = {8, 10};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc8[2] = {4, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc12[2] = {8, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc10[2] = {4, 5};
    
    // Array of non-zero columns
    static const unsigned int nzc6[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc2[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc14[2] = {8, 9};
    
    // Array of non-zero columns
    static const unsigned int nzc4[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc0[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc5[2] = {0, 2};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 4; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    // Number of operations to compute geometry constants: 31822.
    double G[1955];
    G[0] = det*w[6][0]*(0.5*std::pow(w[2][0], 0.5)*w[2][0]*(K_00*K_20 + K_01*K_21 + K_02*K_22)-0.5*std::pow(w[2][0], 1.5)*(K_00*K_20 + K_01*K_21 + K_02*K_22));
    G[1] = det*w[6][0]*(0.5*std::pow(w[2][0], 0.5)*w[2][0]*(K_10*K_20 + K_11*K_21 + K_12*K_22)-0.5*std::pow(w[2][0], 1.5)*(K_10*K_20 + K_11*K_21 + K_12*K_22));
    G[2] = det*w[6][0]*(0.5*std::pow(w[2][0], 0.5)*w[2][0]*(K_20*K_20 + K_21*K_21 + K_22*K_22)-0.5*std::pow(w[2][0], 1.5)*(K_20*K_20 + K_21*K_21 + K_22*K_22));
    G[3] = -0.5*det*(std::pow(w[2][0], 1.5)*w[6][0]*(K_00*K_20 + K_01*K_21 + K_02*K_22) + w[10][0]*w[2][0]*w[2][0]*w[5][0]*(K_00*K_20 + K_01*K_21 + K_02*K_22));
    G[4] = -0.5*det*(std::pow(w[2][0], 1.5)*w[6][0]*(K_10*K_20 + K_11*K_21 + K_12*K_22) + w[10][0]*w[2][0]*w[2][0]*w[5][0]*(K_10*K_20 + K_11*K_21 + K_12*K_22));
    G[5] = -0.5*det*(std::pow(w[2][0], 1.5)*w[6][0]*(K_20*K_20 + K_21*K_21 + K_22*K_22) + w[10][0]*w[2][0]*w[2][0]*w[5][0]*(K_20*K_20 + K_21*K_21 + K_22*K_22));
    G[6] = K_00*K_20*det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]-0.125*std::pow(w[2][0], 1.5));
    G[7] = det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]*(K_00*K_21 + K_01*K_20)-0.125*std::pow(w[2][0], 1.5)*(K_00*K_21 + K_01*K_20));
    G[8] = det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]*(K_00*K_22 + K_02*K_20)-0.125*std::pow(w[2][0], 1.5)*(K_00*K_22 + K_02*K_20));
    G[9] = K_00*K_20*det*w[4][0]*(0.25*std::pow(w[2][0], 0.5)*w[2][0]-0.25*std::pow(w[2][0], 1.5));
    G[10] = K_01*K_21*det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]-0.125*std::pow(w[2][0], 1.5));
    G[11] = det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]*(K_01*K_22 + K_02*K_21)-0.125*std::pow(w[2][0], 1.5)*(K_01*K_22 + K_02*K_21));
    G[12] = K_01*K_21*det*w[4][0]*(0.25*std::pow(w[2][0], 0.5)*w[2][0]-0.25*std::pow(w[2][0], 1.5));
    G[13] = K_02*K_22*det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]-0.125*std::pow(w[2][0], 1.5));
    G[14] = K_02*K_22*det*w[4][0]*(0.25*std::pow(w[2][0], 0.5)*w[2][0]-0.25*std::pow(w[2][0], 1.5));
    G[15] = K_10*K_20*det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]-0.125*std::pow(w[2][0], 1.5));
    G[16] = det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]*(K_10*K_21 + K_11*K_20)-0.125*std::pow(w[2][0], 1.5)*(K_10*K_21 + K_11*K_20));
    G[17] = det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]*(K_10*K_22 + K_12*K_20)-0.125*std::pow(w[2][0], 1.5)*(K_10*K_22 + K_12*K_20));
    G[18] = K_10*K_20*det*w[4][0]*(0.25*std::pow(w[2][0], 0.5)*w[2][0]-0.25*std::pow(w[2][0], 1.5));
    G[19] = K_11*K_21*det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]-0.125*std::pow(w[2][0], 1.5));
    G[20] = det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]*(K_11*K_22 + K_12*K_21)-0.125*std::pow(w[2][0], 1.5)*(K_11*K_22 + K_12*K_21));
    G[21] = K_11*K_21*det*w[4][0]*(0.25*std::pow(w[2][0], 0.5)*w[2][0]-0.25*std::pow(w[2][0], 1.5));
    G[22] = K_12*K_22*det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]-0.125*std::pow(w[2][0], 1.5));
    G[23] = K_12*K_22*det*w[4][0]*(0.25*std::pow(w[2][0], 0.5)*w[2][0]-0.25*std::pow(w[2][0], 1.5));
    G[24] = K_20*K_20*det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]-0.125*std::pow(w[2][0], 1.5));
    G[25] = -0.125*std::pow(w[2][0], 1.5)*K_00*K_20*det*w[4][0];
    G[26] = -0.125*std::pow(w[2][0], 1.5)*K_10*K_20*det*w[4][0];
    G[27] = -0.125*std::pow(w[2][0], 1.5)*K_20*K_20*det*w[4][0];
    G[28] = K_20*K_21*det*w[4][0]*(0.25*std::pow(w[2][0], 0.5)*w[2][0]-0.25*std::pow(w[2][0], 1.5));
    G[29] = -0.125*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_00*K_21 + K_01*K_20);
    G[30] = -0.125*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_10*K_21 + K_11*K_20);
    G[31] = -0.25*std::pow(w[2][0], 1.5)*K_20*K_21*det*w[4][0];
    G[32] = K_20*K_22*det*w[4][0]*(0.25*std::pow(w[2][0], 0.5)*w[2][0]-0.25*std::pow(w[2][0], 1.5));
    G[33] = -0.125*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_00*K_22 + K_02*K_20);
    G[34] = -0.125*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_10*K_22 + K_12*K_20);
    G[35] = -0.25*std::pow(w[2][0], 1.5)*K_20*K_22*det*w[4][0];
    G[36] = K_20*K_20*det*w[4][0]*(0.25*std::pow(w[2][0], 0.5)*w[2][0]-0.25*std::pow(w[2][0], 1.5));
    G[37] = -0.25*std::pow(w[2][0], 1.5)*K_00*K_20*det*w[4][0];
    G[38] = -0.25*std::pow(w[2][0], 1.5)*K_10*K_20*det*w[4][0];
    G[39] = -0.25*std::pow(w[2][0], 1.5)*K_20*K_20*det*w[4][0];
    G[40] = K_21*K_21*det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]-0.125*std::pow(w[2][0], 1.5));
    G[41] = -0.125*std::pow(w[2][0], 1.5)*K_01*K_21*det*w[4][0];
    G[42] = -0.125*std::pow(w[2][0], 1.5)*K_11*K_21*det*w[4][0];
    G[43] = -0.125*std::pow(w[2][0], 1.5)*K_21*K_21*det*w[4][0];
    G[44] = K_21*K_22*det*w[4][0]*(0.25*std::pow(w[2][0], 0.5)*w[2][0]-0.25*std::pow(w[2][0], 1.5));
    G[45] = -0.125*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_01*K_22 + K_02*K_21);
    G[46] = -0.125*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_11*K_22 + K_12*K_21);
    G[47] = -0.25*std::pow(w[2][0], 1.5)*K_21*K_22*det*w[4][0];
    G[48] = K_21*K_21*det*w[4][0]*(0.25*std::pow(w[2][0], 0.5)*w[2][0]-0.25*std::pow(w[2][0], 1.5));
    G[49] = -0.25*std::pow(w[2][0], 1.5)*K_01*K_21*det*w[4][0];
    G[50] = -0.25*std::pow(w[2][0], 1.5)*K_11*K_21*det*w[4][0];
    G[51] = -0.25*std::pow(w[2][0], 1.5)*K_21*K_21*det*w[4][0];
    G[52] = K_22*K_22*det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]-0.125*std::pow(w[2][0], 1.5));
    G[53] = -0.125*std::pow(w[2][0], 1.5)*K_02*K_22*det*w[4][0];
    G[54] = -0.125*std::pow(w[2][0], 1.5)*K_12*K_22*det*w[4][0];
    G[55] = -0.125*std::pow(w[2][0], 1.5)*K_22*K_22*det*w[4][0];
    G[56] = K_22*K_22*det*w[4][0]*(0.25*std::pow(w[2][0], 0.5)*w[2][0]-0.25*std::pow(w[2][0], 1.5));
    G[57] = -0.25*std::pow(w[2][0], 1.5)*K_02*K_22*det*w[4][0];
    G[58] = -0.25*std::pow(w[2][0], 1.5)*K_12*K_22*det*w[4][0];
    G[59] = -0.25*std::pow(w[2][0], 1.5)*K_22*K_22*det*w[4][0];
    G[60] = -0.001*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[61] = -0.002*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[62] = 3e-06*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[63] = -2e-09*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[64] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.001*(K_02*(K_10*(K_20 + K_21 + K_22) + K_11*(K_20 + K_21 + K_22)) + K_12*(K_00*(K_20 + K_21 + K_22) + K_01*(K_20 + K_21 + K_22)))-0.002*K_02*K_12*(K_20 + K_21 + K_22));
    G[65] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.002*(K_02*(K_10*(K_20 + K_21 + K_22) + K_11*(K_20 + K_21 + K_22)) + K_12*(K_00*(K_20 + K_21 + K_22) + K_01*(K_20 + K_21 + K_22)))-0.004*K_02*K_12*(K_20 + K_21 + K_22));
    G[66] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(3e-06*(K_02*(K_10*(K_20 + K_21 + K_22) + K_11*(K_20 + K_21 + K_22)) + K_12*(K_00*(K_20 + K_21 + K_22) + K_01*(K_20 + K_21 + K_22))) + 6e-06*K_02*K_12*(K_20 + K_21 + K_22));
    G[67] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-2e-09*(K_02*(K_10*(K_20 + K_21 + K_22) + K_11*(K_20 + K_21 + K_22)) + K_12*(K_00*(K_20 + K_21 + K_22) + K_01*(K_20 + K_21 + K_22)))-4e-09*K_02*K_12*(K_20 + K_21 + K_22));
    G[68] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_21*(-0.001*K_21-0.002*K_20)-0.001*K_20*K_20) + K_22*(K_02*(-0.002*K_22-0.003*(K_20 + K_21))-0.001*(K_00*(K_20 + K_21 + K_22) + K_01*(K_20 + K_21 + K_22))));
    G[69] = -0.001*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[70] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_21*(-0.001*K_21-0.002*K_20) + K_22*(-0.001*K_22-0.002*(K_20 + K_21))-0.001*K_20*K_20);
    G[71] = 0.0025*K_02*det*(K_20 + K_21 + K_22);
    G[72] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_21*(-0.002*K_21-0.004*K_20)-0.002*K_20*K_20) + K_22*(K_02*(-0.004*K_22-0.006*(K_20 + K_21))-0.002*(K_00*(K_20 + K_21 + K_22) + K_01*(K_20 + K_21 + K_22))));
    G[73] = -0.002*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[74] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_21*(-0.002*K_21-0.004*K_20) + K_22*(-0.002*K_22-0.004*(K_20 + K_21))-0.002*K_20*K_20);
    G[75] = 0.005*K_02*det*(K_20 + K_21 + K_22);
    G[76] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(3e-06*K_20*K_20 + K_21*(3e-06*K_21 + 6e-06*K_20)) + K_22*(3e-06*(K_00*(K_20 + K_21 + K_22) + K_01*(K_20 + K_21 + K_22)) + K_02*(6e-06*K_22 + 9e-06*(K_20 + K_21))));
    G[77] = 3e-06*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[78] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(3e-06*K_20*K_20 + K_21*(3e-06*K_21 + 6e-06*K_20) + K_22*(3e-06*K_22 + 6e-06*(K_20 + K_21)));
    G[79] = -0.005005*K_02*det*(K_20 + K_21 + K_22);
    G[80] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_21*(-2e-09*K_21-4e-09*K_20)-2e-09*K_20*K_20) + K_22*(K_02*(-4e-09*K_22-6e-09*(K_20 + K_21))-2e-09*(K_00*(K_20 + K_21 + K_22) + K_01*(K_20 + K_21 + K_22))));
    G[81] = -2e-09*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[82] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_21*(-2e-09*K_21-4e-09*K_20) + K_22*(-2e-09*K_22-4e-09*(K_20 + K_21))-2e-09*K_20*K_20);
    G[83] = 1e-05*K_02*det*(K_20 + K_21 + K_22);
    G[84] = -0.001*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[85] = -0.002*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[86] = 3e-06*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[87] = -2e-09*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[88] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_21*(-0.001*K_21-0.002*K_20)-0.001*K_20*K_20) + K_22*(K_12*(-0.002*K_22-0.003*(K_20 + K_21))-0.001*(K_10*(K_20 + K_21 + K_22) + K_11*(K_20 + K_21 + K_22))));
    G[89] = -0.001*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[90] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_21*(-0.001*K_21-0.002*K_20) + K_22*(-0.001*K_22-0.002*(K_20 + K_21))-0.001*K_20*K_20);
    G[91] = 0.0025*K_12*det*(K_20 + K_21 + K_22);
    G[92] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_21*(-0.002*K_21-0.004*K_20)-0.002*K_20*K_20) + K_22*(K_12*(-0.004*K_22-0.006*(K_20 + K_21))-0.002*(K_10*(K_20 + K_21 + K_22) + K_11*(K_20 + K_21 + K_22))));
    G[93] = -0.002*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[94] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_21*(-0.002*K_21-0.004*K_20) + K_22*(-0.002*K_22-0.004*(K_20 + K_21))-0.002*K_20*K_20);
    G[95] = 0.005*K_12*det*(K_20 + K_21 + K_22);
    G[96] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(3e-06*K_20*K_20 + K_21*(3e-06*K_21 + 6e-06*K_20)) + K_22*(3e-06*(K_10*(K_20 + K_21 + K_22) + K_11*(K_20 + K_21 + K_22)) + K_12*(6e-06*K_22 + 9e-06*(K_20 + K_21))));
    G[97] = 3e-06*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[98] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(3e-06*K_20*K_20 + K_21*(3e-06*K_21 + 6e-06*K_20) + K_22*(3e-06*K_22 + 6e-06*(K_20 + K_21)));
    G[99] = -0.005005*K_12*det*(K_20 + K_21 + K_22);
    G[100] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_21*(-2e-09*K_21-4e-09*K_20)-2e-09*K_20*K_20) + K_22*(K_12*(-4e-09*K_22-6e-09*(K_20 + K_21))-2e-09*(K_10*(K_20 + K_21 + K_22) + K_11*(K_20 + K_21 + K_22))));
    G[101] = -2e-09*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[102] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_21*(-2e-09*K_21-4e-09*K_20) + K_22*(-2e-09*K_22-4e-09*(K_20 + K_21))-2e-09*K_20*K_20);
    G[103] = 1e-05*K_12*det*(K_20 + K_21 + K_22);
    G[104] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_21*(-0.001*K_21-0.002*K_20) + K_22*(-0.001*K_22-0.002*(K_20 + K_21))-0.001*K_20*K_20);
    G[105] = -0.001*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[106] = -0.001*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[107] = 0.0025*K_22*det*(K_20 + K_21 + K_22);
    G[108] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_21*(-0.002*K_21-0.004*K_20) + K_22*(-0.002*K_22-0.004*(K_20 + K_21))-0.002*K_20*K_20);
    G[109] = -0.002*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[110] = -0.002*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[111] = 0.005*K_22*det*(K_20 + K_21 + K_22);
    G[112] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(3e-06*K_20*K_20 + K_21*(3e-06*K_21 + 6e-06*K_20) + K_22*(3e-06*K_22 + 6e-06*(K_20 + K_21)));
    G[113] = 3e-06*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[114] = 3e-06*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[115] = -0.005005*K_22*det*(K_20 + K_21 + K_22);
    G[116] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_21*(-2e-09*K_21-4e-09*K_20) + K_22*(-2e-09*K_22-4e-09*(K_20 + K_21))-2e-09*K_20*K_20);
    G[117] = -2e-09*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[118] = -2e-09*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[119] = 1e-05*K_22*det*(K_20 + K_21 + K_22);
    G[120] = -0.001*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[121] = -0.002*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[122] = 3e-06*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[123] = -2e-09*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[124] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.001*(K_00*(K_11*(K_20 + K_21 + K_22) + K_12*(K_20 + K_21 + K_22)) + K_10*(K_01*(K_20 + K_21 + K_22) + K_02*(K_20 + K_21 + K_22)))-0.002*K_00*K_10*(K_20 + K_21 + K_22));
    G[125] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.002*(K_00*(K_11*(K_20 + K_21 + K_22) + K_12*(K_20 + K_21 + K_22)) + K_10*(K_01*(K_20 + K_21 + K_22) + K_02*(K_20 + K_21 + K_22)))-0.004*K_00*K_10*(K_20 + K_21 + K_22));
    G[126] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(3e-06*(K_00*(K_11*(K_20 + K_21 + K_22) + K_12*(K_20 + K_21 + K_22)) + K_10*(K_01*(K_20 + K_21 + K_22) + K_02*(K_20 + K_21 + K_22))) + 6e-06*K_00*K_10*(K_20 + K_21 + K_22));
    G[127] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-2e-09*(K_00*(K_11*(K_20 + K_21 + K_22) + K_12*(K_20 + K_21 + K_22)) + K_10*(K_01*(K_20 + K_21 + K_22) + K_02*(K_20 + K_21 + K_22)))-4e-09*K_00*K_10*(K_20 + K_21 + K_22));
    G[128] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(K_22*(-0.001*K_22-0.002*K_21)-0.001*K_21*K_21) + K_20*(K_00*(-0.002*K_20-0.003*(K_21 + K_22))-0.001*(K_01*(K_20 + K_21 + K_22) + K_02*(K_20 + K_21 + K_22))));
    G[129] = -0.001*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[130] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_21*(-0.001*K_21-0.002*K_20) + K_22*(-0.001*K_22-0.002*(K_20 + K_21))-0.001*K_20*K_20);
    G[131] = 0.0025*K_00*det*(K_20 + K_21 + K_22);
    G[132] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(K_22*(-0.002*K_22-0.004*K_21)-0.002*K_21*K_21) + K_20*(K_00*(-0.004*K_20-0.006*(K_21 + K_22))-0.002*(K_01*(K_20 + K_21 + K_22) + K_02*(K_20 + K_21 + K_22))));
    G[133] = -0.002*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[134] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_21*(-0.002*K_21-0.004*K_20) + K_22*(-0.002*K_22-0.004*(K_20 + K_21))-0.002*K_20*K_20);
    G[135] = 0.005*K_00*det*(K_20 + K_21 + K_22);
    G[136] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(3e-06*K_21*K_21 + K_22*(3e-06*K_22 + 6e-06*K_21)) + K_20*(3e-06*(K_01*(K_20 + K_21 + K_22) + K_02*(K_20 + K_21 + K_22)) + K_00*(6e-06*K_20 + 9e-06*(K_21 + K_22))));
    G[137] = 3e-06*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[138] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(3e-06*K_20*K_20 + K_21*(3e-06*K_21 + 6e-06*K_20) + K_22*(3e-06*K_22 + 6e-06*(K_20 + K_21)));
    G[139] = -0.005005*K_00*det*(K_20 + K_21 + K_22);
    G[140] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(K_22*(-2e-09*K_22-4e-09*K_21)-2e-09*K_21*K_21) + K_20*(K_00*(-4e-09*K_20-6e-09*(K_21 + K_22))-2e-09*(K_01*(K_20 + K_21 + K_22) + K_02*(K_20 + K_21 + K_22))));
    G[141] = -2e-09*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[142] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_21*(-2e-09*K_21-4e-09*K_20) + K_22*(-2e-09*K_22-4e-09*(K_20 + K_21))-2e-09*K_20*K_20);
    G[143] = 1e-05*K_00*det*(K_20 + K_21 + K_22);
    G[144] = -0.001*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[145] = -0.002*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[146] = 3e-06*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[147] = -2e-09*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[148] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_10*(K_22*(-0.001*K_22-0.002*K_21)-0.001*K_21*K_21) + K_20*(K_10*(-0.002*K_20-0.003*(K_21 + K_22))-0.001*(K_11*(K_20 + K_21 + K_22) + K_12*(K_20 + K_21 + K_22))));
    G[149] = -0.001*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[150] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_21*(-0.001*K_21-0.002*K_20) + K_22*(-0.001*K_22-0.002*(K_20 + K_21))-0.001*K_20*K_20);
    G[151] = 0.0025*K_10*det*(K_20 + K_21 + K_22);
    G[152] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_10*(K_22*(-0.002*K_22-0.004*K_21)-0.002*K_21*K_21) + K_20*(K_10*(-0.004*K_20-0.006*(K_21 + K_22))-0.002*(K_11*(K_20 + K_21 + K_22) + K_12*(K_20 + K_21 + K_22))));
    G[153] = -0.002*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[154] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_21*(-0.002*K_21-0.004*K_20) + K_22*(-0.002*K_22-0.004*(K_20 + K_21))-0.002*K_20*K_20);
    G[155] = 0.005*K_10*det*(K_20 + K_21 + K_22);
    G[156] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_10*(3e-06*K_21*K_21 + K_22*(3e-06*K_22 + 6e-06*K_21)) + K_20*(3e-06*(K_11*(K_20 + K_21 + K_22) + K_12*(K_20 + K_21 + K_22)) + K_10*(6e-06*K_20 + 9e-06*(K_21 + K_22))));
    G[157] = 3e-06*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[158] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(3e-06*K_20*K_20 + K_21*(3e-06*K_21 + 6e-06*K_20) + K_22*(3e-06*K_22 + 6e-06*(K_20 + K_21)));
    G[159] = -0.005005*K_10*det*(K_20 + K_21 + K_22);
    G[160] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_10*(K_22*(-2e-09*K_22-4e-09*K_21)-2e-09*K_21*K_21) + K_20*(K_10*(-4e-09*K_20-6e-09*(K_21 + K_22))-2e-09*(K_11*(K_20 + K_21 + K_22) + K_12*(K_20 + K_21 + K_22))));
    G[161] = -2e-09*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[162] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_21*(-2e-09*K_21-4e-09*K_20) + K_22*(-2e-09*K_22-4e-09*(K_20 + K_21))-2e-09*K_20*K_20);
    G[163] = 1e-05*K_10*det*(K_20 + K_21 + K_22);
    G[164] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_21*(-0.001*K_21-0.002*K_20) + K_22*(-0.001*K_22-0.002*(K_20 + K_21))-0.001*K_20*K_20);
    G[165] = -0.001*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[166] = -0.001*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[167] = 0.0025*K_20*det*(K_20 + K_21 + K_22);
    G[168] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_21*(-0.002*K_21-0.004*K_20) + K_22*(-0.002*K_22-0.004*(K_20 + K_21))-0.002*K_20*K_20);
    G[169] = -0.002*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[170] = -0.002*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[171] = 0.005*K_20*det*(K_20 + K_21 + K_22);
    G[172] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(3e-06*K_20*K_20 + K_21*(3e-06*K_21 + 6e-06*K_20) + K_22*(3e-06*K_22 + 6e-06*(K_20 + K_21)));
    G[173] = 3e-06*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[174] = 3e-06*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[175] = -0.005005*K_20*det*(K_20 + K_21 + K_22);
    G[176] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_21*(-2e-09*K_21-4e-09*K_20) + K_22*(-2e-09*K_22-4e-09*(K_20 + K_21))-2e-09*K_20*K_20);
    G[177] = -2e-09*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[178] = -2e-09*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[179] = 1e-05*K_20*det*(K_20 + K_21 + K_22);
    G[180] = -0.001*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[181] = -0.002*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[182] = 3e-06*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[183] = -2e-09*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[184] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.001*(K_01*(K_10*(K_20 + K_21 + K_22) + K_12*(K_20 + K_21 + K_22)) + K_11*(K_00*(K_20 + K_21 + K_22) + K_02*(K_20 + K_21 + K_22)))-0.002*K_01*K_11*(K_20 + K_21 + K_22));
    G[185] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.002*(K_01*(K_10*(K_20 + K_21 + K_22) + K_12*(K_20 + K_21 + K_22)) + K_11*(K_00*(K_20 + K_21 + K_22) + K_02*(K_20 + K_21 + K_22)))-0.004*K_01*K_11*(K_20 + K_21 + K_22));
    G[186] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(3e-06*(K_01*(K_10*(K_20 + K_21 + K_22) + K_12*(K_20 + K_21 + K_22)) + K_11*(K_00*(K_20 + K_21 + K_22) + K_02*(K_20 + K_21 + K_22))) + 6e-06*K_01*K_11*(K_20 + K_21 + K_22));
    G[187] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-2e-09*(K_01*(K_10*(K_20 + K_21 + K_22) + K_12*(K_20 + K_21 + K_22)) + K_11*(K_00*(K_20 + K_21 + K_22) + K_02*(K_20 + K_21 + K_22)))-4e-09*K_01*K_11*(K_20 + K_21 + K_22));
    G[188] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_22*(-0.001*K_22-0.002*K_20)-0.001*K_20*K_20) + K_21*(K_01*(-0.002*K_21-0.003*(K_20 + K_22))-0.001*(K_00*(K_20 + K_21 + K_22) + K_02*(K_20 + K_21 + K_22))));
    G[189] = -0.001*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[190] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_21*(-0.001*K_21-0.002*K_20) + K_22*(-0.001*K_22-0.002*(K_20 + K_21))-0.001*K_20*K_20);
    G[191] = 0.0025*K_01*det*(K_20 + K_21 + K_22);
    G[192] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_22*(-0.002*K_22-0.004*K_20)-0.002*K_20*K_20) + K_21*(K_01*(-0.004*K_21-0.006*(K_20 + K_22))-0.002*(K_00*(K_20 + K_21 + K_22) + K_02*(K_20 + K_21 + K_22))));
    G[193] = -0.002*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[194] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_21*(-0.002*K_21-0.004*K_20) + K_22*(-0.002*K_22-0.004*(K_20 + K_21))-0.002*K_20*K_20);
    G[195] = 0.005*K_01*det*(K_20 + K_21 + K_22);
    G[196] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(3e-06*K_20*K_20 + K_22*(3e-06*K_22 + 6e-06*K_20)) + K_21*(3e-06*(K_00*(K_20 + K_21 + K_22) + K_02*(K_20 + K_21 + K_22)) + K_01*(6e-06*K_21 + 9e-06*(K_20 + K_22))));
    G[197] = 3e-06*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[198] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(3e-06*K_20*K_20 + K_21*(3e-06*K_21 + 6e-06*K_20) + K_22*(3e-06*K_22 + 6e-06*(K_20 + K_21)));
    G[199] = -0.005005*K_01*det*(K_20 + K_21 + K_22);
    G[200] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_22*(-2e-09*K_22-4e-09*K_20)-2e-09*K_20*K_20) + K_21*(K_01*(-4e-09*K_21-6e-09*(K_20 + K_22))-2e-09*(K_00*(K_20 + K_21 + K_22) + K_02*(K_20 + K_21 + K_22))));
    G[201] = -2e-09*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[202] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_21*(-2e-09*K_21-4e-09*K_20) + K_22*(-2e-09*K_22-4e-09*(K_20 + K_21))-2e-09*K_20*K_20);
    G[203] = 1e-05*K_01*det*(K_20 + K_21 + K_22);
    G[204] = -0.001*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[205] = -0.002*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[206] = 3e-06*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[207] = -2e-09*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[208] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(K_22*(-0.001*K_22-0.002*K_20)-0.001*K_20*K_20) + K_21*(K_11*(-0.002*K_21-0.003*(K_20 + K_22))-0.001*(K_10*(K_20 + K_21 + K_22) + K_12*(K_20 + K_21 + K_22))));
    G[209] = -0.001*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[210] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_21*(-0.001*K_21-0.002*K_20) + K_22*(-0.001*K_22-0.002*(K_20 + K_21))-0.001*K_20*K_20);
    G[211] = 0.0025*K_11*det*(K_20 + K_21 + K_22);
    G[212] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(K_22*(-0.002*K_22-0.004*K_20)-0.002*K_20*K_20) + K_21*(K_11*(-0.004*K_21-0.006*(K_20 + K_22))-0.002*(K_10*(K_20 + K_21 + K_22) + K_12*(K_20 + K_21 + K_22))));
    G[213] = -0.002*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[214] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_21*(-0.002*K_21-0.004*K_20) + K_22*(-0.002*K_22-0.004*(K_20 + K_21))-0.002*K_20*K_20);
    G[215] = 0.005*K_11*det*(K_20 + K_21 + K_22);
    G[216] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(3e-06*K_20*K_20 + K_22*(3e-06*K_22 + 6e-06*K_20)) + K_21*(3e-06*(K_10*(K_20 + K_21 + K_22) + K_12*(K_20 + K_21 + K_22)) + K_11*(6e-06*K_21 + 9e-06*(K_20 + K_22))));
    G[217] = 3e-06*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[218] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(3e-06*K_20*K_20 + K_21*(3e-06*K_21 + 6e-06*K_20) + K_22*(3e-06*K_22 + 6e-06*(K_20 + K_21)));
    G[219] = -0.005005*K_11*det*(K_20 + K_21 + K_22);
    G[220] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(K_22*(-2e-09*K_22-4e-09*K_20)-2e-09*K_20*K_20) + K_21*(K_11*(-4e-09*K_21-6e-09*(K_20 + K_22))-2e-09*(K_10*(K_20 + K_21 + K_22) + K_12*(K_20 + K_21 + K_22))));
    G[221] = -2e-09*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[222] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_21*(-2e-09*K_21-4e-09*K_20) + K_22*(-2e-09*K_22-4e-09*(K_20 + K_21))-2e-09*K_20*K_20);
    G[223] = 1e-05*K_11*det*(K_20 + K_21 + K_22);
    G[224] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_21*(-0.001*K_21-0.002*K_20) + K_22*(-0.001*K_22-0.002*(K_20 + K_21))-0.001*K_20*K_20);
    G[225] = -0.001*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[226] = -0.001*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[227] = 0.0025*K_21*det*(K_20 + K_21 + K_22);
    G[228] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_21*(-0.002*K_21-0.004*K_20) + K_22*(-0.002*K_22-0.004*(K_20 + K_21))-0.002*K_20*K_20);
    G[229] = -0.002*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[230] = -0.002*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[231] = 0.005*K_21*det*(K_20 + K_21 + K_22);
    G[232] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(3e-06*K_20*K_20 + K_21*(3e-06*K_21 + 6e-06*K_20) + K_22*(3e-06*K_22 + 6e-06*(K_20 + K_21)));
    G[233] = 3e-06*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[234] = 3e-06*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[235] = -0.005005*K_21*det*(K_20 + K_21 + K_22);
    G[236] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_21*(-2e-09*K_21-4e-09*K_20) + K_22*(-2e-09*K_22-4e-09*(K_20 + K_21))-2e-09*K_20*K_20);
    G[237] = -2e-09*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[238] = -2e-09*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[239] = 1e-05*K_21*det*(K_20 + K_21 + K_22);
    G[240] = det*w[4][0]*(0.03*std::pow(w[2][0], 0.5)*w[2][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02))-0.01*std::pow(w[2][0], 1.5)*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)));
    G[241] = det*w[4][0]*(0.04*std::pow(w[2][0], 0.5)*w[2][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02))-0.02*std::pow(w[2][0], 1.5)*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)));
    G[242] = det*w[4][0]*(3e-05*std::pow(w[2][0], 1.5)*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02))-6e-05*std::pow(w[2][0], 0.5)*w[2][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)));
    G[243] = det*w[4][0]*(0.01*std::pow(w[2][0], 0.5)*w[2][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02))-0.01*std::pow(w[2][0], 1.5)*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)));
    G[244] = det*w[4][0]*(3e-05*std::pow(w[2][0], 1.5)*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02))-3e-05*std::pow(w[2][0], 0.5)*w[2][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)));
    G[245] = det*w[4][0]*(2e-08*std::pow(w[2][0], 0.5)*w[2][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02))-2e-08*std::pow(w[2][0], 1.5)*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)));
    G[246] = det*w[4][0]*(0.03*std::pow(w[2][0], 0.5)*w[2][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12))-0.01*std::pow(w[2][0], 1.5)*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)));
    G[247] = det*w[4][0]*(0.04*std::pow(w[2][0], 0.5)*w[2][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12))-0.02*std::pow(w[2][0], 1.5)*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)));
    G[248] = det*w[4][0]*(3e-05*std::pow(w[2][0], 1.5)*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12))-6e-05*std::pow(w[2][0], 0.5)*w[2][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)));
    G[249] = det*w[4][0]*(0.01*std::pow(w[2][0], 0.5)*w[2][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12))-0.01*std::pow(w[2][0], 1.5)*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)));
    G[250] = det*w[4][0]*(3e-05*std::pow(w[2][0], 1.5)*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12))-3e-05*std::pow(w[2][0], 0.5)*w[2][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)));
    G[251] = det*w[4][0]*(2e-08*std::pow(w[2][0], 0.5)*w[2][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12))-2e-08*std::pow(w[2][0], 1.5)*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)));
    G[252] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.03*K_20*K_20 + K_21*(0.03*K_21 + 0.06*K_20) + K_22*(0.03*K_22 + 0.06*(K_20 + K_21))) + std::pow(w[2][0], 1.5)*(K_21*(-0.01*K_21-0.02*K_20) + K_22*(-0.01*K_22-0.02*(K_20 + K_21))-0.01*K_20*K_20));
    G[253] = det*w[4][0]*(0.02*std::pow(w[2][0], 0.5)*w[2][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02))-0.01*std::pow(w[2][0], 1.5)*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)));
    G[254] = det*w[4][0]*(0.02*std::pow(w[2][0], 0.5)*w[2][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12))-0.01*std::pow(w[2][0], 1.5)*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)));
    G[255] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.02*K_20*K_20 + K_21*(0.02*K_21 + 0.04*K_20) + K_22*(0.02*K_22 + 0.04*(K_20 + K_21))) + std::pow(w[2][0], 1.5)*(K_21*(-0.01*K_21-0.02*K_20) + K_22*(-0.01*K_22-0.02*(K_20 + K_21))-0.01*K_20*K_20));
    G[256] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.04*K_20*K_20 + K_21*(0.04*K_21 + 0.08*K_20) + K_22*(0.04*K_22 + 0.08*(K_20 + K_21))) + std::pow(w[2][0], 1.5)*(K_21*(-0.02*K_21-0.04*K_20) + K_22*(-0.02*K_22-0.04*(K_20 + K_21))-0.02*K_20*K_20));
    G[257] = det*w[4][0]*(0.02*std::pow(w[2][0], 0.5)*w[2][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02))-0.02*std::pow(w[2][0], 1.5)*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)));
    G[258] = det*w[4][0]*(0.02*std::pow(w[2][0], 0.5)*w[2][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12))-0.02*std::pow(w[2][0], 1.5)*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)));
    G[259] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.02*K_20*K_20 + K_21*(0.02*K_21 + 0.04*K_20) + K_22*(0.02*K_22 + 0.04*(K_20 + K_21))) + std::pow(w[2][0], 1.5)*(K_21*(-0.02*K_21-0.04*K_20) + K_22*(-0.02*K_22-0.04*(K_20 + K_21))-0.02*K_20*K_20));
    G[260] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(K_21*(-0.00012*K_20-6e-05*K_21) + K_22*(-0.00012*(K_20 + K_21)-6e-05*K_22)-6e-05*K_20*K_20) + std::pow(w[2][0], 1.5)*(3e-05*K_20*K_20 + K_21*(3e-05*K_21 + 6e-05*K_20) + K_22*(3e-05*K_22 + 6e-05*(K_20 + K_21))));
    G[261] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(K_21*(-3e-05*K_21-6e-05*K_20) + K_22*(-3e-05*K_22-6e-05*(K_20 + K_21))-3e-05*K_20*K_20) + std::pow(w[2][0], 1.5)*(3e-05*K_20*K_20 + K_21*(3e-05*K_21 + 6e-05*K_20) + K_22*(3e-05*K_22 + 6e-05*(K_20 + K_21))));
    G[262] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.01*K_20*K_20 + K_21*(0.01*K_21 + 0.02*K_20) + K_22*(0.01*K_22 + 0.02*(K_20 + K_21))) + std::pow(w[2][0], 1.5)*(K_21*(-0.01*K_21-0.02*K_20) + K_22*(-0.01*K_22-0.02*(K_20 + K_21))-0.01*K_20*K_20));
    G[263] = -0.01*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[264] = -0.01*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[265] = std::pow(w[2][0], 1.5)*det*w[4][0]*(K_21*(-0.01*K_21-0.02*K_20) + K_22*(-0.01*K_22-0.02*(K_20 + K_21))-0.01*K_20*K_20);
    G[266] = 3e-05*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[267] = 3e-05*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[268] = std::pow(w[2][0], 1.5)*det*w[4][0]*(3e-05*K_20*K_20 + K_21*(3e-05*K_21 + 6e-05*K_20) + K_22*(3e-05*K_22 + 6e-05*(K_20 + K_21)));
    G[269] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(2e-08*K_20*K_20 + K_21*(2e-08*K_21 + 4e-08*K_20) + K_22*(2e-08*K_22 + 4e-08*(K_20 + K_21))) + std::pow(w[2][0], 1.5)*(K_21*(-2e-08*K_21-4e-08*K_20) + K_22*(-2e-08*K_22-4e-08*(K_20 + K_21))-2e-08*K_20*K_20));
    G[270] = -2e-08*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[271] = -2e-08*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[272] = std::pow(w[2][0], 1.5)*det*w[4][0]*(K_21*(-2e-08*K_21-4e-08*K_20) + K_22*(-2e-08*K_22-4e-08*(K_20 + K_21))-2e-08*K_20*K_20);
    G[273] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_21 + K_22));
    G[274] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02)) + 5e-06*K_00*K_20);
    G[275] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_20 + K_22));
    G[276] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02)) + 5e-06*K_01*K_21);
    G[277] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_20 + K_21));
    G[278] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01)) + 5e-06*K_02*K_22);
    G[279] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_20*(K_02*(-0.0025*K_11-0.00375*K_10) + K_12*(-0.0025*K_01-0.00375*K_00-0.005*K_02))-0.00125*(K_00*K_12*(K_21 + K_22) + K_02*K_10*(K_21 + K_22)));
    G[280] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_10*(K_21 + K_22) + K_11*K_20) + K_12*(K_00*(K_21 + K_22) + K_01*K_20)) + 5e-06*K_20*(K_02*K_10 + K_12*(K_00 + K_02)));
    G[281] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_21*(K_02*(-0.0025*K_10-0.00375*K_11) + K_12*(-0.0025*K_00-0.00375*K_01-0.005*K_02))-0.00125*(K_01*K_12*(K_20 + K_22) + K_02*K_11*(K_20 + K_22)));
    G[282] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_10*K_21 + K_11*(K_20 + K_22)) + K_12*(K_00*K_21 + K_01*(K_20 + K_22))) + 5e-06*K_21*(K_02*K_11 + K_12*(K_01 + K_02)));
    G[283] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.0025*(K_02*K_12*(K_20 + K_21) + K_22*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)))-0.0075*K_02*K_12*K_22);
    G[284] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(5e-06*K_02*K_12*(K_20 + K_21) + K_22*(1e-05*K_02*K_12 + 2.5e-06*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01))));
    G[285] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_22*(K_20*(-0.0025*K_01-0.00375*K_00-0.00625*K_02)-0.00125*K_00*(K_21 + K_22))-0.00375*K_02*K_20*(K_20 + K_21));
    G[286] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_11 + K_12)-0.00375*K_10)-0.00125*K_10*(K_21 + K_22));
    G[287] = -0.00375*std::pow(w[2][0], 0.5)*K_02*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[288] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(5e-06*K_02*K_20*(K_20 + K_21) + K_22*(2.5e-06*K_00*(K_21 + K_22) + K_20*(2.5e-06*K_01 + 5e-06*K_00 + 7.5e-06*K_02)));
    G[289] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(2.5e-06*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12)) + 5e-06*K_10*K_20);
    G[290] = 5e-06*std::pow(w[2][0], 0.5)*K_02*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[291] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_22*(K_21*(-0.0025*K_00-0.00375*K_01-0.00625*K_02)-0.00125*K_01*(K_20 + K_22))-0.00375*K_02*K_21*(K_20 + K_21));
    G[292] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_10 + K_12)-0.00375*K_11)-0.00125*K_11*(K_20 + K_22));
    G[293] = -0.00375*std::pow(w[2][0], 0.5)*K_02*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[294] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(5e-06*K_02*K_21*(K_20 + K_21) + K_22*(2.5e-06*K_01*(K_20 + K_22) + K_21*(2.5e-06*K_00 + 5e-06*K_01 + 7.5e-06*K_02)));
    G[295] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(2.5e-06*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12)) + 5e-06*K_11*K_21);
    G[296] = 5e-06*std::pow(w[2][0], 0.5)*K_02*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[297] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_00 + K_01)-0.0075*K_02)-0.005*K_02*(K_20 + K_21));
    G[298] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_10 + K_11)-0.00375*K_12)-0.00125*K_12*(K_20 + K_21));
    G[299] = -0.00375*std::pow(w[2][0], 0.5)*K_02*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[300] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(7.5e-06*K_02*(K_20 + K_21) + K_22*(1e-05*K_02 + 2.5e-06*(K_00 + K_01)));
    G[301] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(2.5e-06*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11)) + 5e-06*K_12*K_22);
    G[302] = 5e-06*std::pow(w[2][0], 0.5)*K_02*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[303] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_11 + K_12)-0.00375*K_10)-0.00125*K_10*(K_21 + K_22));
    G[304] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(2.5e-06*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12)) + 5e-06*K_10*K_20);
    G[305] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_10 + K_12)-0.00375*K_11)-0.00125*K_11*(K_20 + K_22));
    G[306] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(2.5e-06*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12)) + 5e-06*K_11*K_21);
    G[307] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_10 + K_11)-0.00375*K_12)-0.00125*K_12*(K_20 + K_21));
    G[308] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(2.5e-06*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11)) + 5e-06*K_12*K_22);
    G[309] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_22*(K_20*(-0.0025*K_11-0.00375*K_10-0.00625*K_12)-0.00125*K_10*(K_21 + K_22))-0.00375*K_12*K_20*(K_20 + K_21));
    G[310] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_21 + K_22));
    G[311] = -0.00375*std::pow(w[2][0], 0.5)*K_12*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[312] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(5e-06*K_12*K_20*(K_20 + K_21) + K_22*(2.5e-06*K_10*(K_21 + K_22) + K_20*(2.5e-06*K_11 + 5e-06*K_10 + 7.5e-06*K_12)));
    G[313] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02)) + 5e-06*K_00*K_20);
    G[314] = 5e-06*std::pow(w[2][0], 0.5)*K_12*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[315] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_22*(K_21*(-0.0025*K_10-0.00375*K_11-0.00625*K_12)-0.00125*K_11*(K_20 + K_22))-0.00375*K_12*K_21*(K_20 + K_21));
    G[316] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_20 + K_22));
    G[317] = -0.00375*std::pow(w[2][0], 0.5)*K_12*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[318] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(5e-06*K_12*K_21*(K_20 + K_21) + K_22*(2.5e-06*K_11*(K_20 + K_22) + K_21*(2.5e-06*K_10 + 5e-06*K_11 + 7.5e-06*K_12)));
    G[319] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02)) + 5e-06*K_01*K_21);
    G[320] = 5e-06*std::pow(w[2][0], 0.5)*K_12*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[321] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_10 + K_11)-0.0075*K_12)-0.005*K_12*(K_20 + K_21));
    G[322] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_20 + K_21));
    G[323] = -0.00375*std::pow(w[2][0], 0.5)*K_12*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[324] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(7.5e-06*K_12*(K_20 + K_21) + K_22*(1e-05*K_12 + 2.5e-06*(K_10 + K_11)));
    G[325] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01)) + 5e-06*K_02*K_22);
    G[326] = 5e-06*std::pow(w[2][0], 0.5)*K_12*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[327] = -0.00375*std::pow(w[2][0], 0.5)*K_20*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[328] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_21 + K_22));
    G[329] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_11 + K_12)-0.00375*K_10)-0.00125*K_10*(K_21 + K_22));
    G[330] = 5e-06*std::pow(w[2][0], 0.5)*K_20*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[331] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02)) + 5e-06*K_00*K_20);
    G[332] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(2.5e-06*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12)) + 5e-06*K_10*K_20);
    G[333] = -0.00375*std::pow(w[2][0], 0.5)*K_21*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[334] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_20 + K_22));
    G[335] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_10 + K_12)-0.00375*K_11)-0.00125*K_11*(K_20 + K_22));
    G[336] = 5e-06*std::pow(w[2][0], 0.5)*K_21*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[337] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02)) + 5e-06*K_01*K_21);
    G[338] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(2.5e-06*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12)) + 5e-06*K_11*K_21);
    G[339] = -0.00375*std::pow(w[2][0], 0.5)*K_22*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[340] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_20 + K_21));
    G[341] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_10 + K_11)-0.00375*K_12)-0.00125*K_12*(K_20 + K_21));
    G[342] = 5e-06*std::pow(w[2][0], 0.5)*K_22*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[343] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01)) + 5e-06*K_02*K_22);
    G[344] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(2.5e-06*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11)) + 5e-06*K_12*K_22);
    G[345] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_21 + K_22));
    G[346] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02)) + 5e-06*K_00*K_20);
    G[347] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_20 + K_22));
    G[348] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02)) + 5e-06*K_01*K_21);
    G[349] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_20 + K_21));
    G[350] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01)) + 5e-06*K_02*K_22);
    G[351] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.0025*(K_00*K_10*(K_21 + K_22) + K_20*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)))-0.0075*K_00*K_10*K_20);
    G[352] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(5e-06*K_00*K_10*(K_21 + K_22) + K_20*(1e-05*K_00*K_10 + 2.5e-06*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))));
    G[353] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_21*(K_00*(-0.0025*K_12-0.00375*K_11) + K_10*(-0.0025*K_02-0.00375*K_01-0.005*K_00))-0.00125*(K_00*K_11*(K_20 + K_22) + K_01*K_10*(K_20 + K_22)));
    G[354] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_11*(K_20 + K_22) + K_12*K_21) + K_10*(K_01*(K_20 + K_22) + K_02*K_21)) + 5e-06*K_21*(K_00*K_11 + K_10*(K_00 + K_01)));
    G[355] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_22*(K_00*(-0.0025*K_11-0.00375*K_12) + K_10*(-0.0025*K_01-0.00375*K_02-0.005*K_00))-0.00125*(K_00*K_12*(K_20 + K_21) + K_02*K_10*(K_20 + K_21)));
    G[356] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_11*K_22 + K_12*(K_20 + K_21)) + K_10*(K_01*K_22 + K_02*(K_20 + K_21))) + 5e-06*K_22*(K_00*K_12 + K_10*(K_00 + K_02)));
    G[357] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_01 + K_02)-0.0075*K_00)-0.005*K_00*(K_21 + K_22));
    G[358] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_11 + K_12)-0.00375*K_10)-0.00125*K_10*(K_21 + K_22));
    G[359] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[360] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(7.5e-06*K_00*(K_21 + K_22) + K_20*(1e-05*K_00 + 2.5e-06*(K_01 + K_02)));
    G[361] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(2.5e-06*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12)) + 5e-06*K_10*K_20);
    G[362] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[363] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_21*(K_20*(-0.0025*K_02-0.00375*K_01-0.00625*K_00)-0.00375*K_00*(K_21 + K_22))-0.00125*K_01*K_20*(K_20 + K_22));
    G[364] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_10 + K_12)-0.00375*K_11)-0.00125*K_11*(K_20 + K_22));
    G[365] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[366] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*K_01*K_20*(K_20 + K_22) + K_21*(5e-06*K_00*(K_21 + K_22) + K_20*(2.5e-06*K_02 + 5e-06*K_01 + 7.5e-06*K_00)));
    G[367] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(2.5e-06*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12)) + 5e-06*K_11*K_21);
    G[368] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[369] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_22*(K_20*(-0.0025*K_01-0.00375*K_02-0.00625*K_00)-0.00375*K_00*(K_21 + K_22))-0.00125*K_02*K_20*(K_20 + K_21));
    G[370] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_10 + K_11)-0.00375*K_12)-0.00125*K_12*(K_20 + K_21));
    G[371] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[372] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*K_02*K_20*(K_20 + K_21) + K_22*(5e-06*K_00*(K_21 + K_22) + K_20*(2.5e-06*K_01 + 5e-06*K_02 + 7.5e-06*K_00)));
    G[373] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(2.5e-06*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11)) + 5e-06*K_12*K_22);
    G[374] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[375] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_11 + K_12)-0.00375*K_10)-0.00125*K_10*(K_21 + K_22));
    G[376] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(2.5e-06*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12)) + 5e-06*K_10*K_20);
    G[377] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_10 + K_12)-0.00375*K_11)-0.00125*K_11*(K_20 + K_22));
    G[378] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(2.5e-06*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12)) + 5e-06*K_11*K_21);
    G[379] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_10 + K_11)-0.00375*K_12)-0.00125*K_12*(K_20 + K_21));
    G[380] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(2.5e-06*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11)) + 5e-06*K_12*K_22);
    G[381] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_11 + K_12)-0.0075*K_10)-0.005*K_10*(K_21 + K_22));
    G[382] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_21 + K_22));
    G[383] = -0.00375*std::pow(w[2][0], 0.5)*K_10*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[384] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(7.5e-06*K_10*(K_21 + K_22) + K_20*(1e-05*K_10 + 2.5e-06*(K_11 + K_12)));
    G[385] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02)) + 5e-06*K_00*K_20);
    G[386] = 5e-06*std::pow(w[2][0], 0.5)*K_10*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[387] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_21*(K_20*(-0.0025*K_12-0.00375*K_11-0.00625*K_10)-0.00375*K_10*(K_21 + K_22))-0.00125*K_11*K_20*(K_20 + K_22));
    G[388] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_20 + K_22));
    G[389] = -0.00375*std::pow(w[2][0], 0.5)*K_10*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[390] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*K_11*K_20*(K_20 + K_22) + K_21*(5e-06*K_10*(K_21 + K_22) + K_20*(2.5e-06*K_12 + 5e-06*K_11 + 7.5e-06*K_10)));
    G[391] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02)) + 5e-06*K_01*K_21);
    G[392] = 5e-06*std::pow(w[2][0], 0.5)*K_10*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[393] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_22*(K_20*(-0.0025*K_11-0.00375*K_12-0.00625*K_10)-0.00375*K_10*(K_21 + K_22))-0.00125*K_12*K_20*(K_20 + K_21));
    G[394] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_20 + K_21));
    G[395] = -0.00375*std::pow(w[2][0], 0.5)*K_10*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[396] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*K_12*K_20*(K_20 + K_21) + K_22*(5e-06*K_10*(K_21 + K_22) + K_20*(2.5e-06*K_11 + 5e-06*K_12 + 7.5e-06*K_10)));
    G[397] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01)) + 5e-06*K_02*K_22);
    G[398] = 5e-06*std::pow(w[2][0], 0.5)*K_10*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[399] = -0.00375*std::pow(w[2][0], 0.5)*K_20*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[400] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_21 + K_22));
    G[401] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_11 + K_12)-0.00375*K_10)-0.00125*K_10*(K_21 + K_22));
    G[402] = 5e-06*std::pow(w[2][0], 0.5)*K_20*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[403] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02)) + 5e-06*K_00*K_20);
    G[404] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(2.5e-06*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12)) + 5e-06*K_10*K_20);
    G[405] = -0.00375*std::pow(w[2][0], 0.5)*K_20*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[406] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_20 + K_22));
    G[407] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_10 + K_12)-0.00375*K_11)-0.00125*K_11*(K_20 + K_22));
    G[408] = 5e-06*std::pow(w[2][0], 0.5)*K_20*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[409] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02)) + 5e-06*K_01*K_21);
    G[410] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(2.5e-06*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12)) + 5e-06*K_11*K_21);
    G[411] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_20 + K_21));
    G[412] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_10 + K_11)-0.00375*K_12)-0.00125*K_12*(K_20 + K_21));
    G[413] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01)) + 5e-06*K_02*K_22);
    G[414] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(2.5e-06*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11)) + 5e-06*K_12*K_22);
    G[415] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_21 + K_22));
    G[416] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02)) + 5e-06*K_00*K_20);
    G[417] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_20 + K_22));
    G[418] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02)) + 5e-06*K_01*K_21);
    G[419] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_20 + K_21));
    G[420] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01)) + 5e-06*K_02*K_22);
    G[421] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_20*(K_01*(-0.0025*K_12-0.00375*K_10) + K_11*(-0.0025*K_02-0.00375*K_00-0.005*K_01))-0.00125*(K_00*K_11*(K_21 + K_22) + K_01*K_10*(K_21 + K_22)));
    G[422] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_10*(K_21 + K_22) + K_12*K_20) + K_11*(K_00*(K_21 + K_22) + K_02*K_20)) + 5e-06*K_20*(K_01*K_10 + K_11*(K_00 + K_01)));
    G[423] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.0025*(K_01*K_11*(K_20 + K_22) + K_21*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)))-0.0075*K_01*K_11*K_21);
    G[424] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(5e-06*K_01*K_11*(K_20 + K_22) + K_21*(1e-05*K_01*K_11 + 2.5e-06*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))));
    G[425] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_22*(K_01*(-0.0025*K_10-0.00375*K_12) + K_11*(-0.0025*K_00-0.00375*K_02-0.005*K_01))-0.00125*(K_01*K_12*(K_20 + K_21) + K_02*K_11*(K_20 + K_21)));
    G[426] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_10*K_22 + K_12*(K_20 + K_21)) + K_11*(K_00*K_22 + K_02*(K_20 + K_21))) + 5e-06*K_22*(K_01*K_12 + K_11*(K_01 + K_02)));
    G[427] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_21*(K_20*(-0.0025*K_02-0.00375*K_00-0.00625*K_01)-0.00125*K_00*(K_21 + K_22))-0.00375*K_01*K_20*(K_20 + K_22));
    G[428] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_11 + K_12)-0.00375*K_10)-0.00125*K_10*(K_21 + K_22));
    G[429] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[430] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(5e-06*K_01*K_20*(K_20 + K_22) + K_21*(2.5e-06*K_00*(K_21 + K_22) + K_20*(2.5e-06*K_02 + 5e-06*K_00 + 7.5e-06*K_01)));
    G[431] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(2.5e-06*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12)) + 5e-06*K_10*K_20);
    G[432] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[433] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_00 + K_02)-0.0075*K_01)-0.005*K_01*(K_20 + K_22));
    G[434] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_10 + K_12)-0.00375*K_11)-0.00125*K_11*(K_20 + K_22));
    G[435] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[436] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(7.5e-06*K_01*(K_20 + K_22) + K_21*(1e-05*K_01 + 2.5e-06*(K_00 + K_02)));
    G[437] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(2.5e-06*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12)) + 5e-06*K_11*K_21);
    G[438] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[439] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_22*(K_21*(-0.0025*K_00-0.00375*K_02-0.00625*K_01)-0.00375*K_01*(K_20 + K_22))-0.00125*K_02*K_21*(K_20 + K_21));
    G[440] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_10 + K_11)-0.00375*K_12)-0.00125*K_12*(K_20 + K_21));
    G[441] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[442] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*K_02*K_21*(K_20 + K_21) + K_22*(5e-06*K_01*(K_20 + K_22) + K_21*(2.5e-06*K_00 + 5e-06*K_02 + 7.5e-06*K_01)));
    G[443] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(2.5e-06*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11)) + 5e-06*K_12*K_22);
    G[444] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[445] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_11 + K_12)-0.00375*K_10)-0.00125*K_10*(K_21 + K_22));
    G[446] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(2.5e-06*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12)) + 5e-06*K_10*K_20);
    G[447] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_10 + K_12)-0.00375*K_11)-0.00125*K_11*(K_20 + K_22));
    G[448] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(2.5e-06*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12)) + 5e-06*K_11*K_21);
    G[449] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_10 + K_11)-0.00375*K_12)-0.00125*K_12*(K_20 + K_21));
    G[450] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(2.5e-06*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11)) + 5e-06*K_12*K_22);
    G[451] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_21*(K_20*(-0.0025*K_12-0.00375*K_10-0.00625*K_11)-0.00125*K_10*(K_21 + K_22))-0.00375*K_11*K_20*(K_20 + K_22));
    G[452] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_21 + K_22));
    G[453] = -0.00375*std::pow(w[2][0], 0.5)*K_11*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[454] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(5e-06*K_11*K_20*(K_20 + K_22) + K_21*(2.5e-06*K_10*(K_21 + K_22) + K_20*(2.5e-06*K_12 + 5e-06*K_10 + 7.5e-06*K_11)));
    G[455] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02)) + 5e-06*K_00*K_20);
    G[456] = 5e-06*std::pow(w[2][0], 0.5)*K_11*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[457] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_10 + K_12)-0.0075*K_11)-0.005*K_11*(K_20 + K_22));
    G[458] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_20 + K_22));
    G[459] = -0.00375*std::pow(w[2][0], 0.5)*K_11*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[460] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(7.5e-06*K_11*(K_20 + K_22) + K_21*(1e-05*K_11 + 2.5e-06*(K_10 + K_12)));
    G[461] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02)) + 5e-06*K_01*K_21);
    G[462] = 5e-06*std::pow(w[2][0], 0.5)*K_11*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[463] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_22*(K_21*(-0.0025*K_10-0.00375*K_12-0.00625*K_11)-0.00375*K_11*(K_20 + K_22))-0.00125*K_12*K_21*(K_20 + K_21));
    G[464] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_20 + K_21));
    G[465] = -0.00375*std::pow(w[2][0], 0.5)*K_11*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[466] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*K_12*K_21*(K_20 + K_21) + K_22*(5e-06*K_11*(K_20 + K_22) + K_21*(2.5e-06*K_10 + 5e-06*K_12 + 7.5e-06*K_11)));
    G[467] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01)) + 5e-06*K_02*K_22);
    G[468] = 5e-06*std::pow(w[2][0], 0.5)*K_11*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[469] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_21 + K_22));
    G[470] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_11 + K_12)-0.00375*K_10)-0.00125*K_10*(K_21 + K_22));
    G[471] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02)) + 5e-06*K_00*K_20);
    G[472] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(2.5e-06*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12)) + 5e-06*K_10*K_20);
    G[473] = -0.00375*std::pow(w[2][0], 0.5)*K_21*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[474] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_20 + K_22));
    G[475] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_10 + K_12)-0.00375*K_11)-0.00125*K_11*(K_20 + K_22));
    G[476] = 5e-06*std::pow(w[2][0], 0.5)*K_21*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[477] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02)) + 5e-06*K_01*K_21);
    G[478] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(2.5e-06*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12)) + 5e-06*K_11*K_21);
    G[479] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_20 + K_21));
    G[480] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_10 + K_11)-0.00375*K_12)-0.00125*K_12*(K_20 + K_21));
    G[481] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01)) + 5e-06*K_02*K_22);
    G[482] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(2.5e-06*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11)) + 5e-06*K_12*K_22);
    G[483] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.05*K_00*(K_21 + K_22) + K_20*(0.1*(K_01 + K_02) + 0.15*K_00)) + std::pow(w[2][0], 1.5)*(K_20*(-0.05*(K_01 + K_02)-0.075*K_00)-0.025*K_00*(K_21 + K_22)));
    G[484] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.025*K_00*(K_21 + K_22) + K_20*(0.05*(K_01 + K_02) + 0.075*K_00)) + std::pow(w[2][0], 1.5)*(K_20*(-0.05*(K_01 + K_02)-0.075*K_00)-0.025*K_00*(K_21 + K_22)));
    G[485] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(-0.0001*K_00*K_20-5e-05*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02))) + std::pow(w[2][0], 1.5)*(0.0001*K_00*K_20 + 5e-05*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02))));
    G[486] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.05*K_01*(K_20 + K_22) + K_21*(0.1*(K_00 + K_02) + 0.15*K_01)) + std::pow(w[2][0], 1.5)*(K_21*(-0.05*(K_00 + K_02)-0.075*K_01)-0.025*K_01*(K_20 + K_22)));
    G[487] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.025*K_01*(K_20 + K_22) + K_21*(0.05*(K_00 + K_02) + 0.075*K_01)) + std::pow(w[2][0], 1.5)*(K_21*(-0.05*(K_00 + K_02)-0.075*K_01)-0.025*K_01*(K_20 + K_22)));
    G[488] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(-0.0001*K_01*K_21-5e-05*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02))) + std::pow(w[2][0], 1.5)*(0.0001*K_01*K_21 + 5e-05*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02))));
    G[489] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.05*K_02*(K_20 + K_21) + K_22*(0.1*(K_00 + K_01) + 0.15*K_02)) + std::pow(w[2][0], 1.5)*(K_22*(-0.05*(K_00 + K_01)-0.075*K_02)-0.025*K_02*(K_20 + K_21)));
    G[490] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.025*K_02*(K_20 + K_21) + K_22*(0.05*(K_00 + K_01) + 0.075*K_02)) + std::pow(w[2][0], 1.5)*(K_22*(-0.05*(K_00 + K_01)-0.075*K_02)-0.025*K_02*(K_20 + K_21)));
    G[491] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(-0.0001*K_02*K_22-5e-05*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01))) + std::pow(w[2][0], 1.5)*(0.0001*K_02*K_22 + 5e-05*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01))));
    G[492] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.05*K_10*(K_21 + K_22) + K_20*(0.1*(K_11 + K_12) + 0.15*K_10)) + std::pow(w[2][0], 1.5)*(K_20*(-0.05*(K_11 + K_12)-0.075*K_10)-0.025*K_10*(K_21 + K_22)));
    G[493] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.025*K_10*(K_21 + K_22) + K_20*(0.05*(K_11 + K_12) + 0.075*K_10)) + std::pow(w[2][0], 1.5)*(K_20*(-0.05*(K_11 + K_12)-0.075*K_10)-0.025*K_10*(K_21 + K_22)));
    G[494] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(-0.0001*K_10*K_20-5e-05*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12))) + std::pow(w[2][0], 1.5)*(0.0001*K_10*K_20 + 5e-05*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12))));
    G[495] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.05*K_11*(K_20 + K_22) + K_21*(0.1*(K_10 + K_12) + 0.15*K_11)) + std::pow(w[2][0], 1.5)*(K_21*(-0.05*(K_10 + K_12)-0.075*K_11)-0.025*K_11*(K_20 + K_22)));
    G[496] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.025*K_11*(K_20 + K_22) + K_21*(0.05*(K_10 + K_12) + 0.075*K_11)) + std::pow(w[2][0], 1.5)*(K_21*(-0.05*(K_10 + K_12)-0.075*K_11)-0.025*K_11*(K_20 + K_22)));
    G[497] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(-0.0001*K_11*K_21-5e-05*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12))) + std::pow(w[2][0], 1.5)*(0.0001*K_11*K_21 + 5e-05*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12))));
    G[498] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.05*K_12*(K_20 + K_21) + K_22*(0.1*(K_10 + K_11) + 0.15*K_12)) + std::pow(w[2][0], 1.5)*(K_22*(-0.05*(K_10 + K_11)-0.075*K_12)-0.025*K_12*(K_20 + K_21)));
    G[499] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.025*K_12*(K_20 + K_21) + K_22*(0.05*(K_10 + K_11) + 0.075*K_12)) + std::pow(w[2][0], 1.5)*(K_22*(-0.05*(K_10 + K_11)-0.075*K_12)-0.025*K_12*(K_20 + K_21)));
    G[500] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(-0.0001*K_12*K_22-5e-05*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11))) + std::pow(w[2][0], 1.5)*(0.0001*K_12*K_22 + 5e-05*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11))));
    G[501] = K_20*det*w[4][0]*(0.15*std::pow(w[2][0], 0.5)*w[2][0]*(K_20 + K_21 + K_22)-0.075*std::pow(w[2][0], 1.5)*(K_20 + K_21 + K_22));
    G[502] = K_20*det*w[4][0]*(0.075*std::pow(w[2][0], 0.5)*w[2][0]*(K_20 + K_21 + K_22)-0.075*std::pow(w[2][0], 1.5)*(K_20 + K_21 + K_22));
    G[503] = std::pow(w[2][0], 1.5)*det*w[4][0]*(K_20*(-0.05*(K_01 + K_02)-0.075*K_00)-0.025*K_00*(K_21 + K_22));
    G[504] = std::pow(w[2][0], 1.5)*det*w[4][0]*(K_20*(-0.05*(K_11 + K_12)-0.075*K_10)-0.025*K_10*(K_21 + K_22));
    G[505] = -0.075*std::pow(w[2][0], 1.5)*K_20*det*w[4][0]*(K_20 + K_21 + K_22);
    G[506] = K_20*det*w[4][0]*(0.0001*std::pow(w[2][0], 1.5)*(K_20 + K_21 + K_22)-0.0001*std::pow(w[2][0], 0.5)*w[2][0]*(K_20 + K_21 + K_22));
    G[507] = std::pow(w[2][0], 1.5)*det*w[4][0]*(0.0001*K_00*K_20 + 5e-05*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02)));
    G[508] = std::pow(w[2][0], 1.5)*det*w[4][0]*(0.0001*K_10*K_20 + 5e-05*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12)));
    G[509] = 0.0001*std::pow(w[2][0], 1.5)*K_20*det*w[4][0]*(K_20 + K_21 + K_22);
    G[510] = K_21*det*w[4][0]*(0.15*std::pow(w[2][0], 0.5)*w[2][0]*(K_20 + K_21 + K_22)-0.075*std::pow(w[2][0], 1.5)*(K_20 + K_21 + K_22));
    G[511] = K_21*det*w[4][0]*(0.075*std::pow(w[2][0], 0.5)*w[2][0]*(K_20 + K_21 + K_22)-0.075*std::pow(w[2][0], 1.5)*(K_20 + K_21 + K_22));
    G[512] = std::pow(w[2][0], 1.5)*det*w[4][0]*(K_21*(-0.05*(K_00 + K_02)-0.075*K_01)-0.025*K_01*(K_20 + K_22));
    G[513] = std::pow(w[2][0], 1.5)*det*w[4][0]*(K_21*(-0.05*(K_10 + K_12)-0.075*K_11)-0.025*K_11*(K_20 + K_22));
    G[514] = -0.075*std::pow(w[2][0], 1.5)*K_21*det*w[4][0]*(K_20 + K_21 + K_22);
    G[515] = K_21*det*w[4][0]*(0.0001*std::pow(w[2][0], 1.5)*(K_20 + K_21 + K_22)-0.0001*std::pow(w[2][0], 0.5)*w[2][0]*(K_20 + K_21 + K_22));
    G[516] = std::pow(w[2][0], 1.5)*det*w[4][0]*(0.0001*K_01*K_21 + 5e-05*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02)));
    G[517] = std::pow(w[2][0], 1.5)*det*w[4][0]*(0.0001*K_11*K_21 + 5e-05*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12)));
    G[518] = 0.0001*std::pow(w[2][0], 1.5)*K_21*det*w[4][0]*(K_20 + K_21 + K_22);
    G[519] = K_22*det*w[4][0]*(0.15*std::pow(w[2][0], 0.5)*w[2][0]*(K_20 + K_21 + K_22)-0.075*std::pow(w[2][0], 1.5)*(K_20 + K_21 + K_22));
    G[520] = K_22*det*w[4][0]*(0.075*std::pow(w[2][0], 0.5)*w[2][0]*(K_20 + K_21 + K_22)-0.075*std::pow(w[2][0], 1.5)*(K_20 + K_21 + K_22));
    G[521] = std::pow(w[2][0], 1.5)*det*w[4][0]*(K_22*(-0.05*(K_00 + K_01)-0.075*K_02)-0.025*K_02*(K_20 + K_21));
    G[522] = std::pow(w[2][0], 1.5)*det*w[4][0]*(K_22*(-0.05*(K_10 + K_11)-0.075*K_12)-0.025*K_12*(K_20 + K_21));
    G[523] = -0.075*std::pow(w[2][0], 1.5)*K_22*det*w[4][0]*(K_20 + K_21 + K_22);
    G[524] = K_22*det*w[4][0]*(0.0001*std::pow(w[2][0], 1.5)*(K_20 + K_21 + K_22)-0.0001*std::pow(w[2][0], 0.5)*w[2][0]*(K_20 + K_21 + K_22));
    G[525] = std::pow(w[2][0], 1.5)*det*w[4][0]*(0.0001*K_02*K_22 + 5e-05*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01)));
    G[526] = std::pow(w[2][0], 1.5)*det*w[4][0]*(0.0001*K_12*K_22 + 5e-05*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11)));
    G[527] = 0.0001*std::pow(w[2][0], 1.5)*K_22*det*w[4][0]*(K_20 + K_21 + K_22);
    G[528] = -0.05*det*(K_20 + K_21 + K_22);
    G[529] = 0.0;
    G[530] = 0.0;
    G[531] = 0.05*det*(K_20 + K_21 + K_22);
    G[532] = -0.1001*det*(K_20 + K_21 + K_22);
    G[533] = 0.0002*det*(K_20 + K_21 + K_22);
    G[534] = det*w[6][0]*(0.5*std::pow(w[2][0], 0.5)*w[2][0]*(K_00*K_10 + K_01*K_11 + K_02*K_12)-0.5*std::pow(w[2][0], 1.5)*(K_00*K_10 + K_01*K_11 + K_02*K_12));
    G[535] = det*w[6][0]*(0.5*std::pow(w[2][0], 0.5)*w[2][0]*(K_10*K_10 + K_11*K_11 + K_12*K_12)-0.5*std::pow(w[2][0], 1.5)*(K_10*K_10 + K_11*K_11 + K_12*K_12));
    G[536] = -0.5*det*(std::pow(w[2][0], 1.5)*w[6][0]*(K_00*K_10 + K_01*K_11 + K_02*K_12) + w[10][0]*w[2][0]*w[2][0]*w[5][0]*(K_00*K_10 + K_01*K_11 + K_02*K_12));
    G[537] = -0.5*det*(std::pow(w[2][0], 1.5)*w[6][0]*(K_10*K_10 + K_11*K_11 + K_12*K_12) + w[10][0]*w[2][0]*w[2][0]*w[5][0]*(K_10*K_10 + K_11*K_11 + K_12*K_12));
    G[538] = K_00*K_10*det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]-0.125*std::pow(w[2][0], 1.5));
    G[539] = det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]*(K_00*K_11 + K_01*K_10)-0.125*std::pow(w[2][0], 1.5)*(K_00*K_11 + K_01*K_10));
    G[540] = det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]*(K_00*K_12 + K_02*K_10)-0.125*std::pow(w[2][0], 1.5)*(K_00*K_12 + K_02*K_10));
    G[541] = K_00*K_10*det*w[4][0]*(0.25*std::pow(w[2][0], 0.5)*w[2][0]-0.25*std::pow(w[2][0], 1.5));
    G[542] = K_01*K_11*det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]-0.125*std::pow(w[2][0], 1.5));
    G[543] = det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]*(K_01*K_12 + K_02*K_11)-0.125*std::pow(w[2][0], 1.5)*(K_01*K_12 + K_02*K_11));
    G[544] = K_01*K_11*det*w[4][0]*(0.25*std::pow(w[2][0], 0.5)*w[2][0]-0.25*std::pow(w[2][0], 1.5));
    G[545] = K_02*K_12*det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]-0.125*std::pow(w[2][0], 1.5));
    G[546] = K_02*K_12*det*w[4][0]*(0.25*std::pow(w[2][0], 0.5)*w[2][0]-0.25*std::pow(w[2][0], 1.5));
    G[547] = K_10*K_10*det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]-0.125*std::pow(w[2][0], 1.5));
    G[548] = K_10*K_11*det*w[4][0]*(0.25*std::pow(w[2][0], 0.5)*w[2][0]-0.25*std::pow(w[2][0], 1.5));
    G[549] = K_10*K_12*det*w[4][0]*(0.25*std::pow(w[2][0], 0.5)*w[2][0]-0.25*std::pow(w[2][0], 1.5));
    G[550] = K_10*K_10*det*w[4][0]*(0.25*std::pow(w[2][0], 0.5)*w[2][0]-0.25*std::pow(w[2][0], 1.5));
    G[551] = K_11*K_11*det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]-0.125*std::pow(w[2][0], 1.5));
    G[552] = K_11*K_12*det*w[4][0]*(0.25*std::pow(w[2][0], 0.5)*w[2][0]-0.25*std::pow(w[2][0], 1.5));
    G[553] = K_11*K_11*det*w[4][0]*(0.25*std::pow(w[2][0], 0.5)*w[2][0]-0.25*std::pow(w[2][0], 1.5));
    G[554] = K_12*K_12*det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]-0.125*std::pow(w[2][0], 1.5));
    G[555] = K_12*K_12*det*w[4][0]*(0.25*std::pow(w[2][0], 0.5)*w[2][0]-0.25*std::pow(w[2][0], 1.5));
    G[556] = -0.125*std::pow(w[2][0], 1.5)*K_00*K_10*det*w[4][0];
    G[557] = -0.125*std::pow(w[2][0], 1.5)*K_10*K_10*det*w[4][0];
    G[558] = -0.125*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_00*K_11 + K_01*K_10);
    G[559] = -0.25*std::pow(w[2][0], 1.5)*K_10*K_11*det*w[4][0];
    G[560] = -0.125*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_00*K_12 + K_02*K_10);
    G[561] = -0.25*std::pow(w[2][0], 1.5)*K_10*K_12*det*w[4][0];
    G[562] = -0.25*std::pow(w[2][0], 1.5)*K_00*K_10*det*w[4][0];
    G[563] = -0.25*std::pow(w[2][0], 1.5)*K_10*K_10*det*w[4][0];
    G[564] = -0.125*std::pow(w[2][0], 1.5)*K_01*K_11*det*w[4][0];
    G[565] = -0.125*std::pow(w[2][0], 1.5)*K_11*K_11*det*w[4][0];
    G[566] = -0.125*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_01*K_12 + K_02*K_11);
    G[567] = -0.25*std::pow(w[2][0], 1.5)*K_11*K_12*det*w[4][0];
    G[568] = -0.25*std::pow(w[2][0], 1.5)*K_01*K_11*det*w[4][0];
    G[569] = -0.25*std::pow(w[2][0], 1.5)*K_11*K_11*det*w[4][0];
    G[570] = -0.125*std::pow(w[2][0], 1.5)*K_02*K_12*det*w[4][0];
    G[571] = -0.125*std::pow(w[2][0], 1.5)*K_12*K_12*det*w[4][0];
    G[572] = -0.25*std::pow(w[2][0], 1.5)*K_02*K_12*det*w[4][0];
    G[573] = -0.25*std::pow(w[2][0], 1.5)*K_12*K_12*det*w[4][0];
    G[574] = -0.001*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[575] = -0.002*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[576] = 3e-06*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[577] = -2e-09*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[578] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_11*(-0.001*K_11-0.002*K_10)-0.001*K_10*K_10) + K_12*(K_02*(-0.002*K_12-0.003*(K_10 + K_11))-0.001*(K_00*(K_10 + K_11 + K_12) + K_01*(K_10 + K_11 + K_12))));
    G[579] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_11*(-0.002*K_11-0.004*K_10)-0.002*K_10*K_10) + K_12*(K_02*(-0.004*K_12-0.006*(K_10 + K_11))-0.002*(K_00*(K_10 + K_11 + K_12) + K_01*(K_10 + K_11 + K_12))));
    G[580] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(3e-06*K_10*K_10 + K_11*(3e-06*K_11 + 6e-06*K_10)) + K_12*(3e-06*(K_00*(K_10 + K_11 + K_12) + K_01*(K_10 + K_11 + K_12)) + K_02*(6e-06*K_12 + 9e-06*(K_10 + K_11))));
    G[581] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_11*(-2e-09*K_11-4e-09*K_10)-2e-09*K_10*K_10) + K_12*(K_02*(-4e-09*K_12-6e-09*(K_10 + K_11))-2e-09*(K_00*(K_10 + K_11 + K_12) + K_01*(K_10 + K_11 + K_12))));
    G[582] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.001*(K_02*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12)) + K_22*(K_00*(K_10 + K_11 + K_12) + K_01*(K_10 + K_11 + K_12)))-0.002*K_02*K_22*(K_10 + K_11 + K_12));
    G[583] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_11*(-0.001*K_11-0.002*K_10) + K_12*(-0.001*K_12-0.002*(K_10 + K_11))-0.001*K_10*K_10);
    G[584] = 0.0025*K_02*det*(K_10 + K_11 + K_12);
    G[585] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.002*(K_02*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12)) + K_22*(K_00*(K_10 + K_11 + K_12) + K_01*(K_10 + K_11 + K_12)))-0.004*K_02*K_22*(K_10 + K_11 + K_12));
    G[586] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_11*(-0.002*K_11-0.004*K_10) + K_12*(-0.002*K_12-0.004*(K_10 + K_11))-0.002*K_10*K_10);
    G[587] = 0.005*K_02*det*(K_10 + K_11 + K_12);
    G[588] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(3e-06*(K_02*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12)) + K_22*(K_00*(K_10 + K_11 + K_12) + K_01*(K_10 + K_11 + K_12))) + 6e-06*K_02*K_22*(K_10 + K_11 + K_12));
    G[589] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(3e-06*K_10*K_10 + K_11*(3e-06*K_11 + 6e-06*K_10) + K_12*(3e-06*K_12 + 6e-06*(K_10 + K_11)));
    G[590] = -0.005005*K_02*det*(K_10 + K_11 + K_12);
    G[591] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-2e-09*(K_02*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12)) + K_22*(K_00*(K_10 + K_11 + K_12) + K_01*(K_10 + K_11 + K_12)))-4e-09*K_02*K_22*(K_10 + K_11 + K_12));
    G[592] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_11*(-2e-09*K_11-4e-09*K_10) + K_12*(-2e-09*K_12-4e-09*(K_10 + K_11))-2e-09*K_10*K_10);
    G[593] = 1e-05*K_02*det*(K_10 + K_11 + K_12);
    G[594] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_11*(-0.001*K_11-0.002*K_10) + K_12*(-0.001*K_12-0.002*(K_10 + K_11))-0.001*K_10*K_10);
    G[595] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_11*(-0.002*K_11-0.004*K_10) + K_12*(-0.002*K_12-0.004*(K_10 + K_11))-0.002*K_10*K_10);
    G[596] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(3e-06*K_10*K_10 + K_11*(3e-06*K_11 + 6e-06*K_10) + K_12*(3e-06*K_12 + 6e-06*(K_10 + K_11)));
    G[597] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_11*(-2e-09*K_11-4e-09*K_10) + K_12*(-2e-09*K_12-4e-09*(K_10 + K_11))-2e-09*K_10*K_10);
    G[598] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_22*(-0.002*K_12-0.003*(K_10 + K_11))-0.001*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12))) + K_22*(K_11*(-0.001*K_11-0.002*K_10)-0.001*K_10*K_10));
    G[599] = -0.001*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[600] = 0.0025*K_12*det*(K_10 + K_11 + K_12);
    G[601] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_22*(-0.004*K_12-0.006*(K_10 + K_11))-0.002*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12))) + K_22*(K_11*(-0.002*K_11-0.004*K_10)-0.002*K_10*K_10));
    G[602] = -0.002*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[603] = 0.005*K_12*det*(K_10 + K_11 + K_12);
    G[604] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(3e-06*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12)) + K_22*(6e-06*K_12 + 9e-06*(K_10 + K_11))) + K_22*(3e-06*K_10*K_10 + K_11*(3e-06*K_11 + 6e-06*K_10)));
    G[605] = 3e-06*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[606] = -0.005005*K_12*det*(K_10 + K_11 + K_12);
    G[607] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_22*(-4e-09*K_12-6e-09*(K_10 + K_11))-2e-09*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12))) + K_22*(K_11*(-2e-09*K_11-4e-09*K_10)-2e-09*K_10*K_10));
    G[608] = -2e-09*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[609] = 1e-05*K_12*det*(K_10 + K_11 + K_12);
    G[610] = -0.001*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[611] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_11*(-0.001*K_11-0.002*K_10) + K_12*(-0.001*K_12-0.002*(K_10 + K_11))-0.001*K_10*K_10);
    G[612] = 0.0025*K_22*det*(K_10 + K_11 + K_12);
    G[613] = -0.002*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[614] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_11*(-0.002*K_11-0.004*K_10) + K_12*(-0.002*K_12-0.004*(K_10 + K_11))-0.002*K_10*K_10);
    G[615] = 0.005*K_22*det*(K_10 + K_11 + K_12);
    G[616] = 3e-06*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[617] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(3e-06*K_10*K_10 + K_11*(3e-06*K_11 + 6e-06*K_10) + K_12*(3e-06*K_12 + 6e-06*(K_10 + K_11)));
    G[618] = -0.005005*K_22*det*(K_10 + K_11 + K_12);
    G[619] = -2e-09*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[620] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_11*(-2e-09*K_11-4e-09*K_10) + K_12*(-2e-09*K_12-4e-09*(K_10 + K_11))-2e-09*K_10*K_10);
    G[621] = 1e-05*K_22*det*(K_10 + K_11 + K_12);
    G[622] = -0.001*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[623] = -0.002*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[624] = 3e-06*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[625] = -2e-09*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[626] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(K_12*(-0.001*K_12-0.002*K_11)-0.001*K_11*K_11) + K_10*(K_00*(-0.002*K_10-0.003*(K_11 + K_12))-0.001*(K_01*(K_10 + K_11 + K_12) + K_02*(K_10 + K_11 + K_12))));
    G[627] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(K_12*(-0.002*K_12-0.004*K_11)-0.002*K_11*K_11) + K_10*(K_00*(-0.004*K_10-0.006*(K_11 + K_12))-0.002*(K_01*(K_10 + K_11 + K_12) + K_02*(K_10 + K_11 + K_12))));
    G[628] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(3e-06*K_11*K_11 + K_12*(3e-06*K_12 + 6e-06*K_11)) + K_10*(3e-06*(K_01*(K_10 + K_11 + K_12) + K_02*(K_10 + K_11 + K_12)) + K_00*(6e-06*K_10 + 9e-06*(K_11 + K_12))));
    G[629] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(K_12*(-2e-09*K_12-4e-09*K_11)-2e-09*K_11*K_11) + K_10*(K_00*(-4e-09*K_10-6e-09*(K_11 + K_12))-2e-09*(K_01*(K_10 + K_11 + K_12) + K_02*(K_10 + K_11 + K_12))));
    G[630] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.001*(K_00*(K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)) + K_20*(K_01*(K_10 + K_11 + K_12) + K_02*(K_10 + K_11 + K_12)))-0.002*K_00*K_20*(K_10 + K_11 + K_12));
    G[631] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_11*(-0.001*K_11-0.002*K_10) + K_12*(-0.001*K_12-0.002*(K_10 + K_11))-0.001*K_10*K_10);
    G[632] = 0.0025*K_00*det*(K_10 + K_11 + K_12);
    G[633] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.002*(K_00*(K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)) + K_20*(K_01*(K_10 + K_11 + K_12) + K_02*(K_10 + K_11 + K_12)))-0.004*K_00*K_20*(K_10 + K_11 + K_12));
    G[634] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_11*(-0.002*K_11-0.004*K_10) + K_12*(-0.002*K_12-0.004*(K_10 + K_11))-0.002*K_10*K_10);
    G[635] = 0.005*K_00*det*(K_10 + K_11 + K_12);
    G[636] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(3e-06*(K_00*(K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)) + K_20*(K_01*(K_10 + K_11 + K_12) + K_02*(K_10 + K_11 + K_12))) + 6e-06*K_00*K_20*(K_10 + K_11 + K_12));
    G[637] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(3e-06*K_10*K_10 + K_11*(3e-06*K_11 + 6e-06*K_10) + K_12*(3e-06*K_12 + 6e-06*(K_10 + K_11)));
    G[638] = -0.005005*K_00*det*(K_10 + K_11 + K_12);
    G[639] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-2e-09*(K_00*(K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)) + K_20*(K_01*(K_10 + K_11 + K_12) + K_02*(K_10 + K_11 + K_12)))-4e-09*K_00*K_20*(K_10 + K_11 + K_12));
    G[640] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_11*(-2e-09*K_11-4e-09*K_10) + K_12*(-2e-09*K_12-4e-09*(K_10 + K_11))-2e-09*K_10*K_10);
    G[641] = 1e-05*K_00*det*(K_10 + K_11 + K_12);
    G[642] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_11*(-0.001*K_11-0.002*K_10) + K_12*(-0.001*K_12-0.002*(K_10 + K_11))-0.001*K_10*K_10);
    G[643] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_11*(-0.002*K_11-0.004*K_10) + K_12*(-0.002*K_12-0.004*(K_10 + K_11))-0.002*K_10*K_10);
    G[644] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(3e-06*K_10*K_10 + K_11*(3e-06*K_11 + 6e-06*K_10) + K_12*(3e-06*K_12 + 6e-06*(K_10 + K_11)));
    G[645] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_11*(-2e-09*K_11-4e-09*K_10) + K_12*(-2e-09*K_12-4e-09*(K_10 + K_11))-2e-09*K_10*K_10);
    G[646] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_10*(K_20*(-0.002*K_10-0.003*(K_11 + K_12))-0.001*(K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12))) + K_20*(K_12*(-0.001*K_12-0.002*K_11)-0.001*K_11*K_11));
    G[647] = -0.001*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[648] = 0.0025*K_10*det*(K_10 + K_11 + K_12);
    G[649] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_10*(K_20*(-0.004*K_10-0.006*(K_11 + K_12))-0.002*(K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12))) + K_20*(K_12*(-0.002*K_12-0.004*K_11)-0.002*K_11*K_11));
    G[650] = -0.002*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[651] = 0.005*K_10*det*(K_10 + K_11 + K_12);
    G[652] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_10*(3e-06*(K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)) + K_20*(6e-06*K_10 + 9e-06*(K_11 + K_12))) + K_20*(3e-06*K_11*K_11 + K_12*(3e-06*K_12 + 6e-06*K_11)));
    G[653] = 3e-06*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[654] = -0.005005*K_10*det*(K_10 + K_11 + K_12);
    G[655] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_10*(K_20*(-4e-09*K_10-6e-09*(K_11 + K_12))-2e-09*(K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12))) + K_20*(K_12*(-2e-09*K_12-4e-09*K_11)-2e-09*K_11*K_11));
    G[656] = -2e-09*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[657] = 1e-05*K_10*det*(K_10 + K_11 + K_12);
    G[658] = -0.001*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[659] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_11*(-0.001*K_11-0.002*K_10) + K_12*(-0.001*K_12-0.002*(K_10 + K_11))-0.001*K_10*K_10);
    G[660] = 0.0025*K_20*det*(K_10 + K_11 + K_12);
    G[661] = -0.002*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[662] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_11*(-0.002*K_11-0.004*K_10) + K_12*(-0.002*K_12-0.004*(K_10 + K_11))-0.002*K_10*K_10);
    G[663] = 0.005*K_20*det*(K_10 + K_11 + K_12);
    G[664] = 3e-06*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[665] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(3e-06*K_10*K_10 + K_11*(3e-06*K_11 + 6e-06*K_10) + K_12*(3e-06*K_12 + 6e-06*(K_10 + K_11)));
    G[666] = -0.005005*K_20*det*(K_10 + K_11 + K_12);
    G[667] = -2e-09*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[668] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_11*(-2e-09*K_11-4e-09*K_10) + K_12*(-2e-09*K_12-4e-09*(K_10 + K_11))-2e-09*K_10*K_10);
    G[669] = 1e-05*K_20*det*(K_10 + K_11 + K_12);
    G[670] = -0.001*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[671] = -0.002*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[672] = 3e-06*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[673] = -2e-09*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[674] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_12*(-0.001*K_12-0.002*K_10)-0.001*K_10*K_10) + K_11*(K_01*(-0.002*K_11-0.003*(K_10 + K_12))-0.001*(K_00*(K_10 + K_11 + K_12) + K_02*(K_10 + K_11 + K_12))));
    G[675] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_12*(-0.002*K_12-0.004*K_10)-0.002*K_10*K_10) + K_11*(K_01*(-0.004*K_11-0.006*(K_10 + K_12))-0.002*(K_00*(K_10 + K_11 + K_12) + K_02*(K_10 + K_11 + K_12))));
    G[676] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(3e-06*K_10*K_10 + K_12*(3e-06*K_12 + 6e-06*K_10)) + K_11*(3e-06*(K_00*(K_10 + K_11 + K_12) + K_02*(K_10 + K_11 + K_12)) + K_01*(6e-06*K_11 + 9e-06*(K_10 + K_12))));
    G[677] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_12*(-2e-09*K_12-4e-09*K_10)-2e-09*K_10*K_10) + K_11*(K_01*(-4e-09*K_11-6e-09*(K_10 + K_12))-2e-09*(K_00*(K_10 + K_11 + K_12) + K_02*(K_10 + K_11 + K_12))));
    G[678] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.001*(K_01*(K_20*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)) + K_21*(K_00*(K_10 + K_11 + K_12) + K_02*(K_10 + K_11 + K_12)))-0.002*K_01*K_21*(K_10 + K_11 + K_12));
    G[679] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_11*(-0.001*K_11-0.002*K_10) + K_12*(-0.001*K_12-0.002*(K_10 + K_11))-0.001*K_10*K_10);
    G[680] = 0.0025*K_01*det*(K_10 + K_11 + K_12);
    G[681] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.002*(K_01*(K_20*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)) + K_21*(K_00*(K_10 + K_11 + K_12) + K_02*(K_10 + K_11 + K_12)))-0.004*K_01*K_21*(K_10 + K_11 + K_12));
    G[682] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_11*(-0.002*K_11-0.004*K_10) + K_12*(-0.002*K_12-0.004*(K_10 + K_11))-0.002*K_10*K_10);
    G[683] = 0.005*K_01*det*(K_10 + K_11 + K_12);
    G[684] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(3e-06*(K_01*(K_20*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)) + K_21*(K_00*(K_10 + K_11 + K_12) + K_02*(K_10 + K_11 + K_12))) + 6e-06*K_01*K_21*(K_10 + K_11 + K_12));
    G[685] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(3e-06*K_10*K_10 + K_11*(3e-06*K_11 + 6e-06*K_10) + K_12*(3e-06*K_12 + 6e-06*(K_10 + K_11)));
    G[686] = -0.005005*K_01*det*(K_10 + K_11 + K_12);
    G[687] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-2e-09*(K_01*(K_20*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)) + K_21*(K_00*(K_10 + K_11 + K_12) + K_02*(K_10 + K_11 + K_12)))-4e-09*K_01*K_21*(K_10 + K_11 + K_12));
    G[688] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_11*(-2e-09*K_11-4e-09*K_10) + K_12*(-2e-09*K_12-4e-09*(K_10 + K_11))-2e-09*K_10*K_10);
    G[689] = 1e-05*K_01*det*(K_10 + K_11 + K_12);
    G[690] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_11*(-0.001*K_11-0.002*K_10) + K_12*(-0.001*K_12-0.002*(K_10 + K_11))-0.001*K_10*K_10);
    G[691] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_11*(-0.002*K_11-0.004*K_10) + K_12*(-0.002*K_12-0.004*(K_10 + K_11))-0.002*K_10*K_10);
    G[692] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(3e-06*K_10*K_10 + K_11*(3e-06*K_11 + 6e-06*K_10) + K_12*(3e-06*K_12 + 6e-06*(K_10 + K_11)));
    G[693] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_11*(-2e-09*K_11-4e-09*K_10) + K_12*(-2e-09*K_12-4e-09*(K_10 + K_11))-2e-09*K_10*K_10);
    G[694] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(K_21*(-0.002*K_11-0.003*(K_10 + K_12))-0.001*(K_20*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12))) + K_21*(K_12*(-0.001*K_12-0.002*K_10)-0.001*K_10*K_10));
    G[695] = -0.001*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[696] = 0.0025*K_11*det*(K_10 + K_11 + K_12);
    G[697] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(K_21*(-0.004*K_11-0.006*(K_10 + K_12))-0.002*(K_20*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12))) + K_21*(K_12*(-0.002*K_12-0.004*K_10)-0.002*K_10*K_10));
    G[698] = -0.002*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[699] = 0.005*K_11*det*(K_10 + K_11 + K_12);
    G[700] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(3e-06*(K_20*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)) + K_21*(6e-06*K_11 + 9e-06*(K_10 + K_12))) + K_21*(3e-06*K_10*K_10 + K_12*(3e-06*K_12 + 6e-06*K_10)));
    G[701] = 3e-06*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[702] = -0.005005*K_11*det*(K_10 + K_11 + K_12);
    G[703] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(K_21*(-4e-09*K_11-6e-09*(K_10 + K_12))-2e-09*(K_20*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12))) + K_21*(K_12*(-2e-09*K_12-4e-09*K_10)-2e-09*K_10*K_10));
    G[704] = -2e-09*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[705] = 1e-05*K_11*det*(K_10 + K_11 + K_12);
    G[706] = -0.001*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[707] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_11*(-0.001*K_11-0.002*K_10) + K_12*(-0.001*K_12-0.002*(K_10 + K_11))-0.001*K_10*K_10);
    G[708] = 0.0025*K_21*det*(K_10 + K_11 + K_12);
    G[709] = -0.002*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[710] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_11*(-0.002*K_11-0.004*K_10) + K_12*(-0.002*K_12-0.004*(K_10 + K_11))-0.002*K_10*K_10);
    G[711] = 0.005*K_21*det*(K_10 + K_11 + K_12);
    G[712] = 3e-06*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[713] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(3e-06*K_10*K_10 + K_11*(3e-06*K_11 + 6e-06*K_10) + K_12*(3e-06*K_12 + 6e-06*(K_10 + K_11)));
    G[714] = -0.005005*K_21*det*(K_10 + K_11 + K_12);
    G[715] = -2e-09*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[716] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_11*(-2e-09*K_11-4e-09*K_10) + K_12*(-2e-09*K_12-4e-09*(K_10 + K_11))-2e-09*K_10*K_10);
    G[717] = 1e-05*K_21*det*(K_10 + K_11 + K_12);
    G[718] = det*w[4][0]*(0.03*std::pow(w[2][0], 0.5)*w[2][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02))-0.01*std::pow(w[2][0], 1.5)*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02)));
    G[719] = det*w[4][0]*(0.04*std::pow(w[2][0], 0.5)*w[2][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02))-0.02*std::pow(w[2][0], 1.5)*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02)));
    G[720] = det*w[4][0]*(3e-05*std::pow(w[2][0], 1.5)*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02))-6e-05*std::pow(w[2][0], 0.5)*w[2][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02)));
    G[721] = det*w[4][0]*(0.01*std::pow(w[2][0], 0.5)*w[2][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02))-0.01*std::pow(w[2][0], 1.5)*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02)));
    G[722] = det*w[4][0]*(3e-05*std::pow(w[2][0], 1.5)*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02))-3e-05*std::pow(w[2][0], 0.5)*w[2][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02)));
    G[723] = det*w[4][0]*(2e-08*std::pow(w[2][0], 0.5)*w[2][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02))-2e-08*std::pow(w[2][0], 1.5)*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02)));
    G[724] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.03*K_10*K_10 + K_11*(0.03*K_11 + 0.06*K_10) + K_12*(0.03*K_12 + 0.06*(K_10 + K_11))) + std::pow(w[2][0], 1.5)*(K_11*(-0.01*K_11-0.02*K_10) + K_12*(-0.01*K_12-0.02*(K_10 + K_11))-0.01*K_10*K_10));
    G[725] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.04*K_10*K_10 + K_11*(0.04*K_11 + 0.08*K_10) + K_12*(0.04*K_12 + 0.08*(K_10 + K_11))) + std::pow(w[2][0], 1.5)*(K_11*(-0.02*K_11-0.04*K_10) + K_12*(-0.02*K_12-0.04*(K_10 + K_11))-0.02*K_10*K_10));
    G[726] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(K_11*(-0.00012*K_10-6e-05*K_11) + K_12*(-0.00012*(K_10 + K_11)-6e-05*K_12)-6e-05*K_10*K_10) + std::pow(w[2][0], 1.5)*(3e-05*K_10*K_10 + K_11*(3e-05*K_11 + 6e-05*K_10) + K_12*(3e-05*K_12 + 6e-05*(K_10 + K_11))));
    G[727] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.01*K_10*K_10 + K_11*(0.01*K_11 + 0.02*K_10) + K_12*(0.01*K_12 + 0.02*(K_10 + K_11))) + std::pow(w[2][0], 1.5)*(K_11*(-0.01*K_11-0.02*K_10) + K_12*(-0.01*K_12-0.02*(K_10 + K_11))-0.01*K_10*K_10));
    G[728] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(K_11*(-3e-05*K_11-6e-05*K_10) + K_12*(-3e-05*K_12-6e-05*(K_10 + K_11))-3e-05*K_10*K_10) + std::pow(w[2][0], 1.5)*(3e-05*K_10*K_10 + K_11*(3e-05*K_11 + 6e-05*K_10) + K_12*(3e-05*K_12 + 6e-05*(K_10 + K_11))));
    G[729] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(2e-08*K_10*K_10 + K_11*(2e-08*K_11 + 4e-08*K_10) + K_12*(2e-08*K_12 + 4e-08*(K_10 + K_11))) + std::pow(w[2][0], 1.5)*(K_11*(-2e-08*K_11-4e-08*K_10) + K_12*(-2e-08*K_12-4e-08*(K_10 + K_11))-2e-08*K_10*K_10));
    G[730] = det*w[4][0]*(0.02*std::pow(w[2][0], 0.5)*w[2][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02))-0.01*std::pow(w[2][0], 1.5)*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02)));
    G[731] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.02*K_10*K_10 + K_11*(0.02*K_11 + 0.04*K_10) + K_12*(0.02*K_12 + 0.04*(K_10 + K_11))) + std::pow(w[2][0], 1.5)*(K_11*(-0.01*K_11-0.02*K_10) + K_12*(-0.01*K_12-0.02*(K_10 + K_11))-0.01*K_10*K_10));
    G[732] = det*w[4][0]*(0.02*std::pow(w[2][0], 0.5)*w[2][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02))-0.02*std::pow(w[2][0], 1.5)*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02)));
    G[733] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.02*K_10*K_10 + K_11*(0.02*K_11 + 0.04*K_10) + K_12*(0.02*K_12 + 0.04*(K_10 + K_11))) + std::pow(w[2][0], 1.5)*(K_11*(-0.02*K_11-0.04*K_10) + K_12*(-0.02*K_12-0.04*(K_10 + K_11))-0.02*K_10*K_10));
    G[734] = -0.01*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[735] = std::pow(w[2][0], 1.5)*det*w[4][0]*(K_11*(-0.01*K_11-0.02*K_10) + K_12*(-0.01*K_12-0.02*(K_10 + K_11))-0.01*K_10*K_10);
    G[736] = 3e-05*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[737] = std::pow(w[2][0], 1.5)*det*w[4][0]*(3e-05*K_10*K_10 + K_11*(3e-05*K_11 + 6e-05*K_10) + K_12*(3e-05*K_12 + 6e-05*(K_10 + K_11)));
    G[738] = -2e-08*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[739] = std::pow(w[2][0], 1.5)*det*w[4][0]*(K_11*(-2e-08*K_11-4e-08*K_10) + K_12*(-2e-08*K_12-4e-08*(K_10 + K_11))-2e-08*K_10*K_10);
    G[740] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_10*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_11 + K_12));
    G[741] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)) + 5e-06*K_00*K_10);
    G[742] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_11*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_10 + K_12));
    G[743] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)) + 5e-06*K_01*K_11);
    G[744] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_12*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_10 + K_11));
    G[745] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)) + 5e-06*K_02*K_12);
    G[746] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_10*(-0.0025*K_01-0.00375*K_00-0.00625*K_02)-0.00125*K_00*(K_11 + K_12))-0.00375*K_02*K_10*(K_10 + K_11));
    G[747] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(5e-06*K_02*K_10*(K_10 + K_11) + K_12*(2.5e-06*K_00*(K_11 + K_12) + K_10*(2.5e-06*K_01 + 5e-06*K_00 + 7.5e-06*K_02)));
    G[748] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_11*(-0.0025*K_00-0.00375*K_01-0.00625*K_02)-0.00125*K_01*(K_10 + K_12))-0.00375*K_02*K_11*(K_10 + K_11));
    G[749] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(5e-06*K_02*K_11*(K_10 + K_11) + K_12*(2.5e-06*K_01*(K_10 + K_12) + K_11*(2.5e-06*K_00 + 5e-06*K_01 + 7.5e-06*K_02)));
    G[750] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_12*(-0.0025*(K_00 + K_01)-0.0075*K_02)-0.005*K_02*(K_10 + K_11));
    G[751] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(7.5e-06*K_02*(K_10 + K_11) + K_12*(1e-05*K_02 + 2.5e-06*(K_00 + K_01)));
    G[752] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_20*(-0.00125*(K_11 + K_12)-0.00375*K_10)-0.0025*K_10*K_21) + K_22*(K_10*(-0.0025*K_01-0.00375*K_00-0.005*K_02)-0.00125*K_00*(K_11 + K_12)));
    G[753] = -0.00375*std::pow(w[2][0], 0.5)*K_02*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[754] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_11 + K_12)-0.00375*K_10)-0.0025*K_10*(K_21 + K_22));
    G[755] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_10*K_21 + K_20*(K_11 + K_12)) + K_22*(K_00*(K_11 + K_12) + K_01*K_10)) + 5e-06*K_10*(K_02*K_20 + K_22*(K_00 + K_02)));
    G[756] = 5e-06*std::pow(w[2][0], 0.5)*K_02*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[757] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_21*(-0.00125*(K_10 + K_12)-0.00375*K_11)-0.0025*K_11*K_20) + K_22*(K_11*(-0.0025*K_00-0.00375*K_01-0.005*K_02)-0.00125*K_01*(K_10 + K_12)));
    G[758] = -0.00375*std::pow(w[2][0], 0.5)*K_02*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[759] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_10 + K_12)-0.00375*K_11)-0.0025*K_11*(K_20 + K_22));
    G[760] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_11*K_20 + K_21*(K_10 + K_12)) + K_22*(K_00*K_11 + K_01*(K_10 + K_12))) + 5e-06*K_11*(K_02*K_21 + K_22*(K_01 + K_02)));
    G[761] = 5e-06*std::pow(w[2][0], 0.5)*K_02*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[762] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.0025*(K_02*K_12*(K_20 + K_21) + K_22*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)))-0.0075*K_02*K_12*K_22);
    G[763] = -0.00375*std::pow(w[2][0], 0.5)*K_02*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[764] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_10 + K_11)-0.00375*K_12)-0.0025*K_12*(K_20 + K_21));
    G[765] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*K_02*K_12*(K_20 + K_21) + K_22*(5e-06*K_02*(K_10 + K_11) + K_12*(1e-05*K_02 + 2.5e-06*(K_00 + K_01))));
    G[766] = 5e-06*std::pow(w[2][0], 0.5)*K_02*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[767] = -0.00375*std::pow(w[2][0], 0.5)*K_10*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[768] = 5e-06*std::pow(w[2][0], 0.5)*K_10*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[769] = -0.00375*std::pow(w[2][0], 0.5)*K_11*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[770] = 5e-06*std::pow(w[2][0], 0.5)*K_11*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[771] = -0.00375*std::pow(w[2][0], 0.5)*K_12*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[772] = 5e-06*std::pow(w[2][0], 0.5)*K_12*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[773] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_10*(-0.0025*K_21-0.00625*K_22) + K_20*(-0.00125*(K_11 + K_12)-0.00375*K_10))-0.00375*K_10*K_22*(K_10 + K_11));
    G[774] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_10*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_11 + K_12));
    G[775] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_11 + K_12)-0.00375*K_10)-0.0025*K_10*(K_21 + K_22));
    G[776] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(5e-06*K_10*K_22*(K_10 + K_11) + K_12*(K_10*(2.5e-06*K_21 + 7.5e-06*K_22) + K_20*(2.5e-06*(K_11 + K_12) + 5e-06*K_10)));
    G[777] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)) + 5e-06*K_00*K_10);
    G[778] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_11*(-0.0025*K_20-0.00625*K_22) + K_21*(-0.00125*(K_10 + K_12)-0.00375*K_11))-0.00375*K_11*K_22*(K_10 + K_11));
    G[779] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_11*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_10 + K_12));
    G[780] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_10 + K_12)-0.00375*K_11)-0.0025*K_11*(K_20 + K_22));
    G[781] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(5e-06*K_11*K_22*(K_10 + K_11) + K_12*(K_11*(2.5e-06*K_20 + 7.5e-06*K_22) + K_21*(2.5e-06*(K_10 + K_12) + 5e-06*K_11)));
    G[782] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)) + 5e-06*K_01*K_11);
    G[783] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_22*(-0.005*(K_10 + K_11)-0.0075*K_12)-0.0025*K_12*(K_20 + K_21));
    G[784] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_12*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_10 + K_11));
    G[785] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_10 + K_11)-0.00375*K_12)-0.0025*K_12*(K_20 + K_21));
    G[786] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(2.5e-06*K_12*(K_20 + K_21) + K_22*(1e-05*K_12 + 7.5e-06*(K_10 + K_11)));
    G[787] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)) + 5e-06*K_02*K_12);
    G[788] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_11 + K_12)-0.00375*K_10)-0.0025*K_10*(K_21 + K_22));
    G[789] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_10*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_11 + K_12));
    G[790] = -0.00375*std::pow(w[2][0], 0.5)*K_10*K_22*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[791] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)) + 5e-06*K_00*K_10);
    G[792] = 5e-06*std::pow(w[2][0], 0.5)*K_10*K_22*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[793] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_10 + K_12)-0.00375*K_11)-0.0025*K_11*(K_20 + K_22));
    G[794] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_11*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_10 + K_12));
    G[795] = -0.00375*std::pow(w[2][0], 0.5)*K_11*K_22*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[796] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)) + 5e-06*K_01*K_11);
    G[797] = 5e-06*std::pow(w[2][0], 0.5)*K_11*K_22*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[798] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_10 + K_11)-0.00375*K_12)-0.0025*K_12*(K_20 + K_21));
    G[799] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_12*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_10 + K_11));
    G[800] = -0.00375*std::pow(w[2][0], 0.5)*K_12*K_22*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[801] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)) + 5e-06*K_02*K_12);
    G[802] = 5e-06*std::pow(w[2][0], 0.5)*K_12*K_22*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[803] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_10*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_11 + K_12));
    G[804] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)) + 5e-06*K_00*K_10);
    G[805] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_11*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_10 + K_12));
    G[806] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)) + 5e-06*K_01*K_11);
    G[807] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_12*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_10 + K_11));
    G[808] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)) + 5e-06*K_02*K_12);
    G[809] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_10*(-0.0025*(K_01 + K_02)-0.0075*K_00)-0.005*K_00*(K_11 + K_12));
    G[810] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(7.5e-06*K_00*(K_11 + K_12) + K_10*(1e-05*K_00 + 2.5e-06*(K_01 + K_02)));
    G[811] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(K_10*(-0.0025*K_02-0.00375*K_01-0.00625*K_00)-0.00375*K_00*(K_11 + K_12))-0.00125*K_01*K_10*(K_10 + K_12));
    G[812] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*K_01*K_10*(K_10 + K_12) + K_11*(5e-06*K_00*(K_11 + K_12) + K_10*(2.5e-06*K_02 + 5e-06*K_01 + 7.5e-06*K_00)));
    G[813] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_10*(-0.0025*K_01-0.00375*K_02-0.00625*K_00)-0.00375*K_00*(K_11 + K_12))-0.00125*K_02*K_10*(K_10 + K_11));
    G[814] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*K_02*K_10*(K_10 + K_11) + K_12*(5e-06*K_00*(K_11 + K_12) + K_10*(2.5e-06*K_01 + 5e-06*K_02 + 7.5e-06*K_00)));
    G[815] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.0025*(K_00*K_10*(K_21 + K_22) + K_20*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)))-0.0075*K_00*K_10*K_20);
    G[816] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[817] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_11 + K_12)-0.00375*K_10)-0.0025*K_10*(K_21 + K_22));
    G[818] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*K_00*K_10*(K_21 + K_22) + K_20*(5e-06*K_00*(K_11 + K_12) + K_10*(1e-05*K_00 + 2.5e-06*(K_01 + K_02))));
    G[819] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[820] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(K_21*(-0.00125*(K_10 + K_12)-0.00375*K_11)-0.0025*K_11*K_22) + K_20*(K_11*(-0.0025*K_02-0.00375*K_01-0.005*K_00)-0.00125*K_01*(K_10 + K_12)));
    G[821] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[822] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_10 + K_12)-0.00375*K_11)-0.0025*K_11*(K_20 + K_22));
    G[823] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_11*K_22 + K_21*(K_10 + K_12)) + K_20*(K_01*(K_10 + K_12) + K_02*K_11)) + 5e-06*K_11*(K_00*K_21 + K_20*(K_00 + K_01)));
    G[824] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[825] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(K_22*(-0.00125*(K_10 + K_11)-0.00375*K_12)-0.0025*K_12*K_21) + K_20*(K_12*(-0.0025*K_01-0.00375*K_02-0.005*K_00)-0.00125*K_02*(K_10 + K_11)));
    G[826] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[827] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_10 + K_11)-0.00375*K_12)-0.0025*K_12*(K_20 + K_21));
    G[828] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_12*K_21 + K_22*(K_10 + K_11)) + K_20*(K_01*K_12 + K_02*(K_10 + K_11))) + 5e-06*K_12*(K_00*K_22 + K_20*(K_00 + K_02)));
    G[829] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[830] = -0.00375*std::pow(w[2][0], 0.5)*K_10*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[831] = 5e-06*std::pow(w[2][0], 0.5)*K_10*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[832] = -0.00375*std::pow(w[2][0], 0.5)*K_10*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[833] = 5e-06*std::pow(w[2][0], 0.5)*K_10*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[834] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(-0.005*(K_11 + K_12)-0.0075*K_10)-0.0025*K_10*(K_21 + K_22));
    G[835] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_10*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_11 + K_12));
    G[836] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_11 + K_12)-0.00375*K_10)-0.0025*K_10*(K_21 + K_22));
    G[837] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(2.5e-06*K_10*(K_21 + K_22) + K_20*(1e-05*K_10 + 7.5e-06*(K_11 + K_12)));
    G[838] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)) + 5e-06*K_00*K_10);
    G[839] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(K_10*(-0.0025*K_22-0.00375*K_21) + K_20*(-0.00375*(K_11 + K_12)-0.00625*K_10))-0.00125*K_10*K_21*(K_10 + K_12));
    G[840] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_11*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_10 + K_12));
    G[841] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_10 + K_12)-0.00375*K_11)-0.0025*K_11*(K_20 + K_22));
    G[842] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*K_10*K_21*(K_10 + K_12) + K_11*(K_10*(2.5e-06*K_22 + 5e-06*K_21) + K_20*(5e-06*(K_11 + K_12) + 7.5e-06*K_10)));
    G[843] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)) + 5e-06*K_01*K_11);
    G[844] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_10*(-0.0025*K_21-0.00375*K_22) + K_20*(-0.00375*(K_11 + K_12)-0.00625*K_10))-0.00125*K_10*K_22*(K_10 + K_11));
    G[845] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_12*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_10 + K_11));
    G[846] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_10 + K_11)-0.00375*K_12)-0.0025*K_12*(K_20 + K_21));
    G[847] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*K_10*K_22*(K_10 + K_11) + K_12*(K_10*(2.5e-06*K_21 + 5e-06*K_22) + K_20*(5e-06*(K_11 + K_12) + 7.5e-06*K_10)));
    G[848] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)) + 5e-06*K_02*K_12);
    G[849] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_11 + K_12)-0.00375*K_10)-0.0025*K_10*(K_21 + K_22));
    G[850] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_10*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_11 + K_12));
    G[851] = -0.00375*std::pow(w[2][0], 0.5)*K_10*K_20*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[852] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)) + 5e-06*K_00*K_10);
    G[853] = 5e-06*std::pow(w[2][0], 0.5)*K_10*K_20*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[854] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_10 + K_12)-0.00375*K_11)-0.0025*K_11*(K_20 + K_22));
    G[855] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_11*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_10 + K_12));
    G[856] = -0.00375*std::pow(w[2][0], 0.5)*K_11*K_20*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[857] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)) + 5e-06*K_01*K_11);
    G[858] = 5e-06*std::pow(w[2][0], 0.5)*K_11*K_20*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[859] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_10 + K_11)-0.00375*K_12)-0.0025*K_12*(K_20 + K_21));
    G[860] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_12*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_10 + K_11));
    G[861] = -0.00375*std::pow(w[2][0], 0.5)*K_12*K_20*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[862] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)) + 5e-06*K_02*K_12);
    G[863] = 5e-06*std::pow(w[2][0], 0.5)*K_12*K_20*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[864] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_10*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_11 + K_12));
    G[865] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)) + 5e-06*K_00*K_10);
    G[866] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_11*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_10 + K_12));
    G[867] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)) + 5e-06*K_01*K_11);
    G[868] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_12*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_10 + K_11));
    G[869] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)) + 5e-06*K_02*K_12);
    G[870] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(K_10*(-0.0025*K_02-0.00375*K_00-0.00625*K_01)-0.00125*K_00*(K_11 + K_12))-0.00375*K_01*K_10*(K_10 + K_12));
    G[871] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(5e-06*K_01*K_10*(K_10 + K_12) + K_11*(2.5e-06*K_00*(K_11 + K_12) + K_10*(2.5e-06*K_02 + 5e-06*K_00 + 7.5e-06*K_01)));
    G[872] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_11*(-0.0025*(K_00 + K_02)-0.0075*K_01)-0.005*K_01*(K_10 + K_12));
    G[873] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(7.5e-06*K_01*(K_10 + K_12) + K_11*(1e-05*K_01 + 2.5e-06*(K_00 + K_02)));
    G[874] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_11*(-0.0025*K_00-0.00375*K_02-0.00625*K_01)-0.00375*K_01*(K_10 + K_12))-0.00125*K_02*K_11*(K_10 + K_11));
    G[875] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*K_02*K_11*(K_10 + K_11) + K_12*(5e-06*K_01*(K_10 + K_12) + K_11*(2.5e-06*K_00 + 5e-06*K_02 + 7.5e-06*K_01)));
    G[876] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_20*(-0.00125*(K_11 + K_12)-0.00375*K_10)-0.0025*K_10*K_22) + K_21*(K_10*(-0.0025*K_02-0.00375*K_00-0.005*K_01)-0.00125*K_00*(K_11 + K_12)));
    G[877] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[878] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_11 + K_12)-0.00375*K_10)-0.0025*K_10*(K_21 + K_22));
    G[879] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_10*K_22 + K_20*(K_11 + K_12)) + K_21*(K_00*(K_11 + K_12) + K_02*K_10)) + 5e-06*K_10*(K_01*K_20 + K_21*(K_00 + K_01)));
    G[880] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[881] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.0025*(K_01*K_11*(K_20 + K_22) + K_21*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)))-0.0075*K_01*K_11*K_21);
    G[882] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[883] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_10 + K_12)-0.00375*K_11)-0.0025*K_11*(K_20 + K_22));
    G[884] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*K_01*K_11*(K_20 + K_22) + K_21*(5e-06*K_01*(K_10 + K_12) + K_11*(1e-05*K_01 + 2.5e-06*(K_00 + K_02))));
    G[885] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[886] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_22*(-0.00125*(K_10 + K_11)-0.00375*K_12)-0.0025*K_12*K_20) + K_21*(K_12*(-0.0025*K_00-0.00375*K_02-0.005*K_01)-0.00125*K_02*(K_10 + K_11)));
    G[887] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[888] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_10 + K_11)-0.00375*K_12)-0.0025*K_12*(K_20 + K_21));
    G[889] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_12*K_20 + K_22*(K_10 + K_11)) + K_21*(K_00*K_12 + K_02*(K_10 + K_11))) + 5e-06*K_12*(K_01*K_22 + K_21*(K_01 + K_02)));
    G[890] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[891] = -0.00375*std::pow(w[2][0], 0.5)*K_11*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[892] = 5e-06*std::pow(w[2][0], 0.5)*K_11*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[893] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(K_10*(-0.0025*K_22-0.00625*K_21) + K_20*(-0.00125*(K_11 + K_12)-0.00375*K_10))-0.00375*K_10*K_21*(K_10 + K_12));
    G[894] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_10*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_11 + K_12));
    G[895] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_11 + K_12)-0.00375*K_10)-0.0025*K_10*(K_21 + K_22));
    G[896] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(5e-06*K_10*K_21*(K_10 + K_12) + K_11*(K_10*(2.5e-06*K_22 + 7.5e-06*K_21) + K_20*(2.5e-06*(K_11 + K_12) + 5e-06*K_10)));
    G[897] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)) + 5e-06*K_00*K_10);
    G[898] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_21*(-0.005*(K_10 + K_12)-0.0075*K_11)-0.0025*K_11*(K_20 + K_22));
    G[899] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_11*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_10 + K_12));
    G[900] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_10 + K_12)-0.00375*K_11)-0.0025*K_11*(K_20 + K_22));
    G[901] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(2.5e-06*K_11*(K_20 + K_22) + K_21*(1e-05*K_11 + 7.5e-06*(K_10 + K_12)));
    G[902] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)) + 5e-06*K_01*K_11);
    G[903] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_11*(-0.0025*K_20-0.00375*K_22) + K_21*(-0.00375*(K_10 + K_12)-0.00625*K_11))-0.00125*K_11*K_22*(K_10 + K_11));
    G[904] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_12*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_10 + K_11));
    G[905] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_10 + K_11)-0.00375*K_12)-0.0025*K_12*(K_20 + K_21));
    G[906] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*K_11*K_22*(K_10 + K_11) + K_12*(K_11*(2.5e-06*K_20 + 5e-06*K_22) + K_21*(5e-06*(K_10 + K_12) + 7.5e-06*K_11)));
    G[907] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)) + 5e-06*K_02*K_12);
    G[908] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_11 + K_12)-0.00375*K_10)-0.0025*K_10*(K_21 + K_22));
    G[909] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_10*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_11 + K_12));
    G[910] = -0.00375*std::pow(w[2][0], 0.5)*K_10*K_21*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[911] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(2.5e-06*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)) + 5e-06*K_00*K_10);
    G[912] = 5e-06*std::pow(w[2][0], 0.5)*K_10*K_21*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[913] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_10 + K_12)-0.00375*K_11)-0.0025*K_11*(K_20 + K_22));
    G[914] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_11*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_10 + K_12));
    G[915] = -0.00375*std::pow(w[2][0], 0.5)*K_11*K_21*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[916] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(2.5e-06*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)) + 5e-06*K_01*K_11);
    G[917] = 5e-06*std::pow(w[2][0], 0.5)*K_11*K_21*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[918] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_10 + K_11)-0.00375*K_12)-0.0025*K_12*(K_20 + K_21));
    G[919] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_12*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_10 + K_11));
    G[920] = -0.00375*std::pow(w[2][0], 0.5)*K_12*K_21*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[921] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(2.5e-06*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)) + 5e-06*K_02*K_12);
    G[922] = 5e-06*std::pow(w[2][0], 0.5)*K_12*K_21*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[923] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.05*K_00*(K_11 + K_12) + K_10*(0.1*(K_01 + K_02) + 0.15*K_00)) + std::pow(w[2][0], 1.5)*(K_10*(-0.05*(K_01 + K_02)-0.075*K_00)-0.025*K_00*(K_11 + K_12)));
    G[924] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.025*K_00*(K_11 + K_12) + K_10*(0.05*(K_01 + K_02) + 0.075*K_00)) + std::pow(w[2][0], 1.5)*(K_10*(-0.05*(K_01 + K_02)-0.075*K_00)-0.025*K_00*(K_11 + K_12)));
    G[925] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(-0.0001*K_00*K_10-5e-05*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))) + std::pow(w[2][0], 1.5)*(0.0001*K_00*K_10 + 5e-05*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))));
    G[926] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.05*K_01*(K_10 + K_12) + K_11*(0.1*(K_00 + K_02) + 0.15*K_01)) + std::pow(w[2][0], 1.5)*(K_11*(-0.05*(K_00 + K_02)-0.075*K_01)-0.025*K_01*(K_10 + K_12)));
    G[927] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.025*K_01*(K_10 + K_12) + K_11*(0.05*(K_00 + K_02) + 0.075*K_01)) + std::pow(w[2][0], 1.5)*(K_11*(-0.05*(K_00 + K_02)-0.075*K_01)-0.025*K_01*(K_10 + K_12)));
    G[928] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(-0.0001*K_01*K_11-5e-05*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))) + std::pow(w[2][0], 1.5)*(0.0001*K_01*K_11 + 5e-05*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))));
    G[929] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.05*K_02*(K_10 + K_11) + K_12*(0.1*(K_00 + K_01) + 0.15*K_02)) + std::pow(w[2][0], 1.5)*(K_12*(-0.05*(K_00 + K_01)-0.075*K_02)-0.025*K_02*(K_10 + K_11)));
    G[930] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.025*K_02*(K_10 + K_11) + K_12*(0.05*(K_00 + K_01) + 0.075*K_02)) + std::pow(w[2][0], 1.5)*(K_12*(-0.05*(K_00 + K_01)-0.075*K_02)-0.025*K_02*(K_10 + K_11)));
    G[931] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(-0.0001*K_02*K_12-5e-05*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01))) + std::pow(w[2][0], 1.5)*(0.0001*K_02*K_12 + 5e-05*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01))));
    G[932] = K_10*det*w[4][0]*(0.15*std::pow(w[2][0], 0.5)*w[2][0]*(K_10 + K_11 + K_12)-0.075*std::pow(w[2][0], 1.5)*(K_10 + K_11 + K_12));
    G[933] = K_10*det*w[4][0]*(0.075*std::pow(w[2][0], 0.5)*w[2][0]*(K_10 + K_11 + K_12)-0.075*std::pow(w[2][0], 1.5)*(K_10 + K_11 + K_12));
    G[934] = K_10*det*w[4][0]*(0.0001*std::pow(w[2][0], 1.5)*(K_10 + K_11 + K_12)-0.0001*std::pow(w[2][0], 0.5)*w[2][0]*(K_10 + K_11 + K_12));
    G[935] = K_11*det*w[4][0]*(0.15*std::pow(w[2][0], 0.5)*w[2][0]*(K_10 + K_11 + K_12)-0.075*std::pow(w[2][0], 1.5)*(K_10 + K_11 + K_12));
    G[936] = K_11*det*w[4][0]*(0.075*std::pow(w[2][0], 0.5)*w[2][0]*(K_10 + K_11 + K_12)-0.075*std::pow(w[2][0], 1.5)*(K_10 + K_11 + K_12));
    G[937] = K_11*det*w[4][0]*(0.0001*std::pow(w[2][0], 1.5)*(K_10 + K_11 + K_12)-0.0001*std::pow(w[2][0], 0.5)*w[2][0]*(K_10 + K_11 + K_12));
    G[938] = K_12*det*w[4][0]*(0.15*std::pow(w[2][0], 0.5)*w[2][0]*(K_10 + K_11 + K_12)-0.075*std::pow(w[2][0], 1.5)*(K_10 + K_11 + K_12));
    G[939] = K_12*det*w[4][0]*(0.075*std::pow(w[2][0], 0.5)*w[2][0]*(K_10 + K_11 + K_12)-0.075*std::pow(w[2][0], 1.5)*(K_10 + K_11 + K_12));
    G[940] = K_12*det*w[4][0]*(0.0001*std::pow(w[2][0], 1.5)*(K_10 + K_11 + K_12)-0.0001*std::pow(w[2][0], 0.5)*w[2][0]*(K_10 + K_11 + K_12));
    G[941] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.1*K_10*(K_21 + K_22) + K_20*(0.05*(K_11 + K_12) + 0.15*K_10)) + std::pow(w[2][0], 1.5)*(K_20*(-0.025*(K_11 + K_12)-0.075*K_10)-0.05*K_10*(K_21 + K_22)));
    G[942] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.05*K_10*(K_21 + K_22) + K_20*(0.025*(K_11 + K_12) + 0.075*K_10)) + std::pow(w[2][0], 1.5)*(K_20*(-0.025*(K_11 + K_12)-0.075*K_10)-0.05*K_10*(K_21 + K_22)));
    G[943] = std::pow(w[2][0], 1.5)*det*w[4][0]*(K_10*(-0.05*(K_01 + K_02)-0.075*K_00)-0.025*K_00*(K_11 + K_12));
    G[944] = -0.075*std::pow(w[2][0], 1.5)*K_10*det*w[4][0]*(K_10 + K_11 + K_12);
    G[945] = std::pow(w[2][0], 1.5)*det*w[4][0]*(K_20*(-0.025*(K_11 + K_12)-0.075*K_10)-0.05*K_10*(K_21 + K_22));
    G[946] = std::pow(w[2][0], 1.5)*det*w[4][0]*(0.0001*K_00*K_10 + 5e-05*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)));
    G[947] = 0.0001*std::pow(w[2][0], 1.5)*K_10*det*w[4][0]*(K_10 + K_11 + K_12);
    G[948] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.1*K_11*(K_20 + K_22) + K_21*(0.05*(K_10 + K_12) + 0.15*K_11)) + std::pow(w[2][0], 1.5)*(K_21*(-0.025*(K_10 + K_12)-0.075*K_11)-0.05*K_11*(K_20 + K_22)));
    G[949] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.05*K_11*(K_20 + K_22) + K_21*(0.025*(K_10 + K_12) + 0.075*K_11)) + std::pow(w[2][0], 1.5)*(K_21*(-0.025*(K_10 + K_12)-0.075*K_11)-0.05*K_11*(K_20 + K_22)));
    G[950] = std::pow(w[2][0], 1.5)*det*w[4][0]*(K_11*(-0.05*(K_00 + K_02)-0.075*K_01)-0.025*K_01*(K_10 + K_12));
    G[951] = -0.075*std::pow(w[2][0], 1.5)*K_11*det*w[4][0]*(K_10 + K_11 + K_12);
    G[952] = std::pow(w[2][0], 1.5)*det*w[4][0]*(K_21*(-0.025*(K_10 + K_12)-0.075*K_11)-0.05*K_11*(K_20 + K_22));
    G[953] = std::pow(w[2][0], 1.5)*det*w[4][0]*(0.0001*K_01*K_11 + 5e-05*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)));
    G[954] = 0.0001*std::pow(w[2][0], 1.5)*K_11*det*w[4][0]*(K_10 + K_11 + K_12);
    G[955] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.1*K_12*(K_20 + K_21) + K_22*(0.05*(K_10 + K_11) + 0.15*K_12)) + std::pow(w[2][0], 1.5)*(K_22*(-0.025*(K_10 + K_11)-0.075*K_12)-0.05*K_12*(K_20 + K_21)));
    G[956] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.05*K_12*(K_20 + K_21) + K_22*(0.025*(K_10 + K_11) + 0.075*K_12)) + std::pow(w[2][0], 1.5)*(K_22*(-0.025*(K_10 + K_11)-0.075*K_12)-0.05*K_12*(K_20 + K_21)));
    G[957] = std::pow(w[2][0], 1.5)*det*w[4][0]*(K_12*(-0.05*(K_00 + K_01)-0.075*K_02)-0.025*K_02*(K_10 + K_11));
    G[958] = -0.075*std::pow(w[2][0], 1.5)*K_12*det*w[4][0]*(K_10 + K_11 + K_12);
    G[959] = std::pow(w[2][0], 1.5)*det*w[4][0]*(K_22*(-0.025*(K_10 + K_11)-0.075*K_12)-0.05*K_12*(K_20 + K_21));
    G[960] = std::pow(w[2][0], 1.5)*det*w[4][0]*(0.0001*K_02*K_12 + 5e-05*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)));
    G[961] = 0.0001*std::pow(w[2][0], 1.5)*K_12*det*w[4][0]*(K_10 + K_11 + K_12);
    G[962] = -0.05*det*(K_10 + K_11 + K_12);
    G[963] = 0.0;
    G[964] = 0.0;
    G[965] = 0.05*det*(K_10 + K_11 + K_12);
    G[966] = -0.1001*det*(K_10 + K_11 + K_12);
    G[967] = 0.0002*det*(K_10 + K_11 + K_12);
    G[968] = det*w[6][0]*(0.5*std::pow(w[2][0], 0.5)*w[2][0]*(K_00*K_00 + K_01*K_01 + K_02*K_02)-0.5*std::pow(w[2][0], 1.5)*(K_00*K_00 + K_01*K_01 + K_02*K_02));
    G[969] = -0.5*det*(std::pow(w[2][0], 1.5)*w[6][0]*(K_00*K_00 + K_01*K_01 + K_02*K_02) + w[10][0]*w[2][0]*w[2][0]*w[5][0]*(K_00*K_00 + K_01*K_01 + K_02*K_02));
    G[970] = K_00*K_00*det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]-0.125*std::pow(w[2][0], 1.5));
    G[971] = K_00*K_01*det*w[4][0]*(0.25*std::pow(w[2][0], 0.5)*w[2][0]-0.25*std::pow(w[2][0], 1.5));
    G[972] = K_00*K_02*det*w[4][0]*(0.25*std::pow(w[2][0], 0.5)*w[2][0]-0.25*std::pow(w[2][0], 1.5));
    G[973] = K_00*K_00*det*w[4][0]*(0.25*std::pow(w[2][0], 0.5)*w[2][0]-0.25*std::pow(w[2][0], 1.5));
    G[974] = K_01*K_01*det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]-0.125*std::pow(w[2][0], 1.5));
    G[975] = K_01*K_02*det*w[4][0]*(0.25*std::pow(w[2][0], 0.5)*w[2][0]-0.25*std::pow(w[2][0], 1.5));
    G[976] = K_01*K_01*det*w[4][0]*(0.25*std::pow(w[2][0], 0.5)*w[2][0]-0.25*std::pow(w[2][0], 1.5));
    G[977] = K_02*K_02*det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]-0.125*std::pow(w[2][0], 1.5));
    G[978] = K_02*K_02*det*w[4][0]*(0.25*std::pow(w[2][0], 0.5)*w[2][0]-0.25*std::pow(w[2][0], 1.5));
    G[979] = -0.125*std::pow(w[2][0], 1.5)*K_00*K_00*det*w[4][0];
    G[980] = -0.25*std::pow(w[2][0], 1.5)*K_00*K_01*det*w[4][0];
    G[981] = -0.25*std::pow(w[2][0], 1.5)*K_00*K_02*det*w[4][0];
    G[982] = -0.25*std::pow(w[2][0], 1.5)*K_00*K_00*det*w[4][0];
    G[983] = -0.125*std::pow(w[2][0], 1.5)*K_01*K_01*det*w[4][0];
    G[984] = -0.25*std::pow(w[2][0], 1.5)*K_01*K_02*det*w[4][0];
    G[985] = -0.25*std::pow(w[2][0], 1.5)*K_01*K_01*det*w[4][0];
    G[986] = -0.125*std::pow(w[2][0], 1.5)*K_02*K_02*det*w[4][0];
    G[987] = -0.25*std::pow(w[2][0], 1.5)*K_02*K_02*det*w[4][0];
    G[988] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_01*(-0.001*K_01-0.002*K_00) + K_02*(-0.001*K_02-0.002*(K_00 + K_01))-0.001*K_00*K_00);
    G[989] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_01*(-0.002*K_01-0.004*K_00) + K_02*(-0.002*K_02-0.004*(K_00 + K_01))-0.002*K_00*K_00);
    G[990] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(3e-06*K_00*K_00 + K_01*(3e-06*K_01 + 6e-06*K_00) + K_02*(3e-06*K_02 + 6e-06*(K_00 + K_01)));
    G[991] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_01*(-2e-09*K_01-4e-09*K_00) + K_02*(-2e-09*K_02-4e-09*(K_00 + K_01))-2e-09*K_00*K_00);
    G[992] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_12*(-0.002*K_02-0.003*(K_00 + K_01))-0.001*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02))) + K_12*(K_01*(-0.001*K_01-0.002*K_00)-0.001*K_00*K_00));
    G[993] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_12*(-0.004*K_02-0.006*(K_00 + K_01))-0.002*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02))) + K_12*(K_01*(-0.002*K_01-0.004*K_00)-0.002*K_00*K_00));
    G[994] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(3e-06*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02)) + K_12*(6e-06*K_02 + 9e-06*(K_00 + K_01))) + K_12*(3e-06*K_00*K_00 + K_01*(3e-06*K_01 + 6e-06*K_00)));
    G[995] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_12*(-4e-09*K_02-6e-09*(K_00 + K_01))-2e-09*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02))) + K_12*(K_01*(-2e-09*K_01-4e-09*K_00)-2e-09*K_00*K_00));
    G[996] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_22*(-0.002*K_02-0.003*(K_00 + K_01))-0.001*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02))) + K_22*(K_01*(-0.001*K_01-0.002*K_00)-0.001*K_00*K_00));
    G[997] = 0.0025*K_02*det*(K_00 + K_01 + K_02);
    G[998] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_22*(-0.004*K_02-0.006*(K_00 + K_01))-0.002*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02))) + K_22*(K_01*(-0.002*K_01-0.004*K_00)-0.002*K_00*K_00));
    G[999] = 0.005*K_02*det*(K_00 + K_01 + K_02);
    G[1000] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(3e-06*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02)) + K_22*(6e-06*K_02 + 9e-06*(K_00 + K_01))) + K_22*(3e-06*K_00*K_00 + K_01*(3e-06*K_01 + 6e-06*K_00)));
    G[1001] = -0.005005*K_02*det*(K_00 + K_01 + K_02);
    G[1002] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_22*(-4e-09*K_02-6e-09*(K_00 + K_01))-2e-09*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02))) + K_22*(K_01*(-2e-09*K_01-4e-09*K_00)-2e-09*K_00*K_00));
    G[1003] = 1e-05*K_02*det*(K_00 + K_01 + K_02);
    G[1004] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.001*(K_12*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02)) + K_22*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02)))-0.002*K_12*K_22*(K_00 + K_01 + K_02));
    G[1005] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_01*(-0.001*K_01-0.002*K_00) + K_02*(-0.001*K_02-0.002*(K_00 + K_01))-0.001*K_00*K_00);
    G[1006] = 0.0025*K_12*det*(K_00 + K_01 + K_02);
    G[1007] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.002*(K_12*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02)) + K_22*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02)))-0.004*K_12*K_22*(K_00 + K_01 + K_02));
    G[1008] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_01*(-0.002*K_01-0.004*K_00) + K_02*(-0.002*K_02-0.004*(K_00 + K_01))-0.002*K_00*K_00);
    G[1009] = 0.005*K_12*det*(K_00 + K_01 + K_02);
    G[1010] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(3e-06*(K_12*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02)) + K_22*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02))) + 6e-06*K_12*K_22*(K_00 + K_01 + K_02));
    G[1011] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(3e-06*K_00*K_00 + K_01*(3e-06*K_01 + 6e-06*K_00) + K_02*(3e-06*K_02 + 6e-06*(K_00 + K_01)));
    G[1012] = -0.005005*K_12*det*(K_00 + K_01 + K_02);
    G[1013] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-2e-09*(K_12*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02)) + K_22*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02)))-4e-09*K_12*K_22*(K_00 + K_01 + K_02));
    G[1014] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_01*(-2e-09*K_01-4e-09*K_00) + K_02*(-2e-09*K_02-4e-09*(K_00 + K_01))-2e-09*K_00*K_00);
    G[1015] = 1e-05*K_12*det*(K_00 + K_01 + K_02);
    G[1016] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_01*(-0.001*K_01-0.002*K_00) + K_02*(-0.001*K_02-0.002*(K_00 + K_01))-0.001*K_00*K_00);
    G[1017] = 0.0025*K_22*det*(K_00 + K_01 + K_02);
    G[1018] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_01*(-0.002*K_01-0.004*K_00) + K_02*(-0.002*K_02-0.004*(K_00 + K_01))-0.002*K_00*K_00);
    G[1019] = 0.005*K_22*det*(K_00 + K_01 + K_02);
    G[1020] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(3e-06*K_00*K_00 + K_01*(3e-06*K_01 + 6e-06*K_00) + K_02*(3e-06*K_02 + 6e-06*(K_00 + K_01)));
    G[1021] = -0.005005*K_22*det*(K_00 + K_01 + K_02);
    G[1022] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_01*(-2e-09*K_01-4e-09*K_00) + K_02*(-2e-09*K_02-4e-09*(K_00 + K_01))-2e-09*K_00*K_00);
    G[1023] = 1e-05*K_22*det*(K_00 + K_01 + K_02);
    G[1024] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_01*(-0.001*K_01-0.002*K_00) + K_02*(-0.001*K_02-0.002*(K_00 + K_01))-0.001*K_00*K_00);
    G[1025] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_01*(-0.002*K_01-0.004*K_00) + K_02*(-0.002*K_02-0.004*(K_00 + K_01))-0.002*K_00*K_00);
    G[1026] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(3e-06*K_00*K_00 + K_01*(3e-06*K_01 + 6e-06*K_00) + K_02*(3e-06*K_02 + 6e-06*(K_00 + K_01)));
    G[1027] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_01*(-2e-09*K_01-4e-09*K_00) + K_02*(-2e-09*K_02-4e-09*(K_00 + K_01))-2e-09*K_00*K_00);
    G[1028] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(K_10*(-0.002*K_00-0.003*(K_01 + K_02))-0.001*(K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02))) + K_10*(K_02*(-0.001*K_02-0.002*K_01)-0.001*K_01*K_01));
    G[1029] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(K_10*(-0.004*K_00-0.006*(K_01 + K_02))-0.002*(K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02))) + K_10*(K_02*(-0.002*K_02-0.004*K_01)-0.002*K_01*K_01));
    G[1030] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(3e-06*(K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02)) + K_10*(6e-06*K_00 + 9e-06*(K_01 + K_02))) + K_10*(3e-06*K_01*K_01 + K_02*(3e-06*K_02 + 6e-06*K_01)));
    G[1031] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(K_10*(-4e-09*K_00-6e-09*(K_01 + K_02))-2e-09*(K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02))) + K_10*(K_02*(-2e-09*K_02-4e-09*K_01)-2e-09*K_01*K_01));
    G[1032] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(K_20*(-0.002*K_00-0.003*(K_01 + K_02))-0.001*(K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02))) + K_20*(K_02*(-0.001*K_02-0.002*K_01)-0.001*K_01*K_01));
    G[1033] = 0.0025*K_00*det*(K_00 + K_01 + K_02);
    G[1034] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(K_20*(-0.004*K_00-0.006*(K_01 + K_02))-0.002*(K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02))) + K_20*(K_02*(-0.002*K_02-0.004*K_01)-0.002*K_01*K_01));
    G[1035] = 0.005*K_00*det*(K_00 + K_01 + K_02);
    G[1036] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(3e-06*(K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)) + K_20*(6e-06*K_00 + 9e-06*(K_01 + K_02))) + K_20*(3e-06*K_01*K_01 + K_02*(3e-06*K_02 + 6e-06*K_01)));
    G[1037] = -0.005005*K_00*det*(K_00 + K_01 + K_02);
    G[1038] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(K_20*(-4e-09*K_00-6e-09*(K_01 + K_02))-2e-09*(K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02))) + K_20*(K_02*(-2e-09*K_02-4e-09*K_01)-2e-09*K_01*K_01));
    G[1039] = 1e-05*K_00*det*(K_00 + K_01 + K_02);
    G[1040] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.001*(K_10*(K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)) + K_20*(K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02)))-0.002*K_10*K_20*(K_00 + K_01 + K_02));
    G[1041] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_01*(-0.001*K_01-0.002*K_00) + K_02*(-0.001*K_02-0.002*(K_00 + K_01))-0.001*K_00*K_00);
    G[1042] = 0.0025*K_10*det*(K_00 + K_01 + K_02);
    G[1043] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.002*(K_10*(K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)) + K_20*(K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02)))-0.004*K_10*K_20*(K_00 + K_01 + K_02));
    G[1044] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_01*(-0.002*K_01-0.004*K_00) + K_02*(-0.002*K_02-0.004*(K_00 + K_01))-0.002*K_00*K_00);
    G[1045] = 0.005*K_10*det*(K_00 + K_01 + K_02);
    G[1046] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(3e-06*(K_10*(K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)) + K_20*(K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02))) + 6e-06*K_10*K_20*(K_00 + K_01 + K_02));
    G[1047] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(3e-06*K_00*K_00 + K_01*(3e-06*K_01 + 6e-06*K_00) + K_02*(3e-06*K_02 + 6e-06*(K_00 + K_01)));
    G[1048] = -0.005005*K_10*det*(K_00 + K_01 + K_02);
    G[1049] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-2e-09*(K_10*(K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)) + K_20*(K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02)))-4e-09*K_10*K_20*(K_00 + K_01 + K_02));
    G[1050] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_01*(-2e-09*K_01-4e-09*K_00) + K_02*(-2e-09*K_02-4e-09*(K_00 + K_01))-2e-09*K_00*K_00);
    G[1051] = 1e-05*K_10*det*(K_00 + K_01 + K_02);
    G[1052] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_01*(-0.001*K_01-0.002*K_00) + K_02*(-0.001*K_02-0.002*(K_00 + K_01))-0.001*K_00*K_00);
    G[1053] = 0.0025*K_20*det*(K_00 + K_01 + K_02);
    G[1054] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_01*(-0.002*K_01-0.004*K_00) + K_02*(-0.002*K_02-0.004*(K_00 + K_01))-0.002*K_00*K_00);
    G[1055] = 0.005*K_20*det*(K_00 + K_01 + K_02);
    G[1056] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(3e-06*K_00*K_00 + K_01*(3e-06*K_01 + 6e-06*K_00) + K_02*(3e-06*K_02 + 6e-06*(K_00 + K_01)));
    G[1057] = -0.005005*K_20*det*(K_00 + K_01 + K_02);
    G[1058] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_01*(-2e-09*K_01-4e-09*K_00) + K_02*(-2e-09*K_02-4e-09*(K_00 + K_01))-2e-09*K_00*K_00);
    G[1059] = 1e-05*K_20*det*(K_00 + K_01 + K_02);
    G[1060] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_01*(-0.001*K_01-0.002*K_00) + K_02*(-0.001*K_02-0.002*(K_00 + K_01))-0.001*K_00*K_00);
    G[1061] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_01*(-0.002*K_01-0.004*K_00) + K_02*(-0.002*K_02-0.004*(K_00 + K_01))-0.002*K_00*K_00);
    G[1062] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(3e-06*K_00*K_00 + K_01*(3e-06*K_01 + 6e-06*K_00) + K_02*(3e-06*K_02 + 6e-06*(K_00 + K_01)));
    G[1063] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_01*(-2e-09*K_01-4e-09*K_00) + K_02*(-2e-09*K_02-4e-09*(K_00 + K_01))-2e-09*K_00*K_00);
    G[1064] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_11*(-0.002*K_01-0.003*(K_00 + K_02))-0.001*(K_10*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02))) + K_11*(K_02*(-0.001*K_02-0.002*K_00)-0.001*K_00*K_00));
    G[1065] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_11*(-0.004*K_01-0.006*(K_00 + K_02))-0.002*(K_10*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02))) + K_11*(K_02*(-0.002*K_02-0.004*K_00)-0.002*K_00*K_00));
    G[1066] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(3e-06*(K_10*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02)) + K_11*(6e-06*K_01 + 9e-06*(K_00 + K_02))) + K_11*(3e-06*K_00*K_00 + K_02*(3e-06*K_02 + 6e-06*K_00)));
    G[1067] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_11*(-4e-09*K_01-6e-09*(K_00 + K_02))-2e-09*(K_10*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02))) + K_11*(K_02*(-2e-09*K_02-4e-09*K_00)-2e-09*K_00*K_00));
    G[1068] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_21*(-0.002*K_01-0.003*(K_00 + K_02))-0.001*(K_20*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02))) + K_21*(K_02*(-0.001*K_02-0.002*K_00)-0.001*K_00*K_00));
    G[1069] = 0.0025*K_01*det*(K_00 + K_01 + K_02);
    G[1070] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_21*(-0.004*K_01-0.006*(K_00 + K_02))-0.002*(K_20*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02))) + K_21*(K_02*(-0.002*K_02-0.004*K_00)-0.002*K_00*K_00));
    G[1071] = 0.005*K_01*det*(K_00 + K_01 + K_02);
    G[1072] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(3e-06*(K_20*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)) + K_21*(6e-06*K_01 + 9e-06*(K_00 + K_02))) + K_21*(3e-06*K_00*K_00 + K_02*(3e-06*K_02 + 6e-06*K_00)));
    G[1073] = -0.005005*K_01*det*(K_00 + K_01 + K_02);
    G[1074] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_21*(-4e-09*K_01-6e-09*(K_00 + K_02))-2e-09*(K_20*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02))) + K_21*(K_02*(-2e-09*K_02-4e-09*K_00)-2e-09*K_00*K_00));
    G[1075] = 1e-05*K_01*det*(K_00 + K_01 + K_02);
    G[1076] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.001*(K_11*(K_20*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)) + K_21*(K_10*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02)))-0.002*K_11*K_21*(K_00 + K_01 + K_02));
    G[1077] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_01*(-0.001*K_01-0.002*K_00) + K_02*(-0.001*K_02-0.002*(K_00 + K_01))-0.001*K_00*K_00);
    G[1078] = 0.0025*K_11*det*(K_00 + K_01 + K_02);
    G[1079] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.002*(K_11*(K_20*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)) + K_21*(K_10*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02)))-0.004*K_11*K_21*(K_00 + K_01 + K_02));
    G[1080] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_01*(-0.002*K_01-0.004*K_00) + K_02*(-0.002*K_02-0.004*(K_00 + K_01))-0.002*K_00*K_00);
    G[1081] = 0.005*K_11*det*(K_00 + K_01 + K_02);
    G[1082] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(3e-06*(K_11*(K_20*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)) + K_21*(K_10*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02))) + 6e-06*K_11*K_21*(K_00 + K_01 + K_02));
    G[1083] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(3e-06*K_00*K_00 + K_01*(3e-06*K_01 + 6e-06*K_00) + K_02*(3e-06*K_02 + 6e-06*(K_00 + K_01)));
    G[1084] = -0.005005*K_11*det*(K_00 + K_01 + K_02);
    G[1085] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-2e-09*(K_11*(K_20*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)) + K_21*(K_10*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02)))-4e-09*K_11*K_21*(K_00 + K_01 + K_02));
    G[1086] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_01*(-2e-09*K_01-4e-09*K_00) + K_02*(-2e-09*K_02-4e-09*(K_00 + K_01))-2e-09*K_00*K_00);
    G[1087] = 1e-05*K_11*det*(K_00 + K_01 + K_02);
    G[1088] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_01*(-0.001*K_01-0.002*K_00) + K_02*(-0.001*K_02-0.002*(K_00 + K_01))-0.001*K_00*K_00);
    G[1089] = 0.0025*K_21*det*(K_00 + K_01 + K_02);
    G[1090] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_01*(-0.002*K_01-0.004*K_00) + K_02*(-0.002*K_02-0.004*(K_00 + K_01))-0.002*K_00*K_00);
    G[1091] = 0.005*K_21*det*(K_00 + K_01 + K_02);
    G[1092] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(3e-06*K_00*K_00 + K_01*(3e-06*K_01 + 6e-06*K_00) + K_02*(3e-06*K_02 + 6e-06*(K_00 + K_01)));
    G[1093] = -0.005005*K_21*det*(K_00 + K_01 + K_02);
    G[1094] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_01*(-2e-09*K_01-4e-09*K_00) + K_02*(-2e-09*K_02-4e-09*(K_00 + K_01))-2e-09*K_00*K_00);
    G[1095] = 1e-05*K_21*det*(K_00 + K_01 + K_02);
    G[1096] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.03*K_00*K_00 + K_01*(0.03*K_01 + 0.06*K_00) + K_02*(0.03*K_02 + 0.06*(K_00 + K_01))) + std::pow(w[2][0], 1.5)*(K_01*(-0.01*K_01-0.02*K_00) + K_02*(-0.01*K_02-0.02*(K_00 + K_01))-0.01*K_00*K_00));
    G[1097] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.04*K_00*K_00 + K_01*(0.04*K_01 + 0.08*K_00) + K_02*(0.04*K_02 + 0.08*(K_00 + K_01))) + std::pow(w[2][0], 1.5)*(K_01*(-0.02*K_01-0.04*K_00) + K_02*(-0.02*K_02-0.04*(K_00 + K_01))-0.02*K_00*K_00));
    G[1098] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(K_01*(-0.00012*K_00-6e-05*K_01) + K_02*(-0.00012*(K_00 + K_01)-6e-05*K_02)-6e-05*K_00*K_00) + std::pow(w[2][0], 1.5)*(3e-05*K_00*K_00 + K_01*(3e-05*K_01 + 6e-05*K_00) + K_02*(3e-05*K_02 + 6e-05*(K_00 + K_01))));
    G[1099] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.01*K_00*K_00 + K_01*(0.01*K_01 + 0.02*K_00) + K_02*(0.01*K_02 + 0.02*(K_00 + K_01))) + std::pow(w[2][0], 1.5)*(K_01*(-0.01*K_01-0.02*K_00) + K_02*(-0.01*K_02-0.02*(K_00 + K_01))-0.01*K_00*K_00));
    G[1100] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(K_01*(-3e-05*K_01-6e-05*K_00) + K_02*(-3e-05*K_02-6e-05*(K_00 + K_01))-3e-05*K_00*K_00) + std::pow(w[2][0], 1.5)*(3e-05*K_00*K_00 + K_01*(3e-05*K_01 + 6e-05*K_00) + K_02*(3e-05*K_02 + 6e-05*(K_00 + K_01))));
    G[1101] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(2e-08*K_00*K_00 + K_01*(2e-08*K_01 + 4e-08*K_00) + K_02*(2e-08*K_02 + 4e-08*(K_00 + K_01))) + std::pow(w[2][0], 1.5)*(K_01*(-2e-08*K_01-4e-08*K_00) + K_02*(-2e-08*K_02-4e-08*(K_00 + K_01))-2e-08*K_00*K_00));
    G[1102] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.02*K_00*K_00 + K_01*(0.02*K_01 + 0.04*K_00) + K_02*(0.02*K_02 + 0.04*(K_00 + K_01))) + std::pow(w[2][0], 1.5)*(K_01*(-0.01*K_01-0.02*K_00) + K_02*(-0.01*K_02-0.02*(K_00 + K_01))-0.01*K_00*K_00));
    G[1103] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.02*K_00*K_00 + K_01*(0.02*K_01 + 0.04*K_00) + K_02*(0.02*K_02 + 0.04*(K_00 + K_01))) + std::pow(w[2][0], 1.5)*(K_01*(-0.02*K_01-0.04*K_00) + K_02*(-0.02*K_02-0.04*(K_00 + K_01))-0.02*K_00*K_00));
    G[1104] = std::pow(w[2][0], 1.5)*det*w[4][0]*(K_01*(-0.01*K_01-0.02*K_00) + K_02*(-0.01*K_02-0.02*(K_00 + K_01))-0.01*K_00*K_00);
    G[1105] = std::pow(w[2][0], 1.5)*det*w[4][0]*(3e-05*K_00*K_00 + K_01*(3e-05*K_01 + 6e-05*K_00) + K_02*(3e-05*K_02 + 6e-05*(K_00 + K_01)));
    G[1106] = std::pow(w[2][0], 1.5)*det*w[4][0]*(K_01*(-2e-08*K_01-4e-08*K_00) + K_02*(-2e-08*K_02-4e-08*(K_00 + K_01))-2e-08*K_00*K_00);
    G[1107] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_02*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1108] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_02*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1109] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_02*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1110] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_02*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1111] = -0.00375*std::pow(w[2][0], 0.5)*K_02*K_02*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1112] = 5e-06*std::pow(w[2][0], 0.5)*K_02*K_02*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1113] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_00*(-0.0025*K_11-0.00625*K_12) + K_10*(-0.00125*(K_01 + K_02)-0.00375*K_00))-0.00375*K_00*K_12*(K_00 + K_01));
    G[1114] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(5e-06*K_00*K_12*(K_00 + K_01) + K_02*(K_00*(2.5e-06*K_11 + 7.5e-06*K_12) + K_10*(2.5e-06*(K_01 + K_02) + 5e-06*K_00)));
    G[1115] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_01*(-0.0025*K_10-0.00625*K_12) + K_11*(-0.00125*(K_00 + K_02)-0.00375*K_01))-0.00375*K_01*K_12*(K_00 + K_01));
    G[1116] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(5e-06*K_01*K_12*(K_00 + K_01) + K_02*(K_01*(2.5e-06*K_10 + 7.5e-06*K_12) + K_11*(2.5e-06*(K_00 + K_02) + 5e-06*K_01)));
    G[1117] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_12*(-0.005*(K_00 + K_01)-0.0075*K_02)-0.0025*K_02*(K_10 + K_11));
    G[1118] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(2.5e-06*K_02*(K_10 + K_11) + K_12*(1e-05*K_02 + 7.5e-06*(K_00 + K_01)));
    G[1119] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_00*(-0.0025*K_21-0.00625*K_22) + K_20*(-0.00125*(K_01 + K_02)-0.00375*K_00))-0.00375*K_00*K_22*(K_00 + K_01));
    G[1120] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_10*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_11 + K_12));
    G[1121] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_21 + K_22));
    G[1122] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(5e-06*K_00*K_22*(K_00 + K_01) + K_02*(K_00*(2.5e-06*K_21 + 7.5e-06*K_22) + K_20*(2.5e-06*(K_01 + K_02) + 5e-06*K_00)));
    G[1123] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_01*(-0.0025*K_20-0.00625*K_22) + K_21*(-0.00125*(K_00 + K_02)-0.00375*K_01))-0.00375*K_01*K_22*(K_00 + K_01));
    G[1124] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_11*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_10 + K_12));
    G[1125] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_20 + K_22));
    G[1126] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(5e-06*K_01*K_22*(K_00 + K_01) + K_02*(K_01*(2.5e-06*K_20 + 7.5e-06*K_22) + K_21*(2.5e-06*(K_00 + K_02) + 5e-06*K_01)));
    G[1127] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_22*(-0.005*(K_00 + K_01)-0.0075*K_02)-0.0025*K_02*(K_20 + K_21));
    G[1128] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_12*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_10 + K_11));
    G[1129] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_20 + K_21));
    G[1130] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(2.5e-06*K_02*(K_20 + K_21) + K_22*(1e-05*K_02 + 7.5e-06*(K_00 + K_01)));
    G[1131] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_10*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_11 + K_12));
    G[1132] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_11*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_10 + K_12));
    G[1133] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_12*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_10 + K_11));
    G[1134] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_20*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*K_21) + K_22*(K_00*(-0.0025*K_11-0.005*K_12) + K_10*(-0.00125*(K_01 + K_02)-0.00375*K_00)));
    G[1135] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_12*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1136] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_21 + K_22));
    G[1137] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*(K_12*(K_00*K_21 + K_20*(K_01 + K_02)) + K_22*(K_00*K_11 + K_10*(K_01 + K_02))) + 5e-06*K_00*(K_12*K_20 + K_22*(K_10 + K_12)));
    G[1138] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_12*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1139] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_21*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*K_20) + K_22*(K_01*(-0.0025*K_10-0.005*K_12) + K_11*(-0.00125*(K_00 + K_02)-0.00375*K_01)));
    G[1140] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_12*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1141] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_20 + K_22));
    G[1142] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*(K_12*(K_01*K_20 + K_21*(K_00 + K_02)) + K_22*(K_01*K_10 + K_11*(K_00 + K_02))) + 5e-06*K_01*(K_12*K_21 + K_22*(K_11 + K_12)));
    G[1143] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_12*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1144] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.0025*(K_02*K_12*(K_20 + K_21) + K_22*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)))-0.0075*K_02*K_12*K_22);
    G[1145] = -0.00375*std::pow(w[2][0], 0.5)*K_02*K_12*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1146] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_20 + K_21));
    G[1147] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*K_02*K_12*(K_20 + K_21) + K_22*(2.5e-06*K_02*(K_10 + K_11) + K_12*(1e-05*K_02 + 5e-06*(K_00 + K_01))));
    G[1148] = 5e-06*std::pow(w[2][0], 0.5)*K_02*K_12*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1149] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_21 + K_22));
    G[1150] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_22*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1151] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_10*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_11 + K_12));
    G[1152] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_22*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1153] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_20 + K_22));
    G[1154] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_22*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1155] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_11*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_10 + K_12));
    G[1156] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_22*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1157] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_20 + K_21));
    G[1158] = -0.00375*std::pow(w[2][0], 0.5)*K_02*K_22*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1159] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_12*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_10 + K_11));
    G[1160] = 5e-06*std::pow(w[2][0], 0.5)*K_02*K_22*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1161] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_00*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1162] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_00*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1163] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_01*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1164] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_01*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1165] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_10*(-0.005*(K_01 + K_02)-0.0075*K_00)-0.0025*K_00*(K_11 + K_12));
    G[1166] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(2.5e-06*K_00*(K_11 + K_12) + K_10*(1e-05*K_00 + 7.5e-06*(K_01 + K_02)));
    G[1167] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_00*(-0.0025*K_12-0.00375*K_11) + K_10*(-0.00375*(K_01 + K_02)-0.00625*K_00))-0.00125*K_00*K_11*(K_00 + K_02));
    G[1168] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*K_00*K_11*(K_00 + K_02) + K_01*(K_00*(2.5e-06*K_12 + 5e-06*K_11) + K_10*(5e-06*(K_01 + K_02) + 7.5e-06*K_00)));
    G[1169] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_00*(-0.0025*K_11-0.00375*K_12) + K_10*(-0.00375*(K_01 + K_02)-0.00625*K_00))-0.00125*K_00*K_12*(K_00 + K_01));
    G[1170] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*K_00*K_12*(K_00 + K_01) + K_02*(K_00*(2.5e-06*K_11 + 5e-06*K_12) + K_10*(5e-06*(K_01 + K_02) + 7.5e-06*K_00)));
    G[1171] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(-0.005*(K_01 + K_02)-0.0075*K_00)-0.0025*K_00*(K_21 + K_22));
    G[1172] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_10*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_11 + K_12));
    G[1173] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_21 + K_22));
    G[1174] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(2.5e-06*K_00*(K_21 + K_22) + K_20*(1e-05*K_00 + 7.5e-06*(K_01 + K_02)));
    G[1175] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_00*(-0.0025*K_22-0.00375*K_21) + K_20*(-0.00375*(K_01 + K_02)-0.00625*K_00))-0.00125*K_00*K_21*(K_00 + K_02));
    G[1176] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_11*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_10 + K_12));
    G[1177] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_20 + K_22));
    G[1178] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*K_00*K_21*(K_00 + K_02) + K_01*(K_00*(2.5e-06*K_22 + 5e-06*K_21) + K_20*(5e-06*(K_01 + K_02) + 7.5e-06*K_00)));
    G[1179] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_00*(-0.0025*K_21-0.00375*K_22) + K_20*(-0.00375*(K_01 + K_02)-0.00625*K_00))-0.00125*K_00*K_22*(K_00 + K_01));
    G[1180] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_12*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_10 + K_11));
    G[1181] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_20 + K_21));
    G[1182] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*K_00*K_22*(K_00 + K_01) + K_02*(K_00*(2.5e-06*K_21 + 5e-06*K_22) + K_20*(5e-06*(K_01 + K_02) + 7.5e-06*K_00)));
    G[1183] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_10*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_11 + K_12));
    G[1184] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_11*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_10 + K_12));
    G[1185] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_12*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_10 + K_11));
    G[1186] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.0025*(K_00*K_10*(K_21 + K_22) + K_20*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)))-0.0075*K_00*K_10*K_20);
    G[1187] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_10*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1188] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_21 + K_22));
    G[1189] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*K_00*K_10*(K_21 + K_22) + K_20*(2.5e-06*K_00*(K_11 + K_12) + K_10*(1e-05*K_00 + 5e-06*(K_01 + K_02))));
    G[1190] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_10*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1191] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_10*(K_21*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*K_22) + K_20*(K_01*(-0.0025*K_12-0.005*K_10) + K_11*(-0.00125*(K_00 + K_02)-0.00375*K_01)));
    G[1192] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_10*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1193] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_20 + K_22));
    G[1194] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*(K_10*(K_01*K_22 + K_21*(K_00 + K_02)) + K_20*(K_01*K_12 + K_11*(K_00 + K_02))) + 5e-06*K_01*(K_10*K_21 + K_20*(K_10 + K_11)));
    G[1195] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_10*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1196] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_10*(K_22*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*K_21) + K_20*(K_02*(-0.0025*K_11-0.005*K_10) + K_12*(-0.00125*(K_00 + K_01)-0.00375*K_02)));
    G[1197] = -0.00375*std::pow(w[2][0], 0.5)*K_02*K_10*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1198] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_20 + K_21));
    G[1199] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*(K_10*(K_02*K_21 + K_22*(K_00 + K_01)) + K_20*(K_02*K_11 + K_12*(K_00 + K_01))) + 5e-06*K_02*(K_10*K_22 + K_20*(K_10 + K_12)));
    G[1200] = 5e-06*std::pow(w[2][0], 0.5)*K_02*K_10*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1201] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_21 + K_22));
    G[1202] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_20*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1203] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_10*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_11 + K_12));
    G[1204] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_20*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1205] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_20 + K_22));
    G[1206] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_20*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1207] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_11*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_10 + K_12));
    G[1208] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_20*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1209] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_20 + K_21));
    G[1210] = -0.00375*std::pow(w[2][0], 0.5)*K_02*K_20*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1211] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_12*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_10 + K_11));
    G[1212] = 5e-06*std::pow(w[2][0], 0.5)*K_02*K_20*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1213] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_01*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1214] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_01*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1215] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_00*(-0.0025*K_12-0.00625*K_11) + K_10*(-0.00125*(K_01 + K_02)-0.00375*K_00))-0.00375*K_00*K_11*(K_00 + K_02));
    G[1216] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(5e-06*K_00*K_11*(K_00 + K_02) + K_01*(K_00*(2.5e-06*K_12 + 7.5e-06*K_11) + K_10*(2.5e-06*(K_01 + K_02) + 5e-06*K_00)));
    G[1217] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_11*(-0.005*(K_00 + K_02)-0.0075*K_01)-0.0025*K_01*(K_10 + K_12));
    G[1218] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(2.5e-06*K_01*(K_10 + K_12) + K_11*(1e-05*K_01 + 7.5e-06*(K_00 + K_02)));
    G[1219] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_01*(-0.0025*K_10-0.00375*K_12) + K_11*(-0.00375*(K_00 + K_02)-0.00625*K_01))-0.00125*K_01*K_12*(K_00 + K_01));
    G[1220] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*K_01*K_12*(K_00 + K_01) + K_02*(K_01*(2.5e-06*K_10 + 5e-06*K_12) + K_11*(5e-06*(K_00 + K_02) + 7.5e-06*K_01)));
    G[1221] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_00*(-0.0025*K_22-0.00625*K_21) + K_20*(-0.00125*(K_01 + K_02)-0.00375*K_00))-0.00375*K_00*K_21*(K_00 + K_02));
    G[1222] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_10*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_11 + K_12));
    G[1223] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_21 + K_22));
    G[1224] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(5e-06*K_00*K_21*(K_00 + K_02) + K_01*(K_00*(2.5e-06*K_22 + 7.5e-06*K_21) + K_20*(2.5e-06*(K_01 + K_02) + 5e-06*K_00)));
    G[1225] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_21*(-0.005*(K_00 + K_02)-0.0075*K_01)-0.0025*K_01*(K_20 + K_22));
    G[1226] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_11*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_10 + K_12));
    G[1227] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_20 + K_22));
    G[1228] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(2.5e-06*K_01*(K_20 + K_22) + K_21*(1e-05*K_01 + 7.5e-06*(K_00 + K_02)));
    G[1229] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_01*(-0.0025*K_20-0.00375*K_22) + K_21*(-0.00375*(K_00 + K_02)-0.00625*K_01))-0.00125*K_01*K_22*(K_00 + K_01));
    G[1230] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_12*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_10 + K_11));
    G[1231] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_20 + K_21));
    G[1232] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*K_01*K_22*(K_00 + K_01) + K_02*(K_01*(2.5e-06*K_20 + 5e-06*K_22) + K_21*(5e-06*(K_00 + K_02) + 7.5e-06*K_01)));
    G[1233] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_10*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_11 + K_12));
    G[1234] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_11*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_10 + K_12));
    G[1235] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_12*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_10 + K_11));
    G[1236] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(K_20*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*K_22) + K_21*(K_00*(-0.0025*K_12-0.005*K_11) + K_10*(-0.00125*(K_01 + K_02)-0.00375*K_00)));
    G[1237] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_11*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1238] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_21 + K_22));
    G[1239] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*(K_11*(K_00*K_22 + K_20*(K_01 + K_02)) + K_21*(K_00*K_12 + K_10*(K_01 + K_02))) + 5e-06*K_00*(K_11*K_20 + K_21*(K_10 + K_11)));
    G[1240] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_11*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1241] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.0025*(K_01*K_11*(K_20 + K_22) + K_21*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)))-0.0075*K_01*K_11*K_21);
    G[1242] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_11*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1243] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_20 + K_22));
    G[1244] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*K_01*K_11*(K_20 + K_22) + K_21*(2.5e-06*K_01*(K_10 + K_12) + K_11*(1e-05*K_01 + 5e-06*(K_00 + K_02))));
    G[1245] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_11*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1246] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(K_22*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*K_20) + K_21*(K_02*(-0.0025*K_10-0.005*K_11) + K_12*(-0.00125*(K_00 + K_01)-0.00375*K_02)));
    G[1247] = -0.00375*std::pow(w[2][0], 0.5)*K_02*K_11*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1248] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_20 + K_21));
    G[1249] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2.5e-06*(K_11*(K_02*K_20 + K_22*(K_00 + K_01)) + K_21*(K_02*K_10 + K_12*(K_00 + K_01))) + 5e-06*K_02*(K_11*K_22 + K_21*(K_11 + K_12)));
    G[1250] = 5e-06*std::pow(w[2][0], 0.5)*K_02*K_11*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1251] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_21 + K_22));
    G[1252] = -0.00375*std::pow(w[2][0], 0.5)*K_00*K_21*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1253] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_10*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_11 + K_12));
    G[1254] = 5e-06*std::pow(w[2][0], 0.5)*K_00*K_21*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1255] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_20 + K_22));
    G[1256] = -0.00375*std::pow(w[2][0], 0.5)*K_01*K_21*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1257] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_11*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_10 + K_12));
    G[1258] = 5e-06*std::pow(w[2][0], 0.5)*K_01*K_21*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1259] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_20 + K_21));
    G[1260] = -0.00375*std::pow(w[2][0], 0.5)*K_02*K_21*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1261] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_12*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_10 + K_11));
    G[1262] = 5e-06*std::pow(w[2][0], 0.5)*K_02*K_21*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1263] = K_00*det*w[4][0]*(0.15*std::pow(w[2][0], 0.5)*w[2][0]*(K_00 + K_01 + K_02)-0.075*std::pow(w[2][0], 1.5)*(K_00 + K_01 + K_02));
    G[1264] = K_00*det*w[4][0]*(0.075*std::pow(w[2][0], 0.5)*w[2][0]*(K_00 + K_01 + K_02)-0.075*std::pow(w[2][0], 1.5)*(K_00 + K_01 + K_02));
    G[1265] = K_00*det*w[4][0]*(0.0001*std::pow(w[2][0], 1.5)*(K_00 + K_01 + K_02)-0.0001*std::pow(w[2][0], 0.5)*w[2][0]*(K_00 + K_01 + K_02));
    G[1266] = K_01*det*w[4][0]*(0.15*std::pow(w[2][0], 0.5)*w[2][0]*(K_00 + K_01 + K_02)-0.075*std::pow(w[2][0], 1.5)*(K_00 + K_01 + K_02));
    G[1267] = K_01*det*w[4][0]*(0.075*std::pow(w[2][0], 0.5)*w[2][0]*(K_00 + K_01 + K_02)-0.075*std::pow(w[2][0], 1.5)*(K_00 + K_01 + K_02));
    G[1268] = K_01*det*w[4][0]*(0.0001*std::pow(w[2][0], 1.5)*(K_00 + K_01 + K_02)-0.0001*std::pow(w[2][0], 0.5)*w[2][0]*(K_00 + K_01 + K_02));
    G[1269] = K_02*det*w[4][0]*(0.15*std::pow(w[2][0], 0.5)*w[2][0]*(K_00 + K_01 + K_02)-0.075*std::pow(w[2][0], 1.5)*(K_00 + K_01 + K_02));
    G[1270] = K_02*det*w[4][0]*(0.075*std::pow(w[2][0], 0.5)*w[2][0]*(K_00 + K_01 + K_02)-0.075*std::pow(w[2][0], 1.5)*(K_00 + K_01 + K_02));
    G[1271] = K_02*det*w[4][0]*(0.0001*std::pow(w[2][0], 1.5)*(K_00 + K_01 + K_02)-0.0001*std::pow(w[2][0], 0.5)*w[2][0]*(K_00 + K_01 + K_02));
    G[1272] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.1*K_00*(K_11 + K_12) + K_10*(0.05*(K_01 + K_02) + 0.15*K_00)) + std::pow(w[2][0], 1.5)*(K_10*(-0.025*(K_01 + K_02)-0.075*K_00)-0.05*K_00*(K_11 + K_12)));
    G[1273] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.05*K_00*(K_11 + K_12) + K_10*(0.025*(K_01 + K_02) + 0.075*K_00)) + std::pow(w[2][0], 1.5)*(K_10*(-0.025*(K_01 + K_02)-0.075*K_00)-0.05*K_00*(K_11 + K_12)));
    G[1274] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.1*K_01*(K_10 + K_12) + K_11*(0.05*(K_00 + K_02) + 0.15*K_01)) + std::pow(w[2][0], 1.5)*(K_11*(-0.025*(K_00 + K_02)-0.075*K_01)-0.05*K_01*(K_10 + K_12)));
    G[1275] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.05*K_01*(K_10 + K_12) + K_11*(0.025*(K_00 + K_02) + 0.075*K_01)) + std::pow(w[2][0], 1.5)*(K_11*(-0.025*(K_00 + K_02)-0.075*K_01)-0.05*K_01*(K_10 + K_12)));
    G[1276] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.1*K_02*(K_10 + K_11) + K_12*(0.05*(K_00 + K_01) + 0.15*K_02)) + std::pow(w[2][0], 1.5)*(K_12*(-0.025*(K_00 + K_01)-0.075*K_02)-0.05*K_02*(K_10 + K_11)));
    G[1277] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.05*K_02*(K_10 + K_11) + K_12*(0.025*(K_00 + K_01) + 0.075*K_02)) + std::pow(w[2][0], 1.5)*(K_12*(-0.025*(K_00 + K_01)-0.075*K_02)-0.05*K_02*(K_10 + K_11)));
    G[1278] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.1*K_00*(K_21 + K_22) + K_20*(0.05*(K_01 + K_02) + 0.15*K_00)) + std::pow(w[2][0], 1.5)*(K_20*(-0.025*(K_01 + K_02)-0.075*K_00)-0.05*K_00*(K_21 + K_22)));
    G[1279] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.05*K_00*(K_21 + K_22) + K_20*(0.025*(K_01 + K_02) + 0.075*K_00)) + std::pow(w[2][0], 1.5)*(K_20*(-0.025*(K_01 + K_02)-0.075*K_00)-0.05*K_00*(K_21 + K_22)));
    G[1280] = -0.075*std::pow(w[2][0], 1.5)*K_00*det*w[4][0]*(K_00 + K_01 + K_02);
    G[1281] = std::pow(w[2][0], 1.5)*det*w[4][0]*(K_10*(-0.025*(K_01 + K_02)-0.075*K_00)-0.05*K_00*(K_11 + K_12));
    G[1282] = std::pow(w[2][0], 1.5)*det*w[4][0]*(K_20*(-0.025*(K_01 + K_02)-0.075*K_00)-0.05*K_00*(K_21 + K_22));
    G[1283] = 0.0001*std::pow(w[2][0], 1.5)*K_00*det*w[4][0]*(K_00 + K_01 + K_02);
    G[1284] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.1*K_01*(K_20 + K_22) + K_21*(0.05*(K_00 + K_02) + 0.15*K_01)) + std::pow(w[2][0], 1.5)*(K_21*(-0.025*(K_00 + K_02)-0.075*K_01)-0.05*K_01*(K_20 + K_22)));
    G[1285] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.05*K_01*(K_20 + K_22) + K_21*(0.025*(K_00 + K_02) + 0.075*K_01)) + std::pow(w[2][0], 1.5)*(K_21*(-0.025*(K_00 + K_02)-0.075*K_01)-0.05*K_01*(K_20 + K_22)));
    G[1286] = -0.075*std::pow(w[2][0], 1.5)*K_01*det*w[4][0]*(K_00 + K_01 + K_02);
    G[1287] = std::pow(w[2][0], 1.5)*det*w[4][0]*(K_11*(-0.025*(K_00 + K_02)-0.075*K_01)-0.05*K_01*(K_10 + K_12));
    G[1288] = std::pow(w[2][0], 1.5)*det*w[4][0]*(K_21*(-0.025*(K_00 + K_02)-0.075*K_01)-0.05*K_01*(K_20 + K_22));
    G[1289] = 0.0001*std::pow(w[2][0], 1.5)*K_01*det*w[4][0]*(K_00 + K_01 + K_02);
    G[1290] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.1*K_02*(K_20 + K_21) + K_22*(0.05*(K_00 + K_01) + 0.15*K_02)) + std::pow(w[2][0], 1.5)*(K_22*(-0.025*(K_00 + K_01)-0.075*K_02)-0.05*K_02*(K_20 + K_21)));
    G[1291] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.05*K_02*(K_20 + K_21) + K_22*(0.025*(K_00 + K_01) + 0.075*K_02)) + std::pow(w[2][0], 1.5)*(K_22*(-0.025*(K_00 + K_01)-0.075*K_02)-0.05*K_02*(K_20 + K_21)));
    G[1292] = -0.075*std::pow(w[2][0], 1.5)*K_02*det*w[4][0]*(K_00 + K_01 + K_02);
    G[1293] = std::pow(w[2][0], 1.5)*det*w[4][0]*(K_12*(-0.025*(K_00 + K_01)-0.075*K_02)-0.05*K_02*(K_10 + K_11));
    G[1294] = std::pow(w[2][0], 1.5)*det*w[4][0]*(K_22*(-0.025*(K_00 + K_01)-0.075*K_02)-0.05*K_02*(K_20 + K_21));
    G[1295] = 0.0001*std::pow(w[2][0], 1.5)*K_02*det*w[4][0]*(K_00 + K_01 + K_02);
    G[1296] = -0.05*det*(K_00 + K_01 + K_02);
    G[1297] = 0.0;
    G[1298] = 0.0;
    G[1299] = 0.05*det*(K_00 + K_01 + K_02);
    G[1300] = -0.1001*det*(K_00 + K_01 + K_02);
    G[1301] = 0.0002*det*(K_00 + K_01 + K_02);
    G[1302] = K_10*K_10*det*w[4][0]*(0.03125*std::pow(w[2][0], 0.5)*w[2][0]-0.03125*std::pow(w[2][0], 1.5));
    G[1303] = -0.03125*std::pow(w[2][0], 1.5)*K_10*K_10*det*w[4][0];
    G[1304] = K_10*K_11*det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]-0.0625*std::pow(w[2][0], 1.5));
    G[1305] = -0.0625*std::pow(w[2][0], 1.5)*K_10*K_11*det*w[4][0];
    G[1306] = K_10*K_12*det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]-0.0625*std::pow(w[2][0], 1.5));
    G[1307] = -0.0625*std::pow(w[2][0], 1.5)*K_10*K_12*det*w[4][0];
    G[1308] = K_10*K_10*det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]-0.0625*std::pow(w[2][0], 1.5));
    G[1309] = -0.0625*std::pow(w[2][0], 1.5)*K_10*K_10*det*w[4][0];
    G[1310] = K_11*K_11*det*w[4][0]*(0.03125*std::pow(w[2][0], 0.5)*w[2][0]-0.03125*std::pow(w[2][0], 1.5));
    G[1311] = -0.03125*std::pow(w[2][0], 1.5)*K_11*K_11*det*w[4][0];
    G[1312] = K_11*K_12*det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]-0.0625*std::pow(w[2][0], 1.5));
    G[1313] = -0.0625*std::pow(w[2][0], 1.5)*K_11*K_12*det*w[4][0];
    G[1314] = K_11*K_11*det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]-0.0625*std::pow(w[2][0], 1.5));
    G[1315] = -0.0625*std::pow(w[2][0], 1.5)*K_11*K_11*det*w[4][0];
    G[1316] = K_12*K_12*det*w[4][0]*(0.03125*std::pow(w[2][0], 0.5)*w[2][0]-0.03125*std::pow(w[2][0], 1.5));
    G[1317] = -0.03125*std::pow(w[2][0], 1.5)*K_12*K_12*det*w[4][0];
    G[1318] = K_12*K_12*det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]-0.0625*std::pow(w[2][0], 1.5));
    G[1319] = -0.0625*std::pow(w[2][0], 1.5)*K_12*K_12*det*w[4][0];
    G[1320] = K_10*K_20*det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]-0.0625*std::pow(w[2][0], 1.5));
    G[1321] = -0.0625*std::pow(w[2][0], 1.5)*K_10*K_20*det*w[4][0];
    G[1322] = det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]*(K_10*K_21 + K_11*K_20)-0.0625*std::pow(w[2][0], 1.5)*(K_10*K_21 + K_11*K_20));
    G[1323] = -0.0625*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_10*K_21 + K_11*K_20);
    G[1324] = det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]*(K_10*K_22 + K_12*K_20)-0.0625*std::pow(w[2][0], 1.5)*(K_10*K_22 + K_12*K_20));
    G[1325] = -0.0625*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_10*K_22 + K_12*K_20);
    G[1326] = K_11*K_21*det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]-0.0625*std::pow(w[2][0], 1.5));
    G[1327] = -0.0625*std::pow(w[2][0], 1.5)*K_11*K_21*det*w[4][0];
    G[1328] = det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]*(K_11*K_22 + K_12*K_21)-0.0625*std::pow(w[2][0], 1.5)*(K_11*K_22 + K_12*K_21));
    G[1329] = -0.0625*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_11*K_22 + K_12*K_21);
    G[1330] = K_12*K_22*det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]-0.0625*std::pow(w[2][0], 1.5));
    G[1331] = -0.0625*std::pow(w[2][0], 1.5)*K_12*K_22*det*w[4][0];
    G[1332] = K_00*K_10*det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]-0.0625*std::pow(w[2][0], 1.5));
    G[1333] = -0.0625*std::pow(w[2][0], 1.5)*K_00*K_10*det*w[4][0];
    G[1334] = det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]*(K_00*K_11 + K_01*K_10)-0.0625*std::pow(w[2][0], 1.5)*(K_00*K_11 + K_01*K_10));
    G[1335] = -0.0625*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_00*K_11 + K_01*K_10);
    G[1336] = det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]*(K_00*K_12 + K_02*K_10)-0.0625*std::pow(w[2][0], 1.5)*(K_00*K_12 + K_02*K_10));
    G[1337] = -0.0625*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_00*K_12 + K_02*K_10);
    G[1338] = K_01*K_11*det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]-0.0625*std::pow(w[2][0], 1.5));
    G[1339] = -0.0625*std::pow(w[2][0], 1.5)*K_01*K_11*det*w[4][0];
    G[1340] = det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]*(K_01*K_12 + K_02*K_11)-0.0625*std::pow(w[2][0], 1.5)*(K_01*K_12 + K_02*K_11));
    G[1341] = -0.0625*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_01*K_12 + K_02*K_11);
    G[1342] = K_02*K_12*det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]-0.0625*std::pow(w[2][0], 1.5));
    G[1343] = -0.0625*std::pow(w[2][0], 1.5)*K_02*K_12*det*w[4][0];
    G[1344] = K_10*K_11*det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]-0.125*std::pow(w[2][0], 1.5));
    G[1345] = -0.125*std::pow(w[2][0], 1.5)*K_10*K_11*det*w[4][0];
    G[1346] = K_10*K_12*det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]-0.125*std::pow(w[2][0], 1.5));
    G[1347] = -0.125*std::pow(w[2][0], 1.5)*K_10*K_12*det*w[4][0];
    G[1348] = K_11*K_12*det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]-0.125*std::pow(w[2][0], 1.5));
    G[1349] = -0.125*std::pow(w[2][0], 1.5)*K_11*K_12*det*w[4][0];
    G[1350] = K_10*det*w[4][0]*(0.125*std::pow(w[2][0], 1.5)-0.125*std::pow(w[2][0], 0.5)*w[2][0]);
    G[1351] = 0.125*std::pow(w[2][0], 1.5)*K_10*det*w[4][0];
    G[1352] = K_11*det*w[4][0]*(0.125*std::pow(w[2][0], 1.5)-0.125*std::pow(w[2][0], 0.5)*w[2][0]);
    G[1353] = 0.125*std::pow(w[2][0], 1.5)*K_11*det*w[4][0];
    G[1354] = K_12*det*w[4][0]*(0.125*std::pow(w[2][0], 1.5)-0.125*std::pow(w[2][0], 0.5)*w[2][0]);
    G[1355] = 0.125*std::pow(w[2][0], 1.5)*K_12*det*w[4][0];
    G[1356] = K_20*K_20*det*w[4][0]*(0.03125*std::pow(w[2][0], 0.5)*w[2][0]-0.03125*std::pow(w[2][0], 1.5));
    G[1357] = -0.03125*std::pow(w[2][0], 1.5)*K_20*K_20*det*w[4][0];
    G[1358] = K_20*K_21*det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]-0.0625*std::pow(w[2][0], 1.5));
    G[1359] = -0.0625*std::pow(w[2][0], 1.5)*K_20*K_21*det*w[4][0];
    G[1360] = K_20*K_22*det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]-0.0625*std::pow(w[2][0], 1.5));
    G[1361] = -0.0625*std::pow(w[2][0], 1.5)*K_20*K_22*det*w[4][0];
    G[1362] = K_20*K_20*det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]-0.0625*std::pow(w[2][0], 1.5));
    G[1363] = -0.0625*std::pow(w[2][0], 1.5)*K_20*K_20*det*w[4][0];
    G[1364] = K_21*K_21*det*w[4][0]*(0.03125*std::pow(w[2][0], 0.5)*w[2][0]-0.03125*std::pow(w[2][0], 1.5));
    G[1365] = -0.03125*std::pow(w[2][0], 1.5)*K_21*K_21*det*w[4][0];
    G[1366] = K_21*K_22*det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]-0.0625*std::pow(w[2][0], 1.5));
    G[1367] = -0.0625*std::pow(w[2][0], 1.5)*K_21*K_22*det*w[4][0];
    G[1368] = K_21*K_21*det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]-0.0625*std::pow(w[2][0], 1.5));
    G[1369] = -0.0625*std::pow(w[2][0], 1.5)*K_21*K_21*det*w[4][0];
    G[1370] = K_22*K_22*det*w[4][0]*(0.03125*std::pow(w[2][0], 0.5)*w[2][0]-0.03125*std::pow(w[2][0], 1.5));
    G[1371] = -0.03125*std::pow(w[2][0], 1.5)*K_22*K_22*det*w[4][0];
    G[1372] = K_22*K_22*det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]-0.0625*std::pow(w[2][0], 1.5));
    G[1373] = -0.0625*std::pow(w[2][0], 1.5)*K_22*K_22*det*w[4][0];
    G[1374] = K_00*K_20*det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]-0.0625*std::pow(w[2][0], 1.5));
    G[1375] = -0.0625*std::pow(w[2][0], 1.5)*K_00*K_20*det*w[4][0];
    G[1376] = det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]*(K_00*K_21 + K_01*K_20)-0.0625*std::pow(w[2][0], 1.5)*(K_00*K_21 + K_01*K_20));
    G[1377] = -0.0625*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_00*K_21 + K_01*K_20);
    G[1378] = det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]*(K_00*K_22 + K_02*K_20)-0.0625*std::pow(w[2][0], 1.5)*(K_00*K_22 + K_02*K_20));
    G[1379] = -0.0625*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_00*K_22 + K_02*K_20);
    G[1380] = K_01*K_21*det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]-0.0625*std::pow(w[2][0], 1.5));
    G[1381] = -0.0625*std::pow(w[2][0], 1.5)*K_01*K_21*det*w[4][0];
    G[1382] = det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]*(K_01*K_22 + K_02*K_21)-0.0625*std::pow(w[2][0], 1.5)*(K_01*K_22 + K_02*K_21));
    G[1383] = -0.0625*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_01*K_22 + K_02*K_21);
    G[1384] = K_02*K_22*det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]-0.0625*std::pow(w[2][0], 1.5));
    G[1385] = -0.0625*std::pow(w[2][0], 1.5)*K_02*K_22*det*w[4][0];
    G[1386] = K_20*K_21*det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]-0.125*std::pow(w[2][0], 1.5));
    G[1387] = -0.125*std::pow(w[2][0], 1.5)*K_20*K_21*det*w[4][0];
    G[1388] = K_20*K_22*det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]-0.125*std::pow(w[2][0], 1.5));
    G[1389] = -0.125*std::pow(w[2][0], 1.5)*K_20*K_22*det*w[4][0];
    G[1390] = K_21*K_22*det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]-0.125*std::pow(w[2][0], 1.5));
    G[1391] = -0.125*std::pow(w[2][0], 1.5)*K_21*K_22*det*w[4][0];
    G[1392] = K_20*det*w[4][0]*(0.125*std::pow(w[2][0], 1.5)-0.125*std::pow(w[2][0], 0.5)*w[2][0]);
    G[1393] = 0.125*std::pow(w[2][0], 1.5)*K_20*det*w[4][0];
    G[1394] = K_21*det*w[4][0]*(0.125*std::pow(w[2][0], 1.5)-0.125*std::pow(w[2][0], 0.5)*w[2][0]);
    G[1395] = 0.125*std::pow(w[2][0], 1.5)*K_21*det*w[4][0];
    G[1396] = K_22*det*w[4][0]*(0.125*std::pow(w[2][0], 1.5)-0.125*std::pow(w[2][0], 0.5)*w[2][0]);
    G[1397] = 0.125*std::pow(w[2][0], 1.5)*K_22*det*w[4][0];
    G[1398] = K_00*K_00*det*w[4][0]*(0.03125*std::pow(w[2][0], 0.5)*w[2][0]-0.03125*std::pow(w[2][0], 1.5));
    G[1399] = -0.03125*std::pow(w[2][0], 1.5)*K_00*K_00*det*w[4][0];
    G[1400] = K_00*K_01*det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]-0.0625*std::pow(w[2][0], 1.5));
    G[1401] = -0.0625*std::pow(w[2][0], 1.5)*K_00*K_01*det*w[4][0];
    G[1402] = K_00*K_02*det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]-0.0625*std::pow(w[2][0], 1.5));
    G[1403] = -0.0625*std::pow(w[2][0], 1.5)*K_00*K_02*det*w[4][0];
    G[1404] = K_00*K_00*det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]-0.0625*std::pow(w[2][0], 1.5));
    G[1405] = -0.0625*std::pow(w[2][0], 1.5)*K_00*K_00*det*w[4][0];
    G[1406] = K_01*K_01*det*w[4][0]*(0.03125*std::pow(w[2][0], 0.5)*w[2][0]-0.03125*std::pow(w[2][0], 1.5));
    G[1407] = -0.03125*std::pow(w[2][0], 1.5)*K_01*K_01*det*w[4][0];
    G[1408] = K_01*K_02*det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]-0.0625*std::pow(w[2][0], 1.5));
    G[1409] = -0.0625*std::pow(w[2][0], 1.5)*K_01*K_02*det*w[4][0];
    G[1410] = K_01*K_01*det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]-0.0625*std::pow(w[2][0], 1.5));
    G[1411] = -0.0625*std::pow(w[2][0], 1.5)*K_01*K_01*det*w[4][0];
    G[1412] = K_02*K_02*det*w[4][0]*(0.03125*std::pow(w[2][0], 0.5)*w[2][0]-0.03125*std::pow(w[2][0], 1.5));
    G[1413] = -0.03125*std::pow(w[2][0], 1.5)*K_02*K_02*det*w[4][0];
    G[1414] = K_02*K_02*det*w[4][0]*(0.0625*std::pow(w[2][0], 0.5)*w[2][0]-0.0625*std::pow(w[2][0], 1.5));
    G[1415] = -0.0625*std::pow(w[2][0], 1.5)*K_02*K_02*det*w[4][0];
    G[1416] = K_00*K_01*det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]-0.125*std::pow(w[2][0], 1.5));
    G[1417] = -0.125*std::pow(w[2][0], 1.5)*K_00*K_01*det*w[4][0];
    G[1418] = K_00*K_02*det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]-0.125*std::pow(w[2][0], 1.5));
    G[1419] = -0.125*std::pow(w[2][0], 1.5)*K_00*K_02*det*w[4][0];
    G[1420] = K_00*det*w[4][0]*(0.125*std::pow(w[2][0], 1.5)-0.125*std::pow(w[2][0], 0.5)*w[2][0]);
    G[1421] = 0.125*std::pow(w[2][0], 1.5)*K_00*det*w[4][0];
    G[1422] = K_01*K_02*det*w[4][0]*(0.125*std::pow(w[2][0], 0.5)*w[2][0]-0.125*std::pow(w[2][0], 1.5));
    G[1423] = -0.125*std::pow(w[2][0], 1.5)*K_01*K_02*det*w[4][0];
    G[1424] = K_01*det*w[4][0]*(0.125*std::pow(w[2][0], 1.5)-0.125*std::pow(w[2][0], 0.5)*w[2][0]);
    G[1425] = 0.125*std::pow(w[2][0], 1.5)*K_01*det*w[4][0];
    G[1426] = K_02*det*w[4][0]*(0.125*std::pow(w[2][0], 1.5)-0.125*std::pow(w[2][0], 0.5)*w[2][0]);
    G[1427] = 0.125*std::pow(w[2][0], 1.5)*K_02*det*w[4][0];
    G[1428] = -0.25*K_00*det;
    G[1429] = -0.25*K_10*det;
    G[1430] = -0.25*K_20*det;
    G[1431] = -0.25*K_01*det;
    G[1432] = -0.25*K_11*det;
    G[1433] = -0.25*K_21*det;
    G[1434] = -0.25*K_02*det;
    G[1435] = -0.25*K_12*det;
    G[1436] = -0.25*K_22*det;
    G[1437] = 0.0;
    G[1438] = det/w[3][0];
    G[1439] = 0.25*K_00*det;
    G[1440] = 0.25*K_01*det;
    G[1441] = 0.25*K_02*det;
    G[1442] = 0.25*K_10*det;
    G[1443] = 0.25*K_20*det;
    G[1444] = 0.25*K_11*det;
    G[1445] = 0.25*K_21*det;
    G[1446] = 0.25*K_12*det;
    G[1447] = 0.25*K_22*det;
    G[1448] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(1e-06*K_00*K_00 + K_01*(1e-06*K_01 + 2e-06*K_00) + K_02*(1e-06*K_02 + 2e-06*(K_00 + K_01)));
    G[1449] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_12*(-0.003*K_02-0.004*(K_00 + K_01))-0.002*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02))) + K_12*(K_01*(-0.001*K_01-0.002*K_00)-0.001*K_00*K_00));
    G[1450] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(2e-06*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02)) + K_12*(3e-06*K_02 + 4e-06*(K_00 + K_01))) + K_12*(1e-06*K_00*K_00 + K_01*(1e-06*K_01 + 2e-06*K_00)));
    G[1451] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_22*(-0.003*K_02-0.004*(K_00 + K_01))-0.002*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02))) + K_22*(K_01*(-0.001*K_01-0.002*K_00)-0.001*K_00*K_00));
    G[1452] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(2e-06*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02)) + K_22*(3e-06*K_02 + 4e-06*(K_00 + K_01))) + K_22*(1e-06*K_00*K_00 + K_01*(1e-06*K_01 + 2e-06*K_00)));
    G[1453] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(2e-06*K_00*K_00 + K_01*(2e-06*K_01 + 4e-06*K_00) + K_02*(2e-06*K_02 + 4e-06*(K_00 + K_01)));
    G[1454] = 2e-06*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[1455] = 2e-06*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[1456] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_11*(-0.001*K_11-0.002*K_10)-0.001*K_10*K_10) + K_12*(K_02*(-0.003*K_12-0.004*(K_10 + K_11))-0.002*(K_00*(K_10 + K_11 + K_12) + K_01*(K_10 + K_11 + K_12))));
    G[1457] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(1e-06*K_10*K_10 + K_11*(1e-06*K_11 + 2e-06*K_10)) + K_12*(2e-06*(K_00*(K_10 + K_11 + K_12) + K_01*(K_10 + K_11 + K_12)) + K_02*(3e-06*K_12 + 4e-06*(K_10 + K_11))));
    G[1458] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.002*(K_20*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)) + K_21*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)) + K_22*(K_10*(K_00 + K_01) + K_11*(K_00 + K_01)))-0.004*(K_02*K_12*(K_20 + K_21) + K_22*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)))-0.006*K_02*K_12*K_22);
    G[1459] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2e-06*(K_20*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)) + K_21*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)) + K_22*(K_10*(K_00 + K_01) + K_11*(K_00 + K_01))) + 4e-06*(K_02*K_12*(K_20 + K_21) + K_22*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01))) + 6e-06*K_02*K_12*K_22);
    G[1460] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(2e-06*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02)) + K_12*(4e-06*K_02 + 6e-06*(K_00 + K_01))) + K_12*(2e-06*K_00*K_00 + K_01*(2e-06*K_01 + 4e-06*K_00)));
    G[1461] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(2e-06*K_10*K_10 + K_11*(2e-06*K_11 + 4e-06*K_10)) + K_12*(2e-06*(K_00*(K_10 + K_11 + K_12) + K_01*(K_10 + K_11 + K_12)) + K_02*(4e-06*K_12 + 6e-06*(K_10 + K_11))));
    G[1462] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2e-06*(K_02*(K_10*(K_20 + K_21 + K_22) + K_11*(K_20 + K_21 + K_22)) + K_12*(K_00*(K_20 + K_21 + K_22) + K_01*(K_20 + K_21 + K_22))) + 4e-06*K_02*K_12*(K_20 + K_21 + 1.0*K_22));
    G[1463] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_21*(-0.001*K_21-0.002*K_20)-0.001*K_20*K_20) + K_22*(K_02*(-0.003*K_22-0.004*(K_20 + K_21))-0.002*(K_00*(K_20 + K_21 + K_22) + K_01*(K_20 + K_21 + K_22))));
    G[1464] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(1e-06*K_20*K_20 + K_21*(1e-06*K_21 + 2e-06*K_20)) + K_22*(2e-06*(K_00*(K_20 + K_21 + K_22) + K_01*(K_20 + K_21 + K_22)) + K_02*(3e-06*K_22 + 4e-06*(K_20 + K_21))));
    G[1465] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(2e-06*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02)) + K_22*(4e-06*K_02 + 6e-06*(K_00 + K_01))) + K_22*(2e-06*K_00*K_00 + K_01*(2e-06*K_01 + 4e-06*K_00)));
    G[1466] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2e-06*(K_02*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12)) + K_22*(K_00*(K_10 + K_11 + K_12) + K_01*(K_10 + K_11 + K_12))) + 4e-06*K_02*K_22*(K_10 + K_11 + 1.0*K_12));
    G[1467] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(2e-06*K_20*K_20 + K_21*(2e-06*K_21 + 4e-06*K_20)) + K_22*(2e-06*(K_00*(K_20 + K_21 + K_22) + K_01*(K_20 + K_21 + K_22)) + K_02*(4e-06*K_22 + 6e-06*(K_20 + K_21))));
    G[1468] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(1e-06*K_10*K_10 + K_11*(1e-06*K_11 + 2e-06*K_10) + K_12*(1e-06*K_12 + 2e-06*(K_10 + K_11)));
    G[1469] = 2e-06*std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[1470] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(1e-06*K_20*K_20 + K_21*(1e-06*K_21 + 2e-06*K_20) + K_22*(1e-06*K_22 + 2e-06*(K_20 + K_21)));
    G[1471] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(1e-06*K_10*K_10 + K_11*(1e-06*K_11 + 2e-06*K_10) + K_12*(1e-06*K_12 + 2e-06*(K_10 + K_11)));
    G[1472] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_22*(-0.003*K_12-0.004*(K_10 + K_11))-0.002*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12))) + K_22*(K_11*(-0.001*K_11-0.002*K_10)-0.001*K_10*K_10));
    G[1473] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(2e-06*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12)) + K_22*(3e-06*K_12 + 4e-06*(K_10 + K_11))) + K_22*(1e-06*K_10*K_10 + K_11*(1e-06*K_11 + 2e-06*K_10)));
    G[1474] = 2e-06*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[1475] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(2e-06*K_10*K_10 + K_11*(2e-06*K_11 + 4e-06*K_10) + K_12*(2e-06*K_12 + 4e-06*(K_10 + K_11)));
    G[1476] = 2e-06*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[1477] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_21*(-0.001*K_21-0.002*K_20)-0.001*K_20*K_20) + K_22*(K_12*(-0.003*K_22-0.004*(K_20 + K_21))-0.002*(K_10*(K_20 + K_21 + K_22) + K_11*(K_20 + K_21 + K_22))));
    G[1478] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(1e-06*K_20*K_20 + K_21*(1e-06*K_21 + 2e-06*K_20)) + K_22*(2e-06*(K_10*(K_20 + K_21 + K_22) + K_11*(K_20 + K_21 + K_22)) + K_12*(3e-06*K_22 + 4e-06*(K_20 + K_21))));
    G[1479] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2e-06*(K_12*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02)) + K_22*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02))) + 4e-06*K_12*K_22*(K_00 + K_01 + 1.0*K_02));
    G[1480] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(2e-06*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12)) + K_22*(4e-06*K_12 + 6e-06*(K_10 + K_11))) + K_22*(2e-06*K_10*K_10 + K_11*(2e-06*K_11 + 4e-06*K_10)));
    G[1481] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(2e-06*K_20*K_20 + K_21*(2e-06*K_21 + 4e-06*K_20)) + K_22*(2e-06*(K_10*(K_20 + K_21 + K_22) + K_11*(K_20 + K_21 + K_22)) + K_12*(4e-06*K_22 + 6e-06*(K_20 + K_21))));
    G[1482] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(1e-06*K_00*K_00 + K_01*(1e-06*K_01 + 2e-06*K_00) + K_02*(1e-06*K_02 + 2e-06*(K_00 + K_01)));
    G[1483] = 2e-06*std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[1484] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(1e-06*K_20*K_20 + K_21*(1e-06*K_21 + 2e-06*K_20) + K_22*(1e-06*K_22 + 2e-06*(K_20 + K_21)));
    G[1485] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(1e-06*K_20*K_20 + K_21*(1e-06*K_21 + 2e-06*K_20) + K_22*(1e-06*K_22 + 2e-06*(K_20 + K_21)));
    G[1486] = 2e-06*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[1487] = 2e-06*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[1488] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(2e-06*K_20*K_20 + K_21*(2e-06*K_21 + 4e-06*K_20) + K_22*(2e-06*K_22 + 4e-06*(K_20 + K_21)));
    G[1489] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(1e-06*K_00*K_00 + K_01*(1e-06*K_01 + 2e-06*K_00) + K_02*(1e-06*K_02 + 2e-06*(K_00 + K_01)));
    G[1490] = 2e-06*std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[1491] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(1e-06*K_10*K_10 + K_11*(1e-06*K_11 + 2e-06*K_10) + K_12*(1e-06*K_12 + 2e-06*(K_10 + K_11)));
    G[1492] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(1e-06*K_00*K_00 + K_01*(1e-06*K_01 + 2e-06*K_00) + K_02*(1e-06*K_02 + 2e-06*(K_00 + K_01)));
    G[1493] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(K_10*(-0.003*K_00-0.004*(K_01 + K_02))-0.002*(K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02))) + K_10*(K_02*(-0.001*K_02-0.002*K_01)-0.001*K_01*K_01));
    G[1494] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(2e-06*(K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02)) + K_10*(3e-06*K_00 + 4e-06*(K_01 + 1.0*K_02))) + K_10*(1e-06*K_01*K_01 + K_02*(1e-06*K_02 + 2e-06*K_01)));
    G[1495] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(K_20*(-0.003*K_00-0.004*(K_01 + K_02))-0.002*(K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02))) + K_20*(K_02*(-0.001*K_02-0.002*K_01)-0.001*K_01*K_01));
    G[1496] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(2e-06*(K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)) + K_20*(3e-06*K_00 + 4e-06*(K_01 + 1.0*K_02))) + K_20*(1e-06*K_01*K_01 + K_02*(1e-06*K_02 + 2e-06*K_01)));
    G[1497] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(2e-06*K_00*K_00 + K_01*(2e-06*K_01 + 4e-06*K_00) + K_02*(2e-06*K_02 + 4e-06*(K_00 + K_01)));
    G[1498] = 2e-06*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[1499] = 2e-06*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[1500] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(K_12*(-0.001*K_12-0.002*K_11)-0.001*K_11*K_11) + K_10*(K_00*(-0.003*K_10-0.004*(K_11 + K_12))-0.002*(K_01*(K_10 + K_11 + K_12) + K_02*(K_10 + K_11 + K_12))));
    G[1501] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(1e-06*K_11*K_11 + K_12*(1e-06*K_12 + 2e-06*K_11)) + K_10*(2e-06*(K_01*(K_10 + K_11 + K_12) + K_02*(K_10 + K_11 + K_12)) + K_00*(3e-06*K_10 + 4e-06*(K_11 + 1.0*K_12))));
    G[1502] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.002*(K_20*(K_11*(K_01 + K_02) + K_12*(K_01 + K_02)) + K_21*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)) + K_22*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)))-0.004*(K_00*K_10*(K_21 + K_22) + K_20*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)))-0.006*K_00*K_10*K_20);
    G[1503] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2e-06*(K_20*(K_11*(K_01 + K_02) + K_12*(K_01 + K_02)) + K_21*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)) + K_22*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))) + 4e-06*(K_00*K_10*(K_21 + K_22) + K_20*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))) + 6e-06*K_00*K_10*K_20);
    G[1504] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(2e-06*(K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02)) + K_10*(4e-06*K_00 + 6e-06*(K_01 + K_02))) + K_10*(2e-06*K_01*K_01 + K_02*(2e-06*K_02 + 4e-06*K_01)));
    G[1505] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(2e-06*K_11*K_11 + K_12*(2e-06*K_12 + 4e-06*K_11)) + K_10*(2e-06*(K_01*(K_10 + K_11 + K_12) + K_02*(K_10 + K_11 + K_12)) + K_00*(4e-06*K_10 + 6e-06*(K_11 + K_12))));
    G[1506] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2e-06*(K_00*(K_11*(K_20 + K_21 + K_22) + K_12*(K_20 + K_21 + K_22)) + K_10*(K_01*(K_20 + K_21 + K_22) + K_02*(K_20 + K_21 + K_22))) + 4e-06*K_00*K_10*(K_20 + K_21 + 1.0*K_22));
    G[1507] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(K_22*(-0.001*K_22-0.002*K_21)-0.001*K_21*K_21) + K_20*(K_00*(-0.003*K_20-0.004*(K_21 + K_22))-0.002*(K_01*(K_20 + K_21 + K_22) + K_02*(K_20 + K_21 + K_22))));
    G[1508] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(1e-06*K_21*K_21 + K_22*(1e-06*K_22 + 2e-06*K_21)) + K_20*(2e-06*(K_01*(K_20 + K_21 + K_22) + K_02*(K_20 + K_21 + K_22)) + K_00*(3e-06*K_20 + 4e-06*(K_21 + 1.0*K_22))));
    G[1509] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(2e-06*(K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)) + K_20*(4e-06*K_00 + 6e-06*(K_01 + K_02))) + K_20*(2e-06*K_01*K_01 + K_02*(2e-06*K_02 + 4e-06*K_01)));
    G[1510] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2e-06*(K_00*(K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)) + K_20*(K_01*(K_10 + K_11 + K_12) + K_02*(K_10 + K_11 + K_12))) + 4e-06*K_00*K_20*(K_10 + K_11 + 1.0*K_12));
    G[1511] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_00*(2e-06*K_21*K_21 + K_22*(2e-06*K_22 + 4e-06*K_21)) + K_20*(2e-06*(K_01*(K_20 + K_21 + K_22) + K_02*(K_20 + K_21 + K_22)) + K_00*(4e-06*K_20 + 6e-06*(K_21 + K_22))));
    G[1512] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(1e-06*K_10*K_10 + K_11*(1e-06*K_11 + 2e-06*K_10) + K_12*(1e-06*K_12 + 2e-06*(K_10 + K_11)));
    G[1513] = 2e-06*std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[1514] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(1e-06*K_20*K_20 + K_21*(1e-06*K_21 + 2e-06*K_20) + K_22*(1e-06*K_22 + 2e-06*(K_20 + K_21)));
    G[1515] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(1e-06*K_10*K_10 + K_11*(1e-06*K_11 + 2e-06*K_10) + K_12*(1e-06*K_12 + 2e-06*(K_10 + K_11)));
    G[1516] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_10*(K_20*(-0.003*K_10-0.004*(K_11 + K_12))-0.002*(K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12))) + K_20*(K_12*(-0.001*K_12-0.002*K_11)-0.001*K_11*K_11));
    G[1517] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_10*(2e-06*(K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)) + K_20*(3e-06*K_10 + 4e-06*(K_11 + 1.0*K_12))) + K_20*(1e-06*K_11*K_11 + K_12*(1e-06*K_12 + 2e-06*K_11)));
    G[1518] = 2e-06*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[1519] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(2e-06*K_10*K_10 + K_11*(2e-06*K_11 + 4e-06*K_10) + K_12*(2e-06*K_12 + 4e-06*(K_10 + K_11)));
    G[1520] = 2e-06*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[1521] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_10*(K_22*(-0.001*K_22-0.002*K_21)-0.001*K_21*K_21) + K_20*(K_10*(-0.003*K_20-0.004*(K_21 + K_22))-0.002*(K_11*(K_20 + K_21 + K_22) + K_12*(K_20 + K_21 + K_22))));
    G[1522] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_10*(1e-06*K_21*K_21 + K_22*(1e-06*K_22 + 2e-06*K_21)) + K_20*(2e-06*(K_11*(K_20 + K_21 + K_22) + K_12*(K_20 + K_21 + K_22)) + K_10*(3e-06*K_20 + 4e-06*(K_21 + 1.0*K_22))));
    G[1523] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2e-06*(K_10*(K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)) + K_20*(K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02))) + 4e-06*K_10*K_20*(K_00 + K_01 + 1.0*K_02));
    G[1524] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_10*(2e-06*(K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)) + K_20*(4e-06*K_10 + 6e-06*(K_11 + K_12))) + K_20*(2e-06*K_11*K_11 + K_12*(2e-06*K_12 + 4e-06*K_11)));
    G[1525] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_10*(2e-06*K_21*K_21 + K_22*(2e-06*K_22 + 4e-06*K_21)) + K_20*(2e-06*(K_11*(K_20 + K_21 + K_22) + K_12*(K_20 + K_21 + K_22)) + K_10*(4e-06*K_20 + 6e-06*(K_21 + K_22))));
    G[1526] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(1e-06*K_00*K_00 + K_01*(1e-06*K_01 + 2e-06*K_00) + K_02*(1e-06*K_02 + 2e-06*(K_00 + K_01)));
    G[1527] = 2e-06*std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[1528] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(1e-06*K_20*K_20 + K_21*(1e-06*K_21 + 2e-06*K_20) + K_22*(1e-06*K_22 + 2e-06*(K_20 + K_21)));
    G[1529] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(1e-06*K_20*K_20 + K_21*(1e-06*K_21 + 2e-06*K_20) + K_22*(1e-06*K_22 + 2e-06*(K_20 + K_21)));
    G[1530] = 2e-06*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[1531] = 2e-06*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[1532] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(2e-06*K_20*K_20 + K_21*(2e-06*K_21 + 4e-06*K_20) + K_22*(2e-06*K_22 + 4e-06*(K_20 + K_21)));
    G[1533] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(1e-06*K_00*K_00 + K_01*(1e-06*K_01 + 2e-06*K_00) + K_02*(1e-06*K_02 + 2e-06*(K_00 + K_01)));
    G[1534] = 2e-06*std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[1535] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(1e-06*K_10*K_10 + K_11*(1e-06*K_11 + 2e-06*K_10) + K_12*(1e-06*K_12 + 2e-06*(K_10 + K_11)));
    G[1536] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(1e-06*K_00*K_00 + K_01*(1e-06*K_01 + 2e-06*K_00) + K_02*(1e-06*K_02 + 2e-06*(K_00 + K_01)));
    G[1537] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_11*(-0.003*K_01-0.004*(K_00 + K_02))-0.002*(K_10*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02))) + K_11*(K_02*(-0.001*K_02-0.002*K_00)-0.001*K_00*K_00));
    G[1538] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(2e-06*(K_10*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02)) + K_11*(3e-06*K_01 + 4e-06*(K_00 + 1.0*K_02))) + K_11*(1e-06*K_00*K_00 + K_02*(1e-06*K_02 + 2e-06*K_00)));
    G[1539] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_21*(-0.003*K_01-0.004*(K_00 + K_02))-0.002*(K_20*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02))) + K_21*(K_02*(-0.001*K_02-0.002*K_00)-0.001*K_00*K_00));
    G[1540] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(2e-06*(K_20*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)) + K_21*(3e-06*K_01 + 4e-06*(K_00 + 1.0*K_02))) + K_21*(1e-06*K_00*K_00 + K_02*(1e-06*K_02 + 2e-06*K_00)));
    G[1541] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(2e-06*K_00*K_00 + K_01*(2e-06*K_01 + 4e-06*K_00) + K_02*(2e-06*K_02 + 4e-06*(K_00 + K_01)));
    G[1542] = 2e-06*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[1543] = 2e-06*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[1544] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_12*(-0.001*K_12-0.002*K_10)-0.001*K_10*K_10) + K_11*(K_01*(-0.003*K_11-0.004*(K_10 + K_12))-0.002*(K_00*(K_10 + K_11 + K_12) + K_02*(K_10 + K_11 + K_12))));
    G[1545] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(1e-06*K_10*K_10 + K_12*(1e-06*K_12 + 2e-06*K_10)) + K_11*(2e-06*(K_00*(K_10 + K_11 + K_12) + K_02*(K_10 + K_11 + K_12)) + K_01*(3e-06*K_11 + 4e-06*(K_10 + 1.0*K_12))));
    G[1546] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.002*(K_20*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)) + K_21*(K_10*(K_00 + K_02) + K_12*(K_00 + K_02)) + K_22*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)))-0.004*(K_01*K_11*(K_20 + K_22) + K_21*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)))-0.006*K_01*K_11*K_21);
    G[1547] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2e-06*(K_20*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)) + K_21*(K_10*(K_00 + K_02) + K_12*(K_00 + K_02)) + K_22*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))) + 4e-06*(K_01*K_11*(K_20 + K_22) + K_21*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))) + 6e-06*K_01*K_11*K_21);
    G[1548] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(2e-06*(K_10*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02)) + K_11*(4e-06*K_01 + 6e-06*(K_00 + K_02))) + K_11*(2e-06*K_00*K_00 + K_02*(2e-06*K_02 + 4e-06*K_00)));
    G[1549] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(2e-06*K_10*K_10 + K_12*(2e-06*K_12 + 4e-06*K_10)) + K_11*(2e-06*(K_00*(K_10 + K_11 + K_12) + K_02*(K_10 + K_11 + K_12)) + K_01*(4e-06*K_11 + 6e-06*(K_10 + K_12))));
    G[1550] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2e-06*(K_01*(K_10*(K_20 + K_21 + K_22) + K_12*(K_20 + K_21 + K_22)) + K_11*(K_00*(K_20 + K_21 + K_22) + K_02*(K_20 + K_21 + K_22))) + 4e-06*K_01*K_11*(K_20 + K_21 + 1.0*K_22));
    G[1551] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_22*(-0.001*K_22-0.002*K_20)-0.001*K_20*K_20) + K_21*(K_01*(-0.003*K_21-0.004*(K_20 + K_22))-0.002*(K_00*(K_20 + K_21 + K_22) + K_02*(K_20 + K_21 + K_22))));
    G[1552] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(1e-06*K_20*K_20 + K_22*(1e-06*K_22 + 2e-06*K_20)) + K_21*(2e-06*(K_00*(K_20 + K_21 + K_22) + K_02*(K_20 + K_21 + K_22)) + K_01*(3e-06*K_21 + 4e-06*(K_20 + 1.0*K_22))));
    G[1553] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(2e-06*(K_20*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)) + K_21*(4e-06*K_01 + 6e-06*(K_00 + K_02))) + K_21*(2e-06*K_00*K_00 + K_02*(2e-06*K_02 + 4e-06*K_00)));
    G[1554] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2e-06*(K_01*(K_20*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)) + K_21*(K_00*(K_10 + K_11 + K_12) + K_02*(K_10 + K_11 + K_12))) + 4e-06*K_01*K_21*(K_10 + K_11 + 1.0*K_12));
    G[1555] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(2e-06*K_20*K_20 + K_22*(2e-06*K_22 + 4e-06*K_20)) + K_21*(2e-06*(K_00*(K_20 + K_21 + K_22) + K_02*(K_20 + K_21 + K_22)) + K_01*(4e-06*K_21 + 6e-06*(K_20 + K_22))));
    G[1556] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(1e-06*K_10*K_10 + K_11*(1e-06*K_11 + 2e-06*K_10) + K_12*(1e-06*K_12 + 2e-06*(K_10 + K_11)));
    G[1557] = 2e-06*std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[1558] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(1e-06*K_20*K_20 + K_21*(1e-06*K_21 + 2e-06*K_20) + K_22*(1e-06*K_22 + 2e-06*(K_20 + K_21)));
    G[1559] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(1e-06*K_10*K_10 + K_11*(1e-06*K_11 + 2e-06*K_10) + K_12*(1e-06*K_12 + 2e-06*(K_10 + K_11)));
    G[1560] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(K_21*(-0.003*K_11-0.004*(K_10 + K_12))-0.002*(K_20*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12))) + K_21*(K_12*(-0.001*K_12-0.002*K_10)-0.001*K_10*K_10));
    G[1561] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(2e-06*(K_20*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)) + K_21*(3e-06*K_11 + 4e-06*(K_10 + 1.0*K_12))) + K_21*(1e-06*K_10*K_10 + K_12*(1e-06*K_12 + 2e-06*K_10)));
    G[1562] = 2e-06*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[1563] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(2e-06*K_10*K_10 + K_11*(2e-06*K_11 + 4e-06*K_10) + K_12*(2e-06*K_12 + 4e-06*(K_10 + K_11)));
    G[1564] = 2e-06*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[1565] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(K_22*(-0.001*K_22-0.002*K_20)-0.001*K_20*K_20) + K_21*(K_11*(-0.003*K_21-0.004*(K_20 + K_22))-0.002*(K_10*(K_20 + K_21 + K_22) + K_12*(K_20 + K_21 + K_22))));
    G[1566] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(1e-06*K_20*K_20 + K_22*(1e-06*K_22 + 2e-06*K_20)) + K_21*(2e-06*(K_10*(K_20 + K_21 + K_22) + K_12*(K_20 + K_21 + K_22)) + K_11*(3e-06*K_21 + 4e-06*(K_20 + 1.0*K_22))));
    G[1567] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(2e-06*(K_11*(K_20*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)) + K_21*(K_10*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02))) + 4e-06*K_11*K_21*(K_00 + K_01 + 1.0*K_02));
    G[1568] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(2e-06*(K_20*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)) + K_21*(4e-06*K_11 + 6e-06*(K_10 + K_12))) + K_21*(2e-06*K_10*K_10 + K_12*(2e-06*K_12 + 4e-06*K_10)));
    G[1569] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(2e-06*K_20*K_20 + K_22*(2e-06*K_22 + 4e-06*K_20)) + K_21*(2e-06*(K_10*(K_20 + K_21 + K_22) + K_12*(K_20 + K_21 + K_22)) + K_11*(4e-06*K_21 + 6e-06*(K_20 + K_22))));
    G[1570] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(1e-06*K_00*K_00 + K_01*(1e-06*K_01 + 2e-06*K_00) + K_02*(1e-06*K_02 + 2e-06*(K_00 + K_01)));
    G[1571] = 2e-06*std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[1572] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(1e-06*K_20*K_20 + K_21*(1e-06*K_21 + 2e-06*K_20) + K_22*(1e-06*K_22 + 2e-06*(K_20 + K_21)));
    G[1573] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(1e-06*K_20*K_20 + K_21*(1e-06*K_21 + 2e-06*K_20) + K_22*(1e-06*K_22 + 2e-06*(K_20 + K_21)));
    G[1574] = 2e-06*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[1575] = 2e-06*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[1576] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(2e-06*K_20*K_20 + K_21*(2e-06*K_21 + 4e-06*K_20) + K_22*(2e-06*K_22 + 4e-06*(K_20 + K_21)));
    G[1577] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(1e-06*K_00*K_00 + K_01*(1e-06*K_01 + 2e-06*K_00) + K_02*(1e-06*K_02 + 2e-06*(K_00 + K_01)));
    G[1578] = 2e-06*std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[1579] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(1e-06*K_10*K_10 + K_11*(1e-06*K_11 + 2e-06*K_10) + K_12*(1e-06*K_12 + 2e-06*(K_10 + K_11)));
    G[1580] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(K_01*(-2e-05*K_01-4e-05*K_00) + K_02*(-2e-05*K_02-4e-05*(K_00 + K_01))-2e-05*K_00*K_00) + std::pow(w[2][0], 1.5)*(1e-05*K_00*K_00 + K_01*(1e-05*K_01 + 2e-05*K_00) + K_02*(1e-05*K_02 + 2e-05*(K_00 + K_01))));
    G[1581] = det*w[4][0]*(0.06*std::pow(w[2][0], 0.5)*w[2][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02))-0.02*std::pow(w[2][0], 1.5)*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02)));
    G[1582] = det*w[4][0]*(0.04*std::pow(w[2][0], 0.5)*w[2][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02))-0.02*std::pow(w[2][0], 1.5)*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02)));
    G[1583] = det*w[4][0]*(2e-05*std::pow(w[2][0], 1.5)*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02))-4e-05*std::pow(w[2][0], 0.5)*w[2][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02)));
    G[1584] = det*w[4][0]*(0.06*std::pow(w[2][0], 0.5)*w[2][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02))-0.02*std::pow(w[2][0], 1.5)*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)));
    G[1585] = det*w[4][0]*(0.04*std::pow(w[2][0], 0.5)*w[2][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02))-0.02*std::pow(w[2][0], 1.5)*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)));
    G[1586] = det*w[4][0]*(2e-05*std::pow(w[2][0], 1.5)*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02))-4e-05*std::pow(w[2][0], 0.5)*w[2][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)));
    G[1587] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(K_01*(-2e-05*K_01-4e-05*K_00) + K_02*(-2e-05*K_02-4e-05*(K_00 + K_01))-2e-05*K_00*K_00) + std::pow(w[2][0], 1.5)*(2e-05*K_00*K_00 + K_01*(2e-05*K_01 + 4e-05*K_00) + K_02*(2e-05*K_02 + 4e-05*(K_00 + K_01))));
    G[1588] = det*w[4][0]*(2e-05*std::pow(w[2][0], 1.5)*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02))-2e-05*std::pow(w[2][0], 0.5)*w[2][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02)));
    G[1589] = det*w[4][0]*(2e-05*std::pow(w[2][0], 1.5)*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02))-2e-05*std::pow(w[2][0], 0.5)*w[2][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02)));
    G[1590] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(K_11*(-2e-05*K_11-4e-05*K_10) + K_12*(-2e-05*K_12-4e-05*(K_10 + K_11))-2e-05*K_10*K_10) + std::pow(w[2][0], 1.5)*(1e-05*K_10*K_10 + K_11*(1e-05*K_11 + 2e-05*K_10) + K_12*(1e-05*K_12 + 2e-05*(K_10 + K_11))));
    G[1591] = det*w[4][0]*(0.06*std::pow(w[2][0], 0.5)*w[2][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12))-0.02*std::pow(w[2][0], 1.5)*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)));
    G[1592] = det*w[4][0]*(0.04*std::pow(w[2][0], 0.5)*w[2][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12))-0.02*std::pow(w[2][0], 1.5)*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)));
    G[1593] = det*w[4][0]*(2e-05*std::pow(w[2][0], 1.5)*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12))-4e-05*std::pow(w[2][0], 0.5)*w[2][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)));
    G[1594] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(K_11*(-2e-05*K_11-4e-05*K_10) + K_12*(-2e-05*K_12-4e-05*(K_10 + K_11))-2e-05*K_10*K_10) + std::pow(w[2][0], 1.5)*(2e-05*K_10*K_10 + K_11*(2e-05*K_11 + 4e-05*K_10) + K_12*(2e-05*K_12 + 4e-05*(K_10 + K_11))));
    G[1595] = det*w[4][0]*(2e-05*std::pow(w[2][0], 1.5)*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12))-2e-05*std::pow(w[2][0], 0.5)*w[2][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12)));
    G[1596] = -0.02*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[1597] = -0.02*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[1598] = -0.02*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[1599] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(K_21*(-2e-05*K_21-4e-05*K_20) + K_22*(-2e-05*K_22-4e-05*(K_20 + K_21))-2e-05*K_20*K_20) + std::pow(w[2][0], 1.5)*(1e-05*K_20*K_20 + K_21*(1e-05*K_21 + 2e-05*K_20) + K_22*(1e-05*K_22 + 2e-05*(K_20 + K_21))));
    G[1600] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(K_21*(-2e-05*K_21-4e-05*K_20) + K_22*(-2e-05*K_22-4e-05*(K_20 + K_21))-2e-05*K_20*K_20) + std::pow(w[2][0], 1.5)*(2e-05*K_20*K_20 + K_21*(2e-05*K_21 + 4e-05*K_20) + K_22*(2e-05*K_22 + 4e-05*(K_20 + K_21))));
    G[1601] = std::pow(w[2][0], 1.5)*det*w[4][0]*(1e-05*K_00*K_00 + K_01*(1e-05*K_01 + 2e-05*K_00) + K_02*(1e-05*K_02 + 2e-05*(K_00 + K_01)));
    G[1602] = 2e-05*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_10*(K_00 + K_01 + K_02) + K_11*(K_00 + K_01 + K_02) + K_12*(K_00 + K_01 + K_02));
    G[1603] = 2e-05*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_20*(K_00 + K_01 + K_02) + K_21*(K_00 + K_01 + K_02) + K_22*(K_00 + K_01 + K_02));
    G[1604] = std::pow(w[2][0], 1.5)*det*w[4][0]*(1e-05*K_10*K_10 + K_11*(1e-05*K_11 + 2e-05*K_10) + K_12*(1e-05*K_12 + 2e-05*(K_10 + K_11)));
    G[1605] = 2e-05*std::pow(w[2][0], 1.5)*det*w[4][0]*(K_20*(K_10 + K_11 + K_12) + K_21*(K_10 + K_11 + K_12) + K_22*(K_10 + K_11 + K_12));
    G[1606] = std::pow(w[2][0], 1.5)*det*w[4][0]*(1e-05*K_20*K_20 + K_21*(1e-05*K_21 + 2e-05*K_20) + K_22*(1e-05*K_22 + 2e-05*(K_20 + K_21)));
    G[1607] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_02*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1608] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_02*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1609] = -0.00125*std::pow(w[2][0], 0.5)*K_02*K_02*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1610] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_00*(-0.00125*K_11-0.0025*K_12) + K_10*(-0.00125*(K_01 + K_02)-0.0025*K_00))-0.00125*K_00*K_12*(K_00 + K_01));
    G[1611] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_01*(-0.00125*K_10-0.0025*K_12) + K_11*(-0.00125*(K_00 + K_02)-0.0025*K_01))-0.00125*K_01*K_12*(K_00 + K_01));
    G[1612] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_12*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_10 + K_11));
    G[1613] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_00*(-0.00125*K_21-0.0025*K_22) + K_20*(-0.00125*(K_01 + K_02)-0.0025*K_00))-0.00125*K_00*K_22*(K_00 + K_01));
    G[1614] = -0.0025*std::pow(w[2][0], 0.5)*K_00*K_02*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1615] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))-0.0025*K_00*K_10);
    G[1616] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02))-0.0025*K_00*K_20);
    G[1617] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_01*(-0.00125*K_20-0.0025*K_22) + K_21*(-0.00125*(K_00 + K_02)-0.0025*K_01))-0.00125*K_01*K_22*(K_00 + K_01));
    G[1618] = -0.0025*std::pow(w[2][0], 0.5)*K_01*K_02*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1619] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))-0.0025*K_01*K_11);
    G[1620] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02))-0.0025*K_01*K_21);
    G[1621] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_00 + K_01)-0.00375*K_02)-0.00125*K_02*(K_20 + K_21));
    G[1622] = -0.0025*std::pow(w[2][0], 0.5)*K_02*K_02*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1623] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01))-0.0025*K_02*K_12);
    G[1624] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01))-0.0025*K_02*K_22);
    G[1625] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_10*(-0.00125*K_01-0.0025*(K_00 + K_02))-0.00125*K_00*(K_11 + K_12))-0.00125*K_02*K_10*(K_10 + K_11));
    G[1626] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_11*(-0.00125*K_00-0.0025*(K_01 + K_02))-0.00125*K_01*(K_10 + K_12))-0.00125*K_02*K_11*(K_10 + K_11));
    G[1627] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_12*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_10 + K_11));
    G[1628] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.00125*(K_20*(K_01*K_12 + K_02*K_11) + K_21*(K_00*K_12 + K_02*K_10) + K_22*(K_00*K_11 + K_01*K_10))-0.0025*(K_20*(K_02*K_10 + K_12*(K_00 + K_02)) + K_22*(K_00*K_12 + K_10*(K_00 + K_02))));
    G[1629] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_00*(-0.00125*K_11-0.00375*K_12) + K_10*(-0.00125*(K_01 + K_02)-0.0025*K_00))-0.0025*K_00*K_12*(K_00 + K_01));
    G[1630] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_10*(-0.00125*K_01-0.0025*K_00-0.00375*K_02)-0.00125*K_00*(K_11 + K_12))-0.0025*K_02*K_10*(K_10 + K_11));
    G[1631] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_10*(K_21 + K_22) + K_11*K_20) + K_12*(K_00*(K_21 + K_22) + K_01*K_20))-0.0025*K_20*(K_02*K_10 + K_12*(K_00 + K_02)));
    G[1632] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.00125*(K_20*(K_01*K_12 + K_02*K_11) + K_21*(K_00*K_12 + K_02*K_10) + K_22*(K_00*K_11 + K_01*K_10))-0.0025*(K_21*(K_02*K_11 + K_12*(K_01 + K_02)) + K_22*(K_01*K_12 + K_11*(K_01 + K_02))));
    G[1633] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_01*(-0.00125*K_10-0.00375*K_12) + K_11*(-0.00125*(K_00 + K_02)-0.0025*K_01))-0.0025*K_01*K_12*(K_00 + K_01));
    G[1634] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_11*(-0.00125*K_00-0.0025*K_01-0.00375*K_02)-0.00125*K_01*(K_10 + K_12))-0.0025*K_02*K_11*(K_10 + K_11));
    G[1635] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_10*K_21 + K_11*(K_20 + K_22)) + K_12*(K_00*K_21 + K_01*(K_20 + K_22)))-0.0025*K_21*(K_02*K_11 + K_12*(K_01 + K_02)));
    G[1636] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.0025*(K_02*K_12*(K_20 + K_21) + K_22*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)))-0.0075*K_02*K_12*K_22);
    G[1637] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_12*(-0.00375*(K_00 + K_01)-0.005*K_02)-0.00125*K_02*(K_10 + K_11));
    G[1638] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_12*(-0.00125*(K_00 + K_01)-0.005*K_02)-0.00375*K_02*(K_10 + K_11));
    G[1639] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01))-0.005*K_02*K_12)-0.0025*K_02*K_12*(K_20 + K_21));
    G[1640] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_22*(K_20*(-0.00125*K_01-0.0025*(K_00 + K_02))-0.00125*K_00*(K_21 + K_22))-0.00125*K_02*K_20*(K_20 + K_21));
    G[1641] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_00*(-0.00125*K_21-0.00375*K_22) + K_20*(-0.00125*(K_01 + K_02)-0.0025*K_00))-0.0025*K_00*K_22*(K_00 + K_01));
    G[1642] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_10*K_21 + K_20*(K_11 + K_12)) + K_22*(K_00*(K_11 + K_12) + K_01*K_10))-0.0025*K_10*(K_02*K_20 + K_22*(K_00 + K_02)));
    G[1643] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_22*(K_20*(-0.00125*K_01-0.0025*K_00-0.00375*K_02)-0.00125*K_00*(K_21 + K_22))-0.0025*K_02*K_20*(K_20 + K_21));
    G[1644] = -0.00125*std::pow(w[2][0], 0.5)*K_02*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1645] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(-0.00125*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12))-0.0025*K_10*K_20);
    G[1646] = -0.00125*std::pow(w[2][0], 0.5)*K_02*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1647] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_22*(K_21*(-0.00125*K_00-0.0025*(K_01 + K_02))-0.00125*K_01*(K_20 + K_22))-0.00125*K_02*K_21*(K_20 + K_21));
    G[1648] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_01*(-0.00125*K_20-0.00375*K_22) + K_21*(-0.00125*(K_00 + K_02)-0.0025*K_01))-0.0025*K_01*K_22*(K_00 + K_01));
    G[1649] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_11*K_20 + K_21*(K_10 + K_12)) + K_22*(K_00*K_11 + K_01*(K_10 + K_12)))-0.0025*K_11*(K_02*K_21 + K_22*(K_01 + K_02)));
    G[1650] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_22*(K_21*(-0.00125*K_00-0.0025*K_01-0.00375*K_02)-0.00125*K_01*(K_20 + K_22))-0.0025*K_02*K_21*(K_20 + K_21));
    G[1651] = -0.00125*std::pow(w[2][0], 0.5)*K_02*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1652] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(-0.00125*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12))-0.0025*K_11*K_21);
    G[1653] = -0.00125*std::pow(w[2][0], 0.5)*K_02*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1654] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_00 + K_01)-0.00375*K_02)-0.0025*K_02*(K_20 + K_21));
    G[1655] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(K_22*(-0.00375*(K_00 + K_01)-0.005*K_02)-0.00125*K_02*(K_20 + K_21));
    G[1656] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_22*(K_12*(-0.00125*(K_00 + K_01)-0.005*K_02)-0.0025*K_02*(K_10 + K_11))-0.00125*K_02*K_12*(K_20 + K_21));
    G[1657] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_00 + K_01)-0.005*K_02)-0.00375*K_02*(K_20 + K_21));
    G[1658] = -0.00125*std::pow(w[2][0], 0.5)*K_02*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1659] = std::pow(w[2][0], 0.5)*K_02*det*w[2][0]*w[4][0]*(-0.00125*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11))-0.0025*K_12*K_22);
    G[1660] = -0.00125*std::pow(w[2][0], 0.5)*K_02*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1661] = -0.00125*std::pow(w[2][0], 0.5)*K_10*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1662] = -0.00125*std::pow(w[2][0], 0.5)*K_11*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1663] = -0.00125*std::pow(w[2][0], 0.5)*K_12*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1664] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_10*(-0.00125*K_21-0.0025*K_22) + K_20*(-0.00125*(K_11 + K_12)-0.0025*K_10))-0.00125*K_10*K_22*(K_10 + K_11));
    G[1665] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))-0.0025*K_00*K_10);
    G[1666] = -0.0025*std::pow(w[2][0], 0.5)*K_10*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1667] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(-0.00125*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12))-0.0025*K_10*K_20);
    G[1668] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_11*(-0.00125*K_20-0.0025*K_22) + K_21*(-0.00125*(K_10 + K_12)-0.0025*K_11))-0.00125*K_11*K_22*(K_10 + K_11));
    G[1669] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))-0.0025*K_01*K_11);
    G[1670] = -0.0025*std::pow(w[2][0], 0.5)*K_11*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1671] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(-0.00125*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12))-0.0025*K_11*K_21);
    G[1672] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_22*(-0.0025*(K_10 + K_11)-0.00375*K_12)-0.00125*K_12*(K_20 + K_21));
    G[1673] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01))-0.0025*K_02*K_12);
    G[1674] = -0.0025*std::pow(w[2][0], 0.5)*K_12*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1675] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(-0.00125*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11))-0.0025*K_12*K_22);
    G[1676] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_22*(K_20*(-0.00125*K_11-0.0025*(K_10 + K_12))-0.00125*K_10*(K_21 + K_22))-0.00125*K_12*K_20*(K_20 + K_21));
    G[1677] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.00125*(K_12*(K_00*K_21 + K_20*(K_01 + K_02)) + K_22*(K_00*K_11 + K_10*(K_01 + K_02)))-0.0025*K_00*(K_12*K_20 + K_22*(K_10 + K_12)));
    G[1678] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_10*(-0.00125*K_21-0.00375*K_22) + K_20*(-0.00125*(K_11 + K_12)-0.0025*K_10))-0.0025*K_10*K_22*(K_10 + K_11));
    G[1679] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_22*(K_20*(-0.00125*K_11-0.0025*K_10-0.00375*K_12)-0.00125*K_10*(K_21 + K_22))-0.0025*K_12*K_20*(K_20 + K_21));
    G[1680] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_12*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1681] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02))-0.0025*K_00*K_20);
    G[1682] = -0.00125*std::pow(w[2][0], 0.5)*K_12*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1683] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_22*(K_21*(-0.00125*K_10-0.0025*(K_11 + K_12))-0.00125*K_11*(K_20 + K_22))-0.00125*K_12*K_21*(K_20 + K_21));
    G[1684] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.00125*(K_12*(K_01*K_20 + K_21*(K_00 + K_02)) + K_22*(K_01*K_10 + K_11*(K_00 + K_02)))-0.0025*K_01*(K_12*K_21 + K_22*(K_11 + K_12)));
    G[1685] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_11*(-0.00125*K_20-0.00375*K_22) + K_21*(-0.00125*(K_10 + K_12)-0.0025*K_11))-0.0025*K_11*K_22*(K_10 + K_11));
    G[1686] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_22*(K_21*(-0.00125*K_10-0.0025*K_11-0.00375*K_12)-0.00125*K_11*(K_20 + K_22))-0.0025*K_12*K_21*(K_20 + K_21));
    G[1687] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_12*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1688] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02))-0.0025*K_01*K_21);
    G[1689] = -0.00125*std::pow(w[2][0], 0.5)*K_12*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1690] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_10 + K_11)-0.00375*K_12)-0.0025*K_12*(K_20 + K_21));
    G[1691] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_22*(K_12*(-0.0025*(K_00 + K_01)-0.005*K_02)-0.00125*K_02*(K_10 + K_11))-0.00125*K_02*K_12*(K_20 + K_21));
    G[1692] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(K_22*(-0.00375*(K_10 + K_11)-0.005*K_12)-0.00125*K_12*(K_20 + K_21));
    G[1693] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(K_22*(-0.00125*(K_10 + K_11)-0.005*K_12)-0.00375*K_12*(K_20 + K_21));
    G[1694] = -0.00125*std::pow(w[2][0], 0.5)*K_02*K_12*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1695] = std::pow(w[2][0], 0.5)*K_12*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01))-0.0025*K_02*K_22);
    G[1696] = -0.00125*std::pow(w[2][0], 0.5)*K_12*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1697] = -0.00125*std::pow(w[2][0], 0.5)*K_20*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1698] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02))-0.0025*K_00*K_20);
    G[1699] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(-0.00125*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12))-0.0025*K_10*K_20);
    G[1700] = -0.0025*std::pow(w[2][0], 0.5)*K_20*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1701] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_22*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1702] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))-0.0025*K_00*K_10);
    G[1703] = -0.00125*std::pow(w[2][0], 0.5)*K_10*K_22*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1704] = -0.00125*std::pow(w[2][0], 0.5)*K_21*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1705] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02))-0.0025*K_01*K_21);
    G[1706] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(-0.00125*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12))-0.0025*K_11*K_21);
    G[1707] = -0.0025*std::pow(w[2][0], 0.5)*K_21*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1708] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_22*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1709] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))-0.0025*K_01*K_11);
    G[1710] = -0.00125*std::pow(w[2][0], 0.5)*K_11*K_22*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1711] = -0.00125*std::pow(w[2][0], 0.5)*K_22*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1712] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01))-0.0025*K_02*K_22);
    G[1713] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(-0.00125*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11))-0.0025*K_12*K_22);
    G[1714] = -0.0025*std::pow(w[2][0], 0.5)*K_22*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1715] = -0.00125*std::pow(w[2][0], 0.5)*K_02*K_22*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1716] = std::pow(w[2][0], 0.5)*K_22*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01))-0.0025*K_02*K_12);
    G[1717] = -0.00125*std::pow(w[2][0], 0.5)*K_12*K_22*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1718] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_00*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1719] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_01*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1720] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_10*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_11 + K_12));
    G[1721] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_00*(-0.00125*K_12-0.0025*K_11) + K_10*(-0.00125*(K_01 + K_02)-0.0025*K_00))-0.00125*K_00*K_11*(K_00 + K_02));
    G[1722] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_01 + K_02)-0.00375*K_00)-0.00125*K_00*(K_21 + K_22));
    G[1723] = -0.0025*std::pow(w[2][0], 0.5)*K_00*K_00*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1724] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))-0.0025*K_00*K_10);
    G[1725] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02))-0.0025*K_00*K_20);
    G[1726] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_00*(-0.00125*K_22-0.0025*K_21) + K_20*(-0.00125*(K_01 + K_02)-0.0025*K_00))-0.00125*K_00*K_21*(K_00 + K_02));
    G[1727] = -0.0025*std::pow(w[2][0], 0.5)*K_00*K_01*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1728] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))-0.0025*K_01*K_11);
    G[1729] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02))-0.0025*K_01*K_21);
    G[1730] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01))-0.0025*K_02*K_12);
    G[1731] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01))-0.0025*K_02*K_22);
    G[1732] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_10*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_11 + K_12));
    G[1733] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(K_10*(-0.00125*K_02-0.0025*(K_00 + K_01))-0.00125*K_00*(K_11 + K_12))-0.00125*K_01*K_10*(K_10 + K_12));
    G[1734] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.0025*(K_00*K_10*(K_21 + K_22) + K_20*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)))-0.0075*K_00*K_10*K_20);
    G[1735] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_10*(-0.00375*(K_01 + K_02)-0.005*K_00)-0.00125*K_00*(K_11 + K_12));
    G[1736] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_10*(-0.00125*(K_01 + K_02)-0.005*K_00)-0.00375*K_00*(K_11 + K_12));
    G[1737] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))-0.005*K_00*K_10)-0.0025*K_00*K_10*(K_21 + K_22));
    G[1738] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.00125*(K_20*(K_01*K_12 + K_02*K_11) + K_21*(K_00*K_12 + K_02*K_10) + K_22*(K_00*K_11 + K_01*K_10))-0.0025*(K_20*(K_01*K_10 + K_11*(K_00 + K_01)) + K_21*(K_00*K_11 + K_10*(K_00 + K_01))));
    G[1739] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_00*(-0.00125*K_12-0.0025*K_11) + K_10*(-0.0025*(K_01 + K_02)-0.00375*K_00))-0.00125*K_00*K_11*(K_00 + K_02));
    G[1740] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(K_10*(-0.00125*K_02-0.0025*K_01-0.00375*K_00)-0.0025*K_00*(K_11 + K_12))-0.00125*K_01*K_10*(K_10 + K_12));
    G[1741] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_11*(K_20 + K_22) + K_12*K_21) + K_10*(K_01*(K_20 + K_22) + K_02*K_21))-0.0025*K_21*(K_00*K_11 + K_10*(K_00 + K_01)));
    G[1742] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_00*(-0.00125*K_11-0.0025*K_12) + K_10*(-0.0025*(K_01 + K_02)-0.00375*K_00))-0.00125*K_00*K_12*(K_00 + K_01));
    G[1743] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_10*(-0.00125*K_01-0.0025*K_02-0.00375*K_00)-0.0025*K_00*(K_11 + K_12))-0.00125*K_02*K_10*(K_10 + K_11));
    G[1744] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_11*K_22 + K_12*(K_20 + K_21)) + K_10*(K_01*K_22 + K_02*(K_20 + K_21)))-0.0025*K_22*(K_00*K_12 + K_10*(K_00 + K_02)));
    G[1745] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_01 + K_02)-0.00375*K_00)-0.0025*K_00*(K_21 + K_22));
    G[1746] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(K_20*(-0.00375*(K_01 + K_02)-0.005*K_00)-0.00125*K_00*(K_21 + K_22));
    G[1747] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_20*(K_10*(-0.00125*(K_01 + K_02)-0.005*K_00)-0.0025*K_00*(K_11 + K_12))-0.00125*K_00*K_10*(K_21 + K_22));
    G[1748] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_01 + K_02)-0.005*K_00)-0.00375*K_00*(K_21 + K_22));
    G[1749] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1750] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(-0.00125*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12))-0.0025*K_10*K_20);
    G[1751] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1752] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_21*(K_20*(-0.00125*K_02-0.0025*(K_00 + K_01))-0.00125*K_00*(K_21 + K_22))-0.00125*K_01*K_20*(K_20 + K_22));
    G[1753] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_00*(-0.00125*K_22-0.0025*K_21) + K_20*(-0.0025*(K_01 + K_02)-0.00375*K_00))-0.00125*K_00*K_21*(K_00 + K_02));
    G[1754] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_11*K_22 + K_21*(K_10 + K_12)) + K_20*(K_01*(K_10 + K_12) + K_02*K_11))-0.0025*K_11*(K_00*K_21 + K_20*(K_00 + K_01)));
    G[1755] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_21*(K_20*(-0.00125*K_02-0.0025*K_01-0.00375*K_00)-0.0025*K_00*(K_21 + K_22))-0.00125*K_01*K_20*(K_20 + K_22));
    G[1756] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1757] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(-0.00125*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12))-0.0025*K_11*K_21);
    G[1758] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1759] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_00*(-0.00125*K_21-0.0025*K_22) + K_20*(-0.0025*(K_01 + K_02)-0.00375*K_00))-0.00125*K_00*K_22*(K_00 + K_01));
    G[1760] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_12*K_21 + K_22*(K_10 + K_11)) + K_20*(K_01*K_12 + K_02*(K_10 + K_11)))-0.0025*K_12*(K_00*K_22 + K_20*(K_00 + K_02)));
    G[1761] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_22*(K_20*(-0.00125*K_01-0.0025*K_02-0.00375*K_00)-0.0025*K_00*(K_21 + K_22))-0.00125*K_02*K_20*(K_20 + K_21));
    G[1762] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1763] = std::pow(w[2][0], 0.5)*K_00*det*w[2][0]*w[4][0]*(-0.00125*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11))-0.0025*K_12*K_22);
    G[1764] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1765] = -0.00125*std::pow(w[2][0], 0.5)*K_10*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1766] = -0.00125*std::pow(w[2][0], 0.5)*K_10*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1767] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(-0.0025*(K_11 + K_12)-0.00375*K_10)-0.00125*K_10*(K_21 + K_22));
    G[1768] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))-0.0025*K_00*K_10);
    G[1769] = -0.0025*std::pow(w[2][0], 0.5)*K_10*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1770] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(-0.00125*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12))-0.0025*K_10*K_20);
    G[1771] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(K_10*(-0.00125*K_22-0.0025*K_21) + K_20*(-0.00125*(K_11 + K_12)-0.0025*K_10))-0.00125*K_10*K_21*(K_10 + K_12));
    G[1772] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))-0.0025*K_01*K_11);
    G[1773] = -0.0025*std::pow(w[2][0], 0.5)*K_10*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1774] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(-0.00125*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12))-0.0025*K_11*K_21);
    G[1775] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01))-0.0025*K_02*K_12);
    G[1776] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(-0.00125*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11))-0.0025*K_12*K_22);
    G[1777] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_11 + K_12)-0.00375*K_10)-0.0025*K_10*(K_21 + K_22));
    G[1778] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_20*(K_10*(-0.0025*(K_01 + K_02)-0.005*K_00)-0.00125*K_00*(K_11 + K_12))-0.00125*K_00*K_10*(K_21 + K_22));
    G[1779] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(K_20*(-0.00375*(K_11 + K_12)-0.005*K_10)-0.00125*K_10*(K_21 + K_22));
    G[1780] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(K_20*(-0.00125*(K_11 + K_12)-0.005*K_10)-0.00375*K_10*(K_21 + K_22));
    G[1781] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_10*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1782] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02))-0.0025*K_00*K_20);
    G[1783] = -0.00125*std::pow(w[2][0], 0.5)*K_10*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1784] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_21*(K_20*(-0.00125*K_12-0.0025*(K_10 + K_11))-0.00125*K_10*(K_21 + K_22))-0.00125*K_11*K_20*(K_20 + K_22));
    G[1785] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.00125*(K_10*(K_01*K_22 + K_21*(K_00 + K_02)) + K_20*(K_01*K_12 + K_11*(K_00 + K_02)))-0.0025*K_01*(K_10*K_21 + K_20*(K_10 + K_11)));
    G[1786] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(K_10*(-0.00125*K_22-0.0025*K_21) + K_20*(-0.0025*(K_11 + K_12)-0.00375*K_10))-0.00125*K_10*K_21*(K_10 + K_12));
    G[1787] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_21*(K_20*(-0.00125*K_12-0.0025*K_11-0.00375*K_10)-0.0025*K_10*(K_21 + K_22))-0.00125*K_11*K_20*(K_20 + K_22));
    G[1788] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_10*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1789] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02))-0.0025*K_01*K_21);
    G[1790] = -0.00125*std::pow(w[2][0], 0.5)*K_10*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1791] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.00125*(K_10*(K_02*K_21 + K_22*(K_00 + K_01)) + K_20*(K_02*K_11 + K_12*(K_00 + K_01)))-0.0025*K_02*(K_10*K_22 + K_20*(K_10 + K_12)));
    G[1792] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_10*(-0.00125*K_21-0.0025*K_22) + K_20*(-0.0025*(K_11 + K_12)-0.00375*K_10))-0.00125*K_10*K_22*(K_10 + K_11));
    G[1793] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_22*(K_20*(-0.00125*K_11-0.0025*K_12-0.00375*K_10)-0.0025*K_10*(K_21 + K_22))-0.00125*K_12*K_20*(K_20 + K_21));
    G[1794] = -0.00125*std::pow(w[2][0], 0.5)*K_02*K_10*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1795] = std::pow(w[2][0], 0.5)*K_10*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01))-0.0025*K_02*K_22);
    G[1796] = -0.00125*std::pow(w[2][0], 0.5)*K_10*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1797] = -0.00125*std::pow(w[2][0], 0.5)*K_20*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1798] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02))-0.0025*K_00*K_20);
    G[1799] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(-0.00125*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12))-0.0025*K_10*K_20);
    G[1800] = -0.0025*std::pow(w[2][0], 0.5)*K_20*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1801] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_20*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1802] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))-0.0025*K_00*K_10);
    G[1803] = -0.00125*std::pow(w[2][0], 0.5)*K_10*K_20*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1804] = -0.00125*std::pow(w[2][0], 0.5)*K_20*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1805] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02))-0.0025*K_01*K_21);
    G[1806] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(-0.00125*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12))-0.0025*K_11*K_21);
    G[1807] = -0.0025*std::pow(w[2][0], 0.5)*K_20*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1808] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_20*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1809] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))-0.0025*K_01*K_11);
    G[1810] = -0.00125*std::pow(w[2][0], 0.5)*K_11*K_20*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1811] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01))-0.0025*K_02*K_22);
    G[1812] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(-0.00125*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11))-0.0025*K_12*K_22);
    G[1813] = -0.00125*std::pow(w[2][0], 0.5)*K_02*K_20*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1814] = std::pow(w[2][0], 0.5)*K_20*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01))-0.0025*K_02*K_12);
    G[1815] = -0.00125*std::pow(w[2][0], 0.5)*K_12*K_20*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1816] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_01*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1817] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_11*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_10 + K_12));
    G[1818] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))-0.0025*K_00*K_10);
    G[1819] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02))-0.0025*K_00*K_20);
    G[1820] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_00 + K_02)-0.00375*K_01)-0.00125*K_01*(K_20 + K_22));
    G[1821] = -0.0025*std::pow(w[2][0], 0.5)*K_01*K_01*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1822] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))-0.0025*K_01*K_11);
    G[1823] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02))-0.0025*K_01*K_21);
    G[1824] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01))-0.0025*K_02*K_12);
    G[1825] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01))-0.0025*K_02*K_22);
    G[1826] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_11*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_10 + K_12));
    G[1827] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_00*(-0.00125*K_12-0.00375*K_11) + K_10*(-0.00125*(K_01 + K_02)-0.0025*K_00))-0.0025*K_00*K_11*(K_00 + K_02));
    G[1828] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(K_10*(-0.00125*K_02-0.0025*K_00-0.00375*K_01)-0.00125*K_00*(K_11 + K_12))-0.0025*K_01*K_10*(K_10 + K_12));
    G[1829] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_10*(K_21 + K_22) + K_12*K_20) + K_11*(K_00*(K_21 + K_22) + K_02*K_20))-0.0025*K_20*(K_01*K_10 + K_11*(K_00 + K_01)));
    G[1830] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.0025*(K_01*K_11*(K_20 + K_22) + K_21*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)))-0.0075*K_01*K_11*K_21);
    G[1831] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_11*(-0.00375*(K_00 + K_02)-0.005*K_01)-0.00125*K_01*(K_10 + K_12));
    G[1832] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_11*(-0.00125*(K_00 + K_02)-0.005*K_01)-0.00375*K_01*(K_10 + K_12));
    G[1833] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))-0.005*K_01*K_11)-0.0025*K_01*K_11*(K_20 + K_22));
    G[1834] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_01*(-0.00125*K_10-0.0025*K_12) + K_11*(-0.0025*(K_00 + K_02)-0.00375*K_01))-0.00125*K_01*K_12*(K_00 + K_01));
    G[1835] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_11*(-0.00125*K_00-0.0025*K_02-0.00375*K_01)-0.0025*K_01*(K_10 + K_12))-0.00125*K_02*K_11*(K_10 + K_11));
    G[1836] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_10*K_22 + K_12*(K_20 + K_21)) + K_11*(K_00*K_22 + K_02*(K_20 + K_21)))-0.0025*K_22*(K_01*K_12 + K_11*(K_01 + K_02)));
    G[1837] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_01*(K_00*(-0.00125*K_22-0.00375*K_21) + K_20*(-0.00125*(K_01 + K_02)-0.0025*K_00))-0.0025*K_00*K_21*(K_00 + K_02));
    G[1838] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_10*K_22 + K_20*(K_11 + K_12)) + K_21*(K_00*(K_11 + K_12) + K_02*K_10))-0.0025*K_10*(K_01*K_20 + K_21*(K_00 + K_01)));
    G[1839] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_21*(K_20*(-0.00125*K_02-0.0025*K_00-0.00375*K_01)-0.00125*K_00*(K_21 + K_22))-0.0025*K_01*K_20*(K_20 + K_22));
    G[1840] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_10*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1841] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(-0.00125*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12))-0.0025*K_10*K_20);
    G[1842] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1843] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_00 + K_02)-0.00375*K_01)-0.0025*K_01*(K_20 + K_22));
    G[1844] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(K_21*(-0.00375*(K_00 + K_02)-0.005*K_01)-0.00125*K_01*(K_20 + K_22));
    G[1845] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_21*(K_11*(-0.00125*(K_00 + K_02)-0.005*K_01)-0.0025*K_01*(K_10 + K_12))-0.00125*K_01*K_11*(K_20 + K_22));
    G[1846] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_00 + K_02)-0.005*K_01)-0.00375*K_01*(K_20 + K_22));
    G[1847] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1848] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(-0.00125*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12))-0.0025*K_11*K_21);
    G[1849] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1850] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_02*(K_01*(-0.00125*K_20-0.0025*K_22) + K_21*(-0.0025*(K_00 + K_02)-0.00375*K_01))-0.00125*K_01*K_22*(K_00 + K_01));
    G[1851] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_12*K_20 + K_22*(K_10 + K_11)) + K_21*(K_00*K_12 + K_02*(K_10 + K_11)))-0.0025*K_12*(K_01*K_22 + K_21*(K_01 + K_02)));
    G[1852] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_22*(K_21*(-0.00125*K_00-0.0025*K_02-0.00375*K_01)-0.0025*K_01*(K_20 + K_22))-0.00125*K_02*K_21*(K_20 + K_21));
    G[1853] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_12*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1854] = std::pow(w[2][0], 0.5)*K_01*det*w[2][0]*w[4][0]*(-0.00125*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11))-0.0025*K_12*K_22);
    G[1855] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1856] = -0.00125*std::pow(w[2][0], 0.5)*K_11*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1857] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))-0.0025*K_00*K_10);
    G[1858] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(-0.00125*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12))-0.0025*K_10*K_20);
    G[1859] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_21*(-0.0025*(K_10 + K_12)-0.00375*K_11)-0.00125*K_11*(K_20 + K_22));
    G[1860] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))-0.0025*K_01*K_11);
    G[1861] = -0.0025*std::pow(w[2][0], 0.5)*K_11*K_11*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1862] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(-0.00125*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12))-0.0025*K_11*K_21);
    G[1863] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01))-0.0025*K_02*K_12);
    G[1864] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(-0.00125*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11))-0.0025*K_12*K_22);
    G[1865] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.00125*(K_11*(K_00*K_22 + K_20*(K_01 + K_02)) + K_21*(K_00*K_12 + K_10*(K_01 + K_02)))-0.0025*K_00*(K_11*K_20 + K_21*(K_10 + K_11)));
    G[1866] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_11*(K_10*(-0.00125*K_22-0.00375*K_21) + K_20*(-0.00125*(K_11 + K_12)-0.0025*K_10))-0.0025*K_10*K_21*(K_10 + K_12));
    G[1867] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_21*(K_20*(-0.00125*K_12-0.0025*K_10-0.00375*K_11)-0.00125*K_10*(K_21 + K_22))-0.0025*K_11*K_20*(K_20 + K_22));
    G[1868] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_11*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1869] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02))-0.0025*K_00*K_20);
    G[1870] = -0.00125*std::pow(w[2][0], 0.5)*K_11*K_20*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1871] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_10 + K_12)-0.00375*K_11)-0.0025*K_11*(K_20 + K_22));
    G[1872] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_21*(K_11*(-0.0025*(K_00 + K_02)-0.005*K_01)-0.00125*K_01*(K_10 + K_12))-0.00125*K_01*K_11*(K_20 + K_22));
    G[1873] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(K_21*(-0.00375*(K_10 + K_12)-0.005*K_11)-0.00125*K_11*(K_20 + K_22));
    G[1874] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(K_21*(-0.00125*(K_10 + K_12)-0.005*K_11)-0.00375*K_11*(K_20 + K_22));
    G[1875] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_11*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1876] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02))-0.0025*K_01*K_21);
    G[1877] = -0.00125*std::pow(w[2][0], 0.5)*K_11*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1878] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(-0.00125*(K_11*(K_02*K_20 + K_22*(K_00 + K_01)) + K_21*(K_02*K_10 + K_12*(K_00 + K_01)))-0.0025*K_02*(K_11*K_22 + K_21*(K_11 + K_12)));
    G[1879] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_12*(K_11*(-0.00125*K_20-0.0025*K_22) + K_21*(-0.0025*(K_10 + K_12)-0.00375*K_11))-0.00125*K_11*K_22*(K_10 + K_11));
    G[1880] = std::pow(w[2][0], 0.5)*det*w[2][0]*w[4][0]*(K_22*(K_21*(-0.00125*K_10-0.0025*K_12-0.00375*K_11)-0.0025*K_11*(K_20 + K_22))-0.00125*K_12*K_21*(K_20 + K_21));
    G[1881] = -0.00125*std::pow(w[2][0], 0.5)*K_02*K_11*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1882] = std::pow(w[2][0], 0.5)*K_11*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01))-0.0025*K_02*K_22);
    G[1883] = -0.00125*std::pow(w[2][0], 0.5)*K_11*K_22*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1884] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02))-0.0025*K_00*K_20);
    G[1885] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(-0.00125*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12))-0.0025*K_10*K_20);
    G[1886] = -0.00125*std::pow(w[2][0], 0.5)*K_00*K_21*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1887] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(-0.00125*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))-0.0025*K_00*K_10);
    G[1888] = -0.00125*std::pow(w[2][0], 0.5)*K_10*K_21*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1889] = -0.00125*std::pow(w[2][0], 0.5)*K_21*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1890] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02))-0.0025*K_01*K_21);
    G[1891] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(-0.00125*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12))-0.0025*K_11*K_21);
    G[1892] = -0.0025*std::pow(w[2][0], 0.5)*K_21*K_21*det*w[2][0]*w[4][0]*(K_20 + K_21 + K_22);
    G[1893] = -0.00125*std::pow(w[2][0], 0.5)*K_01*K_21*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1894] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(-0.00125*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))-0.0025*K_01*K_11);
    G[1895] = -0.00125*std::pow(w[2][0], 0.5)*K_11*K_21*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1896] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01))-0.0025*K_02*K_22);
    G[1897] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(-0.00125*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11))-0.0025*K_12*K_22);
    G[1898] = -0.00125*std::pow(w[2][0], 0.5)*K_02*K_21*det*w[2][0]*w[4][0]*(K_00 + K_01 + K_02);
    G[1899] = std::pow(w[2][0], 0.5)*K_21*det*w[2][0]*w[4][0]*(-0.00125*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01))-0.0025*K_02*K_12);
    G[1900] = -0.00125*std::pow(w[2][0], 0.5)*K_12*K_21*det*w[2][0]*w[4][0]*(K_10 + K_11 + K_12);
    G[1901] = K_00*det*w[4][0]*(0.05*std::pow(w[2][0], 0.5)*w[2][0]*(K_00 + K_01 + K_02)-0.025*std::pow(w[2][0], 1.5)*(K_00 + K_01 + K_02));
    G[1902] = K_01*det*w[4][0]*(0.05*std::pow(w[2][0], 0.5)*w[2][0]*(K_00 + K_01 + K_02)-0.025*std::pow(w[2][0], 1.5)*(K_00 + K_01 + K_02));
    G[1903] = K_02*det*w[4][0]*(0.05*std::pow(w[2][0], 0.5)*w[2][0]*(K_00 + K_01 + K_02)-0.025*std::pow(w[2][0], 1.5)*(K_00 + K_01 + K_02));
    G[1904] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.05*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)) + 0.1*K_00*K_10) + std::pow(w[2][0], 1.5)*(-0.025*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))-0.05*K_00*K_10));
    G[1905] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.05*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)) + 0.1*K_01*K_11) + std::pow(w[2][0], 1.5)*(-0.025*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))-0.05*K_01*K_11));
    G[1906] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.05*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)) + 0.1*K_02*K_12) + std::pow(w[2][0], 1.5)*(-0.025*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01))-0.05*K_02*K_12));
    G[1907] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.05*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02)) + 0.1*K_00*K_20) + std::pow(w[2][0], 1.5)*(-0.025*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02))-0.05*K_00*K_20));
    G[1908] = K_00*det*w[4][0]*(0.05*std::pow(w[2][0], 0.5)*w[2][0]*(K_00 + K_01 + K_02)-0.05*std::pow(w[2][0], 1.5)*(K_00 + K_01 + K_02));
    G[1909] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.025*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02)) + 0.05*K_00*K_10) + std::pow(w[2][0], 1.5)*(-0.025*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))-0.05*K_00*K_10));
    G[1910] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.025*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02)) + 0.05*K_00*K_20) + std::pow(w[2][0], 1.5)*(-0.025*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02))-0.05*K_00*K_20));
    G[1911] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.05*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02)) + 0.1*K_01*K_21) + std::pow(w[2][0], 1.5)*(-0.025*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02))-0.05*K_01*K_21));
    G[1912] = K_01*det*w[4][0]*(0.05*std::pow(w[2][0], 0.5)*w[2][0]*(K_00 + K_01 + K_02)-0.05*std::pow(w[2][0], 1.5)*(K_00 + K_01 + K_02));
    G[1913] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.025*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02)) + 0.05*K_01*K_11) + std::pow(w[2][0], 1.5)*(-0.025*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))-0.05*K_01*K_11));
    G[1914] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.025*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02)) + 0.05*K_01*K_21) + std::pow(w[2][0], 1.5)*(-0.025*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02))-0.05*K_01*K_21));
    G[1915] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.05*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01)) + 0.1*K_02*K_22) + std::pow(w[2][0], 1.5)*(-0.025*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01))-0.05*K_02*K_22));
    G[1916] = K_02*det*w[4][0]*(0.05*std::pow(w[2][0], 0.5)*w[2][0]*(K_00 + K_01 + K_02)-0.05*std::pow(w[2][0], 1.5)*(K_00 + K_01 + K_02));
    G[1917] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.025*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01)) + 0.05*K_02*K_12) + std::pow(w[2][0], 1.5)*(-0.025*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01))-0.05*K_02*K_12));
    G[1918] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.025*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01)) + 0.05*K_02*K_22) + std::pow(w[2][0], 1.5)*(-0.025*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01))-0.05*K_02*K_22));
    G[1919] = K_10*det*w[4][0]*(0.05*std::pow(w[2][0], 0.5)*w[2][0]*(K_10 + K_11 + K_12)-0.025*std::pow(w[2][0], 1.5)*(K_10 + K_11 + K_12));
    G[1920] = K_11*det*w[4][0]*(0.05*std::pow(w[2][0], 0.5)*w[2][0]*(K_10 + K_11 + K_12)-0.025*std::pow(w[2][0], 1.5)*(K_10 + K_11 + K_12));
    G[1921] = K_12*det*w[4][0]*(0.05*std::pow(w[2][0], 0.5)*w[2][0]*(K_10 + K_11 + K_12)-0.025*std::pow(w[2][0], 1.5)*(K_10 + K_11 + K_12));
    G[1922] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.05*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12)) + 0.1*K_10*K_20) + std::pow(w[2][0], 1.5)*(-0.025*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12))-0.05*K_10*K_20));
    G[1923] = K_10*det*w[4][0]*(0.05*std::pow(w[2][0], 0.5)*w[2][0]*(K_10 + K_11 + K_12)-0.05*std::pow(w[2][0], 1.5)*(K_10 + K_11 + K_12));
    G[1924] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.025*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12)) + 0.05*K_10*K_20) + std::pow(w[2][0], 1.5)*(-0.025*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12))-0.05*K_10*K_20));
    G[1925] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.05*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12)) + 0.1*K_11*K_21) + std::pow(w[2][0], 1.5)*(-0.025*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12))-0.05*K_11*K_21));
    G[1926] = K_11*det*w[4][0]*(0.05*std::pow(w[2][0], 0.5)*w[2][0]*(K_10 + K_11 + K_12)-0.05*std::pow(w[2][0], 1.5)*(K_10 + K_11 + K_12));
    G[1927] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.025*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12)) + 0.05*K_11*K_21) + std::pow(w[2][0], 1.5)*(-0.025*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12))-0.05*K_11*K_21));
    G[1928] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.05*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11)) + 0.1*K_12*K_22) + std::pow(w[2][0], 1.5)*(-0.025*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11))-0.05*K_12*K_22));
    G[1929] = K_12*det*w[4][0]*(0.05*std::pow(w[2][0], 0.5)*w[2][0]*(K_10 + K_11 + K_12)-0.05*std::pow(w[2][0], 1.5)*(K_10 + K_11 + K_12));
    G[1930] = det*w[4][0]*(std::pow(w[2][0], 0.5)*w[2][0]*(0.025*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11)) + 0.05*K_12*K_22) + std::pow(w[2][0], 1.5)*(-0.025*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11))-0.05*K_12*K_22));
    G[1931] = K_20*det*w[4][0]*(0.05*std::pow(w[2][0], 0.5)*w[2][0]*(K_20 + K_21 + K_22)-0.025*std::pow(w[2][0], 1.5)*(K_20 + K_21 + K_22));
    G[1932] = K_20*det*w[4][0]*(0.05*std::pow(w[2][0], 0.5)*w[2][0]*(K_20 + K_21 + K_22)-0.05*std::pow(w[2][0], 1.5)*(K_20 + K_21 + K_22));
    G[1933] = -0.025*std::pow(w[2][0], 1.5)*K_00*det*w[4][0]*(K_00 + K_01 + K_02);
    G[1934] = std::pow(w[2][0], 1.5)*det*w[4][0]*(-0.025*(K_00*(K_11 + K_12) + K_10*(K_01 + K_02))-0.05*K_00*K_10);
    G[1935] = std::pow(w[2][0], 1.5)*det*w[4][0]*(-0.025*(K_00*(K_21 + K_22) + K_20*(K_01 + K_02))-0.05*K_00*K_20);
    G[1936] = -0.025*std::pow(w[2][0], 1.5)*K_10*det*w[4][0]*(K_10 + K_11 + K_12);
    G[1937] = std::pow(w[2][0], 1.5)*det*w[4][0]*(-0.025*(K_10*(K_21 + K_22) + K_20*(K_11 + K_12))-0.05*K_10*K_20);
    G[1938] = -0.025*std::pow(w[2][0], 1.5)*K_20*det*w[4][0]*(K_20 + K_21 + K_22);
    G[1939] = K_21*det*w[4][0]*(0.05*std::pow(w[2][0], 0.5)*w[2][0]*(K_20 + K_21 + K_22)-0.025*std::pow(w[2][0], 1.5)*(K_20 + K_21 + K_22));
    G[1940] = K_21*det*w[4][0]*(0.05*std::pow(w[2][0], 0.5)*w[2][0]*(K_20 + K_21 + K_22)-0.05*std::pow(w[2][0], 1.5)*(K_20 + K_21 + K_22));
    G[1941] = -0.025*std::pow(w[2][0], 1.5)*K_01*det*w[4][0]*(K_00 + K_01 + K_02);
    G[1942] = std::pow(w[2][0], 1.5)*det*w[4][0]*(-0.025*(K_01*(K_10 + K_12) + K_11*(K_00 + K_02))-0.05*K_01*K_11);
    G[1943] = std::pow(w[2][0], 1.5)*det*w[4][0]*(-0.025*(K_01*(K_20 + K_22) + K_21*(K_00 + K_02))-0.05*K_01*K_21);
    G[1944] = -0.025*std::pow(w[2][0], 1.5)*K_11*det*w[4][0]*(K_10 + K_11 + K_12);
    G[1945] = std::pow(w[2][0], 1.5)*det*w[4][0]*(-0.025*(K_11*(K_20 + K_22) + K_21*(K_10 + K_12))-0.05*K_11*K_21);
    G[1946] = -0.025*std::pow(w[2][0], 1.5)*K_21*det*w[4][0]*(K_20 + K_21 + K_22);
    G[1947] = K_22*det*w[4][0]*(0.05*std::pow(w[2][0], 0.5)*w[2][0]*(K_20 + K_21 + K_22)-0.025*std::pow(w[2][0], 1.5)*(K_20 + K_21 + K_22));
    G[1948] = K_22*det*w[4][0]*(0.05*std::pow(w[2][0], 0.5)*w[2][0]*(K_20 + K_21 + K_22)-0.05*std::pow(w[2][0], 1.5)*(K_20 + K_21 + K_22));
    G[1949] = -0.025*std::pow(w[2][0], 1.5)*K_02*det*w[4][0]*(K_00 + K_01 + K_02);
    G[1950] = std::pow(w[2][0], 1.5)*det*w[4][0]*(-0.025*(K_02*(K_10 + K_11) + K_12*(K_00 + K_01))-0.05*K_02*K_12);
    G[1951] = std::pow(w[2][0], 1.5)*det*w[4][0]*(-0.025*(K_02*(K_20 + K_21) + K_22*(K_00 + K_01))-0.05*K_02*K_22);
    G[1952] = -0.025*std::pow(w[2][0], 1.5)*K_12*det*w[4][0]*(K_10 + K_11 + K_12);
    G[1953] = std::pow(w[2][0], 1.5)*det*w[4][0]*(-0.025*(K_12*(K_20 + K_21) + K_22*(K_10 + K_11))-0.05*K_12*K_22);
    G[1954] = -0.025*std::pow(w[2][0], 1.5)*K_22*det*w[4][0]*(K_20 + K_21 + K_22);
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 542906
    for (unsigned int ip = 0; ip < 14; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      double F13 = 0.0;
      double F14 = 0.0;
      double F15 = 0.0;
      double F16 = 0.0;
      double F17 = 0.0;
      double F18 = 0.0;
      double F19 = 0.0;
      double F20 = 0.0;
      double F21 = 0.0;
      double F22 = 0.0;
      double F23 = 0.0;
      double F24 = 0.0;
      double F25 = 0.0;
      double F26 = 0.0;
      double F27 = 0.0;
      double F28 = 0.0;
      double F29 = 0.0;
      double F30 = 0.0;
      double F31 = 0.0;
      double F32 = 0.0;
      double F33 = 0.0;
      double F34 = 0.0;
      double F35 = 0.0;
      double F36 = 0.0;
      double F37 = 0.0;
      double F38 = 0.0;
      double F39 = 0.0;
      double F40 = 0.0;
      
      // Total number of operations to compute function values = 96
      for (unsigned int r = 0; r < 2; r++)
      {
        F0 += FE0_D001[ip][r]*w[1][nzc2[r]];
        F1 += FE0_D001[ip][r]*w[1][nzc1[r]];
        F2 += FE0_D001[ip][r]*w[1][nzc0[r]];
        F3 += FE0_D001[ip][r]*w[8][nzc2[r]];
        F4 += FE0_D001[ip][r]*w[8][nzc1[r]];
        F5 += FE0_D001[ip][r]*w[8][nzc0[r]];
        F9 += FE0_D001[ip][r]*w[0][nzc6[r]];
        F10 += FE0_D001[ip][r]*w[0][nzc5[r]];
        F11 += FE0_D001[ip][r]*w[0][nzc4[r]];
        F12 += FE0_D001[ip][r]*w[7][nzc6[r]];
        F13 += FE0_D001[ip][r]*w[7][nzc5[r]];
        F14 += FE0_D001[ip][r]*w[7][nzc4[r]];
        F21 += FE0_D001[ip][r]*w[0][nzc10[r]];
        F22 += FE0_D001[ip][r]*w[0][nzc9[r]];
        F23 += FE0_D001[ip][r]*w[0][nzc8[r]];
        F24 += FE0_D001[ip][r]*w[7][nzc10[r]];
        F25 += FE0_D001[ip][r]*w[7][nzc9[r]];
        F26 += FE0_D001[ip][r]*w[7][nzc8[r]];
        F28 += FE0_D001[ip][r]*w[0][nzc14[r]];
        F29 += FE0_D001[ip][r]*w[0][nzc13[r]];
        F30 += FE0_D001[ip][r]*w[0][nzc12[r]];
        F31 += FE0_D001[ip][r]*w[7][nzc14[r]];
        F32 += FE0_D001[ip][r]*w[7][nzc13[r]];
        F33 += FE0_D001[ip][r]*w[7][nzc12[r]];
      }// end loop over 'r'
      
      // Total number of operations to compute function values = 136
      for (unsigned int r = 0; r < 4; r++)
      {
        F6 += FE0[ip][r]*w[0][nzc11[r]];
        F7 += FE0[ip][r]*w[0][nzc3[r]];
        F8 += FE0[ip][r]*w[0][nzc7[r]];
        F15 += FE0[ip][r]*w[7][nzc3[r]];
        F16 += FE0[ip][r]*w[7][nzc7[r]];
        F17 += FE0[ip][r]*w[7][nzc11[r]];
        F18 += FE0[ip][r]*w[1][r];
        F19 += FE0[ip][r]*w[8][r];
        F20 += FE0[ip][r]*w[9][nzc3[r]];
        F27 += FE0[ip][r]*w[9][nzc7[r]];
        F34 += FE0[ip][r]*w[9][nzc11[r]];
        F35 += FE0[ip][r]*w[11][nzc3[r]];
        F36 += FE0[ip][r]*w[12][nzc3[r]];
        F37 += FE0[ip][r]*w[11][nzc7[r]];
        F38 += FE0[ip][r]*w[12][nzc7[r]];
        F39 += FE0[ip][r]*w[11][nzc11[r]];
        F40 += FE0[ip][r]*w[12][nzc11[r]];
      }// end loop over 'r'
      double C[6];
      // Compute conditional, operations: 13.
      C[0] = (0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22) < 0.0) ? -1.0 : 1.0;
      // Compute conditional, operations: 13.
      C[1] = (0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22) == 0.0) ? 0.0 : C[0];
      // Compute conditional, operations: 13.
      C[2] = (0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20) < 0.0) ? -1.0 : 1.0;
      // Compute conditional, operations: 13.
      C[3] = (0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20) == 0.0) ? 0.0 : C[2];
      // Compute conditional, operations: 13.
      C[4] = (0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21) < 0.0) ? -1.0 : 1.0;
      // Compute conditional, operations: 13.
      C[5] = (0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21) == 0.0) ? 0.0 : C[4];
      
      // Number of operations to compute ip constants: 38449
      double I[4];
      // Number of operations: 8031
      I[0] = W14[ip]*(std::abs(F6)*(F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]) + std::abs(F7)*(F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]) + std::abs(F8)*(F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]) + F15*F15*(F0*G[6] + F1*G[15] + F2*G[24] + F3*G[25] + F4*G[26] + F5*G[27]) + F16*(F15*(F0*G[7] + F1*G[16] + F2*G[28] + F3*G[29] + F4*G[30] + F5*G[31]) + F16*(F0*G[10] + F1*G[19] + F2*G[40] + F3*G[41] + F4*G[42] + F5*G[43])) + F17*(F15*(F0*G[8] + F1*G[17] + F2*G[32] + F3*G[33] + F4*G[34] + F5*G[35]) + F16*(F0*G[11] + F1*G[20] + F2*G[44] + F3*G[45] + F4*G[46] + F5*G[47]) + F17*(F0*G[13] + F1*G[22] + F2*G[52] + F3*G[53] + F4*G[54] + F5*G[55])) + F6*(F15*(F0*G[8] + F1*G[17] + F2*G[32] + F3*G[33] + F4*G[34] + F5*G[35]) + F16*(F0*G[11] + F1*G[20] + F2*G[44] + F3*G[45] + F4*G[46] + F5*G[47]) + F17*(F0*G[14] + F1*G[23] + F2*G[56] + F3*G[57] + F4*G[58] + F5*G[59]) + F6*(F0*G[13] + F1*G[22] + F2*G[52] + F3*G[53] + F4*G[54] + F5*G[55])) + F7*(F15*(F0*G[9] + F1*G[18] + F2*G[36] + F3*G[37] + F4*G[38] + F5*G[39]) + F16*(F0*G[7] + F1*G[16] + F2*G[28] + F3*G[29] + F4*G[30] + F5*G[31]) + F17*(F0*G[8] + F1*G[17] + F2*G[32] + F3*G[33] + F4*G[34] + F5*G[35]) + F6*(F0*G[8] + F1*G[17] + F2*G[32] + F3*G[33] + F4*G[34] + F5*G[35]) + F7*(F0*G[6] + F1*G[15] + F2*G[24] + F3*G[25] + F4*G[26] + F5*G[27])) + F8*(F15*(F0*G[7] + F1*G[16] + F2*G[28] + F3*G[29] + F4*G[30] + F5*G[31]) + F16*(F0*G[12] + F1*G[21] + F2*G[48] + F3*G[49] + F4*G[50] + F5*G[51]) + F17*(F0*G[11] + F1*G[20] + F2*G[44] + F3*G[45] + F4*G[46] + F5*G[47]) + F6*(F0*G[11] + F1*G[20] + F2*G[44] + F3*G[45] + F4*G[46] + F5*G[47]) + F7*(F0*G[7] + F1*G[16] + F2*G[28] + F3*G[29] + F4*G[30] + F5*G[31]) + F8*(F0*G[10] + F1*G[19] + F2*G[40] + F3*G[41] + F4*G[42] + F5*G[43])) + (C[1]*F0*F0*F15*F18*G[273] + C[1]*F0*F0*F15*F19*G[273] + C[1]*F0*F0*F15*G[274] + C[1]*F0*F0*F16*F18*G[275] + C[1]*F0*F0*F16*F19*G[275] + C[1]*F0*F0*F16*G[276] + C[1]*F0*F0*F17*F18*G[277] + C[1]*F0*F0*F17*F19*G[277] + C[1]*F0*F0*F17*G[278] + C[1]*F0*F0*F18*F6*G[277] + C[1]*F0*F0*F18*F7*G[273] + C[1]*F0*F0*F18*F8*G[275] + C[1]*F0*F0*F19*F6*G[277] + C[1]*F0*F0*F19*F7*G[273] + C[1]*F0*F0*F19*F8*G[275] + C[1]*F0*F0*F6*G[278] + C[1]*F0*F0*F7*G[274] + C[1]*F0*F0*F8*G[276] + C[1]*F0*F1*F15*F18*G[279] + C[1]*F0*F1*F15*F19*G[279] + C[1]*F0*F1*F15*G[280] + C[1]*F0*F1*F16*F18*G[281] + C[1]*F0*F1*F16*F19*G[281] + C[1]*F0*F1*F16*G[282] + C[1]*F0*F1*F17*F18*G[283] + C[1]*F0*F1*F17*F19*G[283] + C[1]*F0*F1*F17*G[284] + C[1]*F0*F1*F18*F6*G[283] + C[1]*F0*F1*F18*F7*G[279] + C[1]*F0*F1*F18*F8*G[281] + C[1]*F0*F1*F19*F6*G[283] + C[1]*F0*F1*F19*F7*G[279] + C[1]*F0*F1*F19*F8*G[281] + C[1]*F0*F1*F6*G[284] + C[1]*F0*F1*F7*G[280] + C[1]*F0*F1*F8*G[282] + C[1]*F0*F15*F18*F2*G[285] + C[1]*F0*F15*F18*F3*G[273] + C[1]*F0*F15*F18*F4*G[286] + C[1]*F0*F15*F18*F5*G[287] + C[1]*F0*F15*F19*F2*G[285] + C[1]*F0*F15*F19*F3*G[273] + C[1]*F0*F15*F19*F4*G[286] + C[1]*F0*F15*F19*F5*G[287] + C[1]*F0*F15*F2*G[288] + C[1]*F0*F15*F3*G[274] + C[1]*F0*F15*F4*G[289] + C[1]*F0*F15*F5*G[290] + C[1]*F0*F16*F18*F2*G[291] + C[1]*F0*F16*F18*F3*G[275] + C[1]*F0*F16*F18*F4*G[292] + C[1]*F0*F16*F18*F5*G[293] + C[1]*F0*F16*F19*F2*G[291] + C[1]*F0*F16*F19*F3*G[275] + C[1]*F0*F16*F19*F4*G[292] + C[1]*F0*F16*F19*F5*G[293] + C[1]*F0*F16*F2*G[294] + C[1]*F0*F16*F3*G[276] + C[1]*F0*F16*F4*G[295] + C[1]*F0*F16*F5*G[296] + C[1]*F0*F17*F18*F2*G[297] + C[1]*F0*F17*F18*F3*G[277] + C[1]*F0*F17*F18*F4*G[298] + C[1]*F0*F17*F18*F5*G[299] + C[1]*F0*F17*F19*F2*G[297] + C[1]*F0*F17*F19*F3*G[277] + C[1]*F0*F17*F19*F4*G[298] + C[1]*F0*F17*F19*F5*G[299] + C[1]*F0*F17*F2*G[300] + C[1]*F0*F17*F3*G[278] + C[1]*F0*F17*F4*G[301] + C[1]*F0*F17*F5*G[302] + C[1]*F0*F18*F18*G[71] + C[1]*F0*F18*F19*G[75] + C[1]*F0*F18*F2*F6*G[297] + C[1]*F0*F18*F2*F7*G[285] + C[1]*F0*F18*F2*F8*G[291] + C[1]*F0*F18*F3*F6*G[277] + C[1]*F0*F18*F3*F7*G[273] + C[1]*F0*F18*F3*F8*G[275] + C[1]*F0*F18*F4*F6*G[298] + C[1]*F0*F18*F4*F7*G[286] + C[1]*F0*F18*F4*F8*G[292] + C[1]*F0*F18*F5*F6*G[299] + C[1]*F0*F18*F5*F7*G[287] + C[1]*F0*F18*F5*F8*G[293] + C[1]*F0*F18*G[79] + C[1]*F0*F19*F19*G[71] + C[1]*F0*F19*F2*F6*G[297] + C[1]*F0*F19*F2*F7*G[285] + C[1]*F0*F19*F2*F8*G[291] + C[1]*F0*F19*F3*F6*G[277] + C[1]*F0*F19*F3*F7*G[273] + C[1]*F0*F19*F3*F8*G[275] + C[1]*F0*F19*F4*F6*G[298] + C[1]*F0*F19*F4*F7*G[286] + C[1]*F0*F19*F4*F8*G[292] + C[1]*F0*F19*F5*F6*G[299] + C[1]*F0*F19*F5*F7*G[287] + C[1]*F0*F19*F5*F8*G[293] + C[1]*F0*F19*G[79] + C[1]*F0*F2*F6*G[300] + C[1]*F0*F2*F7*G[288] + C[1]*F0*F2*F8*G[294] + C[1]*F0*F3*F6*G[278] + C[1]*F0*F3*F7*G[274] + C[1]*F0*F3*F8*G[276] + C[1]*F0*F4*F6*G[301] + C[1]*F0*F4*F7*G[289] + C[1]*F0*F4*F8*G[295] + C[1]*F0*F5*F6*G[302] + C[1]*F0*F5*F7*G[290] + C[1]*F0*F5*F8*G[296] + C[1]*F0*G[83] + C[1]*F1*F1*F15*F18*G[303] + C[1]*F1*F1*F15*F19*G[303] + C[1]*F1*F1*F15*G[304] + C[1]*F1*F1*F16*F18*G[305] + C[1]*F1*F1*F16*F19*G[305] + C[1]*F1*F1*F16*G[306] + C[1]*F1*F1*F17*F18*G[307] + C[1]*F1*F1*F17*F19*G[307] + C[1]*F1*F1*F17*G[308] + C[1]*F1*F1*F18*F6*G[307] + C[1]*F1*F1*F18*F7*G[303] + C[1]*F1*F1*F18*F8*G[305] + C[1]*F1*F1*F19*F6*G[307] + C[1]*F1*F1*F19*F7*G[303] + C[1]*F1*F1*F19*F8*G[305] + C[1]*F1*F1*F6*G[308] + C[1]*F1*F1*F7*G[304] + C[1]*F1*F1*F8*G[306] + C[1]*F1*F15*F18*F2*G[309] + C[1]*F1*F15*F18*F3*G[310] + C[1]*F1*F15*F18*F4*G[303] + C[1]*F1*F15*F18*F5*G[311] + C[1]*F1*F15*F19*F2*G[309] + C[1]*F1*F15*F19*F3*G[310] + C[1]*F1*F15*F19*F4*G[303] + C[1]*F1*F15*F19*F5*G[311] + C[1]*F1*F15*F2*G[312] + C[1]*F1*F15*F3*G[313] + C[1]*F1*F15*F4*G[304] + C[1]*F1*F15*F5*G[314] + C[1]*F1*F16*F18*F2*G[315] + C[1]*F1*F16*F18*F3*G[316] + C[1]*F1*F16*F18*F4*G[305] + C[1]*F1*F16*F18*F5*G[317] + C[1]*F1*F16*F19*F2*G[315] + C[1]*F1*F16*F19*F3*G[316] + C[1]*F1*F16*F19*F4*G[305] + C[1]*F1*F16*F19*F5*G[317] + C[1]*F1*F16*F2*G[318] + C[1]*F1*F16*F3*G[319] + C[1]*F1*F16*F4*G[306] + C[1]*F1*F16*F5*G[320] + C[1]*F1*F17*F18*F2*G[321] + C[1]*F1*F17*F18*F3*G[322] + C[1]*F1*F17*F18*F4*G[307] + C[1]*F1*F17*F18*F5*G[323] + C[1]*F1*F17*F19*F2*G[321] + C[1]*F1*F17*F19*F3*G[322] + C[1]*F1*F17*F19*F4*G[307] + C[1]*F1*F17*F19*F5*G[323] + C[1]*F1*F17*F2*G[324] + C[1]*F1*F17*F3*G[325] + C[1]*F1*F17*F4*G[308] + C[1]*F1*F17*F5*G[326] + C[1]*F1*F18*F18*G[91] + C[1]*F1*F18*F19*G[95] + C[1]*F1*F18*F2*F6*G[321] + C[1]*F1*F18*F2*F7*G[309] + C[1]*F1*F18*F2*F8*G[315] + C[1]*F1*F18*F3*F6*G[322] + C[1]*F1*F18*F3*F7*G[310] + C[1]*F1*F18*F3*F8*G[316] + C[1]*F1*F18*F4*F6*G[307] + C[1]*F1*F18*F4*F7*G[303] + C[1]*F1*F18*F4*F8*G[305] + C[1]*F1*F18*F5*F6*G[323] + C[1]*F1*F18*F5*F7*G[311] + C[1]*F1*F18*F5*F8*G[317] + C[1]*F1*F18*G[99] + C[1]*F1*F19*F19*G[91] + C[1]*F1*F19*F2*F6*G[321] + C[1]*F1*F19*F2*F7*G[309] + C[1]*F1*F19*F2*F8*G[315] + C[1]*F1*F19*F3*F6*G[322] + C[1]*F1*F19*F3*F7*G[310] + C[1]*F1*F19*F3*F8*G[316] + C[1]*F1*F19*F4*F6*G[307] + C[1]*F1*F19*F4*F7*G[303] + C[1]*F1*F19*F4*F8*G[305] + C[1]*F1*F19*F5*F6*G[323] + C[1]*F1*F19*F5*F7*G[311] + C[1]*F1*F19*F5*F8*G[317] + C[1]*F1*F19*G[99] + C[1]*F1*F2*F6*G[324] + C[1]*F1*F2*F7*G[312] + C[1]*F1*F2*F8*G[318] + C[1]*F1*F3*F6*G[325] + C[1]*F1*F3*F7*G[313] + C[1]*F1*F3*F8*G[319] + C[1]*F1*F4*F6*G[308] + C[1]*F1*F4*F7*G[304] + C[1]*F1*F4*F8*G[306] + C[1]*F1*F5*F6*G[326] + C[1]*F1*F5*F7*G[314] + C[1]*F1*F5*F8*G[320] + C[1]*F1*G[103] + C[1]*F15*F18*F2*F2*G[327] + C[1]*F15*F18*F2*F3*G[328] + C[1]*F15*F18*F2*F4*G[329] + C[1]*F15*F18*F2*F5*G[327] + C[1]*F15*F19*F2*F2*G[327] + C[1]*F15*F19*F2*F3*G[328] + C[1]*F15*F19*F2*F4*G[329] + C[1]*F15*F19*F2*F5*G[327] + C[1]*F15*F2*F2*G[330] + C[1]*F15*F2*F3*G[331] + C[1]*F15*F2*F4*G[332] + C[1]*F15*F2*F5*G[330] + C[1]*F16*F18*F2*F2*G[333] + C[1]*F16*F18*F2*F3*G[334] + C[1]*F16*F18*F2*F4*G[335] + C[1]*F16*F18*F2*F5*G[333] + C[1]*F16*F19*F2*F2*G[333] + C[1]*F16*F19*F2*F3*G[334] + C[1]*F16*F19*F2*F4*G[335] + C[1]*F16*F19*F2*F5*G[333] + C[1]*F16*F2*F2*G[336] + C[1]*F16*F2*F3*G[337] + C[1]*F16*F2*F4*G[338] + C[1]*F16*F2*F5*G[336] + C[1]*F17*F18*F2*F2*G[339] + C[1]*F17*F18*F2*F3*G[340] + C[1]*F17*F18*F2*F4*G[341] + C[1]*F17*F18*F2*F5*G[339] + C[1]*F17*F19*F2*F2*G[339] + C[1]*F17*F19*F2*F3*G[340] + C[1]*F17*F19*F2*F4*G[341] + C[1]*F17*F19*F2*F5*G[339] + C[1]*F17*F2*F2*G[342] + C[1]*F17*F2*F3*G[343] + C[1]*F17*F2*F4*G[344] + C[1]*F17*F2*F5*G[342] + C[1]*F18*F18*F2*G[107] + C[1]*F18*F19*F2*G[111] + C[1]*F18*F2*F2*F6*G[339] + C[1]*F18*F2*F2*F7*G[327] + C[1]*F18*F2*F2*F8*G[333] + C[1]*F18*F2*F3*F6*G[340] + C[1]*F18*F2*F3*F7*G[328] + C[1]*F18*F2*F3*F8*G[334] + C[1]*F18*F2*F4*F6*G[341] + C[1]*F18*F2*F4*F7*G[329] + C[1]*F18*F2*F4*F8*G[335] + C[1]*F18*F2*F5*F6*G[339] + C[1]*F18*F2*F5*F7*G[327] + C[1]*F18*F2*F5*F8*G[333] + C[1]*F18*F2*G[115] + C[1]*F19*F19*F2*G[107] + C[1]*F19*F2*F2*F6*G[339] + C[1]*F19*F2*F2*F7*G[327] + C[1]*F19*F2*F2*F8*G[333] + C[1]*F19*F2*F3*F6*G[340] + C[1]*F19*F2*F3*F7*G[328] + C[1]*F19*F2*F3*F8*G[334] + C[1]*F19*F2*F4*F6*G[341] + C[1]*F19*F2*F4*F7*G[329] + C[1]*F19*F2*F4*F8*G[335] + C[1]*F19*F2*F5*F6*G[339] + C[1]*F19*F2*F5*F7*G[327] + C[1]*F19*F2*F5*F8*G[333] + C[1]*F19*F2*G[115] + C[1]*F2*F2*F6*G[342] + C[1]*F2*F2*F7*G[330] + C[1]*F2*F2*F8*G[336] + C[1]*F2*F3*F6*G[343] + C[1]*F2*F3*F7*G[331] + C[1]*F2*F3*F8*G[337] + C[1]*F2*F4*F6*G[344] + C[1]*F2*F4*F7*G[332] + C[1]*F2*F4*F8*G[338] + C[1]*F2*F5*F6*G[342] + C[1]*F2*F5*F7*G[330] + C[1]*F2*F5*F8*G[336] + C[1]*F2*G[119] + C[3]*F0*F0*F15*F18*G[345] + C[3]*F0*F0*F15*F19*G[345] + C[3]*F0*F0*F15*G[346] + C[3]*F0*F0*F16*F18*G[347] + C[3]*F0*F0*F16*F19*G[347] + C[3]*F0*F0*F16*G[348] + C[3]*F0*F0*F17*F18*G[349] + C[3]*F0*F0*F17*F19*G[349] + C[3]*F0*F0*F17*G[350] + C[3]*F0*F0*F18*F6*G[349] + C[3]*F0*F0*F18*F7*G[345] + C[3]*F0*F0*F18*F8*G[347] + C[3]*F0*F0*F19*F6*G[349] + C[3]*F0*F0*F19*F7*G[345] + C[3]*F0*F0*F19*F8*G[347] + C[3]*F0*F0*F6*G[350] + C[3]*F0*F0*F7*G[346] + C[3]*F0*F0*F8*G[348] + C[3]*F0*F1*F15*F18*G[351] + C[3]*F0*F1*F15*F19*G[351] + C[3]*F0*F1*F15*G[352] + C[3]*F0*F1*F16*F18*G[353] + C[3]*F0*F1*F16*F19*G[353] + C[3]*F0*F1*F16*G[354] + C[3]*F0*F1*F17*F18*G[355] + C[3]*F0*F1*F17*F19*G[355] + C[3]*F0*F1*F17*G[356] + C[3]*F0*F1*F18*F6*G[355] + C[3]*F0*F1*F18*F7*G[351] + C[3]*F0*F1*F18*F8*G[353] + C[3]*F0*F1*F19*F6*G[355] + C[3]*F0*F1*F19*F7*G[351] + C[3]*F0*F1*F19*F8*G[353] + C[3]*F0*F1*F6*G[356] + C[3]*F0*F1*F7*G[352] + C[3]*F0*F1*F8*G[354] + C[3]*F0*F15*F18*F2*G[357] + C[3]*F0*F15*F18*F3*G[345] + C[3]*F0*F15*F18*F4*G[358] + C[3]*F0*F15*F18*F5*G[359] + C[3]*F0*F15*F19*F2*G[357] + C[3]*F0*F15*F19*F3*G[345] + C[3]*F0*F15*F19*F4*G[358] + C[3]*F0*F15*F19*F5*G[359] + C[3]*F0*F15*F2*G[360] + C[3]*F0*F15*F3*G[346] + C[3]*F0*F15*F4*G[361] + C[3]*F0*F15*F5*G[362] + C[3]*F0*F16*F18*F2*G[363] + C[3]*F0*F16*F18*F3*G[347] + C[3]*F0*F16*F18*F4*G[364] + C[3]*F0*F16*F18*F5*G[365] + C[3]*F0*F16*F19*F2*G[363] + C[3]*F0*F16*F19*F3*G[347] + C[3]*F0*F16*F19*F4*G[364] + C[3]*F0*F16*F19*F5*G[365] + C[3]*F0*F16*F2*G[366] + C[3]*F0*F16*F3*G[348] + C[3]*F0*F16*F4*G[367] + C[3]*F0*F16*F5*G[368] + C[3]*F0*F17*F18*F2*G[369] + C[3]*F0*F17*F18*F3*G[349] + C[3]*F0*F17*F18*F4*G[370] + C[3]*F0*F17*F18*F5*G[371] + C[3]*F0*F17*F19*F2*G[369] + C[3]*F0*F17*F19*F3*G[349] + C[3]*F0*F17*F19*F4*G[370] + C[3]*F0*F17*F19*F5*G[371] + C[3]*F0*F17*F2*G[372] + C[3]*F0*F17*F3*G[350] + C[3]*F0*F17*F4*G[373] + C[3]*F0*F17*F5*G[374] + C[3]*F0*F18*F18*G[131] + C[3]*F0*F18*F19*G[135] + C[3]*F0*F18*F2*F6*G[369] + C[3]*F0*F18*F2*F7*G[357] + C[3]*F0*F18*F2*F8*G[363] + C[3]*F0*F18*F3*F6*G[349] + C[3]*F0*F18*F3*F7*G[345] + C[3]*F0*F18*F3*F8*G[347] + C[3]*F0*F18*F4*F6*G[370] + C[3]*F0*F18*F4*F7*G[358] + C[3]*F0*F18*F4*F8*G[364] + C[3]*F0*F18*F5*F6*G[371] + C[3]*F0*F18*F5*F7*G[359] + C[3]*F0*F18*F5*F8*G[365] + C[3]*F0*F18*G[139] + C[3]*F0*F19*F19*G[131] + C[3]*F0*F19*F2*F6*G[369] + C[3]*F0*F19*F2*F7*G[357] + C[3]*F0*F19*F2*F8*G[363] + C[3]*F0*F19*F3*F6*G[349] + C[3]*F0*F19*F3*F7*G[345] + C[3]*F0*F19*F3*F8*G[347] + C[3]*F0*F19*F4*F6*G[370] + C[3]*F0*F19*F4*F7*G[358] + C[3]*F0*F19*F4*F8*G[364] + C[3]*F0*F19*F5*F6*G[371] + C[3]*F0*F19*F5*F7*G[359] + C[3]*F0*F19*F5*F8*G[365] + C[3]*F0*F19*G[139] + C[3]*F0*F2*F6*G[372] + C[3]*F0*F2*F7*G[360] + C[3]*F0*F2*F8*G[366] + C[3]*F0*F3*F6*G[350] + C[3]*F0*F3*F7*G[346] + C[3]*F0*F3*F8*G[348] + C[3]*F0*F4*F6*G[373] + C[3]*F0*F4*F7*G[361] + C[3]*F0*F4*F8*G[367] + C[3]*F0*F5*F6*G[374] + C[3]*F0*F5*F7*G[362] + C[3]*F0*F5*F8*G[368] + C[3]*F0*G[143] + C[3]*F1*F1*F15*F18*G[375] + C[3]*F1*F1*F15*F19*G[375] + C[3]*F1*F1*F15*G[376] + C[3]*F1*F1*F16*F18*G[377] + C[3]*F1*F1*F16*F19*G[377] + C[3]*F1*F1*F16*G[378] + C[3]*F1*F1*F17*F18*G[379] + C[3]*F1*F1*F17*F19*G[379] + C[3]*F1*F1*F17*G[380] + C[3]*F1*F1*F18*F6*G[379] + C[3]*F1*F1*F18*F7*G[375] + C[3]*F1*F1*F18*F8*G[377] + C[3]*F1*F1*F19*F6*G[379] + C[3]*F1*F1*F19*F7*G[375] + C[3]*F1*F1*F19*F8*G[377] + C[3]*F1*F1*F6*G[380] + C[3]*F1*F1*F7*G[376] + C[3]*F1*F1*F8*G[378] + C[3]*F1*F15*F18*F2*G[381] + C[3]*F1*F15*F18*F3*G[382] + C[3]*F1*F15*F18*F4*G[375] + C[3]*F1*F15*F18*F5*G[383] + C[3]*F1*F15*F19*F2*G[381] + C[3]*F1*F15*F19*F3*G[382] + C[3]*F1*F15*F19*F4*G[375] + C[3]*F1*F15*F19*F5*G[383] + C[3]*F1*F15*F2*G[384] + C[3]*F1*F15*F3*G[385] + C[3]*F1*F15*F4*G[376] + C[3]*F1*F15*F5*G[386] + C[3]*F1*F16*F18*F2*G[387] + C[3]*F1*F16*F18*F3*G[388] + C[3]*F1*F16*F18*F4*G[377] + C[3]*F1*F16*F18*F5*G[389] + C[3]*F1*F16*F19*F2*G[387] + C[3]*F1*F16*F19*F3*G[388] + C[3]*F1*F16*F19*F4*G[377] + C[3]*F1*F16*F19*F5*G[389] + C[3]*F1*F16*F2*G[390] + C[3]*F1*F16*F3*G[391] + C[3]*F1*F16*F4*G[378] + C[3]*F1*F16*F5*G[392] + C[3]*F1*F17*F18*F2*G[393] + C[3]*F1*F17*F18*F3*G[394] + C[3]*F1*F17*F18*F4*G[379] + C[3]*F1*F17*F18*F5*G[395] + C[3]*F1*F17*F19*F2*G[393] + C[3]*F1*F17*F19*F3*G[394] + C[3]*F1*F17*F19*F4*G[379] + C[3]*F1*F17*F19*F5*G[395] + C[3]*F1*F17*F2*G[396] + C[3]*F1*F17*F3*G[397] + C[3]*F1*F17*F4*G[380] + C[3]*F1*F17*F5*G[398] + C[3]*F1*F18*F18*G[151] + C[3]*F1*F18*F19*G[155] + C[3]*F1*F18*F2*F6*G[393] + C[3]*F1*F18*F2*F7*G[381] + C[3]*F1*F18*F2*F8*G[387] + C[3]*F1*F18*F3*F6*G[394] + C[3]*F1*F18*F3*F7*G[382] + C[3]*F1*F18*F3*F8*G[388] + C[3]*F1*F18*F4*F6*G[379] + C[3]*F1*F18*F4*F7*G[375] + C[3]*F1*F18*F4*F8*G[377] + C[3]*F1*F18*F5*F6*G[395] + C[3]*F1*F18*F5*F7*G[383] + C[3]*F1*F18*F5*F8*G[389] + C[3]*F1*F18*G[159] + C[3]*F1*F19*F19*G[151] + C[3]*F1*F19*F2*F6*G[393] + C[3]*F1*F19*F2*F7*G[381] + C[3]*F1*F19*F2*F8*G[387] + C[3]*F1*F19*F3*F6*G[394] + C[3]*F1*F19*F3*F7*G[382] + C[3]*F1*F19*F3*F8*G[388] + C[3]*F1*F19*F4*F6*G[379] + C[3]*F1*F19*F4*F7*G[375] + C[3]*F1*F19*F4*F8*G[377] + C[3]*F1*F19*F5*F6*G[395] + C[3]*F1*F19*F5*F7*G[383] + C[3]*F1*F19*F5*F8*G[389] + C[3]*F1*F19*G[159] + C[3]*F1*F2*F6*G[396] + C[3]*F1*F2*F7*G[384] + C[3]*F1*F2*F8*G[390] + C[3]*F1*F3*F6*G[397] + C[3]*F1*F3*F7*G[385] + C[3]*F1*F3*F8*G[391] + C[3]*F1*F4*F6*G[380] + C[3]*F1*F4*F7*G[376] + C[3]*F1*F4*F8*G[378] + C[3]*F1*F5*F6*G[398] + C[3]*F1*F5*F7*G[386] + C[3]*F1*F5*F8*G[392] + C[3]*F1*G[163] + C[3]*F15*F18*F2*F2*G[399] + C[3]*F15*F18*F2*F3*G[400] + C[3]*F15*F18*F2*F4*G[401] + C[3]*F15*F18*F2*F5*G[399] + C[3]*F15*F19*F2*F2*G[399] + C[3]*F15*F19*F2*F3*G[400] + C[3]*F15*F19*F2*F4*G[401] + C[3]*F15*F19*F2*F5*G[399] + C[3]*F15*F2*F2*G[402] + C[3]*F15*F2*F3*G[403] + C[3]*F15*F2*F4*G[404] + C[3]*F15*F2*F5*G[402] + C[3]*F16*F18*F2*F2*G[405] + C[3]*F16*F18*F2*F3*G[406] + C[3]*F16*F18*F2*F4*G[407] + C[3]*F16*F18*F2*F5*G[405] + C[3]*F16*F19*F2*F2*G[405] + C[3]*F16*F19*F2*F3*G[406] + C[3]*F16*F19*F2*F4*G[407] + C[3]*F16*F19*F2*F5*G[405] + C[3]*F16*F2*F2*G[408] + C[3]*F16*F2*F3*G[409] + C[3]*F16*F2*F4*G[410] + C[3]*F16*F2*F5*G[408] + C[3]*F17*F18*F2*F2*G[327] + C[3]*F17*F18*F2*F3*G[411] + C[3]*F17*F18*F2*F4*G[412] + C[3]*F17*F18*F2*F5*G[327] + C[3]*F17*F19*F2*F2*G[327] + C[3]*F17*F19*F2*F3*G[411] + C[3]*F17*F19*F2*F4*G[412] + C[3]*F17*F19*F2*F5*G[327] + C[3]*F17*F2*F2*G[330] + C[3]*F17*F2*F3*G[413] + C[3]*F17*F2*F4*G[414] + C[3]*F17*F2*F5*G[330] + C[3]*F18*F18*F2*G[167] + C[3]*F18*F19*F2*G[171] + C[3]*F18*F2*F2*F6*G[327] + C[3]*F18*F2*F2*F7*G[399] + C[3]*F18*F2*F2*F8*G[405] + C[3]*F18*F2*F3*F6*G[411] + C[3]*F18*F2*F3*F7*G[400] + C[3]*F18*F2*F3*F8*G[406] + C[3]*F18*F2*F4*F6*G[412] + C[3]*F18*F2*F4*F7*G[401] + C[3]*F18*F2*F4*F8*G[407] + C[3]*F18*F2*F5*F6*G[327] + C[3]*F18*F2*F5*F7*G[399] + C[3]*F18*F2*F5*F8*G[405] + C[3]*F18*F2*G[175] + C[3]*F19*F19*F2*G[167] + C[3]*F19*F2*F2*F6*G[327] + C[3]*F19*F2*F2*F7*G[399] + C[3]*F19*F2*F2*F8*G[405] + C[3]*F19*F2*F3*F6*G[411] + C[3]*F19*F2*F3*F7*G[400] + C[3]*F19*F2*F3*F8*G[406] + C[3]*F19*F2*F4*F6*G[412] + C[3]*F19*F2*F4*F7*G[401] + C[3]*F19*F2*F4*F8*G[407] + C[3]*F19*F2*F5*F6*G[327] + C[3]*F19*F2*F5*F7*G[399] + C[3]*F19*F2*F5*F8*G[405] + C[3]*F19*F2*G[175] + C[3]*F2*F2*F6*G[330] + C[3]*F2*F2*F7*G[402] + C[3]*F2*F2*F8*G[408] + C[3]*F2*F3*F6*G[413] + C[3]*F2*F3*F7*G[403] + C[3]*F2*F3*F8*G[409] + C[3]*F2*F4*F6*G[414] + C[3]*F2*F4*F7*G[404] + C[3]*F2*F4*F8*G[410] + C[3]*F2*F5*F6*G[330] + C[3]*F2*F5*F7*G[402] + C[3]*F2*F5*F8*G[408] + C[3]*F2*G[179] + C[5]*F0*F0*F15*F18*G[415] + C[5]*F0*F0*F15*F19*G[415] + C[5]*F0*F0*F15*G[416] + C[5]*F0*F0*F16*F18*G[417] + C[5]*F0*F0*F16*F19*G[417] + C[5]*F0*F0*F16*G[418] + C[5]*F0*F0*F17*F18*G[419] + C[5]*F0*F0*F17*F19*G[419] + C[5]*F0*F0*F17*G[420] + C[5]*F0*F0*F18*F6*G[419] + C[5]*F0*F0*F18*F7*G[415] + C[5]*F0*F0*F18*F8*G[417] + C[5]*F0*F0*F19*F6*G[419] + C[5]*F0*F0*F19*F7*G[415] + C[5]*F0*F0*F19*F8*G[417] + C[5]*F0*F0*F6*G[420] + C[5]*F0*F0*F7*G[416] + C[5]*F0*F0*F8*G[418] + C[5]*F0*F1*F15*F18*G[421] + C[5]*F0*F1*F15*F19*G[421] + C[5]*F0*F1*F15*G[422] + C[5]*F0*F1*F16*F18*G[423] + C[5]*F0*F1*F16*F19*G[423] + C[5]*F0*F1*F16*G[424] + C[5]*F0*F1*F17*F18*G[425] + C[5]*F0*F1*F17*F19*G[425] + C[5]*F0*F1*F17*G[426] + C[5]*F0*F1*F18*F6*G[425] + C[5]*F0*F1*F18*F7*G[421] + C[5]*F0*F1*F18*F8*G[423] + C[5]*F0*F1*F19*F6*G[425] + C[5]*F0*F1*F19*F7*G[421] + C[5]*F0*F1*F19*F8*G[423] + C[5]*F0*F1*F6*G[426] + C[5]*F0*F1*F7*G[422] + C[5]*F0*F1*F8*G[424] + C[5]*F0*F15*F18*F2*G[427] + C[5]*F0*F15*F18*F3*G[415] + C[5]*F0*F15*F18*F4*G[428] + C[5]*F0*F15*F18*F5*G[429] + C[5]*F0*F15*F19*F2*G[427] + C[5]*F0*F15*F19*F3*G[415] + C[5]*F0*F15*F19*F4*G[428] + C[5]*F0*F15*F19*F5*G[429] + C[5]*F0*F15*F2*G[430] + C[5]*F0*F15*F3*G[416] + C[5]*F0*F15*F4*G[431] + C[5]*F0*F15*F5*G[432] + C[5]*F0*F16*F18*F2*G[433] + C[5]*F0*F16*F18*F3*G[417] + C[5]*F0*F16*F18*F4*G[434] + C[5]*F0*F16*F18*F5*G[435] + C[5]*F0*F16*F19*F2*G[433] + C[5]*F0*F16*F19*F3*G[417] + C[5]*F0*F16*F19*F4*G[434] + C[5]*F0*F16*F19*F5*G[435] + C[5]*F0*F16*F2*G[436] + C[5]*F0*F16*F3*G[418] + C[5]*F0*F16*F4*G[437] + C[5]*F0*F16*F5*G[438] + C[5]*F0*F17*F18*F2*G[439] + C[5]*F0*F17*F18*F3*G[419] + C[5]*F0*F17*F18*F4*G[440] + C[5]*F0*F17*F18*F5*G[441] + C[5]*F0*F17*F19*F2*G[439] + C[5]*F0*F17*F19*F3*G[419] + C[5]*F0*F17*F19*F4*G[440] + C[5]*F0*F17*F19*F5*G[441] + C[5]*F0*F17*F2*G[442] + C[5]*F0*F17*F3*G[420] + C[5]*F0*F17*F4*G[443] + C[5]*F0*F17*F5*G[444] + C[5]*F0*F18*F18*G[191] + C[5]*F0*F18*F19*G[195] + C[5]*F0*F18*F2*F6*G[439] + C[5]*F0*F18*F2*F7*G[427] + C[5]*F0*F18*F2*F8*G[433] + C[5]*F0*F18*F3*F6*G[419] + C[5]*F0*F18*F3*F7*G[415] + C[5]*F0*F18*F3*F8*G[417] + C[5]*F0*F18*F4*F6*G[440] + C[5]*F0*F18*F4*F7*G[428] + C[5]*F0*F18*F4*F8*G[434] + C[5]*F0*F18*F5*F6*G[441] + C[5]*F0*F18*F5*F7*G[429] + C[5]*F0*F18*F5*F8*G[435] + C[5]*F0*F18*G[199] + C[5]*F0*F19*F19*G[191] + C[5]*F0*F19*F2*F6*G[439] + C[5]*F0*F19*F2*F7*G[427] + C[5]*F0*F19*F2*F8*G[433] + C[5]*F0*F19*F3*F6*G[419] + C[5]*F0*F19*F3*F7*G[415] + C[5]*F0*F19*F3*F8*G[417] + C[5]*F0*F19*F4*F6*G[440] + C[5]*F0*F19*F4*F7*G[428] + C[5]*F0*F19*F4*F8*G[434] + C[5]*F0*F19*F5*F6*G[441] + C[5]*F0*F19*F5*F7*G[429] + C[5]*F0*F19*F5*F8*G[435] + C[5]*F0*F19*G[199] + C[5]*F0*F2*F6*G[442] + C[5]*F0*F2*F7*G[430] + C[5]*F0*F2*F8*G[436] + C[5]*F0*F3*F6*G[420] + C[5]*F0*F3*F7*G[416] + C[5]*F0*F3*F8*G[418] + C[5]*F0*F4*F6*G[443] + C[5]*F0*F4*F7*G[431] + C[5]*F0*F4*F8*G[437] + C[5]*F0*F5*F6*G[444] + C[5]*F0*F5*F7*G[432] + C[5]*F0*F5*F8*G[438] + C[5]*F0*G[203] + C[5]*F1*F1*F15*F18*G[445] + C[5]*F1*F1*F15*F19*G[445] + C[5]*F1*F1*F15*G[446] + C[5]*F1*F1*F16*F18*G[447] + C[5]*F1*F1*F16*F19*G[447] + C[5]*F1*F1*F16*G[448] + C[5]*F1*F1*F17*F18*G[449] + C[5]*F1*F1*F17*F19*G[449] + C[5]*F1*F1*F17*G[450] + C[5]*F1*F1*F18*F6*G[449] + C[5]*F1*F1*F18*F7*G[445] + C[5]*F1*F1*F18*F8*G[447] + C[5]*F1*F1*F19*F6*G[449] + C[5]*F1*F1*F19*F7*G[445] + C[5]*F1*F1*F19*F8*G[447] + C[5]*F1*F1*F6*G[450] + C[5]*F1*F1*F7*G[446] + C[5]*F1*F1*F8*G[448] + C[5]*F1*F15*F18*F2*G[451] + C[5]*F1*F15*F18*F3*G[452] + C[5]*F1*F15*F18*F4*G[445] + C[5]*F1*F15*F18*F5*G[453] + C[5]*F1*F15*F19*F2*G[451] + C[5]*F1*F15*F19*F3*G[452] + C[5]*F1*F15*F19*F4*G[445] + C[5]*F1*F15*F19*F5*G[453] + C[5]*F1*F15*F2*G[454] + C[5]*F1*F15*F3*G[455] + C[5]*F1*F15*F4*G[446] + C[5]*F1*F15*F5*G[456] + C[5]*F1*F16*F18*F2*G[457] + C[5]*F1*F16*F18*F3*G[458] + C[5]*F1*F16*F18*F4*G[447] + C[5]*F1*F16*F18*F5*G[459] + C[5]*F1*F16*F19*F2*G[457] + C[5]*F1*F16*F19*F3*G[458] + C[5]*F1*F16*F19*F4*G[447] + C[5]*F1*F16*F19*F5*G[459] + C[5]*F1*F16*F2*G[460] + C[5]*F1*F16*F3*G[461] + C[5]*F1*F16*F4*G[448] + C[5]*F1*F16*F5*G[462] + C[5]*F1*F17*F18*F2*G[463] + C[5]*F1*F17*F18*F3*G[464] + C[5]*F1*F17*F18*F4*G[449] + C[5]*F1*F17*F18*F5*G[465] + C[5]*F1*F17*F19*F2*G[463] + C[5]*F1*F17*F19*F3*G[464] + C[5]*F1*F17*F19*F4*G[449] + C[5]*F1*F17*F19*F5*G[465] + C[5]*F1*F17*F2*G[466] + C[5]*F1*F17*F3*G[467] + C[5]*F1*F17*F4*G[450] + C[5]*F1*F17*F5*G[468] + C[5]*F1*F18*F18*G[211] + C[5]*F1*F18*F19*G[215] + C[5]*F1*F18*F2*F6*G[463] + C[5]*F1*F18*F2*F7*G[451] + C[5]*F1*F18*F2*F8*G[457] + C[5]*F1*F18*F3*F6*G[464] + C[5]*F1*F18*F3*F7*G[452] + C[5]*F1*F18*F3*F8*G[458] + C[5]*F1*F18*F4*F6*G[449] + C[5]*F1*F18*F4*F7*G[445] + C[5]*F1*F18*F4*F8*G[447] + C[5]*F1*F18*F5*F6*G[465] + C[5]*F1*F18*F5*F7*G[453] + C[5]*F1*F18*F5*F8*G[459] + C[5]*F1*F18*G[219] + C[5]*F1*F19*F19*G[211] + C[5]*F1*F19*F2*F6*G[463] + C[5]*F1*F19*F2*F7*G[451] + C[5]*F1*F19*F2*F8*G[457] + C[5]*F1*F19*F3*F6*G[464] + C[5]*F1*F19*F3*F7*G[452] + C[5]*F1*F19*F3*F8*G[458] + C[5]*F1*F19*F4*F6*G[449] + C[5]*F1*F19*F4*F7*G[445] + C[5]*F1*F19*F4*F8*G[447] + C[5]*F1*F19*F5*F6*G[465] + C[5]*F1*F19*F5*F7*G[453] + C[5]*F1*F19*F5*F8*G[459] + C[5]*F1*F19*G[219] + C[5]*F1*F2*F6*G[466] + C[5]*F1*F2*F7*G[454] + C[5]*F1*F2*F8*G[460] + C[5]*F1*F3*F6*G[467] + C[5]*F1*F3*F7*G[455] + C[5]*F1*F3*F8*G[461] + C[5]*F1*F4*F6*G[450] + C[5]*F1*F4*F7*G[446] + C[5]*F1*F4*F8*G[448] + C[5]*F1*F5*F6*G[468] + C[5]*F1*F5*F7*G[456] + C[5]*F1*F5*F8*G[462] + C[5]*F1*G[223] + C[5]*F15*F18*F2*F2*G[405] + C[5]*F15*F18*F2*F3*G[469] + C[5]*F15*F18*F2*F4*G[470] + C[5]*F15*F18*F2*F5*G[405] + C[5]*F15*F19*F2*F2*G[405] + C[5]*F15*F19*F2*F3*G[469] + C[5]*F15*F19*F2*F4*G[470] + C[5]*F15*F19*F2*F5*G[405] + C[5]*F15*F2*F2*G[408] + C[5]*F15*F2*F3*G[471] + C[5]*F15*F2*F4*G[472] + C[5]*F15*F2*F5*G[408] + C[5]*F16*F18*F2*F2*G[473] + C[5]*F16*F18*F2*F3*G[474] + C[5]*F16*F18*F2*F4*G[475] + C[5]*F16*F18*F2*F5*G[473] + C[5]*F16*F19*F2*F2*G[473] + C[5]*F16*F19*F2*F3*G[474] + C[5]*F16*F19*F2*F4*G[475] + C[5]*F16*F19*F2*F5*G[473] + C[5]*F16*F2*F2*G[476] + C[5]*F16*F2*F3*G[477] + C[5]*F16*F2*F4*G[478] + C[5]*F16*F2*F5*G[476] + C[5]*F17*F18*F2*F2*G[333] + C[5]*F17*F18*F2*F3*G[479] + C[5]*F17*F18*F2*F4*G[480] + C[5]*F17*F18*F2*F5*G[333] + C[5]*F17*F19*F2*F2*G[333] + C[5]*F17*F19*F2*F3*G[479] + C[5]*F17*F19*F2*F4*G[480] + C[5]*F17*F19*F2*F5*G[333] + C[5]*F17*F2*F2*G[336] + C[5]*F17*F2*F3*G[481] + C[5]*F17*F2*F4*G[482] + C[5]*F17*F2*F5*G[336] + C[5]*F18*F18*F2*G[227] + C[5]*F18*F19*F2*G[231] + C[5]*F18*F2*F2*F6*G[333] + C[5]*F18*F2*F2*F7*G[405] + C[5]*F18*F2*F2*F8*G[473] + C[5]*F18*F2*F3*F6*G[479] + C[5]*F18*F2*F3*F7*G[469] + C[5]*F18*F2*F3*F8*G[474] + C[5]*F18*F2*F4*F6*G[480] + C[5]*F18*F2*F4*F7*G[470] + C[5]*F18*F2*F4*F8*G[475] + C[5]*F18*F2*F5*F6*G[333] + C[5]*F18*F2*F5*F7*G[405] + C[5]*F18*F2*F5*F8*G[473] + C[5]*F18*F2*G[235] + C[5]*F19*F19*F2*G[227] + C[5]*F19*F2*F2*F6*G[333] + C[5]*F19*F2*F2*F7*G[405] + C[5]*F19*F2*F2*F8*G[473] + C[5]*F19*F2*F3*F6*G[479] + C[5]*F19*F2*F3*F7*G[469] + C[5]*F19*F2*F3*F8*G[474] + C[5]*F19*F2*F4*F6*G[480] + C[5]*F19*F2*F4*F7*G[470] + C[5]*F19*F2*F4*F8*G[475] + C[5]*F19*F2*F5*F6*G[333] + C[5]*F19*F2*F5*F7*G[405] + C[5]*F19*F2*F5*F8*G[473] + C[5]*F19*F2*G[235] + C[5]*F2*F2*F6*G[336] + C[5]*F2*F2*F7*G[408] + C[5]*F2*F2*F8*G[476] + C[5]*F2*F3*F6*G[481] + C[5]*F2*F3*F7*G[471] + C[5]*F2*F3*F8*G[477] + C[5]*F2*F4*F6*G[482] + C[5]*F2*F4*F7*G[472] + C[5]*F2*F4*F8*G[478] + C[5]*F2*F5*F6*G[336] + C[5]*F2*F5*F7*G[408] + C[5]*F2*F5*F8*G[476] + C[5]*F2*G[239] + F0*F18*F18*G[240] + F0*F18*F19*G[241] + F0*F18*G[242] + F0*F19*F19*G[243] + F0*F19*G[244] + F0*G[245] + F1*F18*F18*G[246] + F1*F18*F19*G[247] + F1*F18*G[248] + F1*F19*F19*G[249] + F1*F19*G[250] + F1*G[251] + F18*F18*F2*G[252] + F18*F18*F3*G[253] + F18*F18*F4*G[254] + F18*F18*F5*G[255] + F18*F19*F2*G[256] + F18*F19*F3*G[257] + F18*F19*F4*G[258] + F18*F19*F5*G[259] + F18*F2*G[260] + F18*F3*G[244] + F18*F4*G[250] + F18*F5*G[261] + F19*F19*F2*G[262] + F19*F19*F3*G[263] + F19*F19*F4*G[264] + F19*F19*F5*G[265] + F19*F2*G[261] + F19*F3*G[266] + F19*F4*G[267] + F19*F5*G[268] + F2*G[269] + F3*G[270] + F4*G[271] + F5*G[272])/(1.0 + 0.01*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20)) + 0.01*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.01*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.02*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.02*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.02*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.2*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20)) + 0.2*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.2*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))) + (C[1]*F0*F0*F18*F18*G[60] + C[1]*F0*F0*F18*F19*G[61] + C[1]*F0*F0*F18*G[62] + C[1]*F0*F0*F19*F19*G[60] + C[1]*F0*F0*F19*G[62] + C[1]*F0*F0*G[63] + C[1]*F0*F1*F18*F18*G[64] + C[1]*F0*F1*F18*F19*G[65] + C[1]*F0*F1*F18*G[66] + C[1]*F0*F1*F19*F19*G[64] + C[1]*F0*F1*F19*G[66] + C[1]*F0*F1*G[67] + C[1]*F0*F18*F18*F2*G[68] + C[1]*F0*F18*F18*F3*G[60] + C[1]*F0*F18*F18*F4*G[69] + C[1]*F0*F18*F18*F5*G[70] + C[1]*F0*F18*F19*F2*G[72] + C[1]*F0*F18*F19*F3*G[61] + C[1]*F0*F18*F19*F4*G[73] + C[1]*F0*F18*F19*F5*G[74] + C[1]*F0*F18*F2*G[76] + C[1]*F0*F18*F3*G[62] + C[1]*F0*F18*F4*G[77] + C[1]*F0*F18*F5*G[78] + C[1]*F0*F19*F19*F2*G[68] + C[1]*F0*F19*F19*F3*G[60] + C[1]*F0*F19*F19*F4*G[69] + C[1]*F0*F19*F19*F5*G[70] + C[1]*F0*F19*F2*G[76] + C[1]*F0*F19*F3*G[62] + C[1]*F0*F19*F4*G[77] + C[1]*F0*F19*F5*G[78] + C[1]*F0*F2*G[80] + C[1]*F0*F3*G[63] + C[1]*F0*F4*G[81] + C[1]*F0*F5*G[82] + C[1]*F1*F1*F18*F18*G[84] + C[1]*F1*F1*F18*F19*G[85] + C[1]*F1*F1*F18*G[86] + C[1]*F1*F1*F19*F19*G[84] + C[1]*F1*F1*F19*G[86] + C[1]*F1*F1*G[87] + C[1]*F1*F18*F18*F2*G[88] + C[1]*F1*F18*F18*F3*G[89] + C[1]*F1*F18*F18*F4*G[84] + C[1]*F1*F18*F18*F5*G[90] + C[1]*F1*F18*F19*F2*G[92] + C[1]*F1*F18*F19*F3*G[93] + C[1]*F1*F18*F19*F4*G[85] + C[1]*F1*F18*F19*F5*G[94] + C[1]*F1*F18*F2*G[96] + C[1]*F1*F18*F3*G[97] + C[1]*F1*F18*F4*G[86] + C[1]*F1*F18*F5*G[98] + C[1]*F1*F19*F19*F2*G[88] + C[1]*F1*F19*F19*F3*G[89] + C[1]*F1*F19*F19*F4*G[84] + C[1]*F1*F19*F19*F5*G[90] + C[1]*F1*F19*F2*G[96] + C[1]*F1*F19*F3*G[97] + C[1]*F1*F19*F4*G[86] + C[1]*F1*F19*F5*G[98] + C[1]*F1*F2*G[100] + C[1]*F1*F3*G[101] + C[1]*F1*F4*G[87] + C[1]*F1*F5*G[102] + C[1]*F18*F18*F2*F2*G[104] + C[1]*F18*F18*F2*F3*G[105] + C[1]*F18*F18*F2*F4*G[106] + C[1]*F18*F18*F2*F5*G[104] + C[1]*F18*F19*F2*F2*G[108] + C[1]*F18*F19*F2*F3*G[109] + C[1]*F18*F19*F2*F4*G[110] + C[1]*F18*F19*F2*F5*G[108] + C[1]*F18*F2*F2*G[112] + C[1]*F18*F2*F3*G[113] + C[1]*F18*F2*F4*G[114] + C[1]*F18*F2*F5*G[112] + C[1]*F19*F19*F2*F2*G[104] + C[1]*F19*F19*F2*F3*G[105] + C[1]*F19*F19*F2*F4*G[106] + C[1]*F19*F19*F2*F5*G[104] + C[1]*F19*F2*F2*G[112] + C[1]*F19*F2*F3*G[113] + C[1]*F19*F2*F4*G[114] + C[1]*F19*F2*F5*G[112] + C[1]*F2*F2*G[116] + C[1]*F2*F3*G[117] + C[1]*F2*F4*G[118] + C[1]*F2*F5*G[116] + C[3]*F0*F0*F18*F18*G[120] + C[3]*F0*F0*F18*F19*G[121] + C[3]*F0*F0*F18*G[122] + C[3]*F0*F0*F19*F19*G[120] + C[3]*F0*F0*F19*G[122] + C[3]*F0*F0*G[123] + C[3]*F0*F1*F18*F18*G[124] + C[3]*F0*F1*F18*F19*G[125] + C[3]*F0*F1*F18*G[126] + C[3]*F0*F1*F19*F19*G[124] + C[3]*F0*F1*F19*G[126] + C[3]*F0*F1*G[127] + C[3]*F0*F18*F18*F2*G[128] + C[3]*F0*F18*F18*F3*G[120] + C[3]*F0*F18*F18*F4*G[129] + C[3]*F0*F18*F18*F5*G[130] + C[3]*F0*F18*F19*F2*G[132] + C[3]*F0*F18*F19*F3*G[121] + C[3]*F0*F18*F19*F4*G[133] + C[3]*F0*F18*F19*F5*G[134] + C[3]*F0*F18*F2*G[136] + C[3]*F0*F18*F3*G[122] + C[3]*F0*F18*F4*G[137] + C[3]*F0*F18*F5*G[138] + C[3]*F0*F19*F19*F2*G[128] + C[3]*F0*F19*F19*F3*G[120] + C[3]*F0*F19*F19*F4*G[129] + C[3]*F0*F19*F19*F5*G[130] + C[3]*F0*F19*F2*G[136] + C[3]*F0*F19*F3*G[122] + C[3]*F0*F19*F4*G[137] + C[3]*F0*F19*F5*G[138] + C[3]*F0*F2*G[140] + C[3]*F0*F3*G[123] + C[3]*F0*F4*G[141] + C[3]*F0*F5*G[142] + C[3]*F1*F1*F18*F18*G[144] + C[3]*F1*F1*F18*F19*G[145] + C[3]*F1*F1*F18*G[146] + C[3]*F1*F1*F19*F19*G[144] + C[3]*F1*F1*F19*G[146] + C[3]*F1*F1*G[147] + C[3]*F1*F18*F18*F2*G[148] + C[3]*F1*F18*F18*F3*G[149] + C[3]*F1*F18*F18*F4*G[144] + C[3]*F1*F18*F18*F5*G[150] + C[3]*F1*F18*F19*F2*G[152] + C[3]*F1*F18*F19*F3*G[153] + C[3]*F1*F18*F19*F4*G[145] + C[3]*F1*F18*F19*F5*G[154] + C[3]*F1*F18*F2*G[156] + C[3]*F1*F18*F3*G[157] + C[3]*F1*F18*F4*G[146] + C[3]*F1*F18*F5*G[158] + C[3]*F1*F19*F19*F2*G[148] + C[3]*F1*F19*F19*F3*G[149] + C[3]*F1*F19*F19*F4*G[144] + C[3]*F1*F19*F19*F5*G[150] + C[3]*F1*F19*F2*G[156] + C[3]*F1*F19*F3*G[157] + C[3]*F1*F19*F4*G[146] + C[3]*F1*F19*F5*G[158] + C[3]*F1*F2*G[160] + C[3]*F1*F3*G[161] + C[3]*F1*F4*G[147] + C[3]*F1*F5*G[162] + C[3]*F18*F18*F2*F2*G[164] + C[3]*F18*F18*F2*F3*G[165] + C[3]*F18*F18*F2*F4*G[166] + C[3]*F18*F18*F2*F5*G[164] + C[3]*F18*F19*F2*F2*G[168] + C[3]*F18*F19*F2*F3*G[169] + C[3]*F18*F19*F2*F4*G[170] + C[3]*F18*F19*F2*F5*G[168] + C[3]*F18*F2*F2*G[172] + C[3]*F18*F2*F3*G[173] + C[3]*F18*F2*F4*G[174] + C[3]*F18*F2*F5*G[172] + C[3]*F19*F19*F2*F2*G[164] + C[3]*F19*F19*F2*F3*G[165] + C[3]*F19*F19*F2*F4*G[166] + C[3]*F19*F19*F2*F5*G[164] + C[3]*F19*F2*F2*G[172] + C[3]*F19*F2*F3*G[173] + C[3]*F19*F2*F4*G[174] + C[3]*F19*F2*F5*G[172] + C[3]*F2*F2*G[176] + C[3]*F2*F3*G[177] + C[3]*F2*F4*G[178] + C[3]*F2*F5*G[176] + C[5]*F0*F0*F18*F18*G[180] + C[5]*F0*F0*F18*F19*G[181] + C[5]*F0*F0*F18*G[182] + C[5]*F0*F0*F19*F19*G[180] + C[5]*F0*F0*F19*G[182] + C[5]*F0*F0*G[183] + C[5]*F0*F1*F18*F18*G[184] + C[5]*F0*F1*F18*F19*G[185] + C[5]*F0*F1*F18*G[186] + C[5]*F0*F1*F19*F19*G[184] + C[5]*F0*F1*F19*G[186] + C[5]*F0*F1*G[187] + C[5]*F0*F18*F18*F2*G[188] + C[5]*F0*F18*F18*F3*G[180] + C[5]*F0*F18*F18*F4*G[189] + C[5]*F0*F18*F18*F5*G[190] + C[5]*F0*F18*F19*F2*G[192] + C[5]*F0*F18*F19*F3*G[181] + C[5]*F0*F18*F19*F4*G[193] + C[5]*F0*F18*F19*F5*G[194] + C[5]*F0*F18*F2*G[196] + C[5]*F0*F18*F3*G[182] + C[5]*F0*F18*F4*G[197] + C[5]*F0*F18*F5*G[198] + C[5]*F0*F19*F19*F2*G[188] + C[5]*F0*F19*F19*F3*G[180] + C[5]*F0*F19*F19*F4*G[189] + C[5]*F0*F19*F19*F5*G[190] + C[5]*F0*F19*F2*G[196] + C[5]*F0*F19*F3*G[182] + C[5]*F0*F19*F4*G[197] + C[5]*F0*F19*F5*G[198] + C[5]*F0*F2*G[200] + C[5]*F0*F3*G[183] + C[5]*F0*F4*G[201] + C[5]*F0*F5*G[202] + C[5]*F1*F1*F18*F18*G[204] + C[5]*F1*F1*F18*F19*G[205] + C[5]*F1*F1*F18*G[206] + C[5]*F1*F1*F19*F19*G[204] + C[5]*F1*F1*F19*G[206] + C[5]*F1*F1*G[207] + C[5]*F1*F18*F18*F2*G[208] + C[5]*F1*F18*F18*F3*G[209] + C[5]*F1*F18*F18*F4*G[204] + C[5]*F1*F18*F18*F5*G[210] + C[5]*F1*F18*F19*F2*G[212] + C[5]*F1*F18*F19*F3*G[213] + C[5]*F1*F18*F19*F4*G[205] + C[5]*F1*F18*F19*F5*G[214] + C[5]*F1*F18*F2*G[216] + C[5]*F1*F18*F3*G[217] + C[5]*F1*F18*F4*G[206] + C[5]*F1*F18*F5*G[218] + C[5]*F1*F19*F19*F2*G[208] + C[5]*F1*F19*F19*F3*G[209] + C[5]*F1*F19*F19*F4*G[204] + C[5]*F1*F19*F19*F5*G[210] + C[5]*F1*F19*F2*G[216] + C[5]*F1*F19*F3*G[217] + C[5]*F1*F19*F4*G[206] + C[5]*F1*F19*F5*G[218] + C[5]*F1*F2*G[220] + C[5]*F1*F3*G[221] + C[5]*F1*F4*G[207] + C[5]*F1*F5*G[222] + C[5]*F18*F18*F2*F2*G[224] + C[5]*F18*F18*F2*F3*G[225] + C[5]*F18*F18*F2*F4*G[226] + C[5]*F18*F18*F2*F5*G[224] + C[5]*F18*F19*F2*F2*G[228] + C[5]*F18*F19*F2*F3*G[229] + C[5]*F18*F19*F2*F4*G[230] + C[5]*F18*F19*F2*F5*G[228] + C[5]*F18*F2*F2*G[232] + C[5]*F18*F2*F3*G[233] + C[5]*F18*F2*F4*G[234] + C[5]*F18*F2*F5*G[232] + C[5]*F19*F19*F2*F2*G[224] + C[5]*F19*F19*F2*F3*G[225] + C[5]*F19*F19*F2*F4*G[226] + C[5]*F19*F19*F2*F5*G[224] + C[5]*F19*F2*F2*G[232] + C[5]*F19*F2*F3*G[233] + C[5]*F19*F2*F4*G[234] + C[5]*F19*F2*F5*G[232] + C[5]*F2*F2*G[236] + C[5]*F2*F3*G[237] + C[5]*F2*F4*G[238] + C[5]*F2*F5*G[236])/(1.0 + 0.001*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20)) + 0.001*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.001*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.003*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.003*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.003*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.003*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.003*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.003*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.006*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.03*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20)) + 0.03*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.03*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.06*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.06*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.06*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.3*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20)) + 0.3*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.3*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))) + (G[533] + F0*F15*F18*G[483] + F0*F15*F19*G[484] + F0*F15*G[485] + F0*F16*F18*G[486] + F0*F16*F19*G[487] + F0*F16*G[488] + F0*F17*F18*G[489] + F0*F17*F19*G[490] + F0*F17*G[491] + F0*F18*F6*G[489] + F0*F18*F7*G[483] + F0*F18*F8*G[486] + F0*F19*F6*G[490] + F0*F19*F7*G[484] + F0*F19*F8*G[487] + F0*F6*G[491] + F0*F7*G[485] + F0*F8*G[488] + F1*F15*F18*G[492] + F1*F15*F19*G[493] + F1*F15*G[494] + F1*F16*F18*G[495] + F1*F16*F19*G[496] + F1*F16*G[497] + F1*F17*F18*G[498] + F1*F17*F19*G[499] + F1*F17*G[500] + F1*F18*F6*G[498] + F1*F18*F7*G[492] + F1*F18*F8*G[495] + F1*F19*F6*G[499] + F1*F19*F7*G[493] + F1*F19*F8*G[496] + F1*F6*G[500] + F1*F7*G[494] + F1*F8*G[497] + F15*F18*F2*G[501] + F15*F18*F3*G[484] + F15*F18*F4*G[493] + F15*F18*F5*G[502] + F15*F19*F2*G[502] + F15*F19*F3*G[503] + F15*F19*F4*G[504] + F15*F19*F5*G[505] + F15*F2*G[506] + F15*F3*G[507] + F15*F4*G[508] + F15*F5*G[509] + F16*F18*F2*G[510] + F16*F18*F3*G[487] + F16*F18*F4*G[496] + F16*F18*F5*G[511] + F16*F19*F2*G[511] + F16*F19*F3*G[512] + F16*F19*F4*G[513] + F16*F19*F5*G[514] + F16*F2*G[515] + F16*F3*G[516] + F16*F4*G[517] + F16*F5*G[518] + F17*F18*F2*G[519] + F17*F18*F3*G[490] + F17*F18*F4*G[499] + F17*F18*F5*G[520] + F17*F19*F2*G[520] + F17*F19*F3*G[521] + F17*F19*F4*G[522] + F17*F19*F5*G[523] + F17*F2*G[524] + F17*F3*G[525] + F17*F4*G[526] + F17*F5*G[527] + F18*F18*G[528] + F18*F19*G[529] + F18*F2*F6*G[519] + F18*F2*F7*G[501] + F18*F2*F8*G[510] + F18*F3*F6*G[490] + F18*F3*F7*G[484] + F18*F3*F8*G[487] + F18*F4*F6*G[499] + F18*F4*F7*G[493] + F18*F4*F8*G[496] + F18*F5*F6*G[520] + F18*F5*F7*G[502] + F18*F5*F8*G[511] + F18*G[530] + F19*F19*G[531] + F19*F2*F6*G[520] + F19*F2*F7*G[502] + F19*F2*F8*G[511] + F19*F3*F6*G[521] + F19*F3*F7*G[503] + F19*F3*F8*G[512] + F19*F4*F6*G[522] + F19*F4*F7*G[504] + F19*F4*F8*G[513] + F19*F5*F6*G[523] + F19*F5*F7*G[505] + F19*F5*F8*G[514] + F19*G[532] + F2*F6*G[524] + F2*F7*G[506] + F2*F8*G[515] + F3*F6*G[525] + F3*F7*G[507] + F3*F8*G[516] + F4*F6*G[526] + F4*F7*G[508] + F4*F8*G[517] + F5*F6*G[527] + F5*F7*G[509] + F5*F8*G[518])/(1.0 + 0.1*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20)) + 0.1*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.1*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))));
      
      // Number of operations: 8031
      I[1] = W14[ip]*(std::abs(F6)*(F0*G[534] + F1*G[535] + F2*G[1] + F3*G[536] + F4*G[537] + F5*G[4]) + std::abs(F7)*(F0*G[534] + F1*G[535] + F2*G[1] + F3*G[536] + F4*G[537] + F5*G[4]) + std::abs(F8)*(F0*G[534] + F1*G[535] + F2*G[1] + F3*G[536] + F4*G[537] + F5*G[4]) + F15*F15*(F0*G[538] + F1*G[547] + F2*G[15] + F3*G[556] + F4*G[557] + F5*G[26]) + F16*(F15*(F0*G[539] + F1*G[548] + F2*G[16] + F3*G[558] + F4*G[559] + F5*G[30]) + F16*(F0*G[542] + F1*G[551] + F2*G[19] + F3*G[564] + F4*G[565] + F5*G[42])) + F17*(F15*(F0*G[540] + F1*G[549] + F2*G[17] + F3*G[560] + F4*G[561] + F5*G[34]) + F16*(F0*G[543] + F1*G[552] + F2*G[20] + F3*G[566] + F4*G[567] + F5*G[46]) + F17*(F0*G[545] + F1*G[554] + F2*G[22] + F3*G[570] + F4*G[571] + F5*G[54])) + F6*(F15*(F0*G[540] + F1*G[549] + F2*G[17] + F3*G[560] + F4*G[561] + F5*G[34]) + F16*(F0*G[543] + F1*G[552] + F2*G[20] + F3*G[566] + F4*G[567] + F5*G[46]) + F17*(F0*G[546] + F1*G[555] + F2*G[23] + F3*G[572] + F4*G[573] + F5*G[58]) + F6*(F0*G[545] + F1*G[554] + F2*G[22] + F3*G[570] + F4*G[571] + F5*G[54])) + F7*(F15*(F0*G[541] + F1*G[550] + F2*G[18] + F3*G[562] + F4*G[563] + F5*G[38]) + F16*(F0*G[539] + F1*G[548] + F2*G[16] + F3*G[558] + F4*G[559] + F5*G[30]) + F17*(F0*G[540] + F1*G[549] + F2*G[17] + F3*G[560] + F4*G[561] + F5*G[34]) + F6*(F0*G[540] + F1*G[549] + F2*G[17] + F3*G[560] + F4*G[561] + F5*G[34]) + F7*(F0*G[538] + F1*G[547] + F2*G[15] + F3*G[556] + F4*G[557] + F5*G[26])) + F8*(F15*(F0*G[539] + F1*G[548] + F2*G[16] + F3*G[558] + F4*G[559] + F5*G[30]) + F16*(F0*G[544] + F1*G[553] + F2*G[21] + F3*G[568] + F4*G[569] + F5*G[50]) + F17*(F0*G[543] + F1*G[552] + F2*G[20] + F3*G[566] + F4*G[567] + F5*G[46]) + F6*(F0*G[543] + F1*G[552] + F2*G[20] + F3*G[566] + F4*G[567] + F5*G[46]) + F7*(F0*G[539] + F1*G[548] + F2*G[16] + F3*G[558] + F4*G[559] + F5*G[30]) + F8*(F0*G[542] + F1*G[551] + F2*G[19] + F3*G[564] + F4*G[565] + F5*G[42])) + (C[1]*F0*F0*F15*F18*G[740] + C[1]*F0*F0*F15*F19*G[740] + C[1]*F0*F0*F15*G[741] + C[1]*F0*F0*F16*F18*G[742] + C[1]*F0*F0*F16*F19*G[742] + C[1]*F0*F0*F16*G[743] + C[1]*F0*F0*F17*F18*G[744] + C[1]*F0*F0*F17*F19*G[744] + C[1]*F0*F0*F17*G[745] + C[1]*F0*F0*F18*F6*G[744] + C[1]*F0*F0*F18*F7*G[740] + C[1]*F0*F0*F18*F8*G[742] + C[1]*F0*F0*F19*F6*G[744] + C[1]*F0*F0*F19*F7*G[740] + C[1]*F0*F0*F19*F8*G[742] + C[1]*F0*F0*F6*G[745] + C[1]*F0*F0*F7*G[741] + C[1]*F0*F0*F8*G[743] + C[1]*F0*F1*F15*F18*G[746] + C[1]*F0*F1*F15*F19*G[746] + C[1]*F0*F1*F15*G[747] + C[1]*F0*F1*F16*F18*G[748] + C[1]*F0*F1*F16*F19*G[748] + C[1]*F0*F1*F16*G[749] + C[1]*F0*F1*F17*F18*G[750] + C[1]*F0*F1*F17*F19*G[750] + C[1]*F0*F1*F17*G[751] + C[1]*F0*F1*F18*F6*G[750] + C[1]*F0*F1*F18*F7*G[746] + C[1]*F0*F1*F18*F8*G[748] + C[1]*F0*F1*F19*F6*G[750] + C[1]*F0*F1*F19*F7*G[746] + C[1]*F0*F1*F19*F8*G[748] + C[1]*F0*F1*F6*G[751] + C[1]*F0*F1*F7*G[747] + C[1]*F0*F1*F8*G[749] + C[1]*F0*F15*F18*F2*G[752] + C[1]*F0*F15*F18*F3*G[740] + C[1]*F0*F15*F18*F4*G[753] + C[1]*F0*F15*F18*F5*G[754] + C[1]*F0*F15*F19*F2*G[752] + C[1]*F0*F15*F19*F3*G[740] + C[1]*F0*F15*F19*F4*G[753] + C[1]*F0*F15*F19*F5*G[754] + C[1]*F0*F15*F2*G[755] + C[1]*F0*F15*F3*G[741] + C[1]*F0*F15*F4*G[756] + C[1]*F0*F15*F5*G[289] + C[1]*F0*F16*F18*F2*G[757] + C[1]*F0*F16*F18*F3*G[742] + C[1]*F0*F16*F18*F4*G[758] + C[1]*F0*F16*F18*F5*G[759] + C[1]*F0*F16*F19*F2*G[757] + C[1]*F0*F16*F19*F3*G[742] + C[1]*F0*F16*F19*F4*G[758] + C[1]*F0*F16*F19*F5*G[759] + C[1]*F0*F16*F2*G[760] + C[1]*F0*F16*F3*G[743] + C[1]*F0*F16*F4*G[761] + C[1]*F0*F16*F5*G[295] + C[1]*F0*F17*F18*F2*G[762] + C[1]*F0*F17*F18*F3*G[744] + C[1]*F0*F17*F18*F4*G[763] + C[1]*F0*F17*F18*F5*G[764] + C[1]*F0*F17*F19*F2*G[762] + C[1]*F0*F17*F19*F3*G[744] + C[1]*F0*F17*F19*F4*G[763] + C[1]*F0*F17*F19*F5*G[764] + C[1]*F0*F17*F2*G[765] + C[1]*F0*F17*F3*G[745] + C[1]*F0*F17*F4*G[766] + C[1]*F0*F17*F5*G[301] + C[1]*F0*F18*F18*G[584] + C[1]*F0*F18*F19*G[587] + C[1]*F0*F18*F2*F6*G[762] + C[1]*F0*F18*F2*F7*G[752] + C[1]*F0*F18*F2*F8*G[757] + C[1]*F0*F18*F3*F6*G[744] + C[1]*F0*F18*F3*F7*G[740] + C[1]*F0*F18*F3*F8*G[742] + C[1]*F0*F18*F4*F6*G[763] + C[1]*F0*F18*F4*F7*G[753] + C[1]*F0*F18*F4*F8*G[758] + C[1]*F0*F18*F5*F6*G[764] + C[1]*F0*F18*F5*F7*G[754] + C[1]*F0*F18*F5*F8*G[759] + C[1]*F0*F18*G[590] + C[1]*F0*F19*F19*G[584] + C[1]*F0*F19*F2*F6*G[762] + C[1]*F0*F19*F2*F7*G[752] + C[1]*F0*F19*F2*F8*G[757] + C[1]*F0*F19*F3*F6*G[744] + C[1]*F0*F19*F3*F7*G[740] + C[1]*F0*F19*F3*F8*G[742] + C[1]*F0*F19*F4*F6*G[763] + C[1]*F0*F19*F4*F7*G[753] + C[1]*F0*F19*F4*F8*G[758] + C[1]*F0*F19*F5*F6*G[764] + C[1]*F0*F19*F5*F7*G[754] + C[1]*F0*F19*F5*F8*G[759] + C[1]*F0*F19*G[590] + C[1]*F0*F2*F6*G[765] + C[1]*F0*F2*F7*G[755] + C[1]*F0*F2*F8*G[760] + C[1]*F0*F3*F6*G[745] + C[1]*F0*F3*F7*G[741] + C[1]*F0*F3*F8*G[743] + C[1]*F0*F4*F6*G[766] + C[1]*F0*F4*F7*G[756] + C[1]*F0*F4*F8*G[761] + C[1]*F0*F5*F6*G[301] + C[1]*F0*F5*F7*G[289] + C[1]*F0*F5*F8*G[295] + C[1]*F0*G[593] + C[1]*F1*F1*F15*F18*G[767] + C[1]*F1*F1*F15*F19*G[767] + C[1]*F1*F1*F15*G[768] + C[1]*F1*F1*F16*F18*G[769] + C[1]*F1*F1*F16*F19*G[769] + C[1]*F1*F1*F16*G[770] + C[1]*F1*F1*F17*F18*G[771] + C[1]*F1*F1*F17*F19*G[771] + C[1]*F1*F1*F17*G[772] + C[1]*F1*F1*F18*F6*G[771] + C[1]*F1*F1*F18*F7*G[767] + C[1]*F1*F1*F18*F8*G[769] + C[1]*F1*F1*F19*F6*G[771] + C[1]*F1*F1*F19*F7*G[767] + C[1]*F1*F1*F19*F8*G[769] + C[1]*F1*F1*F6*G[772] + C[1]*F1*F1*F7*G[768] + C[1]*F1*F1*F8*G[770] + C[1]*F1*F15*F18*F2*G[773] + C[1]*F1*F15*F18*F3*G[774] + C[1]*F1*F15*F18*F4*G[767] + C[1]*F1*F15*F18*F5*G[775] + C[1]*F1*F15*F19*F2*G[773] + C[1]*F1*F15*F19*F3*G[774] + C[1]*F1*F15*F19*F4*G[767] + C[1]*F1*F15*F19*F5*G[775] + C[1]*F1*F15*F2*G[776] + C[1]*F1*F15*F3*G[777] + C[1]*F1*F15*F4*G[768] + C[1]*F1*F15*F5*G[304] + C[1]*F1*F16*F18*F2*G[778] + C[1]*F1*F16*F18*F3*G[779] + C[1]*F1*F16*F18*F4*G[769] + C[1]*F1*F16*F18*F5*G[780] + C[1]*F1*F16*F19*F2*G[778] + C[1]*F1*F16*F19*F3*G[779] + C[1]*F1*F16*F19*F4*G[769] + C[1]*F1*F16*F19*F5*G[780] + C[1]*F1*F16*F2*G[781] + C[1]*F1*F16*F3*G[782] + C[1]*F1*F16*F4*G[770] + C[1]*F1*F16*F5*G[306] + C[1]*F1*F17*F18*F2*G[783] + C[1]*F1*F17*F18*F3*G[784] + C[1]*F1*F17*F18*F4*G[771] + C[1]*F1*F17*F18*F5*G[785] + C[1]*F1*F17*F19*F2*G[783] + C[1]*F1*F17*F19*F3*G[784] + C[1]*F1*F17*F19*F4*G[771] + C[1]*F1*F17*F19*F5*G[785] + C[1]*F1*F17*F2*G[786] + C[1]*F1*F17*F3*G[787] + C[1]*F1*F17*F4*G[772] + C[1]*F1*F17*F5*G[308] + C[1]*F1*F18*F18*G[600] + C[1]*F1*F18*F19*G[603] + C[1]*F1*F18*F2*F6*G[783] + C[1]*F1*F18*F2*F7*G[773] + C[1]*F1*F18*F2*F8*G[778] + C[1]*F1*F18*F3*F6*G[784] + C[1]*F1*F18*F3*F7*G[774] + C[1]*F1*F18*F3*F8*G[779] + C[1]*F1*F18*F4*F6*G[771] + C[1]*F1*F18*F4*F7*G[767] + C[1]*F1*F18*F4*F8*G[769] + C[1]*F1*F18*F5*F6*G[785] + C[1]*F1*F18*F5*F7*G[775] + C[1]*F1*F18*F5*F8*G[780] + C[1]*F1*F18*G[606] + C[1]*F1*F19*F19*G[600] + C[1]*F1*F19*F2*F6*G[783] + C[1]*F1*F19*F2*F7*G[773] + C[1]*F1*F19*F2*F8*G[778] + C[1]*F1*F19*F3*F6*G[784] + C[1]*F1*F19*F3*F7*G[774] + C[1]*F1*F19*F3*F8*G[779] + C[1]*F1*F19*F4*F6*G[771] + C[1]*F1*F19*F4*F7*G[767] + C[1]*F1*F19*F4*F8*G[769] + C[1]*F1*F19*F5*F6*G[785] + C[1]*F1*F19*F5*F7*G[775] + C[1]*F1*F19*F5*F8*G[780] + C[1]*F1*F19*G[606] + C[1]*F1*F2*F6*G[786] + C[1]*F1*F2*F7*G[776] + C[1]*F1*F2*F8*G[781] + C[1]*F1*F3*F6*G[787] + C[1]*F1*F3*F7*G[777] + C[1]*F1*F3*F8*G[782] + C[1]*F1*F4*F6*G[772] + C[1]*F1*F4*F7*G[768] + C[1]*F1*F4*F8*G[770] + C[1]*F1*F5*F6*G[308] + C[1]*F1*F5*F7*G[304] + C[1]*F1*F5*F8*G[306] + C[1]*F1*G[609] + C[1]*F15*F18*F2*F2*G[788] + C[1]*F15*F18*F2*F3*G[789] + C[1]*F15*F18*F2*F4*G[790] + C[1]*F15*F18*F2*F5*G[788] + C[1]*F15*F19*F2*F2*G[788] + C[1]*F15*F19*F2*F3*G[789] + C[1]*F15*F19*F2*F4*G[790] + C[1]*F15*F19*F2*F5*G[788] + C[1]*F15*F2*F2*G[332] + C[1]*F15*F2*F3*G[791] + C[1]*F15*F2*F4*G[792] + C[1]*F15*F2*F5*G[332] + C[1]*F16*F18*F2*F2*G[793] + C[1]*F16*F18*F2*F3*G[794] + C[1]*F16*F18*F2*F4*G[795] + C[1]*F16*F18*F2*F5*G[793] + C[1]*F16*F19*F2*F2*G[793] + C[1]*F16*F19*F2*F3*G[794] + C[1]*F16*F19*F2*F4*G[795] + C[1]*F16*F19*F2*F5*G[793] + C[1]*F16*F2*F2*G[338] + C[1]*F16*F2*F3*G[796] + C[1]*F16*F2*F4*G[797] + C[1]*F16*F2*F5*G[338] + C[1]*F17*F18*F2*F2*G[798] + C[1]*F17*F18*F2*F3*G[799] + C[1]*F17*F18*F2*F4*G[800] + C[1]*F17*F18*F2*F5*G[798] + C[1]*F17*F19*F2*F2*G[798] + C[1]*F17*F19*F2*F3*G[799] + C[1]*F17*F19*F2*F4*G[800] + C[1]*F17*F19*F2*F5*G[798] + C[1]*F17*F2*F2*G[344] + C[1]*F17*F2*F3*G[801] + C[1]*F17*F2*F4*G[802] + C[1]*F17*F2*F5*G[344] + C[1]*F18*F18*F2*G[612] + C[1]*F18*F19*F2*G[615] + C[1]*F18*F2*F2*F6*G[798] + C[1]*F18*F2*F2*F7*G[788] + C[1]*F18*F2*F2*F8*G[793] + C[1]*F18*F2*F3*F6*G[799] + C[1]*F18*F2*F3*F7*G[789] + C[1]*F18*F2*F3*F8*G[794] + C[1]*F18*F2*F4*F6*G[800] + C[1]*F18*F2*F4*F7*G[790] + C[1]*F18*F2*F4*F8*G[795] + C[1]*F18*F2*F5*F6*G[798] + C[1]*F18*F2*F5*F7*G[788] + C[1]*F18*F2*F5*F8*G[793] + C[1]*F18*F2*G[618] + C[1]*F19*F19*F2*G[612] + C[1]*F19*F2*F2*F6*G[798] + C[1]*F19*F2*F2*F7*G[788] + C[1]*F19*F2*F2*F8*G[793] + C[1]*F19*F2*F3*F6*G[799] + C[1]*F19*F2*F3*F7*G[789] + C[1]*F19*F2*F3*F8*G[794] + C[1]*F19*F2*F4*F6*G[800] + C[1]*F19*F2*F4*F7*G[790] + C[1]*F19*F2*F4*F8*G[795] + C[1]*F19*F2*F5*F6*G[798] + C[1]*F19*F2*F5*F7*G[788] + C[1]*F19*F2*F5*F8*G[793] + C[1]*F19*F2*G[618] + C[1]*F2*F2*F6*G[344] + C[1]*F2*F2*F7*G[332] + C[1]*F2*F2*F8*G[338] + C[1]*F2*F3*F6*G[801] + C[1]*F2*F3*F7*G[791] + C[1]*F2*F3*F8*G[796] + C[1]*F2*F4*F6*G[802] + C[1]*F2*F4*F7*G[792] + C[1]*F2*F4*F8*G[797] + C[1]*F2*F5*F6*G[344] + C[1]*F2*F5*F7*G[332] + C[1]*F2*F5*F8*G[338] + C[1]*F2*G[621] + C[3]*F0*F0*F15*F18*G[803] + C[3]*F0*F0*F15*F19*G[803] + C[3]*F0*F0*F15*G[804] + C[3]*F0*F0*F16*F18*G[805] + C[3]*F0*F0*F16*F19*G[805] + C[3]*F0*F0*F16*G[806] + C[3]*F0*F0*F17*F18*G[807] + C[3]*F0*F0*F17*F19*G[807] + C[3]*F0*F0*F17*G[808] + C[3]*F0*F0*F18*F6*G[807] + C[3]*F0*F0*F18*F7*G[803] + C[3]*F0*F0*F18*F8*G[805] + C[3]*F0*F0*F19*F6*G[807] + C[3]*F0*F0*F19*F7*G[803] + C[3]*F0*F0*F19*F8*G[805] + C[3]*F0*F0*F6*G[808] + C[3]*F0*F0*F7*G[804] + C[3]*F0*F0*F8*G[806] + C[3]*F0*F1*F15*F18*G[809] + C[3]*F0*F1*F15*F19*G[809] + C[3]*F0*F1*F15*G[810] + C[3]*F0*F1*F16*F18*G[811] + C[3]*F0*F1*F16*F19*G[811] + C[3]*F0*F1*F16*G[812] + C[3]*F0*F1*F17*F18*G[813] + C[3]*F0*F1*F17*F19*G[813] + C[3]*F0*F1*F17*G[814] + C[3]*F0*F1*F18*F6*G[813] + C[3]*F0*F1*F18*F7*G[809] + C[3]*F0*F1*F18*F8*G[811] + C[3]*F0*F1*F19*F6*G[813] + C[3]*F0*F1*F19*F7*G[809] + C[3]*F0*F1*F19*F8*G[811] + C[3]*F0*F1*F6*G[814] + C[3]*F0*F1*F7*G[810] + C[3]*F0*F1*F8*G[812] + C[3]*F0*F15*F18*F2*G[815] + C[3]*F0*F15*F18*F3*G[803] + C[3]*F0*F15*F18*F4*G[816] + C[3]*F0*F15*F18*F5*G[817] + C[3]*F0*F15*F19*F2*G[815] + C[3]*F0*F15*F19*F3*G[803] + C[3]*F0*F15*F19*F4*G[816] + C[3]*F0*F15*F19*F5*G[817] + C[3]*F0*F15*F2*G[818] + C[3]*F0*F15*F3*G[804] + C[3]*F0*F15*F4*G[819] + C[3]*F0*F15*F5*G[361] + C[3]*F0*F16*F18*F2*G[820] + C[3]*F0*F16*F18*F3*G[805] + C[3]*F0*F16*F18*F4*G[821] + C[3]*F0*F16*F18*F5*G[822] + C[3]*F0*F16*F19*F2*G[820] + C[3]*F0*F16*F19*F3*G[805] + C[3]*F0*F16*F19*F4*G[821] + C[3]*F0*F16*F19*F5*G[822] + C[3]*F0*F16*F2*G[823] + C[3]*F0*F16*F3*G[806] + C[3]*F0*F16*F4*G[824] + C[3]*F0*F16*F5*G[367] + C[3]*F0*F17*F18*F2*G[825] + C[3]*F0*F17*F18*F3*G[807] + C[3]*F0*F17*F18*F4*G[826] + C[3]*F0*F17*F18*F5*G[827] + C[3]*F0*F17*F19*F2*G[825] + C[3]*F0*F17*F19*F3*G[807] + C[3]*F0*F17*F19*F4*G[826] + C[3]*F0*F17*F19*F5*G[827] + C[3]*F0*F17*F2*G[828] + C[3]*F0*F17*F3*G[808] + C[3]*F0*F17*F4*G[829] + C[3]*F0*F17*F5*G[373] + C[3]*F0*F18*F18*G[632] + C[3]*F0*F18*F19*G[635] + C[3]*F0*F18*F2*F6*G[825] + C[3]*F0*F18*F2*F7*G[815] + C[3]*F0*F18*F2*F8*G[820] + C[3]*F0*F18*F3*F6*G[807] + C[3]*F0*F18*F3*F7*G[803] + C[3]*F0*F18*F3*F8*G[805] + C[3]*F0*F18*F4*F6*G[826] + C[3]*F0*F18*F4*F7*G[816] + C[3]*F0*F18*F4*F8*G[821] + C[3]*F0*F18*F5*F6*G[827] + C[3]*F0*F18*F5*F7*G[817] + C[3]*F0*F18*F5*F8*G[822] + C[3]*F0*F18*G[638] + C[3]*F0*F19*F19*G[632] + C[3]*F0*F19*F2*F6*G[825] + C[3]*F0*F19*F2*F7*G[815] + C[3]*F0*F19*F2*F8*G[820] + C[3]*F0*F19*F3*F6*G[807] + C[3]*F0*F19*F3*F7*G[803] + C[3]*F0*F19*F3*F8*G[805] + C[3]*F0*F19*F4*F6*G[826] + C[3]*F0*F19*F4*F7*G[816] + C[3]*F0*F19*F4*F8*G[821] + C[3]*F0*F19*F5*F6*G[827] + C[3]*F0*F19*F5*F7*G[817] + C[3]*F0*F19*F5*F8*G[822] + C[3]*F0*F19*G[638] + C[3]*F0*F2*F6*G[828] + C[3]*F0*F2*F7*G[818] + C[3]*F0*F2*F8*G[823] + C[3]*F0*F3*F6*G[808] + C[3]*F0*F3*F7*G[804] + C[3]*F0*F3*F8*G[806] + C[3]*F0*F4*F6*G[829] + C[3]*F0*F4*F7*G[819] + C[3]*F0*F4*F8*G[824] + C[3]*F0*F5*F6*G[373] + C[3]*F0*F5*F7*G[361] + C[3]*F0*F5*F8*G[367] + C[3]*F0*G[641] + C[3]*F1*F1*F15*F18*G[830] + C[3]*F1*F1*F15*F19*G[830] + C[3]*F1*F1*F15*G[831] + C[3]*F1*F1*F16*F18*G[832] + C[3]*F1*F1*F16*F19*G[832] + C[3]*F1*F1*F16*G[833] + C[3]*F1*F1*F17*F18*G[767] + C[3]*F1*F1*F17*F19*G[767] + C[3]*F1*F1*F17*G[768] + C[3]*F1*F1*F18*F6*G[767] + C[3]*F1*F1*F18*F7*G[830] + C[3]*F1*F1*F18*F8*G[832] + C[3]*F1*F1*F19*F6*G[767] + C[3]*F1*F1*F19*F7*G[830] + C[3]*F1*F1*F19*F8*G[832] + C[3]*F1*F1*F6*G[768] + C[3]*F1*F1*F7*G[831] + C[3]*F1*F1*F8*G[833] + C[3]*F1*F15*F18*F2*G[834] + C[3]*F1*F15*F18*F3*G[835] + C[3]*F1*F15*F18*F4*G[830] + C[3]*F1*F15*F18*F5*G[836] + C[3]*F1*F15*F19*F2*G[834] + C[3]*F1*F15*F19*F3*G[835] + C[3]*F1*F15*F19*F4*G[830] + C[3]*F1*F15*F19*F5*G[836] + C[3]*F1*F15*F2*G[837] + C[3]*F1*F15*F3*G[838] + C[3]*F1*F15*F4*G[831] + C[3]*F1*F15*F5*G[376] + C[3]*F1*F16*F18*F2*G[839] + C[3]*F1*F16*F18*F3*G[840] + C[3]*F1*F16*F18*F4*G[832] + C[3]*F1*F16*F18*F5*G[841] + C[3]*F1*F16*F19*F2*G[839] + C[3]*F1*F16*F19*F3*G[840] + C[3]*F1*F16*F19*F4*G[832] + C[3]*F1*F16*F19*F5*G[841] + C[3]*F1*F16*F2*G[842] + C[3]*F1*F16*F3*G[843] + C[3]*F1*F16*F4*G[833] + C[3]*F1*F16*F5*G[378] + C[3]*F1*F17*F18*F2*G[844] + C[3]*F1*F17*F18*F3*G[845] + C[3]*F1*F17*F18*F4*G[767] + C[3]*F1*F17*F18*F5*G[846] + C[3]*F1*F17*F19*F2*G[844] + C[3]*F1*F17*F19*F3*G[845] + C[3]*F1*F17*F19*F4*G[767] + C[3]*F1*F17*F19*F5*G[846] + C[3]*F1*F17*F2*G[847] + C[3]*F1*F17*F3*G[848] + C[3]*F1*F17*F4*G[768] + C[3]*F1*F17*F5*G[380] + C[3]*F1*F18*F18*G[648] + C[3]*F1*F18*F19*G[651] + C[3]*F1*F18*F2*F6*G[844] + C[3]*F1*F18*F2*F7*G[834] + C[3]*F1*F18*F2*F8*G[839] + C[3]*F1*F18*F3*F6*G[845] + C[3]*F1*F18*F3*F7*G[835] + C[3]*F1*F18*F3*F8*G[840] + C[3]*F1*F18*F4*F6*G[767] + C[3]*F1*F18*F4*F7*G[830] + C[3]*F1*F18*F4*F8*G[832] + C[3]*F1*F18*F5*F6*G[846] + C[3]*F1*F18*F5*F7*G[836] + C[3]*F1*F18*F5*F8*G[841] + C[3]*F1*F18*G[654] + C[3]*F1*F19*F19*G[648] + C[3]*F1*F19*F2*F6*G[844] + C[3]*F1*F19*F2*F7*G[834] + C[3]*F1*F19*F2*F8*G[839] + C[3]*F1*F19*F3*F6*G[845] + C[3]*F1*F19*F3*F7*G[835] + C[3]*F1*F19*F3*F8*G[840] + C[3]*F1*F19*F4*F6*G[767] + C[3]*F1*F19*F4*F7*G[830] + C[3]*F1*F19*F4*F8*G[832] + C[3]*F1*F19*F5*F6*G[846] + C[3]*F1*F19*F5*F7*G[836] + C[3]*F1*F19*F5*F8*G[841] + C[3]*F1*F19*G[654] + C[3]*F1*F2*F6*G[847] + C[3]*F1*F2*F7*G[837] + C[3]*F1*F2*F8*G[842] + C[3]*F1*F3*F6*G[848] + C[3]*F1*F3*F7*G[838] + C[3]*F1*F3*F8*G[843] + C[3]*F1*F4*F6*G[768] + C[3]*F1*F4*F7*G[831] + C[3]*F1*F4*F8*G[833] + C[3]*F1*F5*F6*G[380] + C[3]*F1*F5*F7*G[376] + C[3]*F1*F5*F8*G[378] + C[3]*F1*G[657] + C[3]*F15*F18*F2*F2*G[849] + C[3]*F15*F18*F2*F3*G[850] + C[3]*F15*F18*F2*F4*G[851] + C[3]*F15*F18*F2*F5*G[849] + C[3]*F15*F19*F2*F2*G[849] + C[3]*F15*F19*F2*F3*G[850] + C[3]*F15*F19*F2*F4*G[851] + C[3]*F15*F19*F2*F5*G[849] + C[3]*F15*F2*F2*G[404] + C[3]*F15*F2*F3*G[852] + C[3]*F15*F2*F4*G[853] + C[3]*F15*F2*F5*G[404] + C[3]*F16*F18*F2*F2*G[854] + C[3]*F16*F18*F2*F3*G[855] + C[3]*F16*F18*F2*F4*G[856] + C[3]*F16*F18*F2*F5*G[854] + C[3]*F16*F19*F2*F2*G[854] + C[3]*F16*F19*F2*F3*G[855] + C[3]*F16*F19*F2*F4*G[856] + C[3]*F16*F19*F2*F5*G[854] + C[3]*F16*F2*F2*G[410] + C[3]*F16*F2*F3*G[857] + C[3]*F16*F2*F4*G[858] + C[3]*F16*F2*F5*G[410] + C[3]*F17*F18*F2*F2*G[859] + C[3]*F17*F18*F2*F3*G[860] + C[3]*F17*F18*F2*F4*G[861] + C[3]*F17*F18*F2*F5*G[859] + C[3]*F17*F19*F2*F2*G[859] + C[3]*F17*F19*F2*F3*G[860] + C[3]*F17*F19*F2*F4*G[861] + C[3]*F17*F19*F2*F5*G[859] + C[3]*F17*F2*F2*G[414] + C[3]*F17*F2*F3*G[862] + C[3]*F17*F2*F4*G[863] + C[3]*F17*F2*F5*G[414] + C[3]*F18*F18*F2*G[660] + C[3]*F18*F19*F2*G[663] + C[3]*F18*F2*F2*F6*G[859] + C[3]*F18*F2*F2*F7*G[849] + C[3]*F18*F2*F2*F8*G[854] + C[3]*F18*F2*F3*F6*G[860] + C[3]*F18*F2*F3*F7*G[850] + C[3]*F18*F2*F3*F8*G[855] + C[3]*F18*F2*F4*F6*G[861] + C[3]*F18*F2*F4*F7*G[851] + C[3]*F18*F2*F4*F8*G[856] + C[3]*F18*F2*F5*F6*G[859] + C[3]*F18*F2*F5*F7*G[849] + C[3]*F18*F2*F5*F8*G[854] + C[3]*F18*F2*G[666] + C[3]*F19*F19*F2*G[660] + C[3]*F19*F2*F2*F6*G[859] + C[3]*F19*F2*F2*F7*G[849] + C[3]*F19*F2*F2*F8*G[854] + C[3]*F19*F2*F3*F6*G[860] + C[3]*F19*F2*F3*F7*G[850] + C[3]*F19*F2*F3*F8*G[855] + C[3]*F19*F2*F4*F6*G[861] + C[3]*F19*F2*F4*F7*G[851] + C[3]*F19*F2*F4*F8*G[856] + C[3]*F19*F2*F5*F6*G[859] + C[3]*F19*F2*F5*F7*G[849] + C[3]*F19*F2*F5*F8*G[854] + C[3]*F19*F2*G[666] + C[3]*F2*F2*F6*G[414] + C[3]*F2*F2*F7*G[404] + C[3]*F2*F2*F8*G[410] + C[3]*F2*F3*F6*G[862] + C[3]*F2*F3*F7*G[852] + C[3]*F2*F3*F8*G[857] + C[3]*F2*F4*F6*G[863] + C[3]*F2*F4*F7*G[853] + C[3]*F2*F4*F8*G[858] + C[3]*F2*F5*F6*G[414] + C[3]*F2*F5*F7*G[404] + C[3]*F2*F5*F8*G[410] + C[3]*F2*G[669] + C[5]*F0*F0*F15*F18*G[864] + C[5]*F0*F0*F15*F19*G[864] + C[5]*F0*F0*F15*G[865] + C[5]*F0*F0*F16*F18*G[866] + C[5]*F0*F0*F16*F19*G[866] + C[5]*F0*F0*F16*G[867] + C[5]*F0*F0*F17*F18*G[868] + C[5]*F0*F0*F17*F19*G[868] + C[5]*F0*F0*F17*G[869] + C[5]*F0*F0*F18*F6*G[868] + C[5]*F0*F0*F18*F7*G[864] + C[5]*F0*F0*F18*F8*G[866] + C[5]*F0*F0*F19*F6*G[868] + C[5]*F0*F0*F19*F7*G[864] + C[5]*F0*F0*F19*F8*G[866] + C[5]*F0*F0*F6*G[869] + C[5]*F0*F0*F7*G[865] + C[5]*F0*F0*F8*G[867] + C[5]*F0*F1*F15*F18*G[870] + C[5]*F0*F1*F15*F19*G[870] + C[5]*F0*F1*F15*G[871] + C[5]*F0*F1*F16*F18*G[872] + C[5]*F0*F1*F16*F19*G[872] + C[5]*F0*F1*F16*G[873] + C[5]*F0*F1*F17*F18*G[874] + C[5]*F0*F1*F17*F19*G[874] + C[5]*F0*F1*F17*G[875] + C[5]*F0*F1*F18*F6*G[874] + C[5]*F0*F1*F18*F7*G[870] + C[5]*F0*F1*F18*F8*G[872] + C[5]*F0*F1*F19*F6*G[874] + C[5]*F0*F1*F19*F7*G[870] + C[5]*F0*F1*F19*F8*G[872] + C[5]*F0*F1*F6*G[875] + C[5]*F0*F1*F7*G[871] + C[5]*F0*F1*F8*G[873] + C[5]*F0*F15*F18*F2*G[876] + C[5]*F0*F15*F18*F3*G[864] + C[5]*F0*F15*F18*F4*G[877] + C[5]*F0*F15*F18*F5*G[878] + C[5]*F0*F15*F19*F2*G[876] + C[5]*F0*F15*F19*F3*G[864] + C[5]*F0*F15*F19*F4*G[877] + C[5]*F0*F15*F19*F5*G[878] + C[5]*F0*F15*F2*G[879] + C[5]*F0*F15*F3*G[865] + C[5]*F0*F15*F4*G[880] + C[5]*F0*F15*F5*G[431] + C[5]*F0*F16*F18*F2*G[881] + C[5]*F0*F16*F18*F3*G[866] + C[5]*F0*F16*F18*F4*G[882] + C[5]*F0*F16*F18*F5*G[883] + C[5]*F0*F16*F19*F2*G[881] + C[5]*F0*F16*F19*F3*G[866] + C[5]*F0*F16*F19*F4*G[882] + C[5]*F0*F16*F19*F5*G[883] + C[5]*F0*F16*F2*G[884] + C[5]*F0*F16*F3*G[867] + C[5]*F0*F16*F4*G[885] + C[5]*F0*F16*F5*G[437] + C[5]*F0*F17*F18*F2*G[886] + C[5]*F0*F17*F18*F3*G[868] + C[5]*F0*F17*F18*F4*G[887] + C[5]*F0*F17*F18*F5*G[888] + C[5]*F0*F17*F19*F2*G[886] + C[5]*F0*F17*F19*F3*G[868] + C[5]*F0*F17*F19*F4*G[887] + C[5]*F0*F17*F19*F5*G[888] + C[5]*F0*F17*F2*G[889] + C[5]*F0*F17*F3*G[869] + C[5]*F0*F17*F4*G[890] + C[5]*F0*F17*F5*G[443] + C[5]*F0*F18*F18*G[680] + C[5]*F0*F18*F19*G[683] + C[5]*F0*F18*F2*F6*G[886] + C[5]*F0*F18*F2*F7*G[876] + C[5]*F0*F18*F2*F8*G[881] + C[5]*F0*F18*F3*F6*G[868] + C[5]*F0*F18*F3*F7*G[864] + C[5]*F0*F18*F3*F8*G[866] + C[5]*F0*F18*F4*F6*G[887] + C[5]*F0*F18*F4*F7*G[877] + C[5]*F0*F18*F4*F8*G[882] + C[5]*F0*F18*F5*F6*G[888] + C[5]*F0*F18*F5*F7*G[878] + C[5]*F0*F18*F5*F8*G[883] + C[5]*F0*F18*G[686] + C[5]*F0*F19*F19*G[680] + C[5]*F0*F19*F2*F6*G[886] + C[5]*F0*F19*F2*F7*G[876] + C[5]*F0*F19*F2*F8*G[881] + C[5]*F0*F19*F3*F6*G[868] + C[5]*F0*F19*F3*F7*G[864] + C[5]*F0*F19*F3*F8*G[866] + C[5]*F0*F19*F4*F6*G[887] + C[5]*F0*F19*F4*F7*G[877] + C[5]*F0*F19*F4*F8*G[882] + C[5]*F0*F19*F5*F6*G[888] + C[5]*F0*F19*F5*F7*G[878] + C[5]*F0*F19*F5*F8*G[883] + C[5]*F0*F19*G[686] + C[5]*F0*F2*F6*G[889] + C[5]*F0*F2*F7*G[879] + C[5]*F0*F2*F8*G[884] + C[5]*F0*F3*F6*G[869] + C[5]*F0*F3*F7*G[865] + C[5]*F0*F3*F8*G[867] + C[5]*F0*F4*F6*G[890] + C[5]*F0*F4*F7*G[880] + C[5]*F0*F4*F8*G[885] + C[5]*F0*F5*F6*G[443] + C[5]*F0*F5*F7*G[431] + C[5]*F0*F5*F8*G[437] + C[5]*F0*G[689] + C[5]*F1*F1*F15*F18*G[832] + C[5]*F1*F1*F15*F19*G[832] + C[5]*F1*F1*F15*G[833] + C[5]*F1*F1*F16*F18*G[891] + C[5]*F1*F1*F16*F19*G[891] + C[5]*F1*F1*F16*G[892] + C[5]*F1*F1*F17*F18*G[769] + C[5]*F1*F1*F17*F19*G[769] + C[5]*F1*F1*F17*G[770] + C[5]*F1*F1*F18*F6*G[769] + C[5]*F1*F1*F18*F7*G[832] + C[5]*F1*F1*F18*F8*G[891] + C[5]*F1*F1*F19*F6*G[769] + C[5]*F1*F1*F19*F7*G[832] + C[5]*F1*F1*F19*F8*G[891] + C[5]*F1*F1*F6*G[770] + C[5]*F1*F1*F7*G[833] + C[5]*F1*F1*F8*G[892] + C[5]*F1*F15*F18*F2*G[893] + C[5]*F1*F15*F18*F3*G[894] + C[5]*F1*F15*F18*F4*G[832] + C[5]*F1*F15*F18*F5*G[895] + C[5]*F1*F15*F19*F2*G[893] + C[5]*F1*F15*F19*F3*G[894] + C[5]*F1*F15*F19*F4*G[832] + C[5]*F1*F15*F19*F5*G[895] + C[5]*F1*F15*F2*G[896] + C[5]*F1*F15*F3*G[897] + C[5]*F1*F15*F4*G[833] + C[5]*F1*F15*F5*G[446] + C[5]*F1*F16*F18*F2*G[898] + C[5]*F1*F16*F18*F3*G[899] + C[5]*F1*F16*F18*F4*G[891] + C[5]*F1*F16*F18*F5*G[900] + C[5]*F1*F16*F19*F2*G[898] + C[5]*F1*F16*F19*F3*G[899] + C[5]*F1*F16*F19*F4*G[891] + C[5]*F1*F16*F19*F5*G[900] + C[5]*F1*F16*F2*G[901] + C[5]*F1*F16*F3*G[902] + C[5]*F1*F16*F4*G[892] + C[5]*F1*F16*F5*G[448] + C[5]*F1*F17*F18*F2*G[903] + C[5]*F1*F17*F18*F3*G[904] + C[5]*F1*F17*F18*F4*G[769] + C[5]*F1*F17*F18*F5*G[905] + C[5]*F1*F17*F19*F2*G[903] + C[5]*F1*F17*F19*F3*G[904] + C[5]*F1*F17*F19*F4*G[769] + C[5]*F1*F17*F19*F5*G[905] + C[5]*F1*F17*F2*G[906] + C[5]*F1*F17*F3*G[907] + C[5]*F1*F17*F4*G[770] + C[5]*F1*F17*F5*G[450] + C[5]*F1*F18*F18*G[696] + C[5]*F1*F18*F19*G[699] + C[5]*F1*F18*F2*F6*G[903] + C[5]*F1*F18*F2*F7*G[893] + C[5]*F1*F18*F2*F8*G[898] + C[5]*F1*F18*F3*F6*G[904] + C[5]*F1*F18*F3*F7*G[894] + C[5]*F1*F18*F3*F8*G[899] + C[5]*F1*F18*F4*F6*G[769] + C[5]*F1*F18*F4*F7*G[832] + C[5]*F1*F18*F4*F8*G[891] + C[5]*F1*F18*F5*F6*G[905] + C[5]*F1*F18*F5*F7*G[895] + C[5]*F1*F18*F5*F8*G[900] + C[5]*F1*F18*G[702] + C[5]*F1*F19*F19*G[696] + C[5]*F1*F19*F2*F6*G[903] + C[5]*F1*F19*F2*F7*G[893] + C[5]*F1*F19*F2*F8*G[898] + C[5]*F1*F19*F3*F6*G[904] + C[5]*F1*F19*F3*F7*G[894] + C[5]*F1*F19*F3*F8*G[899] + C[5]*F1*F19*F4*F6*G[769] + C[5]*F1*F19*F4*F7*G[832] + C[5]*F1*F19*F4*F8*G[891] + C[5]*F1*F19*F5*F6*G[905] + C[5]*F1*F19*F5*F7*G[895] + C[5]*F1*F19*F5*F8*G[900] + C[5]*F1*F19*G[702] + C[5]*F1*F2*F6*G[906] + C[5]*F1*F2*F7*G[896] + C[5]*F1*F2*F8*G[901] + C[5]*F1*F3*F6*G[907] + C[5]*F1*F3*F7*G[897] + C[5]*F1*F3*F8*G[902] + C[5]*F1*F4*F6*G[770] + C[5]*F1*F4*F7*G[833] + C[5]*F1*F4*F8*G[892] + C[5]*F1*F5*F6*G[450] + C[5]*F1*F5*F7*G[446] + C[5]*F1*F5*F8*G[448] + C[5]*F1*G[705] + C[5]*F15*F18*F2*F2*G[908] + C[5]*F15*F18*F2*F3*G[909] + C[5]*F15*F18*F2*F4*G[910] + C[5]*F15*F18*F2*F5*G[908] + C[5]*F15*F19*F2*F2*G[908] + C[5]*F15*F19*F2*F3*G[909] + C[5]*F15*F19*F2*F4*G[910] + C[5]*F15*F19*F2*F5*G[908] + C[5]*F15*F2*F2*G[472] + C[5]*F15*F2*F3*G[911] + C[5]*F15*F2*F4*G[912] + C[5]*F15*F2*F5*G[472] + C[5]*F16*F18*F2*F2*G[913] + C[5]*F16*F18*F2*F3*G[914] + C[5]*F16*F18*F2*F4*G[915] + C[5]*F16*F18*F2*F5*G[913] + C[5]*F16*F19*F2*F2*G[913] + C[5]*F16*F19*F2*F3*G[914] + C[5]*F16*F19*F2*F4*G[915] + C[5]*F16*F19*F2*F5*G[913] + C[5]*F16*F2*F2*G[478] + C[5]*F16*F2*F3*G[916] + C[5]*F16*F2*F4*G[917] + C[5]*F16*F2*F5*G[478] + C[5]*F17*F18*F2*F2*G[918] + C[5]*F17*F18*F2*F3*G[919] + C[5]*F17*F18*F2*F4*G[920] + C[5]*F17*F18*F2*F5*G[918] + C[5]*F17*F19*F2*F2*G[918] + C[5]*F17*F19*F2*F3*G[919] + C[5]*F17*F19*F2*F4*G[920] + C[5]*F17*F19*F2*F5*G[918] + C[5]*F17*F2*F2*G[482] + C[5]*F17*F2*F3*G[921] + C[5]*F17*F2*F4*G[922] + C[5]*F17*F2*F5*G[482] + C[5]*F18*F18*F2*G[708] + C[5]*F18*F19*F2*G[711] + C[5]*F18*F2*F2*F6*G[918] + C[5]*F18*F2*F2*F7*G[908] + C[5]*F18*F2*F2*F8*G[913] + C[5]*F18*F2*F3*F6*G[919] + C[5]*F18*F2*F3*F7*G[909] + C[5]*F18*F2*F3*F8*G[914] + C[5]*F18*F2*F4*F6*G[920] + C[5]*F18*F2*F4*F7*G[910] + C[5]*F18*F2*F4*F8*G[915] + C[5]*F18*F2*F5*F6*G[918] + C[5]*F18*F2*F5*F7*G[908] + C[5]*F18*F2*F5*F8*G[913] + C[5]*F18*F2*G[714] + C[5]*F19*F19*F2*G[708] + C[5]*F19*F2*F2*F6*G[918] + C[5]*F19*F2*F2*F7*G[908] + C[5]*F19*F2*F2*F8*G[913] + C[5]*F19*F2*F3*F6*G[919] + C[5]*F19*F2*F3*F7*G[909] + C[5]*F19*F2*F3*F8*G[914] + C[5]*F19*F2*F4*F6*G[920] + C[5]*F19*F2*F4*F7*G[910] + C[5]*F19*F2*F4*F8*G[915] + C[5]*F19*F2*F5*F6*G[918] + C[5]*F19*F2*F5*F7*G[908] + C[5]*F19*F2*F5*F8*G[913] + C[5]*F19*F2*G[714] + C[5]*F2*F2*F6*G[482] + C[5]*F2*F2*F7*G[472] + C[5]*F2*F2*F8*G[478] + C[5]*F2*F3*F6*G[921] + C[5]*F2*F3*F7*G[911] + C[5]*F2*F3*F8*G[916] + C[5]*F2*F4*F6*G[922] + C[5]*F2*F4*F7*G[912] + C[5]*F2*F4*F8*G[917] + C[5]*F2*F5*F6*G[482] + C[5]*F2*F5*F7*G[472] + C[5]*F2*F5*F8*G[478] + C[5]*F2*G[717] + F0*F18*F18*G[718] + F0*F18*F19*G[719] + F0*F18*G[720] + F0*F19*F19*G[721] + F0*F19*G[722] + F0*G[723] + F1*F18*F18*G[724] + F1*F18*F19*G[725] + F1*F18*G[726] + F1*F19*F19*G[727] + F1*F19*G[728] + F1*G[729] + F18*F18*F2*G[246] + F18*F18*F3*G[730] + F18*F18*F4*G[731] + F18*F18*F5*G[254] + F18*F19*F2*G[247] + F18*F19*F3*G[732] + F18*F19*F4*G[733] + F18*F19*F5*G[258] + F18*F2*G[248] + F18*F3*G[722] + F18*F4*G[728] + F18*F5*G[250] + F19*F19*F2*G[249] + F19*F19*F3*G[734] + F19*F19*F4*G[735] + F19*F19*F5*G[264] + F19*F2*G[250] + F19*F3*G[736] + F19*F4*G[737] + F19*F5*G[267] + F2*G[251] + F3*G[738] + F4*G[739] + F5*G[271])/(1.0 + 0.01*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20)) + 0.01*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.01*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.02*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.02*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.02*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.2*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20)) + 0.2*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.2*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))) + (C[1]*F0*F0*F18*F18*G[574] + C[1]*F0*F0*F18*F19*G[575] + C[1]*F0*F0*F18*G[576] + C[1]*F0*F0*F19*F19*G[574] + C[1]*F0*F0*F19*G[576] + C[1]*F0*F0*G[577] + C[1]*F0*F1*F18*F18*G[578] + C[1]*F0*F1*F18*F19*G[579] + C[1]*F0*F1*F18*G[580] + C[1]*F0*F1*F19*F19*G[578] + C[1]*F0*F1*F19*G[580] + C[1]*F0*F1*G[581] + C[1]*F0*F18*F18*F2*G[582] + C[1]*F0*F18*F18*F3*G[574] + C[1]*F0*F18*F18*F4*G[583] + C[1]*F0*F18*F18*F5*G[69] + C[1]*F0*F18*F19*F2*G[585] + C[1]*F0*F18*F19*F3*G[575] + C[1]*F0*F18*F19*F4*G[586] + C[1]*F0*F18*F19*F5*G[73] + C[1]*F0*F18*F2*G[588] + C[1]*F0*F18*F3*G[576] + C[1]*F0*F18*F4*G[589] + C[1]*F0*F18*F5*G[77] + C[1]*F0*F19*F19*F2*G[582] + C[1]*F0*F19*F19*F3*G[574] + C[1]*F0*F19*F19*F4*G[583] + C[1]*F0*F19*F19*F5*G[69] + C[1]*F0*F19*F2*G[588] + C[1]*F0*F19*F3*G[576] + C[1]*F0*F19*F4*G[589] + C[1]*F0*F19*F5*G[77] + C[1]*F0*F2*G[591] + C[1]*F0*F3*G[577] + C[1]*F0*F4*G[592] + C[1]*F0*F5*G[81] + C[1]*F1*F1*F18*F18*G[594] + C[1]*F1*F1*F18*F19*G[595] + C[1]*F1*F1*F18*G[596] + C[1]*F1*F1*F19*F19*G[594] + C[1]*F1*F1*F19*G[596] + C[1]*F1*F1*G[597] + C[1]*F1*F18*F18*F2*G[598] + C[1]*F1*F18*F18*F3*G[599] + C[1]*F1*F18*F18*F4*G[594] + C[1]*F1*F18*F18*F5*G[84] + C[1]*F1*F18*F19*F2*G[601] + C[1]*F1*F18*F19*F3*G[602] + C[1]*F1*F18*F19*F4*G[595] + C[1]*F1*F18*F19*F5*G[85] + C[1]*F1*F18*F2*G[604] + C[1]*F1*F18*F3*G[605] + C[1]*F1*F18*F4*G[596] + C[1]*F1*F18*F5*G[86] + C[1]*F1*F19*F19*F2*G[598] + C[1]*F1*F19*F19*F3*G[599] + C[1]*F1*F19*F19*F4*G[594] + C[1]*F1*F19*F19*F5*G[84] + C[1]*F1*F19*F2*G[604] + C[1]*F1*F19*F3*G[605] + C[1]*F1*F19*F4*G[596] + C[1]*F1*F19*F5*G[86] + C[1]*F1*F2*G[607] + C[1]*F1*F3*G[608] + C[1]*F1*F4*G[597] + C[1]*F1*F5*G[87] + C[1]*F18*F18*F2*F2*G[106] + C[1]*F18*F18*F2*F3*G[610] + C[1]*F18*F18*F2*F4*G[611] + C[1]*F18*F18*F2*F5*G[106] + C[1]*F18*F19*F2*F2*G[110] + C[1]*F18*F19*F2*F3*G[613] + C[1]*F18*F19*F2*F4*G[614] + C[1]*F18*F19*F2*F5*G[110] + C[1]*F18*F2*F2*G[114] + C[1]*F18*F2*F3*G[616] + C[1]*F18*F2*F4*G[617] + C[1]*F18*F2*F5*G[114] + C[1]*F19*F19*F2*F2*G[106] + C[1]*F19*F19*F2*F3*G[610] + C[1]*F19*F19*F2*F4*G[611] + C[1]*F19*F19*F2*F5*G[106] + C[1]*F19*F2*F2*G[114] + C[1]*F19*F2*F3*G[616] + C[1]*F19*F2*F4*G[617] + C[1]*F19*F2*F5*G[114] + C[1]*F2*F2*G[118] + C[1]*F2*F3*G[619] + C[1]*F2*F4*G[620] + C[1]*F2*F5*G[118] + C[3]*F0*F0*F18*F18*G[622] + C[3]*F0*F0*F18*F19*G[623] + C[3]*F0*F0*F18*G[624] + C[3]*F0*F0*F19*F19*G[622] + C[3]*F0*F0*F19*G[624] + C[3]*F0*F0*G[625] + C[3]*F0*F1*F18*F18*G[626] + C[3]*F0*F1*F18*F19*G[627] + C[3]*F0*F1*F18*G[628] + C[3]*F0*F1*F19*F19*G[626] + C[3]*F0*F1*F19*G[628] + C[3]*F0*F1*G[629] + C[3]*F0*F18*F18*F2*G[630] + C[3]*F0*F18*F18*F3*G[622] + C[3]*F0*F18*F18*F4*G[631] + C[3]*F0*F18*F18*F5*G[129] + C[3]*F0*F18*F19*F2*G[633] + C[3]*F0*F18*F19*F3*G[623] + C[3]*F0*F18*F19*F4*G[634] + C[3]*F0*F18*F19*F5*G[133] + C[3]*F0*F18*F2*G[636] + C[3]*F0*F18*F3*G[624] + C[3]*F0*F18*F4*G[637] + C[3]*F0*F18*F5*G[137] + C[3]*F0*F19*F19*F2*G[630] + C[3]*F0*F19*F19*F3*G[622] + C[3]*F0*F19*F19*F4*G[631] + C[3]*F0*F19*F19*F5*G[129] + C[3]*F0*F19*F2*G[636] + C[3]*F0*F19*F3*G[624] + C[3]*F0*F19*F4*G[637] + C[3]*F0*F19*F5*G[137] + C[3]*F0*F2*G[639] + C[3]*F0*F3*G[625] + C[3]*F0*F4*G[640] + C[3]*F0*F5*G[141] + C[3]*F1*F1*F18*F18*G[642] + C[3]*F1*F1*F18*F19*G[643] + C[3]*F1*F1*F18*G[644] + C[3]*F1*F1*F19*F19*G[642] + C[3]*F1*F1*F19*G[644] + C[3]*F1*F1*G[645] + C[3]*F1*F18*F18*F2*G[646] + C[3]*F1*F18*F18*F3*G[647] + C[3]*F1*F18*F18*F4*G[642] + C[3]*F1*F18*F18*F5*G[144] + C[3]*F1*F18*F19*F2*G[649] + C[3]*F1*F18*F19*F3*G[650] + C[3]*F1*F18*F19*F4*G[643] + C[3]*F1*F18*F19*F5*G[145] + C[3]*F1*F18*F2*G[652] + C[3]*F1*F18*F3*G[653] + C[3]*F1*F18*F4*G[644] + C[3]*F1*F18*F5*G[146] + C[3]*F1*F19*F19*F2*G[646] + C[3]*F1*F19*F19*F3*G[647] + C[3]*F1*F19*F19*F4*G[642] + C[3]*F1*F19*F19*F5*G[144] + C[3]*F1*F19*F2*G[652] + C[3]*F1*F19*F3*G[653] + C[3]*F1*F19*F4*G[644] + C[3]*F1*F19*F5*G[146] + C[3]*F1*F2*G[655] + C[3]*F1*F3*G[656] + C[3]*F1*F4*G[645] + C[3]*F1*F5*G[147] + C[3]*F18*F18*F2*F2*G[166] + C[3]*F18*F18*F2*F3*G[658] + C[3]*F18*F18*F2*F4*G[659] + C[3]*F18*F18*F2*F5*G[166] + C[3]*F18*F19*F2*F2*G[170] + C[3]*F18*F19*F2*F3*G[661] + C[3]*F18*F19*F2*F4*G[662] + C[3]*F18*F19*F2*F5*G[170] + C[3]*F18*F2*F2*G[174] + C[3]*F18*F2*F3*G[664] + C[3]*F18*F2*F4*G[665] + C[3]*F18*F2*F5*G[174] + C[3]*F19*F19*F2*F2*G[166] + C[3]*F19*F19*F2*F3*G[658] + C[3]*F19*F19*F2*F4*G[659] + C[3]*F19*F19*F2*F5*G[166] + C[3]*F19*F2*F2*G[174] + C[3]*F19*F2*F3*G[664] + C[3]*F19*F2*F4*G[665] + C[3]*F19*F2*F5*G[174] + C[3]*F2*F2*G[178] + C[3]*F2*F3*G[667] + C[3]*F2*F4*G[668] + C[3]*F2*F5*G[178] + C[5]*F0*F0*F18*F18*G[670] + C[5]*F0*F0*F18*F19*G[671] + C[5]*F0*F0*F18*G[672] + C[5]*F0*F0*F19*F19*G[670] + C[5]*F0*F0*F19*G[672] + C[5]*F0*F0*G[673] + C[5]*F0*F1*F18*F18*G[674] + C[5]*F0*F1*F18*F19*G[675] + C[5]*F0*F1*F18*G[676] + C[5]*F0*F1*F19*F19*G[674] + C[5]*F0*F1*F19*G[676] + C[5]*F0*F1*G[677] + C[5]*F0*F18*F18*F2*G[678] + C[5]*F0*F18*F18*F3*G[670] + C[5]*F0*F18*F18*F4*G[679] + C[5]*F0*F18*F18*F5*G[189] + C[5]*F0*F18*F19*F2*G[681] + C[5]*F0*F18*F19*F3*G[671] + C[5]*F0*F18*F19*F4*G[682] + C[5]*F0*F18*F19*F5*G[193] + C[5]*F0*F18*F2*G[684] + C[5]*F0*F18*F3*G[672] + C[5]*F0*F18*F4*G[685] + C[5]*F0*F18*F5*G[197] + C[5]*F0*F19*F19*F2*G[678] + C[5]*F0*F19*F19*F3*G[670] + C[5]*F0*F19*F19*F4*G[679] + C[5]*F0*F19*F19*F5*G[189] + C[5]*F0*F19*F2*G[684] + C[5]*F0*F19*F3*G[672] + C[5]*F0*F19*F4*G[685] + C[5]*F0*F19*F5*G[197] + C[5]*F0*F2*G[687] + C[5]*F0*F3*G[673] + C[5]*F0*F4*G[688] + C[5]*F0*F5*G[201] + C[5]*F1*F1*F18*F18*G[690] + C[5]*F1*F1*F18*F19*G[691] + C[5]*F1*F1*F18*G[692] + C[5]*F1*F1*F19*F19*G[690] + C[5]*F1*F1*F19*G[692] + C[5]*F1*F1*G[693] + C[5]*F1*F18*F18*F2*G[694] + C[5]*F1*F18*F18*F3*G[695] + C[5]*F1*F18*F18*F4*G[690] + C[5]*F1*F18*F18*F5*G[204] + C[5]*F1*F18*F19*F2*G[697] + C[5]*F1*F18*F19*F3*G[698] + C[5]*F1*F18*F19*F4*G[691] + C[5]*F1*F18*F19*F5*G[205] + C[5]*F1*F18*F2*G[700] + C[5]*F1*F18*F3*G[701] + C[5]*F1*F18*F4*G[692] + C[5]*F1*F18*F5*G[206] + C[5]*F1*F19*F19*F2*G[694] + C[5]*F1*F19*F19*F3*G[695] + C[5]*F1*F19*F19*F4*G[690] + C[5]*F1*F19*F19*F5*G[204] + C[5]*F1*F19*F2*G[700] + C[5]*F1*F19*F3*G[701] + C[5]*F1*F19*F4*G[692] + C[5]*F1*F19*F5*G[206] + C[5]*F1*F2*G[703] + C[5]*F1*F3*G[704] + C[5]*F1*F4*G[693] + C[5]*F1*F5*G[207] + C[5]*F18*F18*F2*F2*G[226] + C[5]*F18*F18*F2*F3*G[706] + C[5]*F18*F18*F2*F4*G[707] + C[5]*F18*F18*F2*F5*G[226] + C[5]*F18*F19*F2*F2*G[230] + C[5]*F18*F19*F2*F3*G[709] + C[5]*F18*F19*F2*F4*G[710] + C[5]*F18*F19*F2*F5*G[230] + C[5]*F18*F2*F2*G[234] + C[5]*F18*F2*F3*G[712] + C[5]*F18*F2*F4*G[713] + C[5]*F18*F2*F5*G[234] + C[5]*F19*F19*F2*F2*G[226] + C[5]*F19*F19*F2*F3*G[706] + C[5]*F19*F19*F2*F4*G[707] + C[5]*F19*F19*F2*F5*G[226] + C[5]*F19*F2*F2*G[234] + C[5]*F19*F2*F3*G[712] + C[5]*F19*F2*F4*G[713] + C[5]*F19*F2*F5*G[234] + C[5]*F2*F2*G[238] + C[5]*F2*F3*G[715] + C[5]*F2*F4*G[716] + C[5]*F2*F5*G[238])/(1.0 + 0.001*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20)) + 0.001*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.001*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.003*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.003*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.003*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.003*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.003*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.003*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.006*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.03*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20)) + 0.03*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.03*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.06*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.06*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.06*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.3*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20)) + 0.3*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.3*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))) + (G[967] + F0*F15*F18*G[923] + F0*F15*F19*G[924] + F0*F15*G[925] + F0*F16*F18*G[926] + F0*F16*F19*G[927] + F0*F16*G[928] + F0*F17*F18*G[929] + F0*F17*F19*G[930] + F0*F17*G[931] + F0*F18*F6*G[929] + F0*F18*F7*G[923] + F0*F18*F8*G[926] + F0*F19*F6*G[930] + F0*F19*F7*G[924] + F0*F19*F8*G[927] + F0*F6*G[931] + F0*F7*G[925] + F0*F8*G[928] + F1*F15*F18*G[932] + F1*F15*F19*G[933] + F1*F15*G[934] + F1*F16*F18*G[935] + F1*F16*F19*G[936] + F1*F16*G[937] + F1*F17*F18*G[938] + F1*F17*F19*G[939] + F1*F17*G[940] + F1*F18*F6*G[938] + F1*F18*F7*G[932] + F1*F18*F8*G[935] + F1*F19*F6*G[939] + F1*F19*F7*G[933] + F1*F19*F8*G[936] + F1*F6*G[940] + F1*F7*G[934] + F1*F8*G[937] + F15*F18*F2*G[941] + F15*F18*F3*G[924] + F15*F18*F4*G[933] + F15*F18*F5*G[942] + F15*F19*F2*G[942] + F15*F19*F3*G[943] + F15*F19*F4*G[944] + F15*F19*F5*G[945] + F15*F2*G[494] + F15*F3*G[946] + F15*F4*G[947] + F15*F5*G[508] + F16*F18*F2*G[948] + F16*F18*F3*G[927] + F16*F18*F4*G[936] + F16*F18*F5*G[949] + F16*F19*F2*G[949] + F16*F19*F3*G[950] + F16*F19*F4*G[951] + F16*F19*F5*G[952] + F16*F2*G[497] + F16*F3*G[953] + F16*F4*G[954] + F16*F5*G[517] + F17*F18*F2*G[955] + F17*F18*F3*G[930] + F17*F18*F4*G[939] + F17*F18*F5*G[956] + F17*F19*F2*G[956] + F17*F19*F3*G[957] + F17*F19*F4*G[958] + F17*F19*F5*G[959] + F17*F2*G[500] + F17*F3*G[960] + F17*F4*G[961] + F17*F5*G[526] + F18*F18*G[962] + F18*F19*G[963] + F18*F2*F6*G[955] + F18*F2*F7*G[941] + F18*F2*F8*G[948] + F18*F3*F6*G[930] + F18*F3*F7*G[924] + F18*F3*F8*G[927] + F18*F4*F6*G[939] + F18*F4*F7*G[933] + F18*F4*F8*G[936] + F18*F5*F6*G[956] + F18*F5*F7*G[942] + F18*F5*F8*G[949] + F18*G[964] + F19*F19*G[965] + F19*F2*F6*G[956] + F19*F2*F7*G[942] + F19*F2*F8*G[949] + F19*F3*F6*G[957] + F19*F3*F7*G[943] + F19*F3*F8*G[950] + F19*F4*F6*G[958] + F19*F4*F7*G[944] + F19*F4*F8*G[951] + F19*F5*F6*G[959] + F19*F5*F7*G[945] + F19*F5*F8*G[952] + F19*G[966] + F2*F6*G[500] + F2*F7*G[494] + F2*F8*G[497] + F3*F6*G[960] + F3*F7*G[946] + F3*F8*G[953] + F4*F6*G[961] + F4*F7*G[947] + F4*F8*G[954] + F5*F6*G[526] + F5*F7*G[508] + F5*F8*G[517])/(1.0 + 0.1*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20)) + 0.1*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.1*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))));
      
      // Number of operations: 8031
      I[2] = W14[ip]*(std::abs(F6)*(F0*G[968] + F1*G[534] + F2*G[0] + F3*G[969] + F4*G[536] + F5*G[3]) + std::abs(F7)*(F0*G[968] + F1*G[534] + F2*G[0] + F3*G[969] + F4*G[536] + F5*G[3]) + std::abs(F8)*(F0*G[968] + F1*G[534] + F2*G[0] + F3*G[969] + F4*G[536] + F5*G[3]) + F15*F15*(F0*G[970] + F1*G[538] + F2*G[6] + F3*G[979] + F4*G[556] + F5*G[25]) + F16*(F15*(F0*G[971] + F1*G[539] + F2*G[7] + F3*G[980] + F4*G[558] + F5*G[29]) + F16*(F0*G[974] + F1*G[542] + F2*G[10] + F3*G[983] + F4*G[564] + F5*G[41])) + F17*(F15*(F0*G[972] + F1*G[540] + F2*G[8] + F3*G[981] + F4*G[560] + F5*G[33]) + F16*(F0*G[975] + F1*G[543] + F2*G[11] + F3*G[984] + F4*G[566] + F5*G[45]) + F17*(F0*G[977] + F1*G[545] + F2*G[13] + F3*G[986] + F4*G[570] + F5*G[53])) + F6*(F15*(F0*G[972] + F1*G[540] + F2*G[8] + F3*G[981] + F4*G[560] + F5*G[33]) + F16*(F0*G[975] + F1*G[543] + F2*G[11] + F3*G[984] + F4*G[566] + F5*G[45]) + F17*(F0*G[978] + F1*G[546] + F2*G[14] + F3*G[987] + F4*G[572] + F5*G[57]) + F6*(F0*G[977] + F1*G[545] + F2*G[13] + F3*G[986] + F4*G[570] + F5*G[53])) + F7*(F15*(F0*G[973] + F1*G[541] + F2*G[9] + F3*G[982] + F4*G[562] + F5*G[37]) + F16*(F0*G[971] + F1*G[539] + F2*G[7] + F3*G[980] + F4*G[558] + F5*G[29]) + F17*(F0*G[972] + F1*G[540] + F2*G[8] + F3*G[981] + F4*G[560] + F5*G[33]) + F6*(F0*G[972] + F1*G[540] + F2*G[8] + F3*G[981] + F4*G[560] + F5*G[33]) + F7*(F0*G[970] + F1*G[538] + F2*G[6] + F3*G[979] + F4*G[556] + F5*G[25])) + F8*(F15*(F0*G[971] + F1*G[539] + F2*G[7] + F3*G[980] + F4*G[558] + F5*G[29]) + F16*(F0*G[976] + F1*G[544] + F2*G[12] + F3*G[985] + F4*G[568] + F5*G[49]) + F17*(F0*G[975] + F1*G[543] + F2*G[11] + F3*G[984] + F4*G[566] + F5*G[45]) + F6*(F0*G[975] + F1*G[543] + F2*G[11] + F3*G[984] + F4*G[566] + F5*G[45]) + F7*(F0*G[971] + F1*G[539] + F2*G[7] + F3*G[980] + F4*G[558] + F5*G[29]) + F8*(F0*G[974] + F1*G[542] + F2*G[10] + F3*G[983] + F4*G[564] + F5*G[41])) + (C[1]*F0*F0*F15*F18*G[1107] + C[1]*F0*F0*F15*F19*G[1107] + C[1]*F0*F0*F15*G[1108] + C[1]*F0*F0*F16*F18*G[1109] + C[1]*F0*F0*F16*F19*G[1109] + C[1]*F0*F0*F16*G[1110] + C[1]*F0*F0*F17*F18*G[1111] + C[1]*F0*F0*F17*F19*G[1111] + C[1]*F0*F0*F17*G[1112] + C[1]*F0*F0*F18*F6*G[1111] + C[1]*F0*F0*F18*F7*G[1107] + C[1]*F0*F0*F18*F8*G[1109] + C[1]*F0*F0*F19*F6*G[1111] + C[1]*F0*F0*F19*F7*G[1107] + C[1]*F0*F0*F19*F8*G[1109] + C[1]*F0*F0*F6*G[1112] + C[1]*F0*F0*F7*G[1108] + C[1]*F0*F0*F8*G[1110] + C[1]*F0*F1*F15*F18*G[1113] + C[1]*F0*F1*F15*F19*G[1113] + C[1]*F0*F1*F15*G[1114] + C[1]*F0*F1*F16*F18*G[1115] + C[1]*F0*F1*F16*F19*G[1115] + C[1]*F0*F1*F16*G[1116] + C[1]*F0*F1*F17*F18*G[1117] + C[1]*F0*F1*F17*F19*G[1117] + C[1]*F0*F1*F17*G[1118] + C[1]*F0*F1*F18*F6*G[1117] + C[1]*F0*F1*F18*F7*G[1113] + C[1]*F0*F1*F18*F8*G[1115] + C[1]*F0*F1*F19*F6*G[1117] + C[1]*F0*F1*F19*F7*G[1113] + C[1]*F0*F1*F19*F8*G[1115] + C[1]*F0*F1*F6*G[1118] + C[1]*F0*F1*F7*G[1114] + C[1]*F0*F1*F8*G[1116] + C[1]*F0*F15*F18*F2*G[1119] + C[1]*F0*F15*F18*F3*G[1107] + C[1]*F0*F15*F18*F4*G[1120] + C[1]*F0*F15*F18*F5*G[1121] + C[1]*F0*F15*F19*F2*G[1119] + C[1]*F0*F15*F19*F3*G[1107] + C[1]*F0*F15*F19*F4*G[1120] + C[1]*F0*F15*F19*F5*G[1121] + C[1]*F0*F15*F2*G[1122] + C[1]*F0*F15*F3*G[1108] + C[1]*F0*F15*F4*G[741] + C[1]*F0*F15*F5*G[274] + C[1]*F0*F16*F18*F2*G[1123] + C[1]*F0*F16*F18*F3*G[1109] + C[1]*F0*F16*F18*F4*G[1124] + C[1]*F0*F16*F18*F5*G[1125] + C[1]*F0*F16*F19*F2*G[1123] + C[1]*F0*F16*F19*F3*G[1109] + C[1]*F0*F16*F19*F4*G[1124] + C[1]*F0*F16*F19*F5*G[1125] + C[1]*F0*F16*F2*G[1126] + C[1]*F0*F16*F3*G[1110] + C[1]*F0*F16*F4*G[743] + C[1]*F0*F16*F5*G[276] + C[1]*F0*F17*F18*F2*G[1127] + C[1]*F0*F17*F18*F3*G[1111] + C[1]*F0*F17*F18*F4*G[1128] + C[1]*F0*F17*F18*F5*G[1129] + C[1]*F0*F17*F19*F2*G[1127] + C[1]*F0*F17*F19*F3*G[1111] + C[1]*F0*F17*F19*F4*G[1128] + C[1]*F0*F17*F19*F5*G[1129] + C[1]*F0*F17*F2*G[1130] + C[1]*F0*F17*F3*G[1112] + C[1]*F0*F17*F4*G[745] + C[1]*F0*F17*F5*G[278] + C[1]*F0*F18*F18*G[997] + C[1]*F0*F18*F19*G[999] + C[1]*F0*F18*F2*F6*G[1127] + C[1]*F0*F18*F2*F7*G[1119] + C[1]*F0*F18*F2*F8*G[1123] + C[1]*F0*F18*F3*F6*G[1111] + C[1]*F0*F18*F3*F7*G[1107] + C[1]*F0*F18*F3*F8*G[1109] + C[1]*F0*F18*F4*F6*G[1128] + C[1]*F0*F18*F4*F7*G[1120] + C[1]*F0*F18*F4*F8*G[1124] + C[1]*F0*F18*F5*F6*G[1129] + C[1]*F0*F18*F5*F7*G[1121] + C[1]*F0*F18*F5*F8*G[1125] + C[1]*F0*F18*G[1001] + C[1]*F0*F19*F19*G[997] + C[1]*F0*F19*F2*F6*G[1127] + C[1]*F0*F19*F2*F7*G[1119] + C[1]*F0*F19*F2*F8*G[1123] + C[1]*F0*F19*F3*F6*G[1111] + C[1]*F0*F19*F3*F7*G[1107] + C[1]*F0*F19*F3*F8*G[1109] + C[1]*F0*F19*F4*F6*G[1128] + C[1]*F0*F19*F4*F7*G[1120] + C[1]*F0*F19*F4*F8*G[1124] + C[1]*F0*F19*F5*F6*G[1129] + C[1]*F0*F19*F5*F7*G[1121] + C[1]*F0*F19*F5*F8*G[1125] + C[1]*F0*F19*G[1001] + C[1]*F0*F2*F6*G[1130] + C[1]*F0*F2*F7*G[1122] + C[1]*F0*F2*F8*G[1126] + C[1]*F0*F3*F6*G[1112] + C[1]*F0*F3*F7*G[1108] + C[1]*F0*F3*F8*G[1110] + C[1]*F0*F4*F6*G[745] + C[1]*F0*F4*F7*G[741] + C[1]*F0*F4*F8*G[743] + C[1]*F0*F5*F6*G[278] + C[1]*F0*F5*F7*G[274] + C[1]*F0*F5*F8*G[276] + C[1]*F0*G[1003] + C[1]*F1*F1*F15*F18*G[1131] + C[1]*F1*F1*F15*F19*G[1131] + C[1]*F1*F1*F15*G[777] + C[1]*F1*F1*F16*F18*G[1132] + C[1]*F1*F1*F16*F19*G[1132] + C[1]*F1*F1*F16*G[782] + C[1]*F1*F1*F17*F18*G[1133] + C[1]*F1*F1*F17*F19*G[1133] + C[1]*F1*F1*F17*G[787] + C[1]*F1*F1*F18*F6*G[1133] + C[1]*F1*F1*F18*F7*G[1131] + C[1]*F1*F1*F18*F8*G[1132] + C[1]*F1*F1*F19*F6*G[1133] + C[1]*F1*F1*F19*F7*G[1131] + C[1]*F1*F1*F19*F8*G[1132] + C[1]*F1*F1*F6*G[787] + C[1]*F1*F1*F7*G[777] + C[1]*F1*F1*F8*G[782] + C[1]*F1*F15*F18*F2*G[1134] + C[1]*F1*F15*F18*F3*G[1135] + C[1]*F1*F15*F18*F4*G[1131] + C[1]*F1*F15*F18*F5*G[1136] + C[1]*F1*F15*F19*F2*G[1134] + C[1]*F1*F15*F19*F3*G[1135] + C[1]*F1*F15*F19*F4*G[1131] + C[1]*F1*F15*F19*F5*G[1136] + C[1]*F1*F15*F2*G[1137] + C[1]*F1*F15*F3*G[1138] + C[1]*F1*F15*F4*G[777] + C[1]*F1*F15*F5*G[313] + C[1]*F1*F16*F18*F2*G[1139] + C[1]*F1*F16*F18*F3*G[1140] + C[1]*F1*F16*F18*F4*G[1132] + C[1]*F1*F16*F18*F5*G[1141] + C[1]*F1*F16*F19*F2*G[1139] + C[1]*F1*F16*F19*F3*G[1140] + C[1]*F1*F16*F19*F4*G[1132] + C[1]*F1*F16*F19*F5*G[1141] + C[1]*F1*F16*F2*G[1142] + C[1]*F1*F16*F3*G[1143] + C[1]*F1*F16*F4*G[782] + C[1]*F1*F16*F5*G[319] + C[1]*F1*F17*F18*F2*G[1144] + C[1]*F1*F17*F18*F3*G[1145] + C[1]*F1*F17*F18*F4*G[1133] + C[1]*F1*F17*F18*F5*G[1146] + C[1]*F1*F17*F19*F2*G[1144] + C[1]*F1*F17*F19*F3*G[1145] + C[1]*F1*F17*F19*F4*G[1133] + C[1]*F1*F17*F19*F5*G[1146] + C[1]*F1*F17*F2*G[1147] + C[1]*F1*F17*F3*G[1148] + C[1]*F1*F17*F4*G[787] + C[1]*F1*F17*F5*G[325] + C[1]*F1*F18*F18*G[1006] + C[1]*F1*F18*F19*G[1009] + C[1]*F1*F18*F2*F6*G[1144] + C[1]*F1*F18*F2*F7*G[1134] + C[1]*F1*F18*F2*F8*G[1139] + C[1]*F1*F18*F3*F6*G[1145] + C[1]*F1*F18*F3*F7*G[1135] + C[1]*F1*F18*F3*F8*G[1140] + C[1]*F1*F18*F4*F6*G[1133] + C[1]*F1*F18*F4*F7*G[1131] + C[1]*F1*F18*F4*F8*G[1132] + C[1]*F1*F18*F5*F6*G[1146] + C[1]*F1*F18*F5*F7*G[1136] + C[1]*F1*F18*F5*F8*G[1141] + C[1]*F1*F18*G[1012] + C[1]*F1*F19*F19*G[1006] + C[1]*F1*F19*F2*F6*G[1144] + C[1]*F1*F19*F2*F7*G[1134] + C[1]*F1*F19*F2*F8*G[1139] + C[1]*F1*F19*F3*F6*G[1145] + C[1]*F1*F19*F3*F7*G[1135] + C[1]*F1*F19*F3*F8*G[1140] + C[1]*F1*F19*F4*F6*G[1133] + C[1]*F1*F19*F4*F7*G[1131] + C[1]*F1*F19*F4*F8*G[1132] + C[1]*F1*F19*F5*F6*G[1146] + C[1]*F1*F19*F5*F7*G[1136] + C[1]*F1*F19*F5*F8*G[1141] + C[1]*F1*F19*G[1012] + C[1]*F1*F2*F6*G[1147] + C[1]*F1*F2*F7*G[1137] + C[1]*F1*F2*F8*G[1142] + C[1]*F1*F3*F6*G[1148] + C[1]*F1*F3*F7*G[1138] + C[1]*F1*F3*F8*G[1143] + C[1]*F1*F4*F6*G[787] + C[1]*F1*F4*F7*G[777] + C[1]*F1*F4*F8*G[782] + C[1]*F1*F5*F6*G[325] + C[1]*F1*F5*F7*G[313] + C[1]*F1*F5*F8*G[319] + C[1]*F1*G[1015] + C[1]*F15*F18*F2*F2*G[1149] + C[1]*F15*F18*F2*F3*G[1150] + C[1]*F15*F18*F2*F4*G[1151] + C[1]*F15*F18*F2*F5*G[1149] + C[1]*F15*F19*F2*F2*G[1149] + C[1]*F15*F19*F2*F3*G[1150] + C[1]*F15*F19*F2*F4*G[1151] + C[1]*F15*F19*F2*F5*G[1149] + C[1]*F15*F2*F2*G[331] + C[1]*F15*F2*F3*G[1152] + C[1]*F15*F2*F4*G[791] + C[1]*F15*F2*F5*G[331] + C[1]*F16*F18*F2*F2*G[1153] + C[1]*F16*F18*F2*F3*G[1154] + C[1]*F16*F18*F2*F4*G[1155] + C[1]*F16*F18*F2*F5*G[1153] + C[1]*F16*F19*F2*F2*G[1153] + C[1]*F16*F19*F2*F3*G[1154] + C[1]*F16*F19*F2*F4*G[1155] + C[1]*F16*F19*F2*F5*G[1153] + C[1]*F16*F2*F2*G[337] + C[1]*F16*F2*F3*G[1156] + C[1]*F16*F2*F4*G[796] + C[1]*F16*F2*F5*G[337] + C[1]*F17*F18*F2*F2*G[1157] + C[1]*F17*F18*F2*F3*G[1158] + C[1]*F17*F18*F2*F4*G[1159] + C[1]*F17*F18*F2*F5*G[1157] + C[1]*F17*F19*F2*F2*G[1157] + C[1]*F17*F19*F2*F3*G[1158] + C[1]*F17*F19*F2*F4*G[1159] + C[1]*F17*F19*F2*F5*G[1157] + C[1]*F17*F2*F2*G[343] + C[1]*F17*F2*F3*G[1160] + C[1]*F17*F2*F4*G[801] + C[1]*F17*F2*F5*G[343] + C[1]*F18*F18*F2*G[1017] + C[1]*F18*F19*F2*G[1019] + C[1]*F18*F2*F2*F6*G[1157] + C[1]*F18*F2*F2*F7*G[1149] + C[1]*F18*F2*F2*F8*G[1153] + C[1]*F18*F2*F3*F6*G[1158] + C[1]*F18*F2*F3*F7*G[1150] + C[1]*F18*F2*F3*F8*G[1154] + C[1]*F18*F2*F4*F6*G[1159] + C[1]*F18*F2*F4*F7*G[1151] + C[1]*F18*F2*F4*F8*G[1155] + C[1]*F18*F2*F5*F6*G[1157] + C[1]*F18*F2*F5*F7*G[1149] + C[1]*F18*F2*F5*F8*G[1153] + C[1]*F18*F2*G[1021] + C[1]*F19*F19*F2*G[1017] + C[1]*F19*F2*F2*F6*G[1157] + C[1]*F19*F2*F2*F7*G[1149] + C[1]*F19*F2*F2*F8*G[1153] + C[1]*F19*F2*F3*F6*G[1158] + C[1]*F19*F2*F3*F7*G[1150] + C[1]*F19*F2*F3*F8*G[1154] + C[1]*F19*F2*F4*F6*G[1159] + C[1]*F19*F2*F4*F7*G[1151] + C[1]*F19*F2*F4*F8*G[1155] + C[1]*F19*F2*F5*F6*G[1157] + C[1]*F19*F2*F5*F7*G[1149] + C[1]*F19*F2*F5*F8*G[1153] + C[1]*F19*F2*G[1021] + C[1]*F2*F2*F6*G[343] + C[1]*F2*F2*F7*G[331] + C[1]*F2*F2*F8*G[337] + C[1]*F2*F3*F6*G[1160] + C[1]*F2*F3*F7*G[1152] + C[1]*F2*F3*F8*G[1156] + C[1]*F2*F4*F6*G[801] + C[1]*F2*F4*F7*G[791] + C[1]*F2*F4*F8*G[796] + C[1]*F2*F5*F6*G[343] + C[1]*F2*F5*F7*G[331] + C[1]*F2*F5*F8*G[337] + C[1]*F2*G[1023] + C[3]*F0*F0*F15*F18*G[1161] + C[3]*F0*F0*F15*F19*G[1161] + C[3]*F0*F0*F15*G[1162] + C[3]*F0*F0*F16*F18*G[1163] + C[3]*F0*F0*F16*F19*G[1163] + C[3]*F0*F0*F16*G[1164] + C[3]*F0*F0*F17*F18*G[1107] + C[3]*F0*F0*F17*F19*G[1107] + C[3]*F0*F0*F17*G[1108] + C[3]*F0*F0*F18*F6*G[1107] + C[3]*F0*F0*F18*F7*G[1161] + C[3]*F0*F0*F18*F8*G[1163] + C[3]*F0*F0*F19*F6*G[1107] + C[3]*F0*F0*F19*F7*G[1161] + C[3]*F0*F0*F19*F8*G[1163] + C[3]*F0*F0*F6*G[1108] + C[3]*F0*F0*F7*G[1162] + C[3]*F0*F0*F8*G[1164] + C[3]*F0*F1*F15*F18*G[1165] + C[3]*F0*F1*F15*F19*G[1165] + C[3]*F0*F1*F15*G[1166] + C[3]*F0*F1*F16*F18*G[1167] + C[3]*F0*F1*F16*F19*G[1167] + C[3]*F0*F1*F16*G[1168] + C[3]*F0*F1*F17*F18*G[1169] + C[3]*F0*F1*F17*F19*G[1169] + C[3]*F0*F1*F17*G[1170] + C[3]*F0*F1*F18*F6*G[1169] + C[3]*F0*F1*F18*F7*G[1165] + C[3]*F0*F1*F18*F8*G[1167] + C[3]*F0*F1*F19*F6*G[1169] + C[3]*F0*F1*F19*F7*G[1165] + C[3]*F0*F1*F19*F8*G[1167] + C[3]*F0*F1*F6*G[1170] + C[3]*F0*F1*F7*G[1166] + C[3]*F0*F1*F8*G[1168] + C[3]*F0*F15*F18*F2*G[1171] + C[3]*F0*F15*F18*F3*G[1161] + C[3]*F0*F15*F18*F4*G[1172] + C[3]*F0*F15*F18*F5*G[1173] + C[3]*F0*F15*F19*F2*G[1171] + C[3]*F0*F15*F19*F3*G[1161] + C[3]*F0*F15*F19*F4*G[1172] + C[3]*F0*F15*F19*F5*G[1173] + C[3]*F0*F15*F2*G[1174] + C[3]*F0*F15*F3*G[1162] + C[3]*F0*F15*F4*G[804] + C[3]*F0*F15*F5*G[346] + C[3]*F0*F16*F18*F2*G[1175] + C[3]*F0*F16*F18*F3*G[1163] + C[3]*F0*F16*F18*F4*G[1176] + C[3]*F0*F16*F18*F5*G[1177] + C[3]*F0*F16*F19*F2*G[1175] + C[3]*F0*F16*F19*F3*G[1163] + C[3]*F0*F16*F19*F4*G[1176] + C[3]*F0*F16*F19*F5*G[1177] + C[3]*F0*F16*F2*G[1178] + C[3]*F0*F16*F3*G[1164] + C[3]*F0*F16*F4*G[806] + C[3]*F0*F16*F5*G[348] + C[3]*F0*F17*F18*F2*G[1179] + C[3]*F0*F17*F18*F3*G[1107] + C[3]*F0*F17*F18*F4*G[1180] + C[3]*F0*F17*F18*F5*G[1181] + C[3]*F0*F17*F19*F2*G[1179] + C[3]*F0*F17*F19*F3*G[1107] + C[3]*F0*F17*F19*F4*G[1180] + C[3]*F0*F17*F19*F5*G[1181] + C[3]*F0*F17*F2*G[1182] + C[3]*F0*F17*F3*G[1108] + C[3]*F0*F17*F4*G[808] + C[3]*F0*F17*F5*G[350] + C[3]*F0*F18*F18*G[1033] + C[3]*F0*F18*F19*G[1035] + C[3]*F0*F18*F2*F6*G[1179] + C[3]*F0*F18*F2*F7*G[1171] + C[3]*F0*F18*F2*F8*G[1175] + C[3]*F0*F18*F3*F6*G[1107] + C[3]*F0*F18*F3*F7*G[1161] + C[3]*F0*F18*F3*F8*G[1163] + C[3]*F0*F18*F4*F6*G[1180] + C[3]*F0*F18*F4*F7*G[1172] + C[3]*F0*F18*F4*F8*G[1176] + C[3]*F0*F18*F5*F6*G[1181] + C[3]*F0*F18*F5*F7*G[1173] + C[3]*F0*F18*F5*F8*G[1177] + C[3]*F0*F18*G[1037] + C[3]*F0*F19*F19*G[1033] + C[3]*F0*F19*F2*F6*G[1179] + C[3]*F0*F19*F2*F7*G[1171] + C[3]*F0*F19*F2*F8*G[1175] + C[3]*F0*F19*F3*F6*G[1107] + C[3]*F0*F19*F3*F7*G[1161] + C[3]*F0*F19*F3*F8*G[1163] + C[3]*F0*F19*F4*F6*G[1180] + C[3]*F0*F19*F4*F7*G[1172] + C[3]*F0*F19*F4*F8*G[1176] + C[3]*F0*F19*F5*F6*G[1181] + C[3]*F0*F19*F5*F7*G[1173] + C[3]*F0*F19*F5*F8*G[1177] + C[3]*F0*F19*G[1037] + C[3]*F0*F2*F6*G[1182] + C[3]*F0*F2*F7*G[1174] + C[3]*F0*F2*F8*G[1178] + C[3]*F0*F3*F6*G[1108] + C[3]*F0*F3*F7*G[1162] + C[3]*F0*F3*F8*G[1164] + C[3]*F0*F4*F6*G[808] + C[3]*F0*F4*F7*G[804] + C[3]*F0*F4*F8*G[806] + C[3]*F0*F5*F6*G[350] + C[3]*F0*F5*F7*G[346] + C[3]*F0*F5*F8*G[348] + C[3]*F0*G[1039] + C[3]*F1*F1*F15*F18*G[1183] + C[3]*F1*F1*F15*F19*G[1183] + C[3]*F1*F1*F15*G[838] + C[3]*F1*F1*F16*F18*G[1184] + C[3]*F1*F1*F16*F19*G[1184] + C[3]*F1*F1*F16*G[843] + C[3]*F1*F1*F17*F18*G[1185] + C[3]*F1*F1*F17*F19*G[1185] + C[3]*F1*F1*F17*G[848] + C[3]*F1*F1*F18*F6*G[1185] + C[3]*F1*F1*F18*F7*G[1183] + C[3]*F1*F1*F18*F8*G[1184] + C[3]*F1*F1*F19*F6*G[1185] + C[3]*F1*F1*F19*F7*G[1183] + C[3]*F1*F1*F19*F8*G[1184] + C[3]*F1*F1*F6*G[848] + C[3]*F1*F1*F7*G[838] + C[3]*F1*F1*F8*G[843] + C[3]*F1*F15*F18*F2*G[1186] + C[3]*F1*F15*F18*F3*G[1187] + C[3]*F1*F15*F18*F4*G[1183] + C[3]*F1*F15*F18*F5*G[1188] + C[3]*F1*F15*F19*F2*G[1186] + C[3]*F1*F15*F19*F3*G[1187] + C[3]*F1*F15*F19*F4*G[1183] + C[3]*F1*F15*F19*F5*G[1188] + C[3]*F1*F15*F2*G[1189] + C[3]*F1*F15*F3*G[1190] + C[3]*F1*F15*F4*G[838] + C[3]*F1*F15*F5*G[385] + C[3]*F1*F16*F18*F2*G[1191] + C[3]*F1*F16*F18*F3*G[1192] + C[3]*F1*F16*F18*F4*G[1184] + C[3]*F1*F16*F18*F5*G[1193] + C[3]*F1*F16*F19*F2*G[1191] + C[3]*F1*F16*F19*F3*G[1192] + C[3]*F1*F16*F19*F4*G[1184] + C[3]*F1*F16*F19*F5*G[1193] + C[3]*F1*F16*F2*G[1194] + C[3]*F1*F16*F3*G[1195] + C[3]*F1*F16*F4*G[843] + C[3]*F1*F16*F5*G[391] + C[3]*F1*F17*F18*F2*G[1196] + C[3]*F1*F17*F18*F3*G[1197] + C[3]*F1*F17*F18*F4*G[1185] + C[3]*F1*F17*F18*F5*G[1198] + C[3]*F1*F17*F19*F2*G[1196] + C[3]*F1*F17*F19*F3*G[1197] + C[3]*F1*F17*F19*F4*G[1185] + C[3]*F1*F17*F19*F5*G[1198] + C[3]*F1*F17*F2*G[1199] + C[3]*F1*F17*F3*G[1200] + C[3]*F1*F17*F4*G[848] + C[3]*F1*F17*F5*G[397] + C[3]*F1*F18*F18*G[1042] + C[3]*F1*F18*F19*G[1045] + C[3]*F1*F18*F2*F6*G[1196] + C[3]*F1*F18*F2*F7*G[1186] + C[3]*F1*F18*F2*F8*G[1191] + C[3]*F1*F18*F3*F6*G[1197] + C[3]*F1*F18*F3*F7*G[1187] + C[3]*F1*F18*F3*F8*G[1192] + C[3]*F1*F18*F4*F6*G[1185] + C[3]*F1*F18*F4*F7*G[1183] + C[3]*F1*F18*F4*F8*G[1184] + C[3]*F1*F18*F5*F6*G[1198] + C[3]*F1*F18*F5*F7*G[1188] + C[3]*F1*F18*F5*F8*G[1193] + C[3]*F1*F18*G[1048] + C[3]*F1*F19*F19*G[1042] + C[3]*F1*F19*F2*F6*G[1196] + C[3]*F1*F19*F2*F7*G[1186] + C[3]*F1*F19*F2*F8*G[1191] + C[3]*F1*F19*F3*F6*G[1197] + C[3]*F1*F19*F3*F7*G[1187] + C[3]*F1*F19*F3*F8*G[1192] + C[3]*F1*F19*F4*F6*G[1185] + C[3]*F1*F19*F4*F7*G[1183] + C[3]*F1*F19*F4*F8*G[1184] + C[3]*F1*F19*F5*F6*G[1198] + C[3]*F1*F19*F5*F7*G[1188] + C[3]*F1*F19*F5*F8*G[1193] + C[3]*F1*F19*G[1048] + C[3]*F1*F2*F6*G[1199] + C[3]*F1*F2*F7*G[1189] + C[3]*F1*F2*F8*G[1194] + C[3]*F1*F3*F6*G[1200] + C[3]*F1*F3*F7*G[1190] + C[3]*F1*F3*F8*G[1195] + C[3]*F1*F4*F6*G[848] + C[3]*F1*F4*F7*G[838] + C[3]*F1*F4*F8*G[843] + C[3]*F1*F5*F6*G[397] + C[3]*F1*F5*F7*G[385] + C[3]*F1*F5*F8*G[391] + C[3]*F1*G[1051] + C[3]*F15*F18*F2*F2*G[1201] + C[3]*F15*F18*F2*F3*G[1202] + C[3]*F15*F18*F2*F4*G[1203] + C[3]*F15*F18*F2*F5*G[1201] + C[3]*F15*F19*F2*F2*G[1201] + C[3]*F15*F19*F2*F3*G[1202] + C[3]*F15*F19*F2*F4*G[1203] + C[3]*F15*F19*F2*F5*G[1201] + C[3]*F15*F2*F2*G[403] + C[3]*F15*F2*F3*G[1204] + C[3]*F15*F2*F4*G[852] + C[3]*F15*F2*F5*G[403] + C[3]*F16*F18*F2*F2*G[1205] + C[3]*F16*F18*F2*F3*G[1206] + C[3]*F16*F18*F2*F4*G[1207] + C[3]*F16*F18*F2*F5*G[1205] + C[3]*F16*F19*F2*F2*G[1205] + C[3]*F16*F19*F2*F3*G[1206] + C[3]*F16*F19*F2*F4*G[1207] + C[3]*F16*F19*F2*F5*G[1205] + C[3]*F16*F2*F2*G[409] + C[3]*F16*F2*F3*G[1208] + C[3]*F16*F2*F4*G[857] + C[3]*F16*F2*F5*G[409] + C[3]*F17*F18*F2*F2*G[1209] + C[3]*F17*F18*F2*F3*G[1210] + C[3]*F17*F18*F2*F4*G[1211] + C[3]*F17*F18*F2*F5*G[1209] + C[3]*F17*F19*F2*F2*G[1209] + C[3]*F17*F19*F2*F3*G[1210] + C[3]*F17*F19*F2*F4*G[1211] + C[3]*F17*F19*F2*F5*G[1209] + C[3]*F17*F2*F2*G[413] + C[3]*F17*F2*F3*G[1212] + C[3]*F17*F2*F4*G[862] + C[3]*F17*F2*F5*G[413] + C[3]*F18*F18*F2*G[1053] + C[3]*F18*F19*F2*G[1055] + C[3]*F18*F2*F2*F6*G[1209] + C[3]*F18*F2*F2*F7*G[1201] + C[3]*F18*F2*F2*F8*G[1205] + C[3]*F18*F2*F3*F6*G[1210] + C[3]*F18*F2*F3*F7*G[1202] + C[3]*F18*F2*F3*F8*G[1206] + C[3]*F18*F2*F4*F6*G[1211] + C[3]*F18*F2*F4*F7*G[1203] + C[3]*F18*F2*F4*F8*G[1207] + C[3]*F18*F2*F5*F6*G[1209] + C[3]*F18*F2*F5*F7*G[1201] + C[3]*F18*F2*F5*F8*G[1205] + C[3]*F18*F2*G[1057] + C[3]*F19*F19*F2*G[1053] + C[3]*F19*F2*F2*F6*G[1209] + C[3]*F19*F2*F2*F7*G[1201] + C[3]*F19*F2*F2*F8*G[1205] + C[3]*F19*F2*F3*F6*G[1210] + C[3]*F19*F2*F3*F7*G[1202] + C[3]*F19*F2*F3*F8*G[1206] + C[3]*F19*F2*F4*F6*G[1211] + C[3]*F19*F2*F4*F7*G[1203] + C[3]*F19*F2*F4*F8*G[1207] + C[3]*F19*F2*F5*F6*G[1209] + C[3]*F19*F2*F5*F7*G[1201] + C[3]*F19*F2*F5*F8*G[1205] + C[3]*F19*F2*G[1057] + C[3]*F2*F2*F6*G[413] + C[3]*F2*F2*F7*G[403] + C[3]*F2*F2*F8*G[409] + C[3]*F2*F3*F6*G[1212] + C[3]*F2*F3*F7*G[1204] + C[3]*F2*F3*F8*G[1208] + C[3]*F2*F4*F6*G[862] + C[3]*F2*F4*F7*G[852] + C[3]*F2*F4*F8*G[857] + C[3]*F2*F5*F6*G[413] + C[3]*F2*F5*F7*G[403] + C[3]*F2*F5*F8*G[409] + C[3]*F2*G[1059] + C[5]*F0*F0*F15*F18*G[1163] + C[5]*F0*F0*F15*F19*G[1163] + C[5]*F0*F0*F15*G[1164] + C[5]*F0*F0*F16*F18*G[1213] + C[5]*F0*F0*F16*F19*G[1213] + C[5]*F0*F0*F16*G[1214] + C[5]*F0*F0*F17*F18*G[1109] + C[5]*F0*F0*F17*F19*G[1109] + C[5]*F0*F0*F17*G[1110] + C[5]*F0*F0*F18*F6*G[1109] + C[5]*F0*F0*F18*F7*G[1163] + C[5]*F0*F0*F18*F8*G[1213] + C[5]*F0*F0*F19*F6*G[1109] + C[5]*F0*F0*F19*F7*G[1163] + C[5]*F0*F0*F19*F8*G[1213] + C[5]*F0*F0*F6*G[1110] + C[5]*F0*F0*F7*G[1164] + C[5]*F0*F0*F8*G[1214] + C[5]*F0*F1*F15*F18*G[1215] + C[5]*F0*F1*F15*F19*G[1215] + C[5]*F0*F1*F15*G[1216] + C[5]*F0*F1*F16*F18*G[1217] + C[5]*F0*F1*F16*F19*G[1217] + C[5]*F0*F1*F16*G[1218] + C[5]*F0*F1*F17*F18*G[1219] + C[5]*F0*F1*F17*F19*G[1219] + C[5]*F0*F1*F17*G[1220] + C[5]*F0*F1*F18*F6*G[1219] + C[5]*F0*F1*F18*F7*G[1215] + C[5]*F0*F1*F18*F8*G[1217] + C[5]*F0*F1*F19*F6*G[1219] + C[5]*F0*F1*F19*F7*G[1215] + C[5]*F0*F1*F19*F8*G[1217] + C[5]*F0*F1*F6*G[1220] + C[5]*F0*F1*F7*G[1216] + C[5]*F0*F1*F8*G[1218] + C[5]*F0*F15*F18*F2*G[1221] + C[5]*F0*F15*F18*F3*G[1163] + C[5]*F0*F15*F18*F4*G[1222] + C[5]*F0*F15*F18*F5*G[1223] + C[5]*F0*F15*F19*F2*G[1221] + C[5]*F0*F15*F19*F3*G[1163] + C[5]*F0*F15*F19*F4*G[1222] + C[5]*F0*F15*F19*F5*G[1223] + C[5]*F0*F15*F2*G[1224] + C[5]*F0*F15*F3*G[1164] + C[5]*F0*F15*F4*G[865] + C[5]*F0*F15*F5*G[416] + C[5]*F0*F16*F18*F2*G[1225] + C[5]*F0*F16*F18*F3*G[1213] + C[5]*F0*F16*F18*F4*G[1226] + C[5]*F0*F16*F18*F5*G[1227] + C[5]*F0*F16*F19*F2*G[1225] + C[5]*F0*F16*F19*F3*G[1213] + C[5]*F0*F16*F19*F4*G[1226] + C[5]*F0*F16*F19*F5*G[1227] + C[5]*F0*F16*F2*G[1228] + C[5]*F0*F16*F3*G[1214] + C[5]*F0*F16*F4*G[867] + C[5]*F0*F16*F5*G[418] + C[5]*F0*F17*F18*F2*G[1229] + C[5]*F0*F17*F18*F3*G[1109] + C[5]*F0*F17*F18*F4*G[1230] + C[5]*F0*F17*F18*F5*G[1231] + C[5]*F0*F17*F19*F2*G[1229] + C[5]*F0*F17*F19*F3*G[1109] + C[5]*F0*F17*F19*F4*G[1230] + C[5]*F0*F17*F19*F5*G[1231] + C[5]*F0*F17*F2*G[1232] + C[5]*F0*F17*F3*G[1110] + C[5]*F0*F17*F4*G[869] + C[5]*F0*F17*F5*G[420] + C[5]*F0*F18*F18*G[1069] + C[5]*F0*F18*F19*G[1071] + C[5]*F0*F18*F2*F6*G[1229] + C[5]*F0*F18*F2*F7*G[1221] + C[5]*F0*F18*F2*F8*G[1225] + C[5]*F0*F18*F3*F6*G[1109] + C[5]*F0*F18*F3*F7*G[1163] + C[5]*F0*F18*F3*F8*G[1213] + C[5]*F0*F18*F4*F6*G[1230] + C[5]*F0*F18*F4*F7*G[1222] + C[5]*F0*F18*F4*F8*G[1226] + C[5]*F0*F18*F5*F6*G[1231] + C[5]*F0*F18*F5*F7*G[1223] + C[5]*F0*F18*F5*F8*G[1227] + C[5]*F0*F18*G[1073] + C[5]*F0*F19*F19*G[1069] + C[5]*F0*F19*F2*F6*G[1229] + C[5]*F0*F19*F2*F7*G[1221] + C[5]*F0*F19*F2*F8*G[1225] + C[5]*F0*F19*F3*F6*G[1109] + C[5]*F0*F19*F3*F7*G[1163] + C[5]*F0*F19*F3*F8*G[1213] + C[5]*F0*F19*F4*F6*G[1230] + C[5]*F0*F19*F4*F7*G[1222] + C[5]*F0*F19*F4*F8*G[1226] + C[5]*F0*F19*F5*F6*G[1231] + C[5]*F0*F19*F5*F7*G[1223] + C[5]*F0*F19*F5*F8*G[1227] + C[5]*F0*F19*G[1073] + C[5]*F0*F2*F6*G[1232] + C[5]*F0*F2*F7*G[1224] + C[5]*F0*F2*F8*G[1228] + C[5]*F0*F3*F6*G[1110] + C[5]*F0*F3*F7*G[1164] + C[5]*F0*F3*F8*G[1214] + C[5]*F0*F4*F6*G[869] + C[5]*F0*F4*F7*G[865] + C[5]*F0*F4*F8*G[867] + C[5]*F0*F5*F6*G[420] + C[5]*F0*F5*F7*G[416] + C[5]*F0*F5*F8*G[418] + C[5]*F0*G[1075] + C[5]*F1*F1*F15*F18*G[1233] + C[5]*F1*F1*F15*F19*G[1233] + C[5]*F1*F1*F15*G[897] + C[5]*F1*F1*F16*F18*G[1234] + C[5]*F1*F1*F16*F19*G[1234] + C[5]*F1*F1*F16*G[902] + C[5]*F1*F1*F17*F18*G[1235] + C[5]*F1*F1*F17*F19*G[1235] + C[5]*F1*F1*F17*G[907] + C[5]*F1*F1*F18*F6*G[1235] + C[5]*F1*F1*F18*F7*G[1233] + C[5]*F1*F1*F18*F8*G[1234] + C[5]*F1*F1*F19*F6*G[1235] + C[5]*F1*F1*F19*F7*G[1233] + C[5]*F1*F1*F19*F8*G[1234] + C[5]*F1*F1*F6*G[907] + C[5]*F1*F1*F7*G[897] + C[5]*F1*F1*F8*G[902] + C[5]*F1*F15*F18*F2*G[1236] + C[5]*F1*F15*F18*F3*G[1237] + C[5]*F1*F15*F18*F4*G[1233] + C[5]*F1*F15*F18*F5*G[1238] + C[5]*F1*F15*F19*F2*G[1236] + C[5]*F1*F15*F19*F3*G[1237] + C[5]*F1*F15*F19*F4*G[1233] + C[5]*F1*F15*F19*F5*G[1238] + C[5]*F1*F15*F2*G[1239] + C[5]*F1*F15*F3*G[1240] + C[5]*F1*F15*F4*G[897] + C[5]*F1*F15*F5*G[455] + C[5]*F1*F16*F18*F2*G[1241] + C[5]*F1*F16*F18*F3*G[1242] + C[5]*F1*F16*F18*F4*G[1234] + C[5]*F1*F16*F18*F5*G[1243] + C[5]*F1*F16*F19*F2*G[1241] + C[5]*F1*F16*F19*F3*G[1242] + C[5]*F1*F16*F19*F4*G[1234] + C[5]*F1*F16*F19*F5*G[1243] + C[5]*F1*F16*F2*G[1244] + C[5]*F1*F16*F3*G[1245] + C[5]*F1*F16*F4*G[902] + C[5]*F1*F16*F5*G[461] + C[5]*F1*F17*F18*F2*G[1246] + C[5]*F1*F17*F18*F3*G[1247] + C[5]*F1*F17*F18*F4*G[1235] + C[5]*F1*F17*F18*F5*G[1248] + C[5]*F1*F17*F19*F2*G[1246] + C[5]*F1*F17*F19*F3*G[1247] + C[5]*F1*F17*F19*F4*G[1235] + C[5]*F1*F17*F19*F5*G[1248] + C[5]*F1*F17*F2*G[1249] + C[5]*F1*F17*F3*G[1250] + C[5]*F1*F17*F4*G[907] + C[5]*F1*F17*F5*G[467] + C[5]*F1*F18*F18*G[1078] + C[5]*F1*F18*F19*G[1081] + C[5]*F1*F18*F2*F6*G[1246] + C[5]*F1*F18*F2*F7*G[1236] + C[5]*F1*F18*F2*F8*G[1241] + C[5]*F1*F18*F3*F6*G[1247] + C[5]*F1*F18*F3*F7*G[1237] + C[5]*F1*F18*F3*F8*G[1242] + C[5]*F1*F18*F4*F6*G[1235] + C[5]*F1*F18*F4*F7*G[1233] + C[5]*F1*F18*F4*F8*G[1234] + C[5]*F1*F18*F5*F6*G[1248] + C[5]*F1*F18*F5*F7*G[1238] + C[5]*F1*F18*F5*F8*G[1243] + C[5]*F1*F18*G[1084] + C[5]*F1*F19*F19*G[1078] + C[5]*F1*F19*F2*F6*G[1246] + C[5]*F1*F19*F2*F7*G[1236] + C[5]*F1*F19*F2*F8*G[1241] + C[5]*F1*F19*F3*F6*G[1247] + C[5]*F1*F19*F3*F7*G[1237] + C[5]*F1*F19*F3*F8*G[1242] + C[5]*F1*F19*F4*F6*G[1235] + C[5]*F1*F19*F4*F7*G[1233] + C[5]*F1*F19*F4*F8*G[1234] + C[5]*F1*F19*F5*F6*G[1248] + C[5]*F1*F19*F5*F7*G[1238] + C[5]*F1*F19*F5*F8*G[1243] + C[5]*F1*F19*G[1084] + C[5]*F1*F2*F6*G[1249] + C[5]*F1*F2*F7*G[1239] + C[5]*F1*F2*F8*G[1244] + C[5]*F1*F3*F6*G[1250] + C[5]*F1*F3*F7*G[1240] + C[5]*F1*F3*F8*G[1245] + C[5]*F1*F4*F6*G[907] + C[5]*F1*F4*F7*G[897] + C[5]*F1*F4*F8*G[902] + C[5]*F1*F5*F6*G[467] + C[5]*F1*F5*F7*G[455] + C[5]*F1*F5*F8*G[461] + C[5]*F1*G[1087] + C[5]*F15*F18*F2*F2*G[1251] + C[5]*F15*F18*F2*F3*G[1252] + C[5]*F15*F18*F2*F4*G[1253] + C[5]*F15*F18*F2*F5*G[1251] + C[5]*F15*F19*F2*F2*G[1251] + C[5]*F15*F19*F2*F3*G[1252] + C[5]*F15*F19*F2*F4*G[1253] + C[5]*F15*F19*F2*F5*G[1251] + C[5]*F15*F2*F2*G[471] + C[5]*F15*F2*F3*G[1254] + C[5]*F15*F2*F4*G[911] + C[5]*F15*F2*F5*G[471] + C[5]*F16*F18*F2*F2*G[1255] + C[5]*F16*F18*F2*F3*G[1256] + C[5]*F16*F18*F2*F4*G[1257] + C[5]*F16*F18*F2*F5*G[1255] + C[5]*F16*F19*F2*F2*G[1255] + C[5]*F16*F19*F2*F3*G[1256] + C[5]*F16*F19*F2*F4*G[1257] + C[5]*F16*F19*F2*F5*G[1255] + C[5]*F16*F2*F2*G[477] + C[5]*F16*F2*F3*G[1258] + C[5]*F16*F2*F4*G[916] + C[5]*F16*F2*F5*G[477] + C[5]*F17*F18*F2*F2*G[1259] + C[5]*F17*F18*F2*F3*G[1260] + C[5]*F17*F18*F2*F4*G[1261] + C[5]*F17*F18*F2*F5*G[1259] + C[5]*F17*F19*F2*F2*G[1259] + C[5]*F17*F19*F2*F3*G[1260] + C[5]*F17*F19*F2*F4*G[1261] + C[5]*F17*F19*F2*F5*G[1259] + C[5]*F17*F2*F2*G[481] + C[5]*F17*F2*F3*G[1262] + C[5]*F17*F2*F4*G[921] + C[5]*F17*F2*F5*G[481] + C[5]*F18*F18*F2*G[1089] + C[5]*F18*F19*F2*G[1091] + C[5]*F18*F2*F2*F6*G[1259] + C[5]*F18*F2*F2*F7*G[1251] + C[5]*F18*F2*F2*F8*G[1255] + C[5]*F18*F2*F3*F6*G[1260] + C[5]*F18*F2*F3*F7*G[1252] + C[5]*F18*F2*F3*F8*G[1256] + C[5]*F18*F2*F4*F6*G[1261] + C[5]*F18*F2*F4*F7*G[1253] + C[5]*F18*F2*F4*F8*G[1257] + C[5]*F18*F2*F5*F6*G[1259] + C[5]*F18*F2*F5*F7*G[1251] + C[5]*F18*F2*F5*F8*G[1255] + C[5]*F18*F2*G[1093] + C[5]*F19*F19*F2*G[1089] + C[5]*F19*F2*F2*F6*G[1259] + C[5]*F19*F2*F2*F7*G[1251] + C[5]*F19*F2*F2*F8*G[1255] + C[5]*F19*F2*F3*F6*G[1260] + C[5]*F19*F2*F3*F7*G[1252] + C[5]*F19*F2*F3*F8*G[1256] + C[5]*F19*F2*F4*F6*G[1261] + C[5]*F19*F2*F4*F7*G[1253] + C[5]*F19*F2*F4*F8*G[1257] + C[5]*F19*F2*F5*F6*G[1259] + C[5]*F19*F2*F5*F7*G[1251] + C[5]*F19*F2*F5*F8*G[1255] + C[5]*F19*F2*G[1093] + C[5]*F2*F2*F6*G[481] + C[5]*F2*F2*F7*G[471] + C[5]*F2*F2*F8*G[477] + C[5]*F2*F3*F6*G[1262] + C[5]*F2*F3*F7*G[1254] + C[5]*F2*F3*F8*G[1258] + C[5]*F2*F4*F6*G[921] + C[5]*F2*F4*F7*G[911] + C[5]*F2*F4*F8*G[916] + C[5]*F2*F5*F6*G[481] + C[5]*F2*F5*F7*G[471] + C[5]*F2*F5*F8*G[477] + C[5]*F2*G[1095] + F0*F18*F18*G[1096] + F0*F18*F19*G[1097] + F0*F18*G[1098] + F0*F19*F19*G[1099] + F0*F19*G[1100] + F0*G[1101] + F1*F18*F18*G[718] + F1*F18*F19*G[719] + F1*F18*G[720] + F1*F19*F19*G[721] + F1*F19*G[722] + F1*G[723] + F18*F18*F2*G[240] + F18*F18*F3*G[1102] + F18*F18*F4*G[730] + F18*F18*F5*G[253] + F18*F19*F2*G[241] + F18*F19*F3*G[1103] + F18*F19*F4*G[732] + F18*F19*F5*G[257] + F18*F2*G[242] + F18*F3*G[1100] + F18*F4*G[722] + F18*F5*G[244] + F19*F19*F2*G[243] + F19*F19*F3*G[1104] + F19*F19*F4*G[734] + F19*F19*F5*G[263] + F19*F2*G[244] + F19*F3*G[1105] + F19*F4*G[736] + F19*F5*G[266] + F2*G[245] + F3*G[1106] + F4*G[738] + F5*G[270])/(1.0 + 0.01*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20)) + 0.01*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.01*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.02*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.02*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.02*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.2*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20)) + 0.2*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.2*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))) + (C[1]*F0*F0*F18*F18*G[988] + C[1]*F0*F0*F18*F19*G[989] + C[1]*F0*F0*F18*G[990] + C[1]*F0*F0*F19*F19*G[988] + C[1]*F0*F0*F19*G[990] + C[1]*F0*F0*G[991] + C[1]*F0*F1*F18*F18*G[992] + C[1]*F0*F1*F18*F19*G[993] + C[1]*F0*F1*F18*G[994] + C[1]*F0*F1*F19*F19*G[992] + C[1]*F0*F1*F19*G[994] + C[1]*F0*F1*G[995] + C[1]*F0*F18*F18*F2*G[996] + C[1]*F0*F18*F18*F3*G[988] + C[1]*F0*F18*F18*F4*G[574] + C[1]*F0*F18*F18*F5*G[60] + C[1]*F0*F18*F19*F2*G[998] + C[1]*F0*F18*F19*F3*G[989] + C[1]*F0*F18*F19*F4*G[575] + C[1]*F0*F18*F19*F5*G[61] + C[1]*F0*F18*F2*G[1000] + C[1]*F0*F18*F3*G[990] + C[1]*F0*F18*F4*G[576] + C[1]*F0*F18*F5*G[62] + C[1]*F0*F19*F19*F2*G[996] + C[1]*F0*F19*F19*F3*G[988] + C[1]*F0*F19*F19*F4*G[574] + C[1]*F0*F19*F19*F5*G[60] + C[1]*F0*F19*F2*G[1000] + C[1]*F0*F19*F3*G[990] + C[1]*F0*F19*F4*G[576] + C[1]*F0*F19*F5*G[62] + C[1]*F0*F2*G[1002] + C[1]*F0*F3*G[991] + C[1]*F0*F4*G[577] + C[1]*F0*F5*G[63] + C[1]*F1*F1*F18*F18*G[599] + C[1]*F1*F1*F18*F19*G[602] + C[1]*F1*F1*F18*G[605] + C[1]*F1*F1*F19*F19*G[599] + C[1]*F1*F1*F19*G[605] + C[1]*F1*F1*G[608] + C[1]*F1*F18*F18*F2*G[1004] + C[1]*F1*F18*F18*F3*G[1005] + C[1]*F1*F18*F18*F4*G[599] + C[1]*F1*F18*F18*F5*G[89] + C[1]*F1*F18*F19*F2*G[1007] + C[1]*F1*F18*F19*F3*G[1008] + C[1]*F1*F18*F19*F4*G[602] + C[1]*F1*F18*F19*F5*G[93] + C[1]*F1*F18*F2*G[1010] + C[1]*F1*F18*F3*G[1011] + C[1]*F1*F18*F4*G[605] + C[1]*F1*F18*F5*G[97] + C[1]*F1*F19*F19*F2*G[1004] + C[1]*F1*F19*F19*F3*G[1005] + C[1]*F1*F19*F19*F4*G[599] + C[1]*F1*F19*F19*F5*G[89] + C[1]*F1*F19*F2*G[1010] + C[1]*F1*F19*F3*G[1011] + C[1]*F1*F19*F4*G[605] + C[1]*F1*F19*F5*G[97] + C[1]*F1*F2*G[1013] + C[1]*F1*F3*G[1014] + C[1]*F1*F4*G[608] + C[1]*F1*F5*G[101] + C[1]*F18*F18*F2*F2*G[105] + C[1]*F18*F18*F2*F3*G[1016] + C[1]*F18*F18*F2*F4*G[610] + C[1]*F18*F18*F2*F5*G[105] + C[1]*F18*F19*F2*F2*G[109] + C[1]*F18*F19*F2*F3*G[1018] + C[1]*F18*F19*F2*F4*G[613] + C[1]*F18*F19*F2*F5*G[109] + C[1]*F18*F2*F2*G[113] + C[1]*F18*F2*F3*G[1020] + C[1]*F18*F2*F4*G[616] + C[1]*F18*F2*F5*G[113] + C[1]*F19*F19*F2*F2*G[105] + C[1]*F19*F19*F2*F3*G[1016] + C[1]*F19*F19*F2*F4*G[610] + C[1]*F19*F19*F2*F5*G[105] + C[1]*F19*F2*F2*G[113] + C[1]*F19*F2*F3*G[1020] + C[1]*F19*F2*F4*G[616] + C[1]*F19*F2*F5*G[113] + C[1]*F2*F2*G[117] + C[1]*F2*F3*G[1022] + C[1]*F2*F4*G[619] + C[1]*F2*F5*G[117] + C[3]*F0*F0*F18*F18*G[1024] + C[3]*F0*F0*F18*F19*G[1025] + C[3]*F0*F0*F18*G[1026] + C[3]*F0*F0*F19*F19*G[1024] + C[3]*F0*F0*F19*G[1026] + C[3]*F0*F0*G[1027] + C[3]*F0*F1*F18*F18*G[1028] + C[3]*F0*F1*F18*F19*G[1029] + C[3]*F0*F1*F18*G[1030] + C[3]*F0*F1*F19*F19*G[1028] + C[3]*F0*F1*F19*G[1030] + C[3]*F0*F1*G[1031] + C[3]*F0*F18*F18*F2*G[1032] + C[3]*F0*F18*F18*F3*G[1024] + C[3]*F0*F18*F18*F4*G[622] + C[3]*F0*F18*F18*F5*G[120] + C[3]*F0*F18*F19*F2*G[1034] + C[3]*F0*F18*F19*F3*G[1025] + C[3]*F0*F18*F19*F4*G[623] + C[3]*F0*F18*F19*F5*G[121] + C[3]*F0*F18*F2*G[1036] + C[3]*F0*F18*F3*G[1026] + C[3]*F0*F18*F4*G[624] + C[3]*F0*F18*F5*G[122] + C[3]*F0*F19*F19*F2*G[1032] + C[3]*F0*F19*F19*F3*G[1024] + C[3]*F0*F19*F19*F4*G[622] + C[3]*F0*F19*F19*F5*G[120] + C[3]*F0*F19*F2*G[1036] + C[3]*F0*F19*F3*G[1026] + C[3]*F0*F19*F4*G[624] + C[3]*F0*F19*F5*G[122] + C[3]*F0*F2*G[1038] + C[3]*F0*F3*G[1027] + C[3]*F0*F4*G[625] + C[3]*F0*F5*G[123] + C[3]*F1*F1*F18*F18*G[647] + C[3]*F1*F1*F18*F19*G[650] + C[3]*F1*F1*F18*G[653] + C[3]*F1*F1*F19*F19*G[647] + C[3]*F1*F1*F19*G[653] + C[3]*F1*F1*G[656] + C[3]*F1*F18*F18*F2*G[1040] + C[3]*F1*F18*F18*F3*G[1041] + C[3]*F1*F18*F18*F4*G[647] + C[3]*F1*F18*F18*F5*G[149] + C[3]*F1*F18*F19*F2*G[1043] + C[3]*F1*F18*F19*F3*G[1044] + C[3]*F1*F18*F19*F4*G[650] + C[3]*F1*F18*F19*F5*G[153] + C[3]*F1*F18*F2*G[1046] + C[3]*F1*F18*F3*G[1047] + C[3]*F1*F18*F4*G[653] + C[3]*F1*F18*F5*G[157] + C[3]*F1*F19*F19*F2*G[1040] + C[3]*F1*F19*F19*F3*G[1041] + C[3]*F1*F19*F19*F4*G[647] + C[3]*F1*F19*F19*F5*G[149] + C[3]*F1*F19*F2*G[1046] + C[3]*F1*F19*F3*G[1047] + C[3]*F1*F19*F4*G[653] + C[3]*F1*F19*F5*G[157] + C[3]*F1*F2*G[1049] + C[3]*F1*F3*G[1050] + C[3]*F1*F4*G[656] + C[3]*F1*F5*G[161] + C[3]*F18*F18*F2*F2*G[165] + C[3]*F18*F18*F2*F3*G[1052] + C[3]*F18*F18*F2*F4*G[658] + C[3]*F18*F18*F2*F5*G[165] + C[3]*F18*F19*F2*F2*G[169] + C[3]*F18*F19*F2*F3*G[1054] + C[3]*F18*F19*F2*F4*G[661] + C[3]*F18*F19*F2*F5*G[169] + C[3]*F18*F2*F2*G[173] + C[3]*F18*F2*F3*G[1056] + C[3]*F18*F2*F4*G[664] + C[3]*F18*F2*F5*G[173] + C[3]*F19*F19*F2*F2*G[165] + C[3]*F19*F19*F2*F3*G[1052] + C[3]*F19*F19*F2*F4*G[658] + C[3]*F19*F19*F2*F5*G[165] + C[3]*F19*F2*F2*G[173] + C[3]*F19*F2*F3*G[1056] + C[3]*F19*F2*F4*G[664] + C[3]*F19*F2*F5*G[173] + C[3]*F2*F2*G[177] + C[3]*F2*F3*G[1058] + C[3]*F2*F4*G[667] + C[3]*F2*F5*G[177] + C[5]*F0*F0*F18*F18*G[1060] + C[5]*F0*F0*F18*F19*G[1061] + C[5]*F0*F0*F18*G[1062] + C[5]*F0*F0*F19*F19*G[1060] + C[5]*F0*F0*F19*G[1062] + C[5]*F0*F0*G[1063] + C[5]*F0*F1*F18*F18*G[1064] + C[5]*F0*F1*F18*F19*G[1065] + C[5]*F0*F1*F18*G[1066] + C[5]*F0*F1*F19*F19*G[1064] + C[5]*F0*F1*F19*G[1066] + C[5]*F0*F1*G[1067] + C[5]*F0*F18*F18*F2*G[1068] + C[5]*F0*F18*F18*F3*G[1060] + C[5]*F0*F18*F18*F4*G[670] + C[5]*F0*F18*F18*F5*G[180] + C[5]*F0*F18*F19*F2*G[1070] + C[5]*F0*F18*F19*F3*G[1061] + C[5]*F0*F18*F19*F4*G[671] + C[5]*F0*F18*F19*F5*G[181] + C[5]*F0*F18*F2*G[1072] + C[5]*F0*F18*F3*G[1062] + C[5]*F0*F18*F4*G[672] + C[5]*F0*F18*F5*G[182] + C[5]*F0*F19*F19*F2*G[1068] + C[5]*F0*F19*F19*F3*G[1060] + C[5]*F0*F19*F19*F4*G[670] + C[5]*F0*F19*F19*F5*G[180] + C[5]*F0*F19*F2*G[1072] + C[5]*F0*F19*F3*G[1062] + C[5]*F0*F19*F4*G[672] + C[5]*F0*F19*F5*G[182] + C[5]*F0*F2*G[1074] + C[5]*F0*F3*G[1063] + C[5]*F0*F4*G[673] + C[5]*F0*F5*G[183] + C[5]*F1*F1*F18*F18*G[695] + C[5]*F1*F1*F18*F19*G[698] + C[5]*F1*F1*F18*G[701] + C[5]*F1*F1*F19*F19*G[695] + C[5]*F1*F1*F19*G[701] + C[5]*F1*F1*G[704] + C[5]*F1*F18*F18*F2*G[1076] + C[5]*F1*F18*F18*F3*G[1077] + C[5]*F1*F18*F18*F4*G[695] + C[5]*F1*F18*F18*F5*G[209] + C[5]*F1*F18*F19*F2*G[1079] + C[5]*F1*F18*F19*F3*G[1080] + C[5]*F1*F18*F19*F4*G[698] + C[5]*F1*F18*F19*F5*G[213] + C[5]*F1*F18*F2*G[1082] + C[5]*F1*F18*F3*G[1083] + C[5]*F1*F18*F4*G[701] + C[5]*F1*F18*F5*G[217] + C[5]*F1*F19*F19*F2*G[1076] + C[5]*F1*F19*F19*F3*G[1077] + C[5]*F1*F19*F19*F4*G[695] + C[5]*F1*F19*F19*F5*G[209] + C[5]*F1*F19*F2*G[1082] + C[5]*F1*F19*F3*G[1083] + C[5]*F1*F19*F4*G[701] + C[5]*F1*F19*F5*G[217] + C[5]*F1*F2*G[1085] + C[5]*F1*F3*G[1086] + C[5]*F1*F4*G[704] + C[5]*F1*F5*G[221] + C[5]*F18*F18*F2*F2*G[225] + C[5]*F18*F18*F2*F3*G[1088] + C[5]*F18*F18*F2*F4*G[706] + C[5]*F18*F18*F2*F5*G[225] + C[5]*F18*F19*F2*F2*G[229] + C[5]*F18*F19*F2*F3*G[1090] + C[5]*F18*F19*F2*F4*G[709] + C[5]*F18*F19*F2*F5*G[229] + C[5]*F18*F2*F2*G[233] + C[5]*F18*F2*F3*G[1092] + C[5]*F18*F2*F4*G[712] + C[5]*F18*F2*F5*G[233] + C[5]*F19*F19*F2*F2*G[225] + C[5]*F19*F19*F2*F3*G[1088] + C[5]*F19*F19*F2*F4*G[706] + C[5]*F19*F19*F2*F5*G[225] + C[5]*F19*F2*F2*G[233] + C[5]*F19*F2*F3*G[1092] + C[5]*F19*F2*F4*G[712] + C[5]*F19*F2*F5*G[233] + C[5]*F2*F2*G[237] + C[5]*F2*F3*G[1094] + C[5]*F2*F4*G[715] + C[5]*F2*F5*G[237])/(1.0 + 0.001*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20)) + 0.001*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.001*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.003*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.003*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.003*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.003*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.003*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.003*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.006*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.03*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20)) + 0.03*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.03*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.06*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.06*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.06*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.3*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20)) + 0.3*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.3*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))) + (G[1301] + F0*F15*F18*G[1263] + F0*F15*F19*G[1264] + F0*F15*G[1265] + F0*F16*F18*G[1266] + F0*F16*F19*G[1267] + F0*F16*G[1268] + F0*F17*F18*G[1269] + F0*F17*F19*G[1270] + F0*F17*G[1271] + F0*F18*F6*G[1269] + F0*F18*F7*G[1263] + F0*F18*F8*G[1266] + F0*F19*F6*G[1270] + F0*F19*F7*G[1264] + F0*F19*F8*G[1267] + F0*F6*G[1271] + F0*F7*G[1265] + F0*F8*G[1268] + F1*F15*F18*G[1272] + F1*F15*F19*G[1273] + F1*F15*G[925] + F1*F16*F18*G[1274] + F1*F16*F19*G[1275] + F1*F16*G[928] + F1*F17*F18*G[1276] + F1*F17*F19*G[1277] + F1*F17*G[931] + F1*F18*F6*G[1276] + F1*F18*F7*G[1272] + F1*F18*F8*G[1274] + F1*F19*F6*G[1277] + F1*F19*F7*G[1273] + F1*F19*F8*G[1275] + F1*F6*G[931] + F1*F7*G[925] + F1*F8*G[928] + F15*F18*F2*G[1278] + F15*F18*F3*G[1264] + F15*F18*F4*G[1273] + F15*F18*F5*G[1279] + F15*F19*F2*G[1279] + F15*F19*F3*G[1280] + F15*F19*F4*G[1281] + F15*F19*F5*G[1282] + F15*F2*G[485] + F15*F3*G[1283] + F15*F4*G[946] + F15*F5*G[507] + F16*F18*F2*G[1284] + F16*F18*F3*G[1267] + F16*F18*F4*G[1275] + F16*F18*F5*G[1285] + F16*F19*F2*G[1285] + F16*F19*F3*G[1286] + F16*F19*F4*G[1287] + F16*F19*F5*G[1288] + F16*F2*G[488] + F16*F3*G[1289] + F16*F4*G[953] + F16*F5*G[516] + F17*F18*F2*G[1290] + F17*F18*F3*G[1270] + F17*F18*F4*G[1277] + F17*F18*F5*G[1291] + F17*F19*F2*G[1291] + F17*F19*F3*G[1292] + F17*F19*F4*G[1293] + F17*F19*F5*G[1294] + F17*F2*G[491] + F17*F3*G[1295] + F17*F4*G[960] + F17*F5*G[525] + F18*F18*G[1296] + F18*F19*G[1297] + F18*F2*F6*G[1290] + F18*F2*F7*G[1278] + F18*F2*F8*G[1284] + F18*F3*F6*G[1270] + F18*F3*F7*G[1264] + F18*F3*F8*G[1267] + F18*F4*F6*G[1277] + F18*F4*F7*G[1273] + F18*F4*F8*G[1275] + F18*F5*F6*G[1291] + F18*F5*F7*G[1279] + F18*F5*F8*G[1285] + F18*G[1298] + F19*F19*G[1299] + F19*F2*F6*G[1291] + F19*F2*F7*G[1279] + F19*F2*F8*G[1285] + F19*F3*F6*G[1292] + F19*F3*F7*G[1280] + F19*F3*F8*G[1286] + F19*F4*F6*G[1293] + F19*F4*F7*G[1281] + F19*F4*F8*G[1287] + F19*F5*F6*G[1294] + F19*F5*F7*G[1282] + F19*F5*F8*G[1288] + F19*G[1300] + F2*F6*G[491] + F2*F7*G[485] + F2*F8*G[488] + F3*F6*G[1295] + F3*F7*G[1283] + F3*F8*G[1289] + F4*F6*G[960] + F4*F7*G[946] + F4*F8*G[953] + F5*F6*G[525] + F5*F7*G[507] + F5*F8*G[516])/(1.0 + 0.1*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20)) + 0.1*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.1*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))));
      
      // Number of operations: 14356
      I[3] = W14[ip]*(F18*(G[1437] + F15*(G[1350]*(F20*(F10 + F13) + F27*(F22 + F25) + F34*(F29 + F32)) + G[1392]*(F20*(F11 + F14) + F27*(F23 + F26) + F34*(F30 + F33)) + G[1420]*(F20*(F12 + F9) + F27*(F21 + F24) + F34*(F28 + F31))) + F15*F15*(G[1302]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1308]*(F10*F13 + F22*F25 + F29*F32) + G[1320]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1332]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1356]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1362]*(F11*F14 + F23*F26 + F30*F33) + G[1374]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1398]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1404]*(F12*F9 + F21*F24 + F28*F31)) + F16*(F15*(G[1304]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1322]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1334]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1344]*(F10*F13 + F22*F25 + F29*F32) + G[1358]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1376]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1386]*(F11*F14 + F23*F26 + F30*F33) + G[1400]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1416]*(F12*F9 + F21*F24 + F28*F31)) + F16*(G[1310]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1314]*(F10*F13 + F22*F25 + F29*F32) + G[1326]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1338]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1364]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1368]*(F11*F14 + F23*F26 + F30*F33) + G[1380]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1406]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1410]*(F12*F9 + F21*F24 + F28*F31)) + G[1352]*(F20*(F10 + F13) + F27*(F22 + F25) + F34*(F29 + F32)) + G[1394]*(F20*(F11 + F14) + F27*(F23 + F26) + F34*(F30 + F33)) + G[1424]*(F20*(F12 + F9) + F27*(F21 + F24) + F34*(F28 + F31))) + F17*(F15*(G[1306]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1324]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1336]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1346]*(F10*F13 + F22*F25 + F29*F32) + G[1360]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1378]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1388]*(F11*F14 + F23*F26 + F30*F33) + G[1402]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1418]*(F12*F9 + F21*F24 + F28*F31)) + F16*(G[1312]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1328]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1340]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1348]*(F10*F13 + F22*F25 + F29*F32) + G[1366]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1382]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1390]*(F11*F14 + F23*F26 + F30*F33) + G[1408]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1422]*(F12*F9 + F21*F24 + F28*F31)) + F17*(G[1316]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1318]*(F10*F13 + F22*F25 + F29*F32) + G[1330]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1342]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1370]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1372]*(F11*F14 + F23*F26 + F30*F33) + G[1384]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1412]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1414]*(F12*F9 + F21*F24 + F28*F31)) + G[1354]*(F20*(F10 + F13) + F27*(F22 + F25) + F34*(F29 + F32)) + G[1396]*(F20*(F11 + F14) + F27*(F23 + F26) + F34*(F30 + F33)) + G[1426]*(F20*(F12 + F9) + F27*(F21 + F24) + F34*(F28 + F31))) + F6*(F15*(G[1306]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1324]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1336]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1346]*(F10*F13 + F22*F25 + F29*F32) + G[1360]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1378]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1388]*(F11*F14 + F23*F26 + F30*F33) + G[1402]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1418]*(F12*F9 + F21*F24 + F28*F31)) + F16*(G[1312]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1328]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1340]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1348]*(F10*F13 + F22*F25 + F29*F32) + G[1366]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1382]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1390]*(F11*F14 + F23*F26 + F30*F33) + G[1408]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1422]*(F12*F9 + F21*F24 + F28*F31)) + F17*(G[1318]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1372]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[13]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1414]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[22]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[52]*(F11*F14 + F23*F26 + F30*F33) + G[545]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[554]*(F10*F13 + F22*F25 + F29*F32) + G[977]*(F12*F9 + F21*F24 + F28*F31)) + F6*(G[1316]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1318]*(F10*F13 + F22*F25 + F29*F32) + G[1330]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1342]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1370]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1372]*(F11*F14 + F23*F26 + F30*F33) + G[1384]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1412]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1414]*(F12*F9 + F21*F24 + F28*F31)) + G[1354]*(F20*(F10 + F13) + F27*(F22 + F25) + F34*(F29 + F32)) + G[1396]*(F20*(F11 + F14) + F27*(F23 + F26) + F34*(F30 + F33)) + G[1426]*(F20*(F12 + F9) + F27*(F21 + F24) + F34*(F28 + F31))) + F7*(F15*(G[1308]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1362]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1404]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[15]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[24]*(F11*F14 + F23*F26 + F30*F33) + G[538]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[547]*(F10*F13 + F22*F25 + F29*F32) + G[6]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[970]*(F12*F9 + F21*F24 + F28*F31)) + F16*(G[1304]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1322]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1334]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1344]*(F10*F13 + F22*F25 + F29*F32) + G[1358]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1376]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1386]*(F11*F14 + F23*F26 + F30*F33) + G[1400]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1416]*(F12*F9 + F21*F24 + F28*F31)) + F17*(G[1306]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1324]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1336]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1346]*(F10*F13 + F22*F25 + F29*F32) + G[1360]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1378]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1388]*(F11*F14 + F23*F26 + F30*F33) + G[1402]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1418]*(F12*F9 + F21*F24 + F28*F31)) + F6*(G[1306]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1324]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1336]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1346]*(F10*F13 + F22*F25 + F29*F32) + G[1360]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1378]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1388]*(F11*F14 + F23*F26 + F30*F33) + G[1402]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1418]*(F12*F9 + F21*F24 + F28*F31)) + F7*(G[1302]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1308]*(F10*F13 + F22*F25 + F29*F32) + G[1320]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1332]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1356]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1362]*(F11*F14 + F23*F26 + F30*F33) + G[1374]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1398]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1404]*(F12*F9 + F21*F24 + F28*F31)) + G[1350]*(F20*(F10 + F13) + F27*(F22 + F25) + F34*(F29 + F32)) + G[1392]*(F20*(F11 + F14) + F27*(F23 + F26) + F34*(F30 + F33)) + G[1420]*(F20*(F12 + F9) + F27*(F21 + F24) + F34*(F28 + F31))) + F8*(F15*(G[1304]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1322]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1334]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1344]*(F10*F13 + F22*F25 + F29*F32) + G[1358]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1376]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1386]*(F11*F14 + F23*F26 + F30*F33) + G[1400]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1416]*(F12*F9 + F21*F24 + F28*F31)) + F16*(G[10]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1314]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1368]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1410]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[19]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[40]*(F11*F14 + F23*F26 + F30*F33) + G[542]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[551]*(F10*F13 + F22*F25 + F29*F32) + G[974]*(F12*F9 + F21*F24 + F28*F31)) + F17*(G[1312]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1328]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1340]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1348]*(F10*F13 + F22*F25 + F29*F32) + G[1366]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1382]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1390]*(F11*F14 + F23*F26 + F30*F33) + G[1408]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1422]*(F12*F9 + F21*F24 + F28*F31)) + F6*(G[1312]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1328]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1340]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1348]*(F10*F13 + F22*F25 + F29*F32) + G[1366]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1382]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1390]*(F11*F14 + F23*F26 + F30*F33) + G[1408]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1422]*(F12*F9 + F21*F24 + F28*F31)) + F7*(G[1304]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1322]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1334]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1344]*(F10*F13 + F22*F25 + F29*F32) + G[1358]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1376]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1386]*(F11*F14 + F23*F26 + F30*F33) + G[1400]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1416]*(F12*F9 + F21*F24 + F28*F31)) + F8*(G[1310]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1314]*(F10*F13 + F22*F25 + F29*F32) + G[1326]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1338]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1364]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1368]*(F11*F14 + F23*F26 + F30*F33) + G[1380]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1406]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1410]*(F12*F9 + F21*F24 + F28*F31)) + G[1352]*(F20*(F10 + F13) + F27*(F22 + F25) + F34*(F29 + F32)) + G[1394]*(F20*(F11 + F14) + F27*(F23 + F26) + F34*(F30 + F33)) + G[1424]*(F20*(F12 + F9) + F27*(F21 + F24) + F34*(F28 + F31)))) + F19*(G[1438] + F15*(G[1351]*(F20*(F10 + F13) + F27*(F22 + F25) + F34*(F29 + F32)) + G[1393]*(F20*(F11 + F14) + F27*(F23 + F26) + F34*(F30 + F33)) + G[1421]*(F20*(F12 + F9) + F27*(F21 + F24) + F34*(F28 + F31))) + F15*F15*(G[1303]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1309]*(F10*F13 + F22*F25 + F29*F32) + G[1321]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1333]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1357]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1363]*(F11*F14 + F23*F26 + F30*F33) + G[1375]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1399]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1405]*(F12*F9 + F21*F24 + F28*F31)) + F16*(F15*(G[1305]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1323]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1335]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1345]*(F10*F13 + F22*F25 + F29*F32) + G[1359]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1377]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1387]*(F11*F14 + F23*F26 + F30*F33) + G[1401]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1417]*(F12*F9 + F21*F24 + F28*F31)) + F16*(G[1311]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1315]*(F10*F13 + F22*F25 + F29*F32) + G[1327]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1339]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1365]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1369]*(F11*F14 + F23*F26 + F30*F33) + G[1381]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1407]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1411]*(F12*F9 + F21*F24 + F28*F31)) + G[1353]*(F20*(F10 + F13) + F27*(F22 + F25) + F34*(F29 + F32)) + G[1395]*(F20*(F11 + F14) + F27*(F23 + F26) + F34*(F30 + F33)) + G[1425]*(F20*(F12 + F9) + F27*(F21 + F24) + F34*(F28 + F31))) + F17*(F15*(G[1307]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1325]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1337]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1347]*(F10*F13 + F22*F25 + F29*F32) + G[1361]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1379]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1389]*(F11*F14 + F23*F26 + F30*F33) + G[1403]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1419]*(F12*F9 + F21*F24 + F28*F31)) + F16*(G[1313]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1329]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1341]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1349]*(F10*F13 + F22*F25 + F29*F32) + G[1367]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1383]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1391]*(F11*F14 + F23*F26 + F30*F33) + G[1409]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1423]*(F12*F9 + F21*F24 + F28*F31)) + F17*(G[1317]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1319]*(F10*F13 + F22*F25 + F29*F32) + G[1331]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1343]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1371]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1373]*(F11*F14 + F23*F26 + F30*F33) + G[1385]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1413]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1415]*(F12*F9 + F21*F24 + F28*F31)) + G[1355]*(F20*(F10 + F13) + F27*(F22 + F25) + F34*(F29 + F32)) + G[1397]*(F20*(F11 + F14) + F27*(F23 + F26) + F34*(F30 + F33)) + G[1427]*(F20*(F12 + F9) + F27*(F21 + F24) + F34*(F28 + F31))) + F6*(F15*(G[1307]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1325]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1337]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1347]*(F10*F13 + F22*F25 + F29*F32) + G[1361]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1379]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1389]*(F11*F14 + F23*F26 + F30*F33) + G[1403]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1419]*(F12*F9 + F21*F24 + F28*F31)) + F16*(G[1313]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1329]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1341]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1349]*(F10*F13 + F22*F25 + F29*F32) + G[1367]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1383]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1391]*(F11*F14 + F23*F26 + F30*F33) + G[1409]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1423]*(F12*F9 + F21*F24 + F28*F31)) + F17*(G[1319]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1373]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1415]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[53]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[54]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[55]*(F11*F14 + F23*F26 + F30*F33) + G[570]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[571]*(F10*F13 + F22*F25 + F29*F32) + G[986]*(F12*F9 + F21*F24 + F28*F31)) + F6*(G[1317]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1319]*(F10*F13 + F22*F25 + F29*F32) + G[1331]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1343]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1371]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1373]*(F11*F14 + F23*F26 + F30*F33) + G[1385]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1413]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1415]*(F12*F9 + F21*F24 + F28*F31)) + G[1355]*(F20*(F10 + F13) + F27*(F22 + F25) + F34*(F29 + F32)) + G[1397]*(F20*(F11 + F14) + F27*(F23 + F26) + F34*(F30 + F33)) + G[1427]*(F20*(F12 + F9) + F27*(F21 + F24) + F34*(F28 + F31))) + F7*(F15*(G[1309]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1363]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1405]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[25]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[26]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[27]*(F11*F14 + F23*F26 + F30*F33) + G[556]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[557]*(F10*F13 + F22*F25 + F29*F32) + G[979]*(F12*F9 + F21*F24 + F28*F31)) + F16*(G[1305]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1323]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1335]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1345]*(F10*F13 + F22*F25 + F29*F32) + G[1359]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1377]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1387]*(F11*F14 + F23*F26 + F30*F33) + G[1401]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1417]*(F12*F9 + F21*F24 + F28*F31)) + F17*(G[1307]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1325]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1337]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1347]*(F10*F13 + F22*F25 + F29*F32) + G[1361]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1379]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1389]*(F11*F14 + F23*F26 + F30*F33) + G[1403]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1419]*(F12*F9 + F21*F24 + F28*F31)) + F6*(G[1307]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1325]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1337]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1347]*(F10*F13 + F22*F25 + F29*F32) + G[1361]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1379]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1389]*(F11*F14 + F23*F26 + F30*F33) + G[1403]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1419]*(F12*F9 + F21*F24 + F28*F31)) + F7*(G[1303]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1309]*(F10*F13 + F22*F25 + F29*F32) + G[1321]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1333]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1357]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1363]*(F11*F14 + F23*F26 + F30*F33) + G[1375]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1399]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1405]*(F12*F9 + F21*F24 + F28*F31)) + G[1351]*(F20*(F10 + F13) + F27*(F22 + F25) + F34*(F29 + F32)) + G[1393]*(F20*(F11 + F14) + F27*(F23 + F26) + F34*(F30 + F33)) + G[1421]*(F20*(F12 + F9) + F27*(F21 + F24) + F34*(F28 + F31))) + F8*(F15*(G[1305]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1323]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1335]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1345]*(F10*F13 + F22*F25 + F29*F32) + G[1359]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1377]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1387]*(F11*F14 + F23*F26 + F30*F33) + G[1401]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1417]*(F12*F9 + F21*F24 + F28*F31)) + F16*(G[1315]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1369]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1411]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[41]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[42]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[43]*(F11*F14 + F23*F26 + F30*F33) + G[564]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[565]*(F10*F13 + F22*F25 + F29*F32) + G[983]*(F12*F9 + F21*F24 + F28*F31)) + F17*(G[1313]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1329]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1341]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1349]*(F10*F13 + F22*F25 + F29*F32) + G[1367]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1383]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1391]*(F11*F14 + F23*F26 + F30*F33) + G[1409]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1423]*(F12*F9 + F21*F24 + F28*F31)) + F6*(G[1313]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1329]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1341]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1349]*(F10*F13 + F22*F25 + F29*F32) + G[1367]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1383]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1391]*(F11*F14 + F23*F26 + F30*F33) + G[1409]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1423]*(F12*F9 + F21*F24 + F28*F31)) + F7*(G[1305]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1323]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1335]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1345]*(F10*F13 + F22*F25 + F29*F32) + G[1359]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1377]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1387]*(F11*F14 + F23*F26 + F30*F33) + G[1401]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1417]*(F12*F9 + F21*F24 + F28*F31)) + F8*(G[1311]*(F10*F10 + F13*F13 + F22*F22 + F25*F25 + F29*F29 + F32*F32) + G[1315]*(F10*F13 + F22*F25 + F29*F32) + G[1327]*(F11*(F10 + F13) + F14*(F10 + F13) + F23*(F22 + F25) + F26*(F22 + F25) + F30*(F29 + F32) + F33*(F29 + F32)) + G[1339]*(F12*(F10 + F13) + F22*(F21 + F24) + F25*(F21 + F24) + F29*(F28 + F31) + F32*(F28 + F31) + F9*(F10 + F13)) + G[1365]*(F11*F11 + F14*F14 + F23*F23 + F26*F26 + F30*F30 + F33*F33) + G[1369]*(F11*F14 + F23*F26 + F30*F33) + G[1381]*(F12*(F11 + F14) + F23*(F21 + F24) + F26*(F21 + F24) + F30*(F28 + F31) + F33*(F28 + F31) + F9*(F11 + F14)) + G[1407]*(F12*F12 + F21*F21 + F24*F24 + F28*F28 + F31*F31 + F9*F9) + G[1411]*(F12*F9 + F21*F24 + F28*F31)) + G[1353]*(F20*(F10 + F13) + F27*(F22 + F25) + F34*(F29 + F32)) + G[1395]*(F20*(F11 + F14) + F27*(F23 + F26) + F34*(F30 + F33)) + G[1425]*(F20*(F12 + F9) + F27*(F21 + F24) + F34*(F28 + F31)))) + F3*(G[1428]*(F15 + F7) + G[1431]*(F16 + F8) + G[1434]*(F17 + F6) + G[1439]*(F35 + F36) + G[1440]*(F37 + F38) + G[1441]*(F39 + F40)) + F4*(G[1429]*(F15 + F7) + G[1432]*(F16 + F8) + G[1435]*(F17 + F6) + G[1442]*(F35 + F36) + G[1444]*(F37 + F38) + G[1446]*(F39 + F40)) + F5*(G[1430]*(F15 + F7) + G[1433]*(F16 + F8) + G[1436]*(F17 + F6) + G[1443]*(F35 + F36) + G[1445]*(F37 + F38) + G[1447]*(F39 + F40)) + (C[1]*F0*F0*F0*F15*G[1607] + C[1]*F0*F0*F0*F16*G[1608] + C[1]*F0*F0*F0*F17*G[1609] + C[1]*F0*F0*F0*F6*G[1609] + C[1]*F0*F0*F0*F7*G[1607] + C[1]*F0*F0*F0*F8*G[1608] + C[1]*F0*F0*F1*F15*G[1610] + C[1]*F0*F0*F1*F16*G[1611] + C[1]*F0*F0*F1*F17*G[1612] + C[1]*F0*F0*F1*F6*G[1612] + C[1]*F0*F0*F1*F7*G[1610] + C[1]*F0*F0*F1*F8*G[1611] + C[1]*F0*F0*F15*F2*G[1613] + C[1]*F0*F0*F15*F3*G[1614] + C[1]*F0*F0*F15*F4*G[1615] + C[1]*F0*F0*F15*F5*G[1616] + C[1]*F0*F0*F16*F2*G[1617] + C[1]*F0*F0*F16*F3*G[1618] + C[1]*F0*F0*F16*F4*G[1619] + C[1]*F0*F0*F16*F5*G[1620] + C[1]*F0*F0*F17*F2*G[1621] + C[1]*F0*F0*F17*F3*G[1622] + C[1]*F0*F0*F17*F4*G[1623] + C[1]*F0*F0*F17*F5*G[1624] + C[1]*F0*F0*F2*F6*G[1621] + C[1]*F0*F0*F2*F7*G[1613] + C[1]*F0*F0*F2*F8*G[1617] + C[1]*F0*F0*F3*F6*G[1622] + C[1]*F0*F0*F3*F7*G[1614] + C[1]*F0*F0*F3*F8*G[1618] + C[1]*F0*F0*F4*F6*G[1623] + C[1]*F0*F0*F4*F7*G[1615] + C[1]*F0*F0*F4*F8*G[1619] + C[1]*F0*F0*F5*F6*G[1624] + C[1]*F0*F0*F5*F7*G[1616] + C[1]*F0*F0*F5*F8*G[1620] + C[1]*F0*F1*F1*F15*G[1625] + C[1]*F0*F1*F1*F16*G[1626] + C[1]*F0*F1*F1*F17*G[1627] + C[1]*F0*F1*F1*F6*G[1627] + C[1]*F0*F1*F1*F7*G[1625] + C[1]*F0*F1*F1*F8*G[1626] + C[1]*F0*F1*F15*F2*G[1628] + C[1]*F0*F1*F15*F3*G[1629] + C[1]*F0*F1*F15*F4*G[1630] + C[1]*F0*F1*F15*F5*G[1631] + C[1]*F0*F1*F16*F2*G[1632] + C[1]*F0*F1*F16*F3*G[1633] + C[1]*F0*F1*F16*F4*G[1634] + C[1]*F0*F1*F16*F5*G[1635] + C[1]*F0*F1*F17*F2*G[1636] + C[1]*F0*F1*F17*F3*G[1637] + C[1]*F0*F1*F17*F4*G[1638] + C[1]*F0*F1*F17*F5*G[1639] + C[1]*F0*F1*F2*F6*G[1636] + C[1]*F0*F1*F2*F7*G[1628] + C[1]*F0*F1*F2*F8*G[1632] + C[1]*F0*F1*F3*F6*G[1637] + C[1]*F0*F1*F3*F7*G[1629] + C[1]*F0*F1*F3*F8*G[1633] + C[1]*F0*F1*F4*F6*G[1638] + C[1]*F0*F1*F4*F7*G[1630] + C[1]*F0*F1*F4*F8*G[1634] + C[1]*F0*F1*F5*F6*G[1639] + C[1]*F0*F1*F5*F7*G[1631] + C[1]*F0*F1*F5*F8*G[1635] + C[1]*F0*F15*F2*F2*G[1640] + C[1]*F0*F15*F2*F3*G[1641] + C[1]*F0*F15*F2*F4*G[1642] + C[1]*F0*F15*F2*F5*G[1643] + C[1]*F0*F15*F3*F3*G[1607] + C[1]*F0*F15*F3*F4*G[1615] + C[1]*F0*F15*F3*F5*G[1616] + C[1]*F0*F15*F4*F4*G[1644] + C[1]*F0*F15*F4*F5*G[1645] + C[1]*F0*F15*F5*F5*G[1646] + C[1]*F0*F16*F2*F2*G[1647] + C[1]*F0*F16*F2*F3*G[1648] + C[1]*F0*F16*F2*F4*G[1649] + C[1]*F0*F16*F2*F5*G[1650] + C[1]*F0*F16*F3*F3*G[1608] + C[1]*F0*F16*F3*F4*G[1619] + C[1]*F0*F16*F3*F5*G[1620] + C[1]*F0*F16*F4*F4*G[1651] + C[1]*F0*F16*F4*F5*G[1652] + C[1]*F0*F16*F5*F5*G[1653] + C[1]*F0*F17*F2*F2*G[1654] + C[1]*F0*F17*F2*F3*G[1655] + C[1]*F0*F17*F2*F4*G[1656] + C[1]*F0*F17*F2*F5*G[1657] + C[1]*F0*F17*F3*F3*G[1609] + C[1]*F0*F17*F3*F4*G[1623] + C[1]*F0*F17*F3*F5*G[1624] + C[1]*F0*F17*F4*F4*G[1658] + C[1]*F0*F17*F4*F5*G[1659] + C[1]*F0*F17*F5*F5*G[1660] + C[1]*F0*F2*F2*F6*G[1654] + C[1]*F0*F2*F2*F7*G[1640] + C[1]*F0*F2*F2*F8*G[1647] + C[1]*F0*F2*F3*F6*G[1655] + C[1]*F0*F2*F3*F7*G[1641] + C[1]*F0*F2*F3*F8*G[1648] + C[1]*F0*F2*F4*F6*G[1656] + C[1]*F0*F2*F4*F7*G[1642] + C[1]*F0*F2*F4*F8*G[1649] + C[1]*F0*F2*F5*F6*G[1657] + C[1]*F0*F2*F5*F7*G[1643] + C[1]*F0*F2*F5*F8*G[1650] + C[1]*F0*F3*F3*F6*G[1609] + C[1]*F0*F3*F3*F7*G[1607] + C[1]*F0*F3*F3*F8*G[1608] + C[1]*F0*F3*F4*F6*G[1623] + C[1]*F0*F3*F4*F7*G[1615] + C[1]*F0*F3*F4*F8*G[1619] + C[1]*F0*F3*F5*F6*G[1624] + C[1]*F0*F3*F5*F7*G[1616] + C[1]*F0*F3*F5*F8*G[1620] + C[1]*F0*F4*F4*F6*G[1658] + C[1]*F0*F4*F4*F7*G[1644] + C[1]*F0*F4*F4*F8*G[1651] + C[1]*F0*F4*F5*F6*G[1659] + C[1]*F0*F4*F5*F7*G[1645] + C[1]*F0*F4*F5*F8*G[1652] + C[1]*F0*F5*F5*F6*G[1660] + C[1]*F0*F5*F5*F7*G[1646] + C[1]*F0*F5*F5*F8*G[1653] + C[1]*F1*F1*F1*F15*G[1661] + C[1]*F1*F1*F1*F16*G[1662] + C[1]*F1*F1*F1*F17*G[1663] + C[1]*F1*F1*F1*F6*G[1663] + C[1]*F1*F1*F1*F7*G[1661] + C[1]*F1*F1*F1*F8*G[1662] + C[1]*F1*F1*F15*F2*G[1664] + C[1]*F1*F1*F15*F3*G[1665] + C[1]*F1*F1*F15*F4*G[1666] + C[1]*F1*F1*F15*F5*G[1667] + C[1]*F1*F1*F16*F2*G[1668] + C[1]*F1*F1*F16*F3*G[1669] + C[1]*F1*F1*F16*F4*G[1670] + C[1]*F1*F1*F16*F5*G[1671] + C[1]*F1*F1*F17*F2*G[1672] + C[1]*F1*F1*F17*F3*G[1673] + C[1]*F1*F1*F17*F4*G[1674] + C[1]*F1*F1*F17*F5*G[1675] + C[1]*F1*F1*F2*F6*G[1672] + C[1]*F1*F1*F2*F7*G[1664] + C[1]*F1*F1*F2*F8*G[1668] + C[1]*F1*F1*F3*F6*G[1673] + C[1]*F1*F1*F3*F7*G[1665] + C[1]*F1*F1*F3*F8*G[1669] + C[1]*F1*F1*F4*F6*G[1674] + C[1]*F1*F1*F4*F7*G[1666] + C[1]*F1*F1*F4*F8*G[1670] + C[1]*F1*F1*F5*F6*G[1675] + C[1]*F1*F1*F5*F7*G[1667] + C[1]*F1*F1*F5*F8*G[1671] + C[1]*F1*F15*F2*F2*G[1676] + C[1]*F1*F15*F2*F3*G[1677] + C[1]*F1*F15*F2*F4*G[1678] + C[1]*F1*F15*F2*F5*G[1679] + C[1]*F1*F15*F3*F3*G[1680] + C[1]*F1*F15*F3*F4*G[1665] + C[1]*F1*F15*F3*F5*G[1681] + C[1]*F1*F15*F4*F4*G[1661] + C[1]*F1*F15*F4*F5*G[1667] + C[1]*F1*F15*F5*F5*G[1682] + C[1]*F1*F16*F2*F2*G[1683] + C[1]*F1*F16*F2*F3*G[1684] + C[1]*F1*F16*F2*F4*G[1685] + C[1]*F1*F16*F2*F5*G[1686] + C[1]*F1*F16*F3*F3*G[1687] + C[1]*F1*F16*F3*F4*G[1669] + C[1]*F1*F16*F3*F5*G[1688] + C[1]*F1*F16*F4*F4*G[1662] + C[1]*F1*F16*F4*F5*G[1671] + C[1]*F1*F16*F5*F5*G[1689] + C[1]*F1*F17*F2*F2*G[1690] + C[1]*F1*F17*F2*F3*G[1691] + C[1]*F1*F17*F2*F4*G[1692] + C[1]*F1*F17*F2*F5*G[1693] + C[1]*F1*F17*F3*F3*G[1694] + C[1]*F1*F17*F3*F4*G[1673] + C[1]*F1*F17*F3*F5*G[1695] + C[1]*F1*F17*F4*F4*G[1663] + C[1]*F1*F17*F4*F5*G[1675] + C[1]*F1*F17*F5*F5*G[1696] + C[1]*F1*F2*F2*F6*G[1690] + C[1]*F1*F2*F2*F7*G[1676] + C[1]*F1*F2*F2*F8*G[1683] + C[1]*F1*F2*F3*F6*G[1691] + C[1]*F1*F2*F3*F7*G[1677] + C[1]*F1*F2*F3*F8*G[1684] + C[1]*F1*F2*F4*F6*G[1692] + C[1]*F1*F2*F4*F7*G[1678] + C[1]*F1*F2*F4*F8*G[1685] + C[1]*F1*F2*F5*F6*G[1693] + C[1]*F1*F2*F5*F7*G[1679] + C[1]*F1*F2*F5*F8*G[1686] + C[1]*F1*F3*F3*F6*G[1694] + C[1]*F1*F3*F3*F7*G[1680] + C[1]*F1*F3*F3*F8*G[1687] + C[1]*F1*F3*F4*F6*G[1673] + C[1]*F1*F3*F4*F7*G[1665] + C[1]*F1*F3*F4*F8*G[1669] + C[1]*F1*F3*F5*F6*G[1695] + C[1]*F1*F3*F5*F7*G[1681] + C[1]*F1*F3*F5*F8*G[1688] + C[1]*F1*F4*F4*F6*G[1663] + C[1]*F1*F4*F4*F7*G[1661] + C[1]*F1*F4*F4*F8*G[1662] + C[1]*F1*F4*F5*F6*G[1675] + C[1]*F1*F4*F5*F7*G[1667] + C[1]*F1*F4*F5*F8*G[1671] + C[1]*F1*F5*F5*F6*G[1696] + C[1]*F1*F5*F5*F7*G[1682] + C[1]*F1*F5*F5*F8*G[1689] + C[1]*F15*F2*F2*F2*G[1697] + C[1]*F15*F2*F2*F3*G[1698] + C[1]*F15*F2*F2*F4*G[1699] + C[1]*F15*F2*F2*F5*G[1700] + C[1]*F15*F2*F3*F3*G[1701] + C[1]*F15*F2*F3*F4*G[1702] + C[1]*F15*F2*F3*F5*G[1698] + C[1]*F15*F2*F4*F4*G[1703] + C[1]*F15*F2*F4*F5*G[1699] + C[1]*F15*F2*F5*F5*G[1697] + C[1]*F16*F2*F2*F2*G[1704] + C[1]*F16*F2*F2*F3*G[1705] + C[1]*F16*F2*F2*F4*G[1706] + C[1]*F16*F2*F2*F5*G[1707] + C[1]*F16*F2*F3*F3*G[1708] + C[1]*F16*F2*F3*F4*G[1709] + C[1]*F16*F2*F3*F5*G[1705] + C[1]*F16*F2*F4*F4*G[1710] + C[1]*F16*F2*F4*F5*G[1706] + C[1]*F16*F2*F5*F5*G[1704] + C[1]*F17*F2*F2*F2*G[1711] + C[1]*F17*F2*F2*F3*G[1712] + C[1]*F17*F2*F2*F4*G[1713] + C[1]*F17*F2*F2*F5*G[1714] + C[1]*F17*F2*F3*F3*G[1715] + C[1]*F17*F2*F3*F4*G[1716] + C[1]*F17*F2*F3*F5*G[1712] + C[1]*F17*F2*F4*F4*G[1717] + C[1]*F17*F2*F4*F5*G[1713] + C[1]*F17*F2*F5*F5*G[1711] + C[1]*F2*F2*F2*F6*G[1711] + C[1]*F2*F2*F2*F7*G[1697] + C[1]*F2*F2*F2*F8*G[1704] + C[1]*F2*F2*F3*F6*G[1712] + C[1]*F2*F2*F3*F7*G[1698] + C[1]*F2*F2*F3*F8*G[1705] + C[1]*F2*F2*F4*F6*G[1713] + C[1]*F2*F2*F4*F7*G[1699] + C[1]*F2*F2*F4*F8*G[1706] + C[1]*F2*F2*F5*F6*G[1714] + C[1]*F2*F2*F5*F7*G[1700] + C[1]*F2*F2*F5*F8*G[1707] + C[1]*F2*F3*F3*F6*G[1715] + C[1]*F2*F3*F3*F7*G[1701] + C[1]*F2*F3*F3*F8*G[1708] + C[1]*F2*F3*F4*F6*G[1716] + C[1]*F2*F3*F4*F7*G[1702] + C[1]*F2*F3*F4*F8*G[1709] + C[1]*F2*F3*F5*F6*G[1712] + C[1]*F2*F3*F5*F7*G[1698] + C[1]*F2*F3*F5*F8*G[1705] + C[1]*F2*F4*F4*F6*G[1717] + C[1]*F2*F4*F4*F7*G[1703] + C[1]*F2*F4*F4*F8*G[1710] + C[1]*F2*F4*F5*F6*G[1713] + C[1]*F2*F4*F5*F7*G[1699] + C[1]*F2*F4*F5*F8*G[1706] + C[1]*F2*F5*F5*F6*G[1711] + C[1]*F2*F5*F5*F7*G[1697] + C[1]*F2*F5*F5*F8*G[1704] + C[3]*F0*F0*F0*F15*G[1718] + C[3]*F0*F0*F0*F16*G[1719] + C[3]*F0*F0*F0*F17*G[1607] + C[3]*F0*F0*F0*F6*G[1607] + C[3]*F0*F0*F0*F7*G[1718] + C[3]*F0*F0*F0*F8*G[1719] + C[3]*F0*F0*F1*F15*G[1720] + C[3]*F0*F0*F1*F16*G[1721] + C[3]*F0*F0*F1*F17*G[1610] + C[3]*F0*F0*F1*F6*G[1610] + C[3]*F0*F0*F1*F7*G[1720] + C[3]*F0*F0*F1*F8*G[1721] + C[3]*F0*F0*F15*F2*G[1722] + C[3]*F0*F0*F15*F3*G[1723] + C[3]*F0*F0*F15*F4*G[1724] + C[3]*F0*F0*F15*F5*G[1725] + C[3]*F0*F0*F16*F2*G[1726] + C[3]*F0*F0*F16*F3*G[1727] + C[3]*F0*F0*F16*F4*G[1728] + C[3]*F0*F0*F16*F5*G[1729] + C[3]*F0*F0*F17*F2*G[1613] + C[3]*F0*F0*F17*F3*G[1614] + C[3]*F0*F0*F17*F4*G[1730] + C[3]*F0*F0*F17*F5*G[1731] + C[3]*F0*F0*F2*F6*G[1613] + C[3]*F0*F0*F2*F7*G[1722] + C[3]*F0*F0*F2*F8*G[1726] + C[3]*F0*F0*F3*F6*G[1614] + C[3]*F0*F0*F3*F7*G[1723] + C[3]*F0*F0*F3*F8*G[1727] + C[3]*F0*F0*F4*F6*G[1730] + C[3]*F0*F0*F4*F7*G[1724] + C[3]*F0*F0*F4*F8*G[1728] + C[3]*F0*F0*F5*F6*G[1731] + C[3]*F0*F0*F5*F7*G[1725] + C[3]*F0*F0*F5*F8*G[1729] + C[3]*F0*F1*F1*F15*G[1732] + C[3]*F0*F1*F1*F16*G[1733] + C[3]*F0*F1*F1*F17*G[1625] + C[3]*F0*F1*F1*F6*G[1625] + C[3]*F0*F1*F1*F7*G[1732] + C[3]*F0*F1*F1*F8*G[1733] + C[3]*F0*F1*F15*F2*G[1734] + C[3]*F0*F1*F15*F3*G[1735] + C[3]*F0*F1*F15*F4*G[1736] + C[3]*F0*F1*F15*F5*G[1737] + C[3]*F0*F1*F16*F2*G[1738] + C[3]*F0*F1*F16*F3*G[1739] + C[3]*F0*F1*F16*F4*G[1740] + C[3]*F0*F1*F16*F5*G[1741] + C[3]*F0*F1*F17*F2*G[1628] + C[3]*F0*F1*F17*F3*G[1742] + C[3]*F0*F1*F17*F4*G[1743] + C[3]*F0*F1*F17*F5*G[1744] + C[3]*F0*F1*F2*F6*G[1628] + C[3]*F0*F1*F2*F7*G[1734] + C[3]*F0*F1*F2*F8*G[1738] + C[3]*F0*F1*F3*F6*G[1742] + C[3]*F0*F1*F3*F7*G[1735] + C[3]*F0*F1*F3*F8*G[1739] + C[3]*F0*F1*F4*F6*G[1743] + C[3]*F0*F1*F4*F7*G[1736] + C[3]*F0*F1*F4*F8*G[1740] + C[3]*F0*F1*F5*F6*G[1744] + C[3]*F0*F1*F5*F7*G[1737] + C[3]*F0*F1*F5*F8*G[1741] + C[3]*F0*F15*F2*F2*G[1745] + C[3]*F0*F15*F2*F3*G[1746] + C[3]*F0*F15*F2*F4*G[1747] + C[3]*F0*F15*F2*F5*G[1748] + C[3]*F0*F15*F3*F3*G[1718] + C[3]*F0*F15*F3*F4*G[1724] + C[3]*F0*F15*F3*F5*G[1725] + C[3]*F0*F15*F4*F4*G[1749] + C[3]*F0*F15*F4*F5*G[1750] + C[3]*F0*F15*F5*F5*G[1751] + C[3]*F0*F16*F2*F2*G[1752] + C[3]*F0*F16*F2*F3*G[1753] + C[3]*F0*F16*F2*F4*G[1754] + C[3]*F0*F16*F2*F5*G[1755] + C[3]*F0*F16*F3*F3*G[1719] + C[3]*F0*F16*F3*F4*G[1728] + C[3]*F0*F16*F3*F5*G[1729] + C[3]*F0*F16*F4*F4*G[1756] + C[3]*F0*F16*F4*F5*G[1757] + C[3]*F0*F16*F5*F5*G[1758] + C[3]*F0*F17*F2*F2*G[1640] + C[3]*F0*F17*F2*F3*G[1759] + C[3]*F0*F17*F2*F4*G[1760] + C[3]*F0*F17*F2*F5*G[1761] + C[3]*F0*F17*F3*F3*G[1607] + C[3]*F0*F17*F3*F4*G[1730] + C[3]*F0*F17*F3*F5*G[1731] + C[3]*F0*F17*F4*F4*G[1762] + C[3]*F0*F17*F4*F5*G[1763] + C[3]*F0*F17*F5*F5*G[1764] + C[3]*F0*F2*F2*F6*G[1640] + C[3]*F0*F2*F2*F7*G[1745] + C[3]*F0*F2*F2*F8*G[1752] + C[3]*F0*F2*F3*F6*G[1759] + C[3]*F0*F2*F3*F7*G[1746] + C[3]*F0*F2*F3*F8*G[1753] + C[3]*F0*F2*F4*F6*G[1760] + C[3]*F0*F2*F4*F7*G[1747] + C[3]*F0*F2*F4*F8*G[1754] + C[3]*F0*F2*F5*F6*G[1761] + C[3]*F0*F2*F5*F7*G[1748] + C[3]*F0*F2*F5*F8*G[1755] + C[3]*F0*F3*F3*F6*G[1607] + C[3]*F0*F3*F3*F7*G[1718] + C[3]*F0*F3*F3*F8*G[1719] + C[3]*F0*F3*F4*F6*G[1730] + C[3]*F0*F3*F4*F7*G[1724] + C[3]*F0*F3*F4*F8*G[1728] + C[3]*F0*F3*F5*F6*G[1731] + C[3]*F0*F3*F5*F7*G[1725] + C[3]*F0*F3*F5*F8*G[1729] + C[3]*F0*F4*F4*F6*G[1762] + C[3]*F0*F4*F4*F7*G[1749] + C[3]*F0*F4*F4*F8*G[1756] + C[3]*F0*F4*F5*F6*G[1763] + C[3]*F0*F4*F5*F7*G[1750] + C[3]*F0*F4*F5*F8*G[1757] + C[3]*F0*F5*F5*F6*G[1764] + C[3]*F0*F5*F5*F7*G[1751] + C[3]*F0*F5*F5*F8*G[1758] + C[3]*F1*F1*F1*F15*G[1765] + C[3]*F1*F1*F1*F16*G[1766] + C[3]*F1*F1*F1*F17*G[1661] + C[3]*F1*F1*F1*F6*G[1661] + C[3]*F1*F1*F1*F7*G[1765] + C[3]*F1*F1*F1*F8*G[1766] + C[3]*F1*F1*F15*F2*G[1767] + C[3]*F1*F1*F15*F3*G[1768] + C[3]*F1*F1*F15*F4*G[1769] + C[3]*F1*F1*F15*F5*G[1770] + C[3]*F1*F1*F16*F2*G[1771] + C[3]*F1*F1*F16*F3*G[1772] + C[3]*F1*F1*F16*F4*G[1773] + C[3]*F1*F1*F16*F5*G[1774] + C[3]*F1*F1*F17*F2*G[1664] + C[3]*F1*F1*F17*F3*G[1775] + C[3]*F1*F1*F17*F4*G[1666] + C[3]*F1*F1*F17*F5*G[1776] + C[3]*F1*F1*F2*F6*G[1664] + C[3]*F1*F1*F2*F7*G[1767] + C[3]*F1*F1*F2*F8*G[1771] + C[3]*F1*F1*F3*F6*G[1775] + C[3]*F1*F1*F3*F7*G[1768] + C[3]*F1*F1*F3*F8*G[1772] + C[3]*F1*F1*F4*F6*G[1666] + C[3]*F1*F1*F4*F7*G[1769] + C[3]*F1*F1*F4*F8*G[1773] + C[3]*F1*F1*F5*F6*G[1776] + C[3]*F1*F1*F5*F7*G[1770] + C[3]*F1*F1*F5*F8*G[1774] + C[3]*F1*F15*F2*F2*G[1777] + C[3]*F1*F15*F2*F3*G[1778] + C[3]*F1*F15*F2*F4*G[1779] + C[3]*F1*F15*F2*F5*G[1780] + C[3]*F1*F15*F3*F3*G[1781] + C[3]*F1*F15*F3*F4*G[1768] + C[3]*F1*F15*F3*F5*G[1782] + C[3]*F1*F15*F4*F4*G[1765] + C[3]*F1*F15*F4*F5*G[1770] + C[3]*F1*F15*F5*F5*G[1783] + C[3]*F1*F16*F2*F2*G[1784] + C[3]*F1*F16*F2*F3*G[1785] + C[3]*F1*F16*F2*F4*G[1786] + C[3]*F1*F16*F2*F5*G[1787] + C[3]*F1*F16*F3*F3*G[1788] + C[3]*F1*F16*F3*F4*G[1772] + C[3]*F1*F16*F3*F5*G[1789] + C[3]*F1*F16*F4*F4*G[1766] + C[3]*F1*F16*F4*F5*G[1774] + C[3]*F1*F16*F5*F5*G[1790] + C[3]*F1*F17*F2*F2*G[1676] + C[3]*F1*F17*F2*F3*G[1791] + C[3]*F1*F17*F2*F4*G[1792] + C[3]*F1*F17*F2*F5*G[1793] + C[3]*F1*F17*F3*F3*G[1794] + C[3]*F1*F17*F3*F4*G[1775] + C[3]*F1*F17*F3*F5*G[1795] + C[3]*F1*F17*F4*F4*G[1661] + C[3]*F1*F17*F4*F5*G[1776] + C[3]*F1*F17*F5*F5*G[1796] + C[3]*F1*F2*F2*F6*G[1676] + C[3]*F1*F2*F2*F7*G[1777] + C[3]*F1*F2*F2*F8*G[1784] + C[3]*F1*F2*F3*F6*G[1791] + C[3]*F1*F2*F3*F7*G[1778] + C[3]*F1*F2*F3*F8*G[1785] + C[3]*F1*F2*F4*F6*G[1792] + C[3]*F1*F2*F4*F7*G[1779] + C[3]*F1*F2*F4*F8*G[1786] + C[3]*F1*F2*F5*F6*G[1793] + C[3]*F1*F2*F5*F7*G[1780] + C[3]*F1*F2*F5*F8*G[1787] + C[3]*F1*F3*F3*F6*G[1794] + C[3]*F1*F3*F3*F7*G[1781] + C[3]*F1*F3*F3*F8*G[1788] + C[3]*F1*F3*F4*F6*G[1775] + C[3]*F1*F3*F4*F7*G[1768] + C[3]*F1*F3*F4*F8*G[1772] + C[3]*F1*F3*F5*F6*G[1795] + C[3]*F1*F3*F5*F7*G[1782] + C[3]*F1*F3*F5*F8*G[1789] + C[3]*F1*F4*F4*F6*G[1661] + C[3]*F1*F4*F4*F7*G[1765] + C[3]*F1*F4*F4*F8*G[1766] + C[3]*F1*F4*F5*F6*G[1776] + C[3]*F1*F4*F5*F7*G[1770] + C[3]*F1*F4*F5*F8*G[1774] + C[3]*F1*F5*F5*F6*G[1796] + C[3]*F1*F5*F5*F7*G[1783] + C[3]*F1*F5*F5*F8*G[1790] + C[3]*F15*F2*F2*F2*G[1797] + C[3]*F15*F2*F2*F3*G[1798] + C[3]*F15*F2*F2*F4*G[1799] + C[3]*F15*F2*F2*F5*G[1800] + C[3]*F15*F2*F3*F3*G[1801] + C[3]*F15*F2*F3*F4*G[1802] + C[3]*F15*F2*F3*F5*G[1798] + C[3]*F15*F2*F4*F4*G[1803] + C[3]*F15*F2*F4*F5*G[1799] + C[3]*F15*F2*F5*F5*G[1797] + C[3]*F16*F2*F2*F2*G[1804] + C[3]*F16*F2*F2*F3*G[1805] + C[3]*F16*F2*F2*F4*G[1806] + C[3]*F16*F2*F2*F5*G[1807] + C[3]*F16*F2*F3*F3*G[1808] + C[3]*F16*F2*F3*F4*G[1809] + C[3]*F16*F2*F3*F5*G[1805] + C[3]*F16*F2*F4*F4*G[1810] + C[3]*F16*F2*F4*F5*G[1806] + C[3]*F16*F2*F5*F5*G[1804] + C[3]*F17*F2*F2*F2*G[1697] + C[3]*F17*F2*F2*F3*G[1811] + C[3]*F17*F2*F2*F4*G[1812] + C[3]*F17*F2*F2*F5*G[1700] + C[3]*F17*F2*F3*F3*G[1813] + C[3]*F17*F2*F3*F4*G[1814] + C[3]*F17*F2*F3*F5*G[1811] + C[3]*F17*F2*F4*F4*G[1815] + C[3]*F17*F2*F4*F5*G[1812] + C[3]*F17*F2*F5*F5*G[1697] + C[3]*F2*F2*F2*F6*G[1697] + C[3]*F2*F2*F2*F7*G[1797] + C[3]*F2*F2*F2*F8*G[1804] + C[3]*F2*F2*F3*F6*G[1811] + C[3]*F2*F2*F3*F7*G[1798] + C[3]*F2*F2*F3*F8*G[1805] + C[3]*F2*F2*F4*F6*G[1812] + C[3]*F2*F2*F4*F7*G[1799] + C[3]*F2*F2*F4*F8*G[1806] + C[3]*F2*F2*F5*F6*G[1700] + C[3]*F2*F2*F5*F7*G[1800] + C[3]*F2*F2*F5*F8*G[1807] + C[3]*F2*F3*F3*F6*G[1813] + C[3]*F2*F3*F3*F7*G[1801] + C[3]*F2*F3*F3*F8*G[1808] + C[3]*F2*F3*F4*F6*G[1814] + C[3]*F2*F3*F4*F7*G[1802] + C[3]*F2*F3*F4*F8*G[1809] + C[3]*F2*F3*F5*F6*G[1811] + C[3]*F2*F3*F5*F7*G[1798] + C[3]*F2*F3*F5*F8*G[1805] + C[3]*F2*F4*F4*F6*G[1815] + C[3]*F2*F4*F4*F7*G[1803] + C[3]*F2*F4*F4*F8*G[1810] + C[3]*F2*F4*F5*F6*G[1812] + C[3]*F2*F4*F5*F7*G[1799] + C[3]*F2*F4*F5*F8*G[1806] + C[3]*F2*F5*F5*F6*G[1697] + C[3]*F2*F5*F5*F7*G[1797] + C[3]*F2*F5*F5*F8*G[1804] + C[5]*F0*F0*F0*F15*G[1719] + C[5]*F0*F0*F0*F16*G[1816] + C[5]*F0*F0*F0*F17*G[1608] + C[5]*F0*F0*F0*F6*G[1608] + C[5]*F0*F0*F0*F7*G[1719] + C[5]*F0*F0*F0*F8*G[1816] + C[5]*F0*F0*F1*F15*G[1721] + C[5]*F0*F0*F1*F16*G[1817] + C[5]*F0*F0*F1*F17*G[1611] + C[5]*F0*F0*F1*F6*G[1611] + C[5]*F0*F0*F1*F7*G[1721] + C[5]*F0*F0*F1*F8*G[1817] + C[5]*F0*F0*F15*F2*G[1726] + C[5]*F0*F0*F15*F3*G[1727] + C[5]*F0*F0*F15*F4*G[1818] + C[5]*F0*F0*F15*F5*G[1819] + C[5]*F0*F0*F16*F2*G[1820] + C[5]*F0*F0*F16*F3*G[1821] + C[5]*F0*F0*F16*F4*G[1822] + C[5]*F0*F0*F16*F5*G[1823] + C[5]*F0*F0*F17*F2*G[1617] + C[5]*F0*F0*F17*F3*G[1618] + C[5]*F0*F0*F17*F4*G[1824] + C[5]*F0*F0*F17*F5*G[1825] + C[5]*F0*F0*F2*F6*G[1617] + C[5]*F0*F0*F2*F7*G[1726] + C[5]*F0*F0*F2*F8*G[1820] + C[5]*F0*F0*F3*F6*G[1618] + C[5]*F0*F0*F3*F7*G[1727] + C[5]*F0*F0*F3*F8*G[1821] + C[5]*F0*F0*F4*F6*G[1824] + C[5]*F0*F0*F4*F7*G[1818] + C[5]*F0*F0*F4*F8*G[1822] + C[5]*F0*F0*F5*F6*G[1825] + C[5]*F0*F0*F5*F7*G[1819] + C[5]*F0*F0*F5*F8*G[1823] + C[5]*F0*F1*F1*F15*G[1733] + C[5]*F0*F1*F1*F16*G[1826] + C[5]*F0*F1*F1*F17*G[1626] + C[5]*F0*F1*F1*F6*G[1626] + C[5]*F0*F1*F1*F7*G[1733] + C[5]*F0*F1*F1*F8*G[1826] + C[5]*F0*F1*F15*F2*G[1738] + C[5]*F0*F1*F15*F3*G[1827] + C[5]*F0*F1*F15*F4*G[1828] + C[5]*F0*F1*F15*F5*G[1829] + C[5]*F0*F1*F16*F2*G[1830] + C[5]*F0*F1*F16*F3*G[1831] + C[5]*F0*F1*F16*F4*G[1832] + C[5]*F0*F1*F16*F5*G[1833] + C[5]*F0*F1*F17*F2*G[1632] + C[5]*F0*F1*F17*F3*G[1834] + C[5]*F0*F1*F17*F4*G[1835] + C[5]*F0*F1*F17*F5*G[1836] + C[5]*F0*F1*F2*F6*G[1632] + C[5]*F0*F1*F2*F7*G[1738] + C[5]*F0*F1*F2*F8*G[1830] + C[5]*F0*F1*F3*F6*G[1834] + C[5]*F0*F1*F3*F7*G[1827] + C[5]*F0*F1*F3*F8*G[1831] + C[5]*F0*F1*F4*F6*G[1835] + C[5]*F0*F1*F4*F7*G[1828] + C[5]*F0*F1*F4*F8*G[1832] + C[5]*F0*F1*F5*F6*G[1836] + C[5]*F0*F1*F5*F7*G[1829] + C[5]*F0*F1*F5*F8*G[1833] + C[5]*F0*F15*F2*F2*G[1752] + C[5]*F0*F15*F2*F3*G[1837] + C[5]*F0*F15*F2*F4*G[1838] + C[5]*F0*F15*F2*F5*G[1839] + C[5]*F0*F15*F3*F3*G[1719] + C[5]*F0*F15*F3*F4*G[1818] + C[5]*F0*F15*F3*F5*G[1819] + C[5]*F0*F15*F4*F4*G[1840] + C[5]*F0*F15*F4*F5*G[1841] + C[5]*F0*F15*F5*F5*G[1842] + C[5]*F0*F16*F2*F2*G[1843] + C[5]*F0*F16*F2*F3*G[1844] + C[5]*F0*F16*F2*F4*G[1845] + C[5]*F0*F16*F2*F5*G[1846] + C[5]*F0*F16*F3*F3*G[1816] + C[5]*F0*F16*F3*F4*G[1822] + C[5]*F0*F16*F3*F5*G[1823] + C[5]*F0*F16*F4*F4*G[1847] + C[5]*F0*F16*F4*F5*G[1848] + C[5]*F0*F16*F5*F5*G[1849] + C[5]*F0*F17*F2*F2*G[1647] + C[5]*F0*F17*F2*F3*G[1850] + C[5]*F0*F17*F2*F4*G[1851] + C[5]*F0*F17*F2*F5*G[1852] + C[5]*F0*F17*F3*F3*G[1608] + C[5]*F0*F17*F3*F4*G[1824] + C[5]*F0*F17*F3*F5*G[1825] + C[5]*F0*F17*F4*F4*G[1853] + C[5]*F0*F17*F4*F5*G[1854] + C[5]*F0*F17*F5*F5*G[1855] + C[5]*F0*F2*F2*F6*G[1647] + C[5]*F0*F2*F2*F7*G[1752] + C[5]*F0*F2*F2*F8*G[1843] + C[5]*F0*F2*F3*F6*G[1850] + C[5]*F0*F2*F3*F7*G[1837] + C[5]*F0*F2*F3*F8*G[1844] + C[5]*F0*F2*F4*F6*G[1851] + C[5]*F0*F2*F4*F7*G[1838] + C[5]*F0*F2*F4*F8*G[1845] + C[5]*F0*F2*F5*F6*G[1852] + C[5]*F0*F2*F5*F7*G[1839] + C[5]*F0*F2*F5*F8*G[1846] + C[5]*F0*F3*F3*F6*G[1608] + C[5]*F0*F3*F3*F7*G[1719] + C[5]*F0*F3*F3*F8*G[1816] + C[5]*F0*F3*F4*F6*G[1824] + C[5]*F0*F3*F4*F7*G[1818] + C[5]*F0*F3*F4*F8*G[1822] + C[5]*F0*F3*F5*F6*G[1825] + C[5]*F0*F3*F5*F7*G[1819] + C[5]*F0*F3*F5*F8*G[1823] + C[5]*F0*F4*F4*F6*G[1853] + C[5]*F0*F4*F4*F7*G[1840] + C[5]*F0*F4*F4*F8*G[1847] + C[5]*F0*F4*F5*F6*G[1854] + C[5]*F0*F4*F5*F7*G[1841] + C[5]*F0*F4*F5*F8*G[1848] + C[5]*F0*F5*F5*F6*G[1855] + C[5]*F0*F5*F5*F7*G[1842] + C[5]*F0*F5*F5*F8*G[1849] + C[5]*F1*F1*F1*F15*G[1766] + C[5]*F1*F1*F1*F16*G[1856] + C[5]*F1*F1*F1*F17*G[1662] + C[5]*F1*F1*F1*F6*G[1662] + C[5]*F1*F1*F1*F7*G[1766] + C[5]*F1*F1*F1*F8*G[1856] + C[5]*F1*F1*F15*F2*G[1771] + C[5]*F1*F1*F15*F3*G[1857] + C[5]*F1*F1*F15*F4*G[1773] + C[5]*F1*F1*F15*F5*G[1858] + C[5]*F1*F1*F16*F2*G[1859] + C[5]*F1*F1*F16*F3*G[1860] + C[5]*F1*F1*F16*F4*G[1861] + C[5]*F1*F1*F16*F5*G[1862] + C[5]*F1*F1*F17*F2*G[1668] + C[5]*F1*F1*F17*F3*G[1863] + C[5]*F1*F1*F17*F4*G[1670] + C[5]*F1*F1*F17*F5*G[1864] + C[5]*F1*F1*F2*F6*G[1668] + C[5]*F1*F1*F2*F7*G[1771] + C[5]*F1*F1*F2*F8*G[1859] + C[5]*F1*F1*F3*F6*G[1863] + C[5]*F1*F1*F3*F7*G[1857] + C[5]*F1*F1*F3*F8*G[1860] + C[5]*F1*F1*F4*F6*G[1670] + C[5]*F1*F1*F4*F7*G[1773] + C[5]*F1*F1*F4*F8*G[1861] + C[5]*F1*F1*F5*F6*G[1864] + C[5]*F1*F1*F5*F7*G[1858] + C[5]*F1*F1*F5*F8*G[1862] + C[5]*F1*F15*F2*F2*G[1784] + C[5]*F1*F15*F2*F3*G[1865] + C[5]*F1*F15*F2*F4*G[1866] + C[5]*F1*F15*F2*F5*G[1867] + C[5]*F1*F15*F3*F3*G[1868] + C[5]*F1*F15*F3*F4*G[1857] + C[5]*F1*F15*F3*F5*G[1869] + C[5]*F1*F15*F4*F4*G[1766] + C[5]*F1*F15*F4*F5*G[1858] + C[5]*F1*F15*F5*F5*G[1870] + C[5]*F1*F16*F2*F2*G[1871] + C[5]*F1*F16*F2*F3*G[1872] + C[5]*F1*F16*F2*F4*G[1873] + C[5]*F1*F16*F2*F5*G[1874] + C[5]*F1*F16*F3*F3*G[1875] + C[5]*F1*F16*F3*F4*G[1860] + C[5]*F1*F16*F3*F5*G[1876] + C[5]*F1*F16*F4*F4*G[1856] + C[5]*F1*F16*F4*F5*G[1862] + C[5]*F1*F16*F5*F5*G[1877] + C[5]*F1*F17*F2*F2*G[1683] + C[5]*F1*F17*F2*F3*G[1878] + C[5]*F1*F17*F2*F4*G[1879] + C[5]*F1*F17*F2*F5*G[1880] + C[5]*F1*F17*F3*F3*G[1881] + C[5]*F1*F17*F3*F4*G[1863] + C[5]*F1*F17*F3*F5*G[1882] + C[5]*F1*F17*F4*F4*G[1662] + C[5]*F1*F17*F4*F5*G[1864] + C[5]*F1*F17*F5*F5*G[1883] + C[5]*F1*F2*F2*F6*G[1683] + C[5]*F1*F2*F2*F7*G[1784] + C[5]*F1*F2*F2*F8*G[1871] + C[5]*F1*F2*F3*F6*G[1878] + C[5]*F1*F2*F3*F7*G[1865] + C[5]*F1*F2*F3*F8*G[1872] + C[5]*F1*F2*F4*F6*G[1879] + C[5]*F1*F2*F4*F7*G[1866] + C[5]*F1*F2*F4*F8*G[1873] + C[5]*F1*F2*F5*F6*G[1880] + C[5]*F1*F2*F5*F7*G[1867] + C[5]*F1*F2*F5*F8*G[1874] + C[5]*F1*F3*F3*F6*G[1881] + C[5]*F1*F3*F3*F7*G[1868] + C[5]*F1*F3*F3*F8*G[1875] + C[5]*F1*F3*F4*F6*G[1863] + C[5]*F1*F3*F4*F7*G[1857] + C[5]*F1*F3*F4*F8*G[1860] + C[5]*F1*F3*F5*F6*G[1882] + C[5]*F1*F3*F5*F7*G[1869] + C[5]*F1*F3*F5*F8*G[1876] + C[5]*F1*F4*F4*F6*G[1662] + C[5]*F1*F4*F4*F7*G[1766] + C[5]*F1*F4*F4*F8*G[1856] + C[5]*F1*F4*F5*F6*G[1864] + C[5]*F1*F4*F5*F7*G[1858] + C[5]*F1*F4*F5*F8*G[1862] + C[5]*F1*F5*F5*F6*G[1883] + C[5]*F1*F5*F5*F7*G[1870] + C[5]*F1*F5*F5*F8*G[1877] + C[5]*F15*F2*F2*F2*G[1804] + C[5]*F15*F2*F2*F3*G[1884] + C[5]*F15*F2*F2*F4*G[1885] + C[5]*F15*F2*F2*F5*G[1807] + C[5]*F15*F2*F3*F3*G[1886] + C[5]*F15*F2*F3*F4*G[1887] + C[5]*F15*F2*F3*F5*G[1884] + C[5]*F15*F2*F4*F4*G[1888] + C[5]*F15*F2*F4*F5*G[1885] + C[5]*F15*F2*F5*F5*G[1804] + C[5]*F16*F2*F2*F2*G[1889] + C[5]*F16*F2*F2*F3*G[1890] + C[5]*F16*F2*F2*F4*G[1891] + C[5]*F16*F2*F2*F5*G[1892] + C[5]*F16*F2*F3*F3*G[1893] + C[5]*F16*F2*F3*F4*G[1894] + C[5]*F16*F2*F3*F5*G[1890] + C[5]*F16*F2*F4*F4*G[1895] + C[5]*F16*F2*F4*F5*G[1891] + C[5]*F16*F2*F5*F5*G[1889] + C[5]*F17*F2*F2*F2*G[1704] + C[5]*F17*F2*F2*F3*G[1896] + C[5]*F17*F2*F2*F4*G[1897] + C[5]*F17*F2*F2*F5*G[1707] + C[5]*F17*F2*F3*F3*G[1898] + C[5]*F17*F2*F3*F4*G[1899] + C[5]*F17*F2*F3*F5*G[1896] + C[5]*F17*F2*F4*F4*G[1900] + C[5]*F17*F2*F4*F5*G[1897] + C[5]*F17*F2*F5*F5*G[1704] + C[5]*F2*F2*F2*F6*G[1704] + C[5]*F2*F2*F2*F7*G[1804] + C[5]*F2*F2*F2*F8*G[1889] + C[5]*F2*F2*F3*F6*G[1896] + C[5]*F2*F2*F3*F7*G[1884] + C[5]*F2*F2*F3*F8*G[1890] + C[5]*F2*F2*F4*F6*G[1897] + C[5]*F2*F2*F4*F7*G[1885] + C[5]*F2*F2*F4*F8*G[1891] + C[5]*F2*F2*F5*F6*G[1707] + C[5]*F2*F2*F5*F7*G[1807] + C[5]*F2*F2*F5*F8*G[1892] + C[5]*F2*F3*F3*F6*G[1898] + C[5]*F2*F3*F3*F7*G[1886] + C[5]*F2*F3*F3*F8*G[1893] + C[5]*F2*F3*F4*F6*G[1899] + C[5]*F2*F3*F4*F7*G[1887] + C[5]*F2*F3*F4*F8*G[1894] + C[5]*F2*F3*F5*F6*G[1896] + C[5]*F2*F3*F5*F7*G[1884] + C[5]*F2*F3*F5*F8*G[1890] + C[5]*F2*F4*F4*F6*G[1900] + C[5]*F2*F4*F4*F7*G[1888] + C[5]*F2*F4*F4*F8*G[1895] + C[5]*F2*F4*F5*F6*G[1897] + C[5]*F2*F4*F5*F7*G[1885] + C[5]*F2*F4*F5*F8*G[1891] + C[5]*F2*F5*F5*F6*G[1704] + C[5]*F2*F5*F5*F7*G[1804] + C[5]*F2*F5*F5*F8*G[1889] + F0*F0*F18*G[1096] + F0*F0*F19*G[1102] + F0*F0*G[1580] + F0*F1*F18*G[1581] + F0*F1*F19*G[1582] + F0*F1*G[1583] + F0*F18*F2*G[1584] + F0*F18*F3*G[1097] + F0*F18*F4*G[719] + F0*F18*F5*G[241] + F0*F19*F2*G[1585] + F0*F19*F3*G[1103] + F0*F19*F4*G[732] + F0*F19*F5*G[257] + F0*F2*G[1586] + F0*F3*G[1587] + F0*F4*G[1588] + F0*F5*G[1589] + F1*F1*F18*G[724] + F1*F1*F19*G[731] + F1*F1*G[1590] + F1*F18*F2*G[1591] + F1*F18*F3*G[719] + F1*F18*F4*G[725] + F1*F18*F5*G[247] + F1*F19*F2*G[1592] + F1*F19*F3*G[732] + F1*F19*F4*G[733] + F1*F19*F5*G[258] + F1*F2*G[1593] + F1*F3*G[1588] + F1*F4*G[1594] + F1*F5*G[1595] + F18*F2*F2*G[252] + F18*F2*F3*G[241] + F18*F2*F4*G[247] + F18*F2*F5*G[256] + F18*F3*F3*G[1099] + F18*F3*F4*G[732] + F18*F3*F5*G[257] + F18*F4*F4*G[727] + F18*F4*F5*G[258] + F18*F5*F5*G[262] + F19*F2*F2*G[255] + F19*F2*F3*G[257] + F19*F2*F4*G[258] + F19*F2*F5*G[259] + F19*F3*F3*G[1104] + F19*F3*F4*G[1596] + F19*F3*F5*G[1597] + F19*F4*F4*G[735] + F19*F4*F5*G[1598] + F19*F5*F5*G[265] + F2*F2*G[1599] + F2*F3*G[1589] + F2*F4*G[1595] + F2*F5*G[1600] + F3*F3*G[1601] + F3*F4*G[1602] + F3*F5*G[1603] + F4*F4*G[1604] + F4*F5*G[1605] + F5*F5*G[1606])/(1.0 + 0.01*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20)) + 0.01*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.01*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.02*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.02*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.02*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.2*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20)) + 0.2*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.2*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))) + (C[1]*F0*F0*F0*F18*G[988] + C[1]*F0*F0*F0*F19*G[988] + C[1]*F0*F0*F0*G[1448] + C[1]*F0*F0*F1*F18*G[1449] + C[1]*F0*F0*F1*F19*G[1449] + C[1]*F0*F0*F1*G[1450] + C[1]*F0*F0*F18*F2*G[1451] + C[1]*F0*F0*F18*F3*G[989] + C[1]*F0*F0*F18*F4*G[575] + C[1]*F0*F0*F18*F5*G[61] + C[1]*F0*F0*F19*F2*G[1451] + C[1]*F0*F0*F19*F3*G[989] + C[1]*F0*F0*F19*F4*G[575] + C[1]*F0*F0*F19*F5*G[61] + C[1]*F0*F0*F2*G[1452] + C[1]*F0*F0*F3*G[1453] + C[1]*F0*F0*F4*G[1454] + C[1]*F0*F0*F5*G[1455] + C[1]*F0*F1*F1*F18*G[1456] + C[1]*F0*F1*F1*F19*G[1456] + C[1]*F0*F1*F1*G[1457] + C[1]*F0*F1*F18*F2*G[1458] + C[1]*F0*F1*F18*F3*G[993] + C[1]*F0*F1*F18*F4*G[579] + C[1]*F0*F1*F18*F5*G[65] + C[1]*F0*F1*F19*F2*G[1458] + C[1]*F0*F1*F19*F3*G[993] + C[1]*F0*F1*F19*F4*G[579] + C[1]*F0*F1*F19*F5*G[65] + C[1]*F0*F1*F2*G[1459] + C[1]*F0*F1*F3*G[1460] + C[1]*F0*F1*F4*G[1461] + C[1]*F0*F1*F5*G[1462] + C[1]*F0*F18*F2*F2*G[1463] + C[1]*F0*F18*F2*F3*G[998] + C[1]*F0*F18*F2*F4*G[585] + C[1]*F0*F18*F2*F5*G[72] + C[1]*F0*F18*F3*F3*G[988] + C[1]*F0*F18*F3*F4*G[575] + C[1]*F0*F18*F3*F5*G[61] + C[1]*F0*F18*F4*F4*G[583] + C[1]*F0*F18*F4*F5*G[73] + C[1]*F0*F18*F5*F5*G[70] + C[1]*F0*F19*F2*F2*G[1463] + C[1]*F0*F19*F2*F3*G[998] + C[1]*F0*F19*F2*F4*G[585] + C[1]*F0*F19*F2*F5*G[72] + C[1]*F0*F19*F3*F3*G[988] + C[1]*F0*F19*F3*F4*G[575] + C[1]*F0*F19*F3*F5*G[61] + C[1]*F0*F19*F4*F4*G[583] + C[1]*F0*F19*F4*F5*G[73] + C[1]*F0*F19*F5*F5*G[70] + C[1]*F0*F2*F2*G[1464] + C[1]*F0*F2*F3*G[1465] + C[1]*F0*F2*F4*G[1466] + C[1]*F0*F2*F5*G[1467] + C[1]*F0*F3*F3*G[1448] + C[1]*F0*F3*F4*G[1454] + C[1]*F0*F3*F5*G[1455] + C[1]*F0*F4*F4*G[1468] + C[1]*F0*F4*F5*G[1469] + C[1]*F0*F5*F5*G[1470] + C[1]*F1*F1*F1*F18*G[594] + C[1]*F1*F1*F1*F19*G[594] + C[1]*F1*F1*F1*G[1471] + C[1]*F1*F1*F18*F2*G[1472] + C[1]*F1*F1*F18*F3*G[602] + C[1]*F1*F1*F18*F4*G[595] + C[1]*F1*F1*F18*F5*G[85] + C[1]*F1*F1*F19*F2*G[1472] + C[1]*F1*F1*F19*F3*G[602] + C[1]*F1*F1*F19*F4*G[595] + C[1]*F1*F1*F19*F5*G[85] + C[1]*F1*F1*F2*G[1473] + C[1]*F1*F1*F3*G[1474] + C[1]*F1*F1*F4*G[1475] + C[1]*F1*F1*F5*G[1476] + C[1]*F1*F18*F2*F2*G[1477] + C[1]*F1*F18*F2*F3*G[1007] + C[1]*F1*F18*F2*F4*G[601] + C[1]*F1*F18*F2*F5*G[92] + C[1]*F1*F18*F3*F3*G[1005] + C[1]*F1*F18*F3*F4*G[602] + C[1]*F1*F18*F3*F5*G[93] + C[1]*F1*F18*F4*F4*G[594] + C[1]*F1*F18*F4*F5*G[85] + C[1]*F1*F18*F5*F5*G[90] + C[1]*F1*F19*F2*F2*G[1477] + C[1]*F1*F19*F2*F3*G[1007] + C[1]*F1*F19*F2*F4*G[601] + C[1]*F1*F19*F2*F5*G[92] + C[1]*F1*F19*F3*F3*G[1005] + C[1]*F1*F19*F3*F4*G[602] + C[1]*F1*F19*F3*F5*G[93] + C[1]*F1*F19*F4*F4*G[594] + C[1]*F1*F19*F4*F5*G[85] + C[1]*F1*F19*F5*F5*G[90] + C[1]*F1*F2*F2*G[1478] + C[1]*F1*F2*F3*G[1479] + C[1]*F1*F2*F4*G[1480] + C[1]*F1*F2*F5*G[1481] + C[1]*F1*F3*F3*G[1482] + C[1]*F1*F3*F4*G[1474] + C[1]*F1*F3*F5*G[1483] + C[1]*F1*F4*F4*G[1471] + C[1]*F1*F4*F5*G[1476] + C[1]*F1*F5*F5*G[1484] + C[1]*F18*F2*F2*F2*G[104] + C[1]*F18*F2*F2*F3*G[109] + C[1]*F18*F2*F2*F4*G[110] + C[1]*F18*F2*F2*F5*G[108] + C[1]*F18*F2*F3*F3*G[1016] + C[1]*F18*F2*F3*F4*G[613] + C[1]*F18*F2*F3*F5*G[109] + C[1]*F18*F2*F4*F4*G[611] + C[1]*F18*F2*F4*F5*G[110] + C[1]*F18*F2*F5*F5*G[104] + C[1]*F19*F2*F2*F2*G[104] + C[1]*F19*F2*F2*F3*G[109] + C[1]*F19*F2*F2*F4*G[110] + C[1]*F19*F2*F2*F5*G[108] + C[1]*F19*F2*F3*F3*G[1016] + C[1]*F19*F2*F3*F4*G[613] + C[1]*F19*F2*F3*F5*G[109] + C[1]*F19*F2*F4*F4*G[611] + C[1]*F19*F2*F4*F5*G[110] + C[1]*F19*F2*F5*F5*G[104] + C[1]*F2*F2*F2*G[1485] + C[1]*F2*F2*F3*G[1486] + C[1]*F2*F2*F4*G[1487] + C[1]*F2*F2*F5*G[1488] + C[1]*F2*F3*F3*G[1489] + C[1]*F2*F3*F4*G[1490] + C[1]*F2*F3*F5*G[1486] + C[1]*F2*F4*F4*G[1491] + C[1]*F2*F4*F5*G[1487] + C[1]*F2*F5*F5*G[1485] + C[3]*F0*F0*F0*F18*G[1024] + C[3]*F0*F0*F0*F19*G[1024] + C[3]*F0*F0*F0*G[1492] + C[3]*F0*F0*F1*F18*G[1493] + C[3]*F0*F0*F1*F19*G[1493] + C[3]*F0*F0*F1*G[1494] + C[3]*F0*F0*F18*F2*G[1495] + C[3]*F0*F0*F18*F3*G[1025] + C[3]*F0*F0*F18*F4*G[623] + C[3]*F0*F0*F18*F5*G[121] + C[3]*F0*F0*F19*F2*G[1495] + C[3]*F0*F0*F19*F3*G[1025] + C[3]*F0*F0*F19*F4*G[623] + C[3]*F0*F0*F19*F5*G[121] + C[3]*F0*F0*F2*G[1496] + C[3]*F0*F0*F3*G[1497] + C[3]*F0*F0*F4*G[1498] + C[3]*F0*F0*F5*G[1499] + C[3]*F0*F1*F1*F18*G[1500] + C[3]*F0*F1*F1*F19*G[1500] + C[3]*F0*F1*F1*G[1501] + C[3]*F0*F1*F18*F2*G[1502] + C[3]*F0*F1*F18*F3*G[1029] + C[3]*F0*F1*F18*F4*G[627] + C[3]*F0*F1*F18*F5*G[125] + C[3]*F0*F1*F19*F2*G[1502] + C[3]*F0*F1*F19*F3*G[1029] + C[3]*F0*F1*F19*F4*G[627] + C[3]*F0*F1*F19*F5*G[125] + C[3]*F0*F1*F2*G[1503] + C[3]*F0*F1*F3*G[1504] + C[3]*F0*F1*F4*G[1505] + C[3]*F0*F1*F5*G[1506] + C[3]*F0*F18*F2*F2*G[1507] + C[3]*F0*F18*F2*F3*G[1034] + C[3]*F0*F18*F2*F4*G[633] + C[3]*F0*F18*F2*F5*G[132] + C[3]*F0*F18*F3*F3*G[1024] + C[3]*F0*F18*F3*F4*G[623] + C[3]*F0*F18*F3*F5*G[121] + C[3]*F0*F18*F4*F4*G[631] + C[3]*F0*F18*F4*F5*G[133] + C[3]*F0*F18*F5*F5*G[130] + C[3]*F0*F19*F2*F2*G[1507] + C[3]*F0*F19*F2*F3*G[1034] + C[3]*F0*F19*F2*F4*G[633] + C[3]*F0*F19*F2*F5*G[132] + C[3]*F0*F19*F3*F3*G[1024] + C[3]*F0*F19*F3*F4*G[623] + C[3]*F0*F19*F3*F5*G[121] + C[3]*F0*F19*F4*F4*G[631] + C[3]*F0*F19*F4*F5*G[133] + C[3]*F0*F19*F5*F5*G[130] + C[3]*F0*F2*F2*G[1508] + C[3]*F0*F2*F3*G[1509] + C[3]*F0*F2*F4*G[1510] + C[3]*F0*F2*F5*G[1511] + C[3]*F0*F3*F3*G[1492] + C[3]*F0*F3*F4*G[1498] + C[3]*F0*F3*F5*G[1499] + C[3]*F0*F4*F4*G[1512] + C[3]*F0*F4*F5*G[1513] + C[3]*F0*F5*F5*G[1514] + C[3]*F1*F1*F1*F18*G[642] + C[3]*F1*F1*F1*F19*G[642] + C[3]*F1*F1*F1*G[1515] + C[3]*F1*F1*F18*F2*G[1516] + C[3]*F1*F1*F18*F3*G[650] + C[3]*F1*F1*F18*F4*G[643] + C[3]*F1*F1*F18*F5*G[145] + C[3]*F1*F1*F19*F2*G[1516] + C[3]*F1*F1*F19*F3*G[650] + C[3]*F1*F1*F19*F4*G[643] + C[3]*F1*F1*F19*F5*G[145] + C[3]*F1*F1*F2*G[1517] + C[3]*F1*F1*F3*G[1518] + C[3]*F1*F1*F4*G[1519] + C[3]*F1*F1*F5*G[1520] + C[3]*F1*F18*F2*F2*G[1521] + C[3]*F1*F18*F2*F3*G[1043] + C[3]*F1*F18*F2*F4*G[649] + C[3]*F1*F18*F2*F5*G[152] + C[3]*F1*F18*F3*F3*G[1041] + C[3]*F1*F18*F3*F4*G[650] + C[3]*F1*F18*F3*F5*G[153] + C[3]*F1*F18*F4*F4*G[642] + C[3]*F1*F18*F4*F5*G[145] + C[3]*F1*F18*F5*F5*G[150] + C[3]*F1*F19*F2*F2*G[1521] + C[3]*F1*F19*F2*F3*G[1043] + C[3]*F1*F19*F2*F4*G[649] + C[3]*F1*F19*F2*F5*G[152] + C[3]*F1*F19*F3*F3*G[1041] + C[3]*F1*F19*F3*F4*G[650] + C[3]*F1*F19*F3*F5*G[153] + C[3]*F1*F19*F4*F4*G[642] + C[3]*F1*F19*F4*F5*G[145] + C[3]*F1*F19*F5*F5*G[150] + C[3]*F1*F2*F2*G[1522] + C[3]*F1*F2*F3*G[1523] + C[3]*F1*F2*F4*G[1524] + C[3]*F1*F2*F5*G[1525] + C[3]*F1*F3*F3*G[1526] + C[3]*F1*F3*F4*G[1518] + C[3]*F1*F3*F5*G[1527] + C[3]*F1*F4*F4*G[1515] + C[3]*F1*F4*F5*G[1520] + C[3]*F1*F5*F5*G[1528] + C[3]*F18*F2*F2*F2*G[164] + C[3]*F18*F2*F2*F3*G[169] + C[3]*F18*F2*F2*F4*G[170] + C[3]*F18*F2*F2*F5*G[168] + C[3]*F18*F2*F3*F3*G[1052] + C[3]*F18*F2*F3*F4*G[661] + C[3]*F18*F2*F3*F5*G[169] + C[3]*F18*F2*F4*F4*G[659] + C[3]*F18*F2*F4*F5*G[170] + C[3]*F18*F2*F5*F5*G[164] + C[3]*F19*F2*F2*F2*G[164] + C[3]*F19*F2*F2*F3*G[169] + C[3]*F19*F2*F2*F4*G[170] + C[3]*F19*F2*F2*F5*G[168] + C[3]*F19*F2*F3*F3*G[1052] + C[3]*F19*F2*F3*F4*G[661] + C[3]*F19*F2*F3*F5*G[169] + C[3]*F19*F2*F4*F4*G[659] + C[3]*F19*F2*F4*F5*G[170] + C[3]*F19*F2*F5*F5*G[164] + C[3]*F2*F2*F2*G[1529] + C[3]*F2*F2*F3*G[1530] + C[3]*F2*F2*F4*G[1531] + C[3]*F2*F2*F5*G[1532] + C[3]*F2*F3*F3*G[1533] + C[3]*F2*F3*F4*G[1534] + C[3]*F2*F3*F5*G[1530] + C[3]*F2*F4*F4*G[1535] + C[3]*F2*F4*F5*G[1531] + C[3]*F2*F5*F5*G[1529] + C[5]*F0*F0*F0*F18*G[1060] + C[5]*F0*F0*F0*F19*G[1060] + C[5]*F0*F0*F0*G[1536] + C[5]*F0*F0*F1*F18*G[1537] + C[5]*F0*F0*F1*F19*G[1537] + C[5]*F0*F0*F1*G[1538] + C[5]*F0*F0*F18*F2*G[1539] + C[5]*F0*F0*F18*F3*G[1061] + C[5]*F0*F0*F18*F4*G[671] + C[5]*F0*F0*F18*F5*G[181] + C[5]*F0*F0*F19*F2*G[1539] + C[5]*F0*F0*F19*F3*G[1061] + C[5]*F0*F0*F19*F4*G[671] + C[5]*F0*F0*F19*F5*G[181] + C[5]*F0*F0*F2*G[1540] + C[5]*F0*F0*F3*G[1541] + C[5]*F0*F0*F4*G[1542] + C[5]*F0*F0*F5*G[1543] + C[5]*F0*F1*F1*F18*G[1544] + C[5]*F0*F1*F1*F19*G[1544] + C[5]*F0*F1*F1*G[1545] + C[5]*F0*F1*F18*F2*G[1546] + C[5]*F0*F1*F18*F3*G[1065] + C[5]*F0*F1*F18*F4*G[675] + C[5]*F0*F1*F18*F5*G[185] + C[5]*F0*F1*F19*F2*G[1546] + C[5]*F0*F1*F19*F3*G[1065] + C[5]*F0*F1*F19*F4*G[675] + C[5]*F0*F1*F19*F5*G[185] + C[5]*F0*F1*F2*G[1547] + C[5]*F0*F1*F3*G[1548] + C[5]*F0*F1*F4*G[1549] + C[5]*F0*F1*F5*G[1550] + C[5]*F0*F18*F2*F2*G[1551] + C[5]*F0*F18*F2*F3*G[1070] + C[5]*F0*F18*F2*F4*G[681] + C[5]*F0*F18*F2*F5*G[192] + C[5]*F0*F18*F3*F3*G[1060] + C[5]*F0*F18*F3*F4*G[671] + C[5]*F0*F18*F3*F5*G[181] + C[5]*F0*F18*F4*F4*G[679] + C[5]*F0*F18*F4*F5*G[193] + C[5]*F0*F18*F5*F5*G[190] + C[5]*F0*F19*F2*F2*G[1551] + C[5]*F0*F19*F2*F3*G[1070] + C[5]*F0*F19*F2*F4*G[681] + C[5]*F0*F19*F2*F5*G[192] + C[5]*F0*F19*F3*F3*G[1060] + C[5]*F0*F19*F3*F4*G[671] + C[5]*F0*F19*F3*F5*G[181] + C[5]*F0*F19*F4*F4*G[679] + C[5]*F0*F19*F4*F5*G[193] + C[5]*F0*F19*F5*F5*G[190] + C[5]*F0*F2*F2*G[1552] + C[5]*F0*F2*F3*G[1553] + C[5]*F0*F2*F4*G[1554] + C[5]*F0*F2*F5*G[1555] + C[5]*F0*F3*F3*G[1536] + C[5]*F0*F3*F4*G[1542] + C[5]*F0*F3*F5*G[1543] + C[5]*F0*F4*F4*G[1556] + C[5]*F0*F4*F5*G[1557] + C[5]*F0*F5*F5*G[1558] + C[5]*F1*F1*F1*F18*G[690] + C[5]*F1*F1*F1*F19*G[690] + C[5]*F1*F1*F1*G[1559] + C[5]*F1*F1*F18*F2*G[1560] + C[5]*F1*F1*F18*F3*G[698] + C[5]*F1*F1*F18*F4*G[691] + C[5]*F1*F1*F18*F5*G[205] + C[5]*F1*F1*F19*F2*G[1560] + C[5]*F1*F1*F19*F3*G[698] + C[5]*F1*F1*F19*F4*G[691] + C[5]*F1*F1*F19*F5*G[205] + C[5]*F1*F1*F2*G[1561] + C[5]*F1*F1*F3*G[1562] + C[5]*F1*F1*F4*G[1563] + C[5]*F1*F1*F5*G[1564] + C[5]*F1*F18*F2*F2*G[1565] + C[5]*F1*F18*F2*F3*G[1079] + C[5]*F1*F18*F2*F4*G[697] + C[5]*F1*F18*F2*F5*G[212] + C[5]*F1*F18*F3*F3*G[1077] + C[5]*F1*F18*F3*F4*G[698] + C[5]*F1*F18*F3*F5*G[213] + C[5]*F1*F18*F4*F4*G[690] + C[5]*F1*F18*F4*F5*G[205] + C[5]*F1*F18*F5*F5*G[210] + C[5]*F1*F19*F2*F2*G[1565] + C[5]*F1*F19*F2*F3*G[1079] + C[5]*F1*F19*F2*F4*G[697] + C[5]*F1*F19*F2*F5*G[212] + C[5]*F1*F19*F3*F3*G[1077] + C[5]*F1*F19*F3*F4*G[698] + C[5]*F1*F19*F3*F5*G[213] + C[5]*F1*F19*F4*F4*G[690] + C[5]*F1*F19*F4*F5*G[205] + C[5]*F1*F19*F5*F5*G[210] + C[5]*F1*F2*F2*G[1566] + C[5]*F1*F2*F3*G[1567] + C[5]*F1*F2*F4*G[1568] + C[5]*F1*F2*F5*G[1569] + C[5]*F1*F3*F3*G[1570] + C[5]*F1*F3*F4*G[1562] + C[5]*F1*F3*F5*G[1571] + C[5]*F1*F4*F4*G[1559] + C[5]*F1*F4*F5*G[1564] + C[5]*F1*F5*F5*G[1572] + C[5]*F18*F2*F2*F2*G[224] + C[5]*F18*F2*F2*F3*G[229] + C[5]*F18*F2*F2*F4*G[230] + C[5]*F18*F2*F2*F5*G[228] + C[5]*F18*F2*F3*F3*G[1088] + C[5]*F18*F2*F3*F4*G[709] + C[5]*F18*F2*F3*F5*G[229] + C[5]*F18*F2*F4*F4*G[707] + C[5]*F18*F2*F4*F5*G[230] + C[5]*F18*F2*F5*F5*G[224] + C[5]*F19*F2*F2*F2*G[224] + C[5]*F19*F2*F2*F3*G[229] + C[5]*F19*F2*F2*F4*G[230] + C[5]*F19*F2*F2*F5*G[228] + C[5]*F19*F2*F3*F3*G[1088] + C[5]*F19*F2*F3*F4*G[709] + C[5]*F19*F2*F3*F5*G[229] + C[5]*F19*F2*F4*F4*G[707] + C[5]*F19*F2*F4*F5*G[230] + C[5]*F19*F2*F5*F5*G[224] + C[5]*F2*F2*F2*G[1573] + C[5]*F2*F2*F3*G[1574] + C[5]*F2*F2*F4*G[1575] + C[5]*F2*F2*F5*G[1576] + C[5]*F2*F3*F3*G[1577] + C[5]*F2*F3*F4*G[1578] + C[5]*F2*F3*F5*G[1574] + C[5]*F2*F4*F4*G[1579] + C[5]*F2*F4*F5*G[1575] + C[5]*F2*F5*F5*G[1573])/(1.0 + 0.001*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20)) + 0.001*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.001*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.003*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.003*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.003*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.003*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.003*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.003*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.006*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.03*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20)) + 0.03*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.03*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.06*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.06*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.06*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21))*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22)) + 0.3*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20)) + 0.3*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.3*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))) + (F0*F0*F15*G[1901] + F0*F0*F16*G[1902] + F0*F0*F17*G[1903] + F0*F0*F6*G[1903] + F0*F0*F7*G[1901] + F0*F0*F8*G[1902] + F0*F1*F15*G[1904] + F0*F1*F16*G[1905] + F0*F1*F17*G[1906] + F0*F1*F6*G[1906] + F0*F1*F7*G[1904] + F0*F1*F8*G[1905] + F0*F15*F2*G[1907] + F0*F15*F3*G[1908] + F0*F15*F4*G[1909] + F0*F15*F5*G[1910] + F0*F16*F2*G[1911] + F0*F16*F3*G[1912] + F0*F16*F4*G[1913] + F0*F16*F5*G[1914] + F0*F17*F2*G[1915] + F0*F17*F3*G[1916] + F0*F17*F4*G[1917] + F0*F17*F5*G[1918] + F0*F2*F6*G[1915] + F0*F2*F7*G[1907] + F0*F2*F8*G[1911] + F0*F3*F6*G[1916] + F0*F3*F7*G[1908] + F0*F3*F8*G[1912] + F0*F4*F6*G[1917] + F0*F4*F7*G[1909] + F0*F4*F8*G[1913] + F0*F5*F6*G[1918] + F0*F5*F7*G[1910] + F0*F5*F8*G[1914] + F1*F1*F15*G[1919] + F1*F1*F16*G[1920] + F1*F1*F17*G[1921] + F1*F1*F6*G[1921] + F1*F1*F7*G[1919] + F1*F1*F8*G[1920] + F1*F15*F2*G[1922] + F1*F15*F3*G[1909] + F1*F15*F4*G[1923] + F1*F15*F5*G[1924] + F1*F16*F2*G[1925] + F1*F16*F3*G[1913] + F1*F16*F4*G[1926] + F1*F16*F5*G[1927] + F1*F17*F2*G[1928] + F1*F17*F3*G[1917] + F1*F17*F4*G[1929] + F1*F17*F5*G[1930] + F1*F2*F6*G[1928] + F1*F2*F7*G[1922] + F1*F2*F8*G[1925] + F1*F3*F6*G[1917] + F1*F3*F7*G[1909] + F1*F3*F8*G[1913] + F1*F4*F6*G[1929] + F1*F4*F7*G[1923] + F1*F4*F8*G[1926] + F1*F5*F6*G[1930] + F1*F5*F7*G[1924] + F1*F5*F8*G[1927] + F15*F2*F2*G[1931] + F15*F2*F3*G[1910] + F15*F2*F4*G[1924] + F15*F2*F5*G[1932] + F15*F3*F3*G[1933] + F15*F3*F4*G[1934] + F15*F3*F5*G[1935] + F15*F4*F4*G[1936] + F15*F4*F5*G[1937] + F15*F5*F5*G[1938] + F16*F2*F2*G[1939] + F16*F2*F3*G[1914] + F16*F2*F4*G[1927] + F16*F2*F5*G[1940] + F16*F3*F3*G[1941] + F16*F3*F4*G[1942] + F16*F3*F5*G[1943] + F16*F4*F4*G[1944] + F16*F4*F5*G[1945] + F16*F5*F5*G[1946] + F17*F2*F2*G[1947] + F17*F2*F3*G[1918] + F17*F2*F4*G[1930] + F17*F2*F5*G[1948] + F17*F3*F3*G[1949] + F17*F3*F4*G[1950] + F17*F3*F5*G[1951] + F17*F4*F4*G[1952] + F17*F4*F5*G[1953] + F17*F5*F5*G[1954] + F2*F2*F6*G[1947] + F2*F2*F7*G[1931] + F2*F2*F8*G[1939] + F2*F3*F6*G[1918] + F2*F3*F7*G[1910] + F2*F3*F8*G[1914] + F2*F4*F6*G[1930] + F2*F4*F7*G[1924] + F2*F4*F8*G[1927] + F2*F5*F6*G[1948] + F2*F5*F7*G[1932] + F2*F5*F8*G[1940] + F3*F3*F6*G[1949] + F3*F3*F7*G[1933] + F3*F3*F8*G[1941] + F3*F4*F6*G[1950] + F3*F4*F7*G[1934] + F3*F4*F8*G[1942] + F3*F5*F6*G[1951] + F3*F5*F7*G[1935] + F3*F5*F8*G[1943] + F4*F4*F6*G[1952] + F4*F4*F7*G[1936] + F4*F4*F8*G[1944] + F4*F5*F6*G[1953] + F4*F5*F7*G[1937] + F4*F5*F8*G[1945] + F5*F5*F6*G[1954] + F5*F5*F7*G[1938] + F5*F5*F8*G[1946])/(1.0 + 0.1*std::abs(0.5*(F0*K_00 + F1*K_10 + F2*K_20 + F3*K_00 + F4*K_10 + F5*K_20)) + 0.1*std::abs(0.5*(F0*K_01 + F1*K_11 + F2*K_21 + F3*K_01 + F4*K_11 + F5*K_21)) + 0.1*std::abs(0.5*(F0*K_02 + F1*K_12 + F2*K_22 + F3*K_02 + F4*K_12 + F5*K_22))));
      
      
      // Number of operations for primary indices: 12
      for (unsigned int j = 0; j < 2; j++)
      {
        // Number of operations to compute entry: 2
        A[nzc0[j]] += FE0_D001[ip][j]*I[0];
        // Number of operations to compute entry: 2
        A[nzc1[j]] += FE0_D001[ip][j]*I[1];
        // Number of operations to compute entry: 2
        A[nzc2[j]] += FE0_D001[ip][j]*I[2];
      }// end loop over 'j'
      
      // Number of operations for primary indices: 8
      for (unsigned int j = 0; j < 4; j++)
      {
        // Number of operations to compute entry: 2
        A[j] += FE0[ip][j]*I[3];
      }// end loop over 'j'
    }// end loop over 'ip'
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Tabulate the tensor for the contribution from a local cell
/// using the specified reference cell quadrature points/weights
void nsedensity3d_cell_integral_1_0::tabulate_tensor(double* A,
                     const double * const * w,
                     const ufc::cell& c,
                     unsigned int num_quadrature_points,
                     const double * const * quadrature_points,
                     const double* quadrature_weights) const
{
    throw std::runtime_error("Quadrature version of tabulate_tensor not yet implemented (introduced in UFC 2.0).");
}
#endif

/// Constructor
nsedensity3d_form_0::nsedensity3d_form_0() : ufc::form()
{
    // Do nothing
}

/// Destructor
nsedensity3d_form_0::~nsedensity3d_form_0()
{
    // Do nothing
}

/// Return a string identifying the form
const char* nsedensity3d_form_0::signature() const
{
    return "Form([Integral(Sum(Product(IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(0),), {Index(0): 3}))), MultiIndex((Index(0),), {Index(0): 3})), MultiIndex((Index(1),), {Index(1): 3})), Indexed(ComponentTensor(SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0), MultiIndex((Index(2),), {Index(2): 3})), MultiIndex((Index(2),), {Index(2): 3})), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), Product(Sum(Abs(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(1),), {}))))), Sum(Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 6), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 2), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 2), FloatValue(0.5, (), (), {})))), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 10), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 5), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 2), IntValue(2, (), (), {}))))))), Sum(Product(Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 4), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 2), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 2), FloatValue(0.5, (), (), {})))), Sum(IndexSum(Product(Indexed(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Product(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0), Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(3),), {Index(3): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7), MultiIndex((Index(3),), {Index(3): 3}))), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(5),), {Index(5): 3})), MultiIndex((Index(5), Index(3)), {Index(5): 3, Index(3): 3})), MultiIndex((Index(6), Index(7)), {Index(7): 3, Index(6): 3}))), MultiIndex((Index(6), Index(7)), {Index(7): 3, Index(6): 3})), MultiIndex((Index(8), Index(9)), {Index(8): 3, Index(9): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(9),), {Index(9): 3}))), MultiIndex((Index(9),), {Index(9): 3})), MultiIndex((Index(8),), {Index(8): 3})), MultiIndex((Index(10),), {Index(10): 3})), Indexed(Sum(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(11),), {Index(11): 3})), Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(12),), {Index(12): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7), MultiIndex((Index(12),), {Index(12): 3}))), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(13),), {Index(13): 3})), MultiIndex((Index(13), Index(12)), {Index(13): 3, Index(12): 3})), MultiIndex((Index(14), Index(15)), {Index(14): 3, Index(15): 3})), Product(FloatValue(0.5, (), (), {}), Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1))), MultiIndex((Index(14), Index(15)), {Index(14): 3, Index(15): 3})), MultiIndex((Index(16), Index(11)), {Index(11): 3, Index(16): 3}))), MultiIndex((Index(11),), {Index(11): 3})), MultiIndex((Index(16),), {Index(16): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(ComponentTensor(Product(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9), MultiIndex((Index(17),), {Index(17): 3})), Product(FloatValue(0.5, (), (), {}), Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1))), MultiIndex((Index(17),), {Index(17): 3})), MultiIndex((Index(18),), {Index(18): 3}))), MultiIndex((Index(18),), {Index(18): 3}))), MultiIndex((Index(10),), {Index(10): 3}))), MultiIndex((Index(10),), {Index(10): 3})), Sum(Product(IndexSum(Product(Indexed(ComponentTensor(Sum(Sum(Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(Product(Product(IntValue(-1, (), (), {}), Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0)), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(22),), {Index(22): 3}))))), Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1))), Product(IntValue(-1, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0), MultiIndex((Index(22),), {Index(22): 3})))))), Product(Division(Product(IntValue(-1, (), (), {}), Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3}))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3}))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3}))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(Product(Product(IntValue(-1, (), (), {}), Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0)), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(22),), {Index(22): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(22),), {Index(22): 3})))))), Product(Product(IntValue(-1, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0), MultiIndex((Index(22),), {Index(22): 3}))), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8))))))))), Sum(Product(Division(Product(IntValue(-1, (), (), {}), Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(Product(IntValue(-1, (), (), {}), Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0)), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1))))), Product(Division(Sum(Product(IntValue(-1, (), (), {}), Product(Division(Product(IntValue(-1, (), (), {}), Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3}))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3}))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3}))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(IntValue(-1, (), (), {}), Sum(Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(19),), {Index(19): 3}))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(20),), {Index(20): 3}))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(21),), {Index(21): 3}))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {}))))))), Product(Division(Product(IntValue(-1, (), (), {}), Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3}))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3}))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3}))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})))))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(Product(IntValue(-1, (), (), {}), Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0)), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8))))))))), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(23),), {Index(23): 3})), Indexed(ListTensor(FloatValue(1, (), (), {}), FloatValue(1, (), (), {}), FloatValue(1, (), (), {})), MultiIndex((Index(23),), {Index(23): 3}))), MultiIndex((Index(23),), {Index(23): 3})), Sum(IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(24),), {Index(24): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(25),), {Index(25): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(25),), {Index(25): 3})))), MultiIndex((Index(25),), {Index(25): 3})), MultiIndex((Index(24),), {Index(24): 3}))), MultiIndex((Index(24),), {Index(24): 3})), IndexSum(Product(Indexed(ComponentTensor(Sum(Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(29),), {Index(29): 3})))))), Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(29),), {Index(29): 3}))))), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))))))), Product(Division(Product(IntValue(-1, (), (), {}), Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))))))), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(30),), {Index(30): 3})), Indexed(ListTensor(FloatValue(1, (), (), {}), FloatValue(1, (), (), {}), FloatValue(1, (), (), {})), MultiIndex((Index(30),), {Index(30): 3}))), MultiIndex((Index(30),), {Index(30): 3})))), Product(Sum(IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(24),), {Index(24): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(25),), {Index(25): 3}))), MultiIndex((Index(25),), {Index(25): 3})), MultiIndex((Index(24),), {Index(24): 3}))), MultiIndex((Index(24),), {Index(24): 3})), IndexSum(Product(Indexed(ComponentTensor(Sum(Sum(Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(Sum(Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1))), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(29),), {Index(29): 3})))))), Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})))), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))))), Sum(Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1))), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(29),), {Index(29): 3})))))), Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})))), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8))))))))), Product(Division(Product(IntValue(-1, (), (), {}), Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3}))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3}))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3}))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(29),), {Index(29): 3})))))), Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(29),), {Index(29): 3}))))), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8))))))))), Sum(Product(Division(Product(IntValue(-1, (), (), {}), Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1))), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8))))), Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1))), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))))))), Product(Division(Sum(Product(IntValue(-1, (), (), {}), Product(Division(Product(IntValue(-1, (), (), {}), Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3}))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3}))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3}))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(IntValue(-1, (), (), {}), Sum(Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(26),), {Index(26): 3}))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(27),), {Index(27): 3}))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(28),), {Index(28): 3}))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {}))))))), Product(Division(Product(IntValue(-1, (), (), {}), Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3}))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3}))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3}))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})))))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(26),), {Index(26): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(26),), {Index(26): 3})))), MultiIndex((Index(26),), {Index(26): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8))))))))), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((Index(30),), {Index(30): 3})), Indexed(ListTensor(FloatValue(1, (), (), {}), FloatValue(1, (), (), {}), FloatValue(1, (), (), {})), MultiIndex((Index(30),), {Index(30): 3}))), MultiIndex((Index(30),), {Index(30): 3}))), Sum(IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(31),), {Index(31): 3})), Indexed(ComponentTensor(SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0), MultiIndex((Index(32),), {Index(32): 3})), MultiIndex((Index(32),), {Index(32): 3})), MultiIndex((Index(31),), {Index(31): 3}))), MultiIndex((Index(31),), {Index(31): 3})), IndexSum(Product(Indexed(ComponentTensor(Sum(Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(Product(Product(IntValue(-1, (), (), {}), Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0)), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(22),), {Index(22): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(22),), {Index(22): 3})))))), Product(Product(IntValue(-1, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0), MultiIndex((Index(22),), {Index(22): 3}))), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))))))), Product(Division(Product(IntValue(-1, (), (), {}), Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(19),), {Index(19): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(19),), {Index(19): 3})))), MultiIndex((Index(19),), {Index(19): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(Product(IntValue(-1, (), (), {}), Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0)), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))))))), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(23),), {Index(23): 3})), Indexed(ListTensor(FloatValue(1, (), (), {}), FloatValue(1, (), (), {}), FloatValue(1, (), (), {})), MultiIndex((Index(23),), {Index(23): 3}))), MultiIndex((Index(23),), {Index(23): 3}))))))), Sum(Product(IntValue(-1, (), (), {}), Product(IndexSum(Product(Indexed(ComponentTensor(SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0), MultiIndex((Index(33),), {Index(33): 3})), MultiIndex((Index(33),), {Index(33): 3})), MultiIndex((Index(34),), {Index(34): 3})), Indexed(ListTensor(FloatValue(1, (), (), {}), FloatValue(1, (), (), {}), FloatValue(1, (), (), {})), MultiIndex((Index(34),), {Index(34): 3}))), MultiIndex((Index(34),), {Index(34): 3})), Sum(Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(35),), {Index(35): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(35),), {Index(35): 3})))), MultiIndex((Index(35),), {Index(35): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(36),), {Index(36): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(36),), {Index(36): 3})))), MultiIndex((Index(36),), {Index(36): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(37),), {Index(37): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(37),), {Index(37): 3})))), MultiIndex((Index(37),), {Index(37): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1))), Sum(FloatValue(1, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))))), Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1))), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))))))), Product(Division(Product(IntValue(-1, (), (), {}), Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(35),), {Index(35): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(35),), {Index(35): 3})))), MultiIndex((Index(35),), {Index(35): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(36),), {Index(36): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(36),), {Index(36): 3})))), MultiIndex((Index(36),), {Index(36): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(37),), {Index(37): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(37),), {Index(37): 3})))), MultiIndex((Index(37),), {Index(37): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(35),), {Index(35): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(35),), {Index(35): 3})))), MultiIndex((Index(35),), {Index(35): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(35),), {Index(35): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(35),), {Index(35): 3})))), MultiIndex((Index(35),), {Index(35): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(35),), {Index(35): 3}))), MultiIndex((Index(35),), {Index(35): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(36),), {Index(36): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(36),), {Index(36): 3})))), MultiIndex((Index(36),), {Index(36): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(36),), {Index(36): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(36),), {Index(36): 3})))), MultiIndex((Index(36),), {Index(36): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(36),), {Index(36): 3}))), MultiIndex((Index(36),), {Index(36): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(37),), {Index(37): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(37),), {Index(37): 3})))), MultiIndex((Index(37),), {Index(37): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(37),), {Index(37): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(37),), {Index(37): 3})))), MultiIndex((Index(37),), {Index(37): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(37),), {Index(37): 3}))), MultiIndex((Index(37),), {Index(37): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(35),), {Index(35): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(35),), {Index(35): 3})))), MultiIndex((Index(35),), {Index(35): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(36),), {Index(36): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(36),), {Index(36): 3})))), MultiIndex((Index(36),), {Index(36): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(37),), {Index(37): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(37),), {Index(37): 3})))), MultiIndex((Index(37),), {Index(37): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8))))), Sum(FloatValue(1, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))))))))), Sum(Division(Product(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0), Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1)), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3)), Product(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0), IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(38),), {Index(38): 3}))), MultiIndex((Index(38),), {Index(38): 3})), MultiIndex((Index(39),), {Index(39): 3})), Indexed(Sum(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 11), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 12)), MultiIndex((Index(40),), {Index(40): 3}))), MultiIndex((Index(40),), {Index(40): 3})), MultiIndex((Index(41),), {Index(41): 3}))), MultiIndex((Index(41),), {Index(41): 3}))), MultiIndex((Index(39),), {Index(39): 3}))), MultiIndex((Index(39),), {Index(39): 3}))))))), Measure('cell', 0, None))])";
}

/// Return the rank of the global tensor (r)
unsigned int nsedensity3d_form_0::rank() const
{
    return 2;
}

/// Return the number of coefficients (n)
unsigned int nsedensity3d_form_0::num_coefficients() const
{
    return 13;
}
 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Return the number of cell domains
unsigned int nsedensity3d_form_0::num_cell_domains() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int nsedensity3d_form_0::num_exterior_facet_domains() const
{
    return 0;
}

/// Return the number of interior facet domains
unsigned int nsedensity3d_form_0::num_interior_facet_domains() const
{
    return 0;
}
#else

/// Return the number of cell domains
unsigned int nsedensity3d_form_0::num_cell_integrals() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int nsedensity3d_form_0::num_exterior_facet_integrals() const
{
    return 0;
}

/// Return the number of interior facet domains
unsigned int nsedensity3d_form_0::num_interior_facet_integrals() const
{
    return 0;
}

#endif

/// Create a new finite element for argument function i
ufc::finite_element* nsedensity3d_form_0::create_finite_element(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsedensity3d_finite_element_1();
        break;
      }
    case 1:
      {
        return new nsedensity3d_finite_element_1();
        break;
      }
    case 2:
      {
        return new nsedensity3d_finite_element_2();
        break;
      }
    case 3:
      {
        return new nsedensity3d_finite_element_1();
        break;
      }
    case 4:
      {
        return new nsedensity3d_finite_element_0();
        break;
      }
    case 5:
      {
        return new nsedensity3d_finite_element_0();
        break;
      }
    case 6:
      {
        return new nsedensity3d_finite_element_0();
        break;
      }
    case 7:
      {
        return new nsedensity3d_finite_element_0();
        break;
      }
    case 8:
      {
        return new nsedensity3d_finite_element_0();
        break;
      }
    case 9:
      {
        return new nsedensity3d_finite_element_2();
        break;
      }
    case 10:
      {
        return new nsedensity3d_finite_element_1();
        break;
      }
    case 11:
      {
        return new nsedensity3d_finite_element_2();
        break;
      }
    case 12:
      {
        return new nsedensity3d_finite_element_0();
        break;
      }
    case 13:
      {
        return new nsedensity3d_finite_element_2();
        break;
      }
    case 14:
      {
        return new nsedensity3d_finite_element_2();
        break;
      }
    }
    
    return 0;
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Create a new dofmap for argument function i
ufc::dofmap* nsedensity3d_form_0::create_dofmap(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsedensity3d_dofmap_1();
        break;
      }
    case 1:
      {
        return new nsedensity3d_dofmap_1();
        break;
      }
    case 2:
      {
        return new nsedensity3d_dofmap_2();
        break;
      }
    case 3:
      {
        return new nsedensity3d_dofmap_1();
        break;
      }
    case 4:
      {
        return new nsedensity3d_dofmap_0();
        break;
      }
    case 5:
      {
        return new nsedensity3d_dofmap_0();
        break;
      }
    case 6:
      {
        return new nsedensity3d_dofmap_0();
        break;
      }
    case 7:
      {
        return new nsedensity3d_dofmap_0();
        break;
      }
    case 8:
      {
        return new nsedensity3d_dofmap_0();
        break;
      }
    case 9:
      {
        return new nsedensity3d_dofmap_2();
        break;
      }
    case 10:
      {
        return new nsedensity3d_dofmap_1();
        break;
      }
    case 11:
      {
        return new nsedensity3d_dofmap_2();
        break;
      }
    case 12:
      {
        return new nsedensity3d_dofmap_0();
        break;
      }
    case 13:
      {
        return new nsedensity3d_dofmap_2();
        break;
      }
    case 14:
      {
        return new nsedensity3d_dofmap_2();
        break;
      }
    }
    
    return 0;
}
#else

/// Create a new dofmap for argument function i
ufc::dof_map* nsedensity3d_form_0::create_dof_map(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsedensity3d_dofmap_1();
        break;
      }
    case 1:
      {
        return new nsedensity3d_dofmap_1();
        break;
      }
    case 2:
      {
        return new nsedensity3d_dofmap_2();
        break;
      }
    case 3:
      {
        return new nsedensity3d_dofmap_1();
        break;
      }
    case 4:
      {
        return new nsedensity3d_dofmap_0();
        break;
      }
    case 5:
      {
        return new nsedensity3d_dofmap_0();
        break;
      }
    case 6:
      {
        return new nsedensity3d_dofmap_0();
        break;
      }
    case 7:
      {
        return new nsedensity3d_dofmap_0();
        break;
      }
    case 8:
      {
        return new nsedensity3d_dofmap_0();
        break;
      }
    case 9:
      {
        return new nsedensity3d_dofmap_2();
        break;
      }
    case 10:
      {
        return new nsedensity3d_dofmap_1();
        break;
      }
    case 11:
      {
        return new nsedensity3d_dofmap_2();
        break;
      }
    case 12:
      {
        return new nsedensity3d_dofmap_0();
        break;
      }
    case 13:
      {
        return new nsedensity3d_dofmap_2();
        break;
      }
    case 14:
      {
        return new nsedensity3d_dofmap_2();
        break;
      }
    }
    
    return 0;
}
#endif
/// Create a new cell integral on sub domain i
ufc::cell_integral* nsedensity3d_form_0::create_cell_integral(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsedensity3d_cell_integral_0_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new exterior facet integral on sub domain i
ufc::exterior_facet_integral* nsedensity3d_form_0::create_exterior_facet_integral(unsigned int i) const
{
    return 0;
}

/// Create a new interior facet integral on sub domain i
ufc::interior_facet_integral* nsedensity3d_form_0::create_interior_facet_integral(unsigned int i) const
{
    return 0;
}

/// Constructor
nsedensity3d_form_1::nsedensity3d_form_1() : ufc::form()
{
    // Do nothing
}

/// Destructor
nsedensity3d_form_1::~nsedensity3d_form_1()
{
    // Do nothing
}

/// Return a string identifying the form
const char* nsedensity3d_form_1::signature() const
{
    return "Form([Integral(Sum(Product(IntValue(-1, (), (), {}), Sum(Product(IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(0),), {Index(0): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(0),), {Index(0): 3})))), MultiIndex((Index(0),), {Index(0): 3})), MultiIndex((Index(1),), {Index(1): 3})), Indexed(ComponentTensor(SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0), MultiIndex((Index(2),), {Index(2): 3})), MultiIndex((Index(2),), {Index(2): 3})), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), Product(Sum(Abs(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(1),), {}))))), Sum(Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 6), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 2), FloatValue(1.5, (), (), {}))), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 10), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 5), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 2), IntValue(2, (), (), {}))))))), Sum(Product(Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 4), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 2), FloatValue(1.5, (), (), {}))), Sum(IndexSum(Product(Indexed(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Product(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0), Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(3),), {Index(3): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7), MultiIndex((Index(3),), {Index(3): 3}))), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(5),), {Index(5): 3})), MultiIndex((Index(5), Index(3)), {Index(5): 3, Index(3): 3})), MultiIndex((Index(6), Index(7)), {Index(7): 3, Index(6): 3}))), MultiIndex((Index(6), Index(7)), {Index(7): 3, Index(6): 3})), MultiIndex((Index(8), Index(9)), {Index(8): 3, Index(9): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(9),), {Index(9): 3}))), MultiIndex((Index(9),), {Index(9): 3})), MultiIndex((Index(8),), {Index(8): 3})), MultiIndex((Index(10),), {Index(10): 3})), Indexed(Sum(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(11),), {Index(11): 3})), Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(12),), {Index(12): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7), MultiIndex((Index(12),), {Index(12): 3}))), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(13),), {Index(13): 3})), MultiIndex((Index(13), Index(12)), {Index(13): 3, Index(12): 3})), MultiIndex((Index(14), Index(15)), {Index(14): 3, Index(15): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))), MultiIndex((Index(14), Index(15)), {Index(14): 3, Index(15): 3})), MultiIndex((Index(16), Index(11)), {Index(11): 3, Index(16): 3}))), MultiIndex((Index(11),), {Index(11): 3})), MultiIndex((Index(16),), {Index(16): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(ComponentTensor(Product(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9), MultiIndex((Index(17),), {Index(17): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))), MultiIndex((Index(17),), {Index(17): 3})), MultiIndex((Index(18),), {Index(18): 3}))), MultiIndex((Index(18),), {Index(18): 3}))), MultiIndex((Index(10),), {Index(10): 3}))), MultiIndex((Index(10),), {Index(10): 3})), Product(Sum(IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(19),), {Index(19): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(20),), {Index(20): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(20),), {Index(20): 3})))), MultiIndex((Index(20),), {Index(20): 3})), MultiIndex((Index(19),), {Index(19): 3}))), MultiIndex((Index(19),), {Index(19): 3})), IndexSum(Product(Indexed(ComponentTensor(Sum(Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(22),), {Index(22): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(22),), {Index(22): 3})))), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(23),), {Index(23): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(23),), {Index(23): 3})))), MultiIndex((Index(23),), {Index(23): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(24),), {Index(24): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(24),), {Index(24): 3})))))), Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(24),), {Index(24): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(24),), {Index(24): 3}))))), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))))))), Product(Division(Product(IntValue(-1, (), (), {}), Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(22),), {Index(22): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(22),), {Index(22): 3})))), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(23),), {Index(23): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(23),), {Index(23): 3})))), MultiIndex((Index(23),), {Index(23): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(24),), {Index(24): 3})), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(24),), {Index(24): 3})), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(22),), {Index(22): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(22),), {Index(22): 3})))), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(22),), {Index(22): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(22),), {Index(22): 3})))), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(24),), {Index(24): 3})), MultiIndex((Index(22),), {Index(22): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(24),), {Index(24): 3})), MultiIndex((Index(22),), {Index(22): 3})))), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(23),), {Index(23): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(23),), {Index(23): 3})))), MultiIndex((Index(23),), {Index(23): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(23),), {Index(23): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(23),), {Index(23): 3})))), MultiIndex((Index(23),), {Index(23): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(24),), {Index(24): 3})), MultiIndex((Index(23),), {Index(23): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(24),), {Index(24): 3})), MultiIndex((Index(23),), {Index(23): 3})))), MultiIndex((Index(23),), {Index(23): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(21),), {Index(21): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(21),), {Index(21): 3})))), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(22),), {Index(22): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(22),), {Index(22): 3})))), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(23),), {Index(23): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(23),), {Index(23): 3})))), MultiIndex((Index(23),), {Index(23): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))))))), MultiIndex((Index(24),), {Index(24): 3})), MultiIndex((Index(25),), {Index(25): 3})), Indexed(ListTensor(FloatValue(1, (), (), {}), FloatValue(1, (), (), {}), FloatValue(1, (), (), {})), MultiIndex((Index(25),), {Index(25): 3}))), MultiIndex((Index(25),), {Index(25): 3}))), Sum(IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(26),), {Index(26): 3})), Indexed(ComponentTensor(SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((Index(26),), {Index(26): 3}))), MultiIndex((Index(26),), {Index(26): 3})), IndexSum(Product(Indexed(ComponentTensor(Sum(Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(29),), {Index(29): 3})))), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(30),), {Index(30): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(30),), {Index(30): 3})))), MultiIndex((Index(30),), {Index(30): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(Product(Product(IntValue(-1, (), (), {}), Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0)), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(31),), {Index(31): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(31),), {Index(31): 3})))))), Product(Product(IntValue(-1, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0), MultiIndex((Index(31),), {Index(31): 3}))), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))))))), Product(Division(Product(IntValue(-1, (), (), {}), Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(29),), {Index(29): 3})))), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(30),), {Index(30): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(30),), {Index(30): 3})))), MultiIndex((Index(30),), {Index(30): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(31),), {Index(31): 3})), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(31),), {Index(31): 3})), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(29),), {Index(29): 3})))), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(29),), {Index(29): 3})))), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(31),), {Index(31): 3})), MultiIndex((Index(29),), {Index(29): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(31),), {Index(31): 3})), MultiIndex((Index(29),), {Index(29): 3})))), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(30),), {Index(30): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(30),), {Index(30): 3})))), MultiIndex((Index(30),), {Index(30): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(30),), {Index(30): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(30),), {Index(30): 3})))), MultiIndex((Index(30),), {Index(30): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(31),), {Index(31): 3})), MultiIndex((Index(30),), {Index(30): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(31),), {Index(31): 3})), MultiIndex((Index(30),), {Index(30): 3})))), MultiIndex((Index(30),), {Index(30): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(28),), {Index(28): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(28),), {Index(28): 3})))), MultiIndex((Index(28),), {Index(28): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(29),), {Index(29): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(29),), {Index(29): 3})))), MultiIndex((Index(29),), {Index(29): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(30),), {Index(30): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(30),), {Index(30): 3})))), MultiIndex((Index(30),), {Index(30): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(Product(IntValue(-1, (), (), {}), Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0)), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))))))), MultiIndex((Index(31),), {Index(31): 3})), MultiIndex((Index(32),), {Index(32): 3})), Indexed(ListTensor(FloatValue(1, (), (), {}), FloatValue(1, (), (), {}), FloatValue(1, (), (), {})), MultiIndex((Index(32),), {Index(32): 3}))), MultiIndex((Index(32),), {Index(32): 3})))))), Sum(Product(IntValue(-1, (), (), {}), Product(IndexSum(Product(Indexed(ComponentTensor(SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0), MultiIndex((Index(33),), {Index(33): 3})), MultiIndex((Index(33),), {Index(33): 3})), MultiIndex((Index(34),), {Index(34): 3})), Indexed(ListTensor(FloatValue(1, (), (), {}), FloatValue(1, (), (), {}), FloatValue(1, (), (), {})), MultiIndex((Index(34),), {Index(34): 3}))), MultiIndex((Index(34),), {Index(34): 3})), Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(35),), {Index(35): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(35),), {Index(35): 3})))), MultiIndex((Index(35),), {Index(35): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(36),), {Index(36): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(36),), {Index(36): 3})))), MultiIndex((Index(36),), {Index(36): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(37),), {Index(37): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(37),), {Index(37): 3})))), MultiIndex((Index(37),), {Index(37): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8))))), Sum(FloatValue(1, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8))))))))), Sum(Division(Product(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Product(IntValue(-1, (), (), {}), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3)), Product(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0), IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(38),), {Index(38): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(38),), {Index(38): 3})))), MultiIndex((Index(38),), {Index(38): 3})), MultiIndex((Index(39),), {Index(39): 3})), Indexed(Sum(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 11), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 12)), MultiIndex((Index(40),), {Index(40): 3}))), MultiIndex((Index(40),), {Index(40): 3})), MultiIndex((Index(41),), {Index(41): 3}))), MultiIndex((Index(41),), {Index(41): 3}))), MultiIndex((Index(39),), {Index(39): 3}))), MultiIndex((Index(39),), {Index(39): 3})))))))), Sum(Product(IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(42),), {Index(42): 3}))), MultiIndex((Index(42),), {Index(42): 3})), MultiIndex((Index(43),), {Index(43): 3})), Indexed(ComponentTensor(SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0), MultiIndex((Index(44),), {Index(44): 3})), MultiIndex((Index(44),), {Index(44): 3})), MultiIndex((Index(43),), {Index(43): 3}))), MultiIndex((Index(43),), {Index(43): 3})), Product(Sum(Abs(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(1),), {}))))), Sum(Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 6), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 2), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 2), FloatValue(0.5, (), (), {})))), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 10), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 5), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 2), IntValue(2, (), (), {}))))))), Sum(Product(Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 4), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 2), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 2), FloatValue(0.5, (), (), {})))), Sum(IndexSum(Product(Indexed(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Product(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0), Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(45),), {Index(45): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7), MultiIndex((Index(45),), {Index(45): 3}))), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(46),), {Index(46): 3})), MultiIndex((Index(46), Index(45)), {Index(46): 3, Index(45): 3})), MultiIndex((Index(6), Index(7)), {Index(7): 3, Index(6): 3}))), MultiIndex((Index(6), Index(7)), {Index(7): 3, Index(6): 3})), MultiIndex((Index(8), Index(9)), {Index(8): 3, Index(9): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(9),), {Index(9): 3}))), MultiIndex((Index(9),), {Index(9): 3})), MultiIndex((Index(8),), {Index(8): 3})), MultiIndex((Index(47),), {Index(47): 3})), Indexed(Sum(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(11),), {Index(11): 3})), Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(48),), {Index(48): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7), MultiIndex((Index(48),), {Index(48): 3}))), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(49),), {Index(49): 3})), MultiIndex((Index(49), Index(48)), {Index(48): 3, Index(49): 3})), MultiIndex((Index(14), Index(15)), {Index(14): 3, Index(15): 3})), Product(FloatValue(0.5, (), (), {}), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1))), MultiIndex((Index(14), Index(15)), {Index(14): 3, Index(15): 3})), MultiIndex((Index(16), Index(11)), {Index(11): 3, Index(16): 3}))), MultiIndex((Index(11),), {Index(11): 3})), MultiIndex((Index(16),), {Index(16): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(ComponentTensor(Product(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 9), MultiIndex((Index(17),), {Index(17): 3})), Product(FloatValue(0.5, (), (), {}), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1))), MultiIndex((Index(17),), {Index(17): 3})), MultiIndex((Index(18),), {Index(18): 3}))), MultiIndex((Index(18),), {Index(18): 3}))), MultiIndex((Index(47),), {Index(47): 3}))), MultiIndex((Index(47),), {Index(47): 3})), Sum(Product(IndexSum(Product(Indexed(ComponentTensor(Sum(Sum(Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(Product(Product(IntValue(-1, (), (), {}), Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0)), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(53),), {Index(53): 3}))))), Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1))), Product(IntValue(-1, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0), MultiIndex((Index(53),), {Index(53): 3})))))), Product(Division(Product(IntValue(-1, (), (), {}), Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3}))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3}))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3}))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(Product(Product(IntValue(-1, (), (), {}), Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0)), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(53),), {Index(53): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(53),), {Index(53): 3})))))), Product(Product(IntValue(-1, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0), MultiIndex((Index(53),), {Index(53): 3}))), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8))))))))), Sum(Product(Division(Product(IntValue(-1, (), (), {}), Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((Index(53),), {Index(53): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((Index(53),), {Index(53): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((Index(53),), {Index(53): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((Index(53),), {Index(53): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((Index(53),), {Index(53): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((Index(53),), {Index(53): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(Product(IntValue(-1, (), (), {}), Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0)), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1))))), Product(Division(Sum(Product(IntValue(-1, (), (), {}), Product(Division(Product(IntValue(-1, (), (), {}), Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((Index(53),), {Index(53): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((Index(53),), {Index(53): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((Index(53),), {Index(53): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((Index(53),), {Index(53): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((Index(53),), {Index(53): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((Index(53),), {Index(53): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3}))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3}))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3}))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(IntValue(-1, (), (), {}), Sum(Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((Index(53),), {Index(53): 3}))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((Index(53),), {Index(53): 3}))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((Index(53),), {Index(53): 3}))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {}))))))), Product(Division(Product(IntValue(-1, (), (), {}), Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3}))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3}))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3}))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((Index(53),), {Index(53): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((Index(53),), {Index(53): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((Index(53),), {Index(53): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((Index(53),), {Index(53): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((Index(53),), {Index(53): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((Index(53),), {Index(53): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})))))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(Product(IntValue(-1, (), (), {}), Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0)), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8))))))))), MultiIndex((Index(53),), {Index(53): 3})), MultiIndex((Index(54),), {Index(54): 3})), Indexed(ListTensor(FloatValue(1, (), (), {}), FloatValue(1, (), (), {}), FloatValue(1, (), (), {})), MultiIndex((Index(54),), {Index(54): 3}))), MultiIndex((Index(54),), {Index(54): 3})), Sum(IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(55),), {Index(55): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(56),), {Index(56): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(56),), {Index(56): 3})))), MultiIndex((Index(56),), {Index(56): 3})), MultiIndex((Index(55),), {Index(55): 3}))), MultiIndex((Index(55),), {Index(55): 3})), IndexSum(Product(Indexed(ComponentTensor(Sum(Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(60),), {Index(60): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(60),), {Index(60): 3})))))), Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(60),), {Index(60): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(60),), {Index(60): 3}))))), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))))))), Product(Division(Product(IntValue(-1, (), (), {}), Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((Index(60),), {Index(60): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((Index(60),), {Index(60): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((Index(60),), {Index(60): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((Index(60),), {Index(60): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((Index(60),), {Index(60): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((Index(60),), {Index(60): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))))))), MultiIndex((Index(60),), {Index(60): 3})), MultiIndex((Index(61),), {Index(61): 3})), Indexed(ListTensor(FloatValue(1, (), (), {}), FloatValue(1, (), (), {}), FloatValue(1, (), (), {})), MultiIndex((Index(61),), {Index(61): 3}))), MultiIndex((Index(61),), {Index(61): 3})))), Product(Sum(IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(55),), {Index(55): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(56),), {Index(56): 3}))), MultiIndex((Index(56),), {Index(56): 3})), MultiIndex((Index(55),), {Index(55): 3}))), MultiIndex((Index(55),), {Index(55): 3})), IndexSum(Product(Indexed(ComponentTensor(Sum(Sum(Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(Sum(Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1))), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(60),), {Index(60): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(60),), {Index(60): 3})))))), Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(60),), {Index(60): 3})))), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))))), Sum(Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1))), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(60),), {Index(60): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(60),), {Index(60): 3})))))), Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(60),), {Index(60): 3})))), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8))))))))), Product(Division(Product(IntValue(-1, (), (), {}), Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3}))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3}))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3}))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(60),), {Index(60): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(60),), {Index(60): 3})))))), Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(60),), {Index(60): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(60),), {Index(60): 3}))))), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8))))))))), Sum(Product(Division(Product(IntValue(-1, (), (), {}), Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((Index(60),), {Index(60): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((Index(60),), {Index(60): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((Index(60),), {Index(60): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((Index(60),), {Index(60): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((Index(60),), {Index(60): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((Index(60),), {Index(60): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1))), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8))))), Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1))), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))))))), Product(Division(Sum(Product(IntValue(-1, (), (), {}), Product(Division(Product(IntValue(-1, (), (), {}), Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((Index(60),), {Index(60): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((Index(60),), {Index(60): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((Index(60),), {Index(60): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((Index(60),), {Index(60): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((Index(60),), {Index(60): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((Index(60),), {Index(60): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3}))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3}))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3}))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(IntValue(-1, (), (), {}), Sum(Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((Index(60),), {Index(60): 3}))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((Index(60),), {Index(60): 3}))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((Index(60),), {Index(60): 3}))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {}))))))), Product(Division(Product(IntValue(-1, (), (), {}), Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3}))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3}))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3}))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((Index(60),), {Index(60): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((Index(60),), {Index(60): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((Index(60),), {Index(60): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((Index(60),), {Index(60): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((Index(60),), {Index(60): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((Index(60),), {Index(60): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})))))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(57),), {Index(57): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(57),), {Index(57): 3})))), MultiIndex((Index(57),), {Index(57): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(58),), {Index(58): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(58),), {Index(58): 3})))), MultiIndex((Index(58),), {Index(58): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(59),), {Index(59): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(59),), {Index(59): 3})))), MultiIndex((Index(59),), {Index(59): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8))))))))), MultiIndex((Index(60),), {Index(60): 3})), MultiIndex((Index(61),), {Index(61): 3})), Indexed(ListTensor(FloatValue(1, (), (), {}), FloatValue(1, (), (), {}), FloatValue(1, (), (), {})), MultiIndex((Index(61),), {Index(61): 3}))), MultiIndex((Index(61),), {Index(61): 3}))), Sum(IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(62),), {Index(62): 3})), Indexed(ComponentTensor(SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0), MultiIndex((Index(63),), {Index(63): 3})), MultiIndex((Index(63),), {Index(63): 3})), MultiIndex((Index(62),), {Index(62): 3}))), MultiIndex((Index(62),), {Index(62): 3})), IndexSum(Product(Indexed(ComponentTensor(Sum(Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(Product(Product(IntValue(-1, (), (), {}), Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0)), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(53),), {Index(53): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(53),), {Index(53): 3})))))), Product(Product(IntValue(-1, (), (), {}), SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0), MultiIndex((Index(53),), {Index(53): 3}))), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))))))), Product(Division(Product(IntValue(-1, (), (), {}), Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((Index(53),), {Index(53): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((Index(53),), {Index(53): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((Index(53),), {Index(53): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((Index(53),), {Index(53): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((Index(53),), {Index(53): 3})), SpatialDerivative(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((Index(53),), {Index(53): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(50),), {Index(50): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(50),), {Index(50): 3})))), MultiIndex((Index(50),), {Index(50): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(51),), {Index(51): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(51),), {Index(51): 3})))), MultiIndex((Index(51),), {Index(51): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(52),), {Index(52): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(52),), {Index(52): 3})))), MultiIndex((Index(52),), {Index(52): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(Product(IntValue(-1, (), (), {}), Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0)), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))))))), MultiIndex((Index(53),), {Index(53): 3})), MultiIndex((Index(54),), {Index(54): 3})), Indexed(ListTensor(FloatValue(1, (), (), {}), FloatValue(1, (), (), {}), FloatValue(1, (), (), {})), MultiIndex((Index(54),), {Index(54): 3}))), MultiIndex((Index(54),), {Index(54): 3}))))))), Sum(Product(IntValue(-1, (), (), {}), Product(IndexSum(Product(Indexed(ComponentTensor(SpatialDerivative(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0), MultiIndex((Index(64),), {Index(64): 3})), MultiIndex((Index(64),), {Index(64): 3})), MultiIndex((Index(65),), {Index(65): 3})), Indexed(ListTensor(FloatValue(1, (), (), {}), FloatValue(1, (), (), {}), FloatValue(1, (), (), {})), MultiIndex((Index(65),), {Index(65): 3}))), MultiIndex((Index(65),), {Index(65): 3})), Sum(Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(66),), {Index(66): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(66),), {Index(66): 3})))), MultiIndex((Index(66),), {Index(66): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(67),), {Index(67): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(67),), {Index(67): 3})))), MultiIndex((Index(67),), {Index(67): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(68),), {Index(68): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(68),), {Index(68): 3})))), MultiIndex((Index(68),), {Index(68): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1))), Sum(FloatValue(1, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))))), Product(Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1))), Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))))))), Product(Division(Product(IntValue(-1, (), (), {}), Product(Division(FloatValue(0.2, (), (), {}), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(66),), {Index(66): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(66),), {Index(66): 3})))), MultiIndex((Index(66),), {Index(66): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(67),), {Index(67): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(67),), {Index(67): 3})))), MultiIndex((Index(67),), {Index(67): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(68),), {Index(68): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(68),), {Index(68): 3})))), MultiIndex((Index(68),), {Index(68): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(FloatValue(0.1, (), (), {}), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(66),), {Index(66): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(66),), {Index(66): 3})))), MultiIndex((Index(66),), {Index(66): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(66),), {Index(66): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(66),), {Index(66): 3})))), MultiIndex((Index(66),), {Index(66): 3})), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(66),), {Index(66): 3}))), MultiIndex((Index(66),), {Index(66): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(67),), {Index(67): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(67),), {Index(67): 3})))), MultiIndex((Index(67),), {Index(67): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(67),), {Index(67): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(67),), {Index(67): 3})))), MultiIndex((Index(67),), {Index(67): 3})), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(67),), {Index(67): 3}))), MultiIndex((Index(67),), {Index(67): 3})), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(68),), {Index(68): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(68),), {Index(68): 3})))), MultiIndex((Index(68),), {Index(68): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(68),), {Index(68): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(68),), {Index(68): 3})))), MultiIndex((Index(68),), {Index(68): 3})), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(68),), {Index(68): 3}))), MultiIndex((Index(68),), {Index(68): 3})), MultiIndex((FixedIndex(1),), {})))))))), Sum(FloatValue(1, (), (), {}), Product(FloatValue(0.1, (), (), {}), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(66),), {Index(66): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(66),), {Index(66): 3})))), MultiIndex((Index(66),), {Index(66): 3})), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(67),), {Index(67): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(67),), {Index(67): 3})))), MultiIndex((Index(67),), {Index(67): 3})), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(68),), {Index(68): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8), MultiIndex((Index(68),), {Index(68): 3})))), MultiIndex((Index(68),), {Index(68): 3})), MultiIndex((FixedIndex(1),), {})))))))), Product(Sum(FloatValue(0.001, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8))))), Sum(FloatValue(1, (), (), {}), Product(IntValue(-1, (), (), {}), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)))))))))), Sum(Division(Product(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1)), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3)), Product(Argument(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 0), IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(69),), {Index(69): 3}))), MultiIndex((Index(69),), {Index(69): 3})), MultiIndex((Index(70),), {Index(70): 3})), Indexed(Sum(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 7)), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 11), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 12)), MultiIndex((Index(40),), {Index(40): 3}))), MultiIndex((Index(40),), {Index(40): 3})), MultiIndex((Index(41),), {Index(41): 3}))), MultiIndex((Index(41),), {Index(41): 3}))), MultiIndex((Index(70),), {Index(70): 3}))), MultiIndex((Index(70),), {Index(70): 3})))))))), Measure('cell', 0, None))])";
}

/// Return the rank of the global tensor (r)
unsigned int nsedensity3d_form_1::rank() const
{
    return 1;
}

/// Return the number of coefficients (n)
unsigned int nsedensity3d_form_1::num_coefficients() const
{
    return 13;
}
 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Return the number of cell domains
unsigned int nsedensity3d_form_1::num_cell_domains() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int nsedensity3d_form_1::num_exterior_facet_domains() const
{
    return 0;
}

/// Return the number of interior facet domains
unsigned int nsedensity3d_form_1::num_interior_facet_domains() const
{
    return 0;
}
#else

/// Return the number of cell domains
unsigned int nsedensity3d_form_1::num_cell_integrals() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int nsedensity3d_form_1::num_exterior_facet_integrals() const
{
    return 0;
}

/// Return the number of interior facet domains
unsigned int nsedensity3d_form_1::num_interior_facet_integrals() const
{
    return 0;
}

#endif

/// Create a new finite element for argument function i
ufc::finite_element* nsedensity3d_form_1::create_finite_element(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsedensity3d_finite_element_1();
        break;
      }
    case 1:
      {
        return new nsedensity3d_finite_element_2();
        break;
      }
    case 2:
      {
        return new nsedensity3d_finite_element_1();
        break;
      }
    case 3:
      {
        return new nsedensity3d_finite_element_0();
        break;
      }
    case 4:
      {
        return new nsedensity3d_finite_element_0();
        break;
      }
    case 5:
      {
        return new nsedensity3d_finite_element_0();
        break;
      }
    case 6:
      {
        return new nsedensity3d_finite_element_0();
        break;
      }
    case 7:
      {
        return new nsedensity3d_finite_element_0();
        break;
      }
    case 8:
      {
        return new nsedensity3d_finite_element_2();
        break;
      }
    case 9:
      {
        return new nsedensity3d_finite_element_1();
        break;
      }
    case 10:
      {
        return new nsedensity3d_finite_element_2();
        break;
      }
    case 11:
      {
        return new nsedensity3d_finite_element_0();
        break;
      }
    case 12:
      {
        return new nsedensity3d_finite_element_2();
        break;
      }
    case 13:
      {
        return new nsedensity3d_finite_element_2();
        break;
      }
    }
    
    return 0;
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Create a new dofmap for argument function i
ufc::dofmap* nsedensity3d_form_1::create_dofmap(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsedensity3d_dofmap_1();
        break;
      }
    case 1:
      {
        return new nsedensity3d_dofmap_2();
        break;
      }
    case 2:
      {
        return new nsedensity3d_dofmap_1();
        break;
      }
    case 3:
      {
        return new nsedensity3d_dofmap_0();
        break;
      }
    case 4:
      {
        return new nsedensity3d_dofmap_0();
        break;
      }
    case 5:
      {
        return new nsedensity3d_dofmap_0();
        break;
      }
    case 6:
      {
        return new nsedensity3d_dofmap_0();
        break;
      }
    case 7:
      {
        return new nsedensity3d_dofmap_0();
        break;
      }
    case 8:
      {
        return new nsedensity3d_dofmap_2();
        break;
      }
    case 9:
      {
        return new nsedensity3d_dofmap_1();
        break;
      }
    case 10:
      {
        return new nsedensity3d_dofmap_2();
        break;
      }
    case 11:
      {
        return new nsedensity3d_dofmap_0();
        break;
      }
    case 12:
      {
        return new nsedensity3d_dofmap_2();
        break;
      }
    case 13:
      {
        return new nsedensity3d_dofmap_2();
        break;
      }
    }
    
    return 0;
}
#else

/// Create a new dofmap for argument function i
ufc::dof_map* nsedensity3d_form_1::create_dof_map(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsedensity3d_dofmap_1();
        break;
      }
    case 1:
      {
        return new nsedensity3d_dofmap_2();
        break;
      }
    case 2:
      {
        return new nsedensity3d_dofmap_1();
        break;
      }
    case 3:
      {
        return new nsedensity3d_dofmap_0();
        break;
      }
    case 4:
      {
        return new nsedensity3d_dofmap_0();
        break;
      }
    case 5:
      {
        return new nsedensity3d_dofmap_0();
        break;
      }
    case 6:
      {
        return new nsedensity3d_dofmap_0();
        break;
      }
    case 7:
      {
        return new nsedensity3d_dofmap_0();
        break;
      }
    case 8:
      {
        return new nsedensity3d_dofmap_2();
        break;
      }
    case 9:
      {
        return new nsedensity3d_dofmap_1();
        break;
      }
    case 10:
      {
        return new nsedensity3d_dofmap_2();
        break;
      }
    case 11:
      {
        return new nsedensity3d_dofmap_0();
        break;
      }
    case 12:
      {
        return new nsedensity3d_dofmap_2();
        break;
      }
    case 13:
      {
        return new nsedensity3d_dofmap_2();
        break;
      }
    }
    
    return 0;
}
#endif
/// Create a new cell integral on sub domain i
ufc::cell_integral* nsedensity3d_form_1::create_cell_integral(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsedensity3d_cell_integral_1_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new exterior facet integral on sub domain i
ufc::exterior_facet_integral* nsedensity3d_form_1::create_exterior_facet_integral(unsigned int i) const
{
    return 0;
}

/// Create a new interior facet integral on sub domain i
ufc::interior_facet_integral* nsedensity3d_form_1::create_interior_facet_integral(unsigned int i) const
{
    return 0;
}

