// This code conforms with the UFC specification version 2.0.5
// and was automatically generated by FFC version 1.0.0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   False
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'dolfin'
//   log_level:                      20
//   log_prefix:                     ''
//   optimize:                       True
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              'auto'
//   quadrature_rule:                'auto'
//   representation:                 'quadrature'
//   split:                          True
//   swig_binary:                    'swig'
//   swig_path:                      ''

#include "NSEDualMomentum3D.h"

/// Constructor
nsedualmomentum3d_finite_element_0::nsedualmomentum3d_finite_element_0() : ufc::finite_element()
{
    // Do nothing
}

/// Destructor
nsedualmomentum3d_finite_element_0::~nsedualmomentum3d_finite_element_0()
{
    // Do nothing
}

/// Return a string identifying the finite element
const char* nsedualmomentum3d_finite_element_0::signature() const
{
    return "FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None)";
}

/// Return the cell shape
ufc::shape nsedualmomentum3d_finite_element_0::cell_shape() const
{
    return ufc::tetrahedron;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the cell shape
unsigned int nsedualmomentum3d_finite_element_0::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the cell shape
unsigned int nsedualmomentum3d_finite_element_0::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the finite element function space
unsigned int nsedualmomentum3d_finite_element_0::space_dimension() const
{
    return 1;
}

/// Return the rank of the value space
unsigned int nsedualmomentum3d_finite_element_0::value_rank() const
{
    return 0;
}

/// Return the dimension of the value space for axis i
unsigned int nsedualmomentum3d_finite_element_0::value_dimension(unsigned int i) const
{
    return 1;
}

/// Evaluate basis function i at given point in cell
void nsedualmomentum3d_finite_element_0::evaluate_basis(unsigned int i,
                                   double* values,
                                   const double* coordinates,
                                   const ufc::cell& c) const
{
    // Extract vertex coordinates
    
    // Compute Jacobian of affine map from reference cell
    
    // Compute sub determinants
    
    // Compute determinant of Jacobian
    
    // Compute inverse of Jacobian
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Reset values.
    *values = 0.0;
    
    // Array of basisvalues.
    double basisvalues[1] = {0.0};
    
    // Declare helper variables.
    
    // Compute basisvalues.
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients.
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s).
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    }// end loop over 'r'
}

/// Evaluate all basis functions at given point in cell
void nsedualmomentum3d_finite_element_0::evaluate_basis_all(double* values,
                                       const double* coordinates,
                                       const ufc::cell& c) const
{
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, coordinates, c);
}

/// Evaluate order n derivatives of basis function i at given point in cell
void nsedualmomentum3d_finite_element_0::evaluate_basis_derivatives(unsigned int i,
                                               unsigned int n,
                                               double* values,
                                               const double* coordinates,
                                               const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K_00, K_01, K_02}, {K_10, K_11, K_12}, {K_20, K_21, K_22}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    
    // Array of basisvalues.
    double basisvalues[1] = {0.0};
    
    // Declare helper variables.
    
    // Compute basisvalues.
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients.
    static const double coefficients0[1] = \
    {1.0};
    
    // Tables of derivatives of the polynomial base (transpose).
    static const double dmats0[1][1] = \
    {{0.0}};
    
    static const double dmats1[1][1] = \
    {{0.0}};
    
    static const double dmats2[1][1] = \
    {{0.0}};
    
    // Compute reference derivatives.
    // Declare pointer to array of derivatives on FIAT element.
    double *derivatives = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      derivatives[r] = 0.0;
    }// end loop over 'r'
    
    // Declare derivative matrix (of polynomial basis).
    double dmats[1][1] = \
    {{1.0}};
    
    // Declare (auxiliary) derivative matrix (of polynomial basis).
    double dmats_old[1][1] = \
    {{1.0}};
    
    // Loop possible derivatives.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      // Resetting dmats values to compute next derivative.
      for (unsigned int t = 0; t < 1; t++)
      {
        for (unsigned int u = 0; u < 1; u++)
        {
          dmats[t][u] = 0.0;
          if (t == u)
          {
          dmats[t][u] = 1.0;
          }
          
        }// end loop over 'u'
      }// end loop over 't'
      
      // Looping derivative order to generate dmats.
      for (unsigned int s = 0; s < n; s++)
      {
        // Updating dmats_old with new values and resetting dmats.
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            dmats_old[t][u] = dmats[t][u];
            dmats[t][u] = 0.0;
          }// end loop over 'u'
        }// end loop over 't'
        
        // Update dmats using an inner product.
        if (combinations[r][s] == 0)
        {
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            for (unsigned int tu = 0; tu < 1; tu++)
            {
              dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
            }// end loop over 'tu'
          }// end loop over 'u'
        }// end loop over 't'
        }
        
        if (combinations[r][s] == 1)
        {
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            for (unsigned int tu = 0; tu < 1; tu++)
            {
              dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
            }// end loop over 'tu'
          }// end loop over 'u'
        }// end loop over 't'
        }
        
        if (combinations[r][s] == 2)
        {
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            for (unsigned int tu = 0; tu < 1; tu++)
            {
              dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
            }// end loop over 'tu'
          }// end loop over 'u'
        }// end loop over 't'
        }
        
      }// end loop over 's'
      for (unsigned int s = 0; s < 1; s++)
      {
        for (unsigned int t = 0; t < 1; t++)
        {
          derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
        }// end loop over 't'
      }// end loop over 's'
    }// end loop over 'r'
    
    // Transform derivatives back to physical element
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r] += transform[r][s]*derivatives[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      delete [] combinations[r];
    }// end loop over 'r'
    delete [] combinations;
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      delete [] transform[r];
    }// end loop over 'r'
    delete [] transform;
}

/// Evaluate order n derivatives of all basis functions at given point in cell
void nsedualmomentum3d_finite_element_0::evaluate_basis_derivatives_all(unsigned int n,
                                                   double* values,
                                                   const double* coordinates,
                                                   const ufc::cell& c) const
{
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, coordinates, c);
}

/// Evaluate linear functional for dof i on the function f
double nsedualmomentum3d_finite_element_0::evaluate_dof(unsigned int i,
                                   const ufc::function& f,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
      y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
      y[2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

/// Evaluate linear functionals for all dofs on the function f
void nsedualmomentum3d_finite_element_0::evaluate_dofs(double* values,
                                  const ufc::function& f,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    y[2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
}

/// Interpolate vertex values from dof values
void nsedualmomentum3d_finite_element_0::interpolate_vertex_values(double* vertex_values,
                                              const double* dof_values,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Map coordinate xhat from reference cell to coordinate x in cell
void nsedualmomentum3d_finite_element_0::map_from_reference_cell(double* x,
                                            const double* xhat,
                                            const ufc::cell& c) const
{
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
}

/// Map from coordinate x in cell to coordinate xhat in reference cell
void nsedualmomentum3d_finite_element_0::map_to_reference_cell(double* xhat,
                                          const double* x,
                                          const ufc::cell& c) const
{
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
}
#endif
/// Return the number of sub elements (for a mixed element)
unsigned int nsedualmomentum3d_finite_element_0::num_sub_elements() const
{
    return 0;
}

/// Create a new finite element for sub element i (for a mixed element)
ufc::finite_element* nsedualmomentum3d_finite_element_0::create_sub_element(unsigned int i) const
{
    return 0;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Create a new class instance
ufc::finite_element* nsedualmomentum3d_finite_element_0::create() const
{
    return new nsedualmomentum3d_finite_element_0();
}
#endif


/// Constructor
nsedualmomentum3d_finite_element_1::nsedualmomentum3d_finite_element_1() : ufc::finite_element()
{
    // Do nothing
}

/// Destructor
nsedualmomentum3d_finite_element_1::~nsedualmomentum3d_finite_element_1()
{
    // Do nothing
}

/// Return a string identifying the finite element
const char* nsedualmomentum3d_finite_element_1::signature() const
{
    return "FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)";
}

/// Return the cell shape
ufc::shape nsedualmomentum3d_finite_element_1::cell_shape() const
{
    return ufc::tetrahedron;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the cell shape
unsigned int nsedualmomentum3d_finite_element_1::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the cell shape
unsigned int nsedualmomentum3d_finite_element_1::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the finite element function space
unsigned int nsedualmomentum3d_finite_element_1::space_dimension() const
{
    return 4;
}

/// Return the rank of the value space
unsigned int nsedualmomentum3d_finite_element_1::value_rank() const
{
    return 0;
}

/// Return the dimension of the value space for axis i
unsigned int nsedualmomentum3d_finite_element_1::value_dimension(unsigned int i) const
{
    return 1;
}

/// Evaluate basis function i at given point in cell
void nsedualmomentum3d_finite_element_1::evaluate_basis(unsigned int i,
                                   double* values,
                                   const double* coordinates,
                                   const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[3][0] + x[2][0] + x[1][0] - x[0][0];
    const double C1 = x[3][1] + x[2][1] + x[1][1] - x[0][1];
    const double C2 = x[3][2] + x[2][2] + x[1][2] - x[0][2];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*coordinates[0] - C0) + d_10*(2.0*coordinates[1] - C1) + d_20*(2.0*coordinates[2] - C2)) / detJ;
    double Y = (d_01*(2.0*coordinates[0] - C0) + d_11*(2.0*coordinates[1] - C1) + d_21*(2.0*coordinates[2] - C2)) / detJ;
    double Z = (d_02*(2.0*coordinates[0] - C0) + d_12*(2.0*coordinates[1] - C1) + d_22*(2.0*coordinates[2] - C2)) / detJ;
    
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
}

/// Evaluate all basis functions at given point in cell
void nsedualmomentum3d_finite_element_1::evaluate_basis_all(double* values,
                                       const double* coordinates,
                                       const ufc::cell& c) const
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 4; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
}

/// Evaluate order n derivatives of basis function i at given point in cell
void nsedualmomentum3d_finite_element_1::evaluate_basis_derivatives(unsigned int i,
                                               unsigned int n,
                                               double* values,
                                               const double* coordinates,
                                               const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Compute constants
    const double C0 = x[3][0] + x[2][0] + x[1][0] - x[0][0];
    const double C1 = x[3][1] + x[2][1] + x[1][1] - x[0][1];
    const double C2 = x[3][2] + x[2][2] + x[1][2] - x[0][2];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*coordinates[0] - C0) + d_10*(2.0*coordinates[1] - C1) + d_20*(2.0*coordinates[2] - C2)) / detJ;
    double Y = (d_01*(2.0*coordinates[0] - C0) + d_11*(2.0*coordinates[1] - C1) + d_21*(2.0*coordinates[2] - C2)) / detJ;
    double Z = (d_02*(2.0*coordinates[0] - C0) + d_12*(2.0*coordinates[1] - C1) + d_22*(2.0*coordinates[2] - C2)) / detJ;
    
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K_00, K_01, K_02}, {K_10, K_11, K_12}, {K_20, K_21, K_22}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
}

/// Evaluate order n derivatives of all basis functions at given point in cell
void nsedualmomentum3d_finite_element_1::evaluate_basis_derivatives_all(unsigned int n,
                                                   double* values,
                                                   const double* coordinates,
                                                   const ufc::cell& c) const
{
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
}

/// Evaluate linear functional for dof i on the function f
double nsedualmomentum3d_finite_element_1::evaluate_dof(unsigned int i,
                                   const ufc::function& f,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

/// Evaluate linear functionals for all dofs on the function f
void nsedualmomentum3d_finite_element_1::evaluate_dofs(double* values,
                                  const ufc::function& f,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
}

/// Interpolate vertex values from dof values
void nsedualmomentum3d_finite_element_1::interpolate_vertex_values(double* vertex_values,
                                              const double* dof_values,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Map coordinate xhat from reference cell to coordinate x in cell
void nsedualmomentum3d_finite_element_1::map_from_reference_cell(double* x,
                                            const double* xhat,
                                            const ufc::cell& c) const
{
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
}

/// Map from coordinate x in cell to coordinate xhat in reference cell
void nsedualmomentum3d_finite_element_1::map_to_reference_cell(double* xhat,
                                          const double* x,
                                          const ufc::cell& c) const
{
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
}
#endif
/// Return the number of sub elements (for a mixed element)
unsigned int nsedualmomentum3d_finite_element_1::num_sub_elements() const
{
    return 0;
}

/// Create a new finite element for sub element i (for a mixed element)
ufc::finite_element* nsedualmomentum3d_finite_element_1::create_sub_element(unsigned int i) const
{
    return 0;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Create a new class instance
ufc::finite_element* nsedualmomentum3d_finite_element_1::create() const
{
    return new nsedualmomentum3d_finite_element_1();
}
#endif


/// Constructor
nsedualmomentum3d_finite_element_2::nsedualmomentum3d_finite_element_2() : ufc::finite_element()
{
    // Do nothing
}

/// Destructor
nsedualmomentum3d_finite_element_2::~nsedualmomentum3d_finite_element_2()
{
    // Do nothing
}

/// Return a string identifying the finite element
const char* nsedualmomentum3d_finite_element_2::signature() const
{
    return "VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None)";
}

/// Return the cell shape
ufc::shape nsedualmomentum3d_finite_element_2::cell_shape() const
{
    return ufc::tetrahedron;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the cell shape
unsigned int nsedualmomentum3d_finite_element_2::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the cell shape
unsigned int nsedualmomentum3d_finite_element_2::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the finite element function space
unsigned int nsedualmomentum3d_finite_element_2::space_dimension() const
{
    return 12;
}

/// Return the rank of the value space
unsigned int nsedualmomentum3d_finite_element_2::value_rank() const
{
    return 1;
}

/// Return the dimension of the value space for axis i
unsigned int nsedualmomentum3d_finite_element_2::value_dimension(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
}

/// Evaluate basis function i at given point in cell
void nsedualmomentum3d_finite_element_2::evaluate_basis(unsigned int i,
                                   double* values,
                                   const double* coordinates,
                                   const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[3][0] + x[2][0] + x[1][0] - x[0][0];
    const double C1 = x[3][1] + x[2][1] + x[1][1] - x[0][1];
    const double C2 = x[3][2] + x[2][2] + x[1][2] - x[0][2];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*coordinates[0] - C0) + d_10*(2.0*coordinates[1] - C1) + d_20*(2.0*coordinates[2] - C2)) / detJ;
    double Y = (d_01*(2.0*coordinates[0] - C0) + d_11*(2.0*coordinates[1] - C1) + d_21*(2.0*coordinates[2] - C2)) / detJ;
    double Z = (d_02*(2.0*coordinates[0] - C0) + d_12*(2.0*coordinates[1] - C1) + d_22*(2.0*coordinates[2] - C2)) / detJ;
    
    
    // Reset values.
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
}

/// Evaluate all basis functions at given point in cell
void nsedualmomentum3d_finite_element_2::evaluate_basis_all(double* values,
                                       const double* coordinates,
                                       const ufc::cell& c) const
{
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 12; r++)
    {
      evaluate_basis(r, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
}

/// Evaluate order n derivatives of basis function i at given point in cell
void nsedualmomentum3d_finite_element_2::evaluate_basis_derivatives(unsigned int i,
                                               unsigned int n,
                                               double* values,
                                               const double* coordinates,
                                               const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Compute constants
    const double C0 = x[3][0] + x[2][0] + x[1][0] - x[0][0];
    const double C1 = x[3][1] + x[2][1] + x[1][1] - x[0][1];
    const double C2 = x[3][2] + x[2][2] + x[1][2] - x[0][2];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*coordinates[0] - C0) + d_10*(2.0*coordinates[1] - C1) + d_20*(2.0*coordinates[2] - C2)) / detJ;
    double Y = (d_01*(2.0*coordinates[0] - C0) + d_11*(2.0*coordinates[1] - C1) + d_21*(2.0*coordinates[2] - C2)) / detJ;
    double Z = (d_02*(2.0*coordinates[0] - C0) + d_12*(2.0*coordinates[1] - C1) + d_22*(2.0*coordinates[2] - C2)) / detJ;
    
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K_00, K_01, K_02}, {K_10, K_11, K_12}, {K_20, K_21, K_22}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
}

/// Evaluate order n derivatives of all basis functions at given point in cell
void nsedualmomentum3d_finite_element_2::evaluate_basis_derivatives_all(unsigned int n,
                                                   double* values,
                                                   const double* coordinates,
                                                   const ufc::cell& c) const
{
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[3*num_derivatives];
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
}

/// Evaluate linear functional for dof i on the function f
double nsedualmomentum3d_finite_element_2::evaluate_dof(unsigned int i,
                                   const ufc::function& f,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[3];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 9:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 10:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 11:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
}

/// Evaluate linear functionals for all dofs on the function f
void nsedualmomentum3d_finite_element_2::evaluate_dofs(double* values,
                                  const ufc::function& f,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[3];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[8] = vals[2];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[9] = vals[2];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[10] = vals[2];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[11] = vals[2];
}

/// Interpolate vertex values from dof values
void nsedualmomentum3d_finite_element_2::interpolate_vertex_values(double* vertex_values,
                                              const double* dof_values,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[4] = dof_values[5];
    vertex_values[7] = dof_values[6];
    vertex_values[10] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[5] = dof_values[9];
    vertex_values[8] = dof_values[10];
    vertex_values[11] = dof_values[11];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Map coordinate xhat from reference cell to coordinate x in cell
void nsedualmomentum3d_finite_element_2::map_from_reference_cell(double* x,
                                            const double* xhat,
                                            const ufc::cell& c) const
{
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
}

/// Map from coordinate x in cell to coordinate xhat in reference cell
void nsedualmomentum3d_finite_element_2::map_to_reference_cell(double* xhat,
                                          const double* x,
                                          const ufc::cell& c) const
{
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
}
#endif
/// Return the number of sub elements (for a mixed element)
unsigned int nsedualmomentum3d_finite_element_2::num_sub_elements() const
{
    return 3;
}

/// Create a new finite element for sub element i (for a mixed element)
ufc::finite_element* nsedualmomentum3d_finite_element_2::create_sub_element(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsedualmomentum3d_finite_element_1();
        break;
      }
    case 1:
      {
        return new nsedualmomentum3d_finite_element_1();
        break;
      }
    case 2:
      {
        return new nsedualmomentum3d_finite_element_1();
        break;
      }
    }
    
    return 0;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Create a new class instance
ufc::finite_element* nsedualmomentum3d_finite_element_2::create() const
{
    return new nsedualmomentum3d_finite_element_2();
}
#endif

/// Constructor


#ifndef UFC_BACKWARD_COMPATIBILITY
nsedualmomentum3d_dofmap_0::nsedualmomentum3d_dofmap_0() : ufc::dofmap()
#else
nsedualmomentum3d_dofmap_0::nsedualmomentum3d_dofmap_0() : ufc::dof_map()
#endif
{
    _global_dimension = 0;
}

/// Destructor
nsedualmomentum3d_dofmap_0::~nsedualmomentum3d_dofmap_0()
{
    // Do nothing
}

/// Return a string identifying the dofmap
const char* nsedualmomentum3d_dofmap_0::signature() const
{
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None)";
}

/// Return true iff mesh entities of topological dimension d are needed
bool nsedualmomentum3d_dofmap_0::needs_mesh_entities(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return true;
        break;
      }
    }
    
    return false;
}

/// Initialize dofmap for mesh (return true iff init_cell() is needed)
bool nsedualmomentum3d_dofmap_0::init_mesh(const ufc::mesh& m)
{
    _global_dimension = m.num_entities[3];
    return false;
}

/// Initialize dofmap for given cell
void nsedualmomentum3d_dofmap_0::init_cell(const ufc::mesh& m,
                              const ufc::cell& c)
{
    // Do nothing
}

/// Finish initialization of dofmap for cells
void nsedualmomentum3d_dofmap_0::init_cell_finalize()
{
    // Do nothing
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the associated cell shape
unsigned int nsedualmomentum3d_dofmap_0::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the associated cell shape
unsigned int nsedualmomentum3d_dofmap_0::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the global finite element function space
unsigned int nsedualmomentum3d_dofmap_0::global_dimension() const
{
    return _global_dimension;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the dimension of the local finite element function space for a cell
unsigned int nsedualmomentum3d_dofmap_0::local_dimension(const ufc::cell& c) const
{
    return 1;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsedualmomentum3d_dofmap_0::max_local_dimension() const
{
    return 1;
}
#else

/// Return the dimension of the local finite element function space for a cell
unsigned int nsedualmomentum3d_dofmap_0::local_dimension() const
{
    return 1;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsedualmomentum3d_dofmap_0::geometric_dimension() const
{
    return 3;
}

#endif
/// Return the number of dofs on each cell facet
unsigned int nsedualmomentum3d_dofmap_0::num_facet_dofs() const
{
    return 0;
}

/// Return the number of dofs associated with each cell entity of dimension d
unsigned int nsedualmomentum3d_dofmap_0::num_entity_dofs(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
}

/// Tabulate the local-to-global mapping of dofs on a cell
void nsedualmomentum3d_dofmap_0::tabulate_dofs(unsigned int* dofs,
                                  const ufc::mesh& m,
                                  const ufc::cell& c) const
{
    dofs[0] = c.entity_indices[3][0];
}

/// Tabulate the local-to-local mapping from facet dofs to cell dofs
void nsedualmomentum3d_dofmap_0::tabulate_facet_dofs(unsigned int* dofs,
                                        unsigned int facet) const
{
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
}

/// Tabulate the local-to-local mapping of dofs on entity (d, i)
void nsedualmomentum3d_dofmap_0::tabulate_entity_dofs(unsigned int* dofs,
                                  unsigned int d, unsigned int i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
}

/// Tabulate the coordinates of all dofs on a cell
void nsedualmomentum3d_dofmap_0::tabulate_coordinates(double** coordinates,
                                         const ufc::cell& c) const
{
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[0][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[0][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsedualmomentum3d_dofmap_0::num_sub_dofmaps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dofmap* nsedualmomentum3d_dofmap_0::create_sub_dofmap(unsigned int i) const
{
    return 0;
}

/// Create a new class instance
ufc::dofmap* nsedualmomentum3d_dofmap_0::create() const
{
    return new nsedualmomentum3d_dofmap_0();
}
#else

/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsedualmomentum3d_dofmap_0::num_sub_dof_maps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dof_map* nsedualmomentum3d_dofmap_0::create_sub_dof_map(unsigned int i) const
{
    return 0;
}

#endif

/// Constructor


#ifndef UFC_BACKWARD_COMPATIBILITY
nsedualmomentum3d_dofmap_1::nsedualmomentum3d_dofmap_1() : ufc::dofmap()
#else
nsedualmomentum3d_dofmap_1::nsedualmomentum3d_dofmap_1() : ufc::dof_map()
#endif
{
    _global_dimension = 0;
}

/// Destructor
nsedualmomentum3d_dofmap_1::~nsedualmomentum3d_dofmap_1()
{
    // Do nothing
}

/// Return a string identifying the dofmap
const char* nsedualmomentum3d_dofmap_1::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)";
}

/// Return true iff mesh entities of topological dimension d are needed
bool nsedualmomentum3d_dofmap_1::needs_mesh_entities(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
}

/// Initialize dofmap for mesh (return true iff init_cell() is needed)
bool nsedualmomentum3d_dofmap_1::init_mesh(const ufc::mesh& m)
{
    _global_dimension = m.num_entities[0];
    return false;
}

/// Initialize dofmap for given cell
void nsedualmomentum3d_dofmap_1::init_cell(const ufc::mesh& m,
                              const ufc::cell& c)
{
    // Do nothing
}

/// Finish initialization of dofmap for cells
void nsedualmomentum3d_dofmap_1::init_cell_finalize()
{
    // Do nothing
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the associated cell shape
unsigned int nsedualmomentum3d_dofmap_1::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the associated cell shape
unsigned int nsedualmomentum3d_dofmap_1::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the global finite element function space
unsigned int nsedualmomentum3d_dofmap_1::global_dimension() const
{
    return _global_dimension;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the dimension of the local finite element function space for a cell
unsigned int nsedualmomentum3d_dofmap_1::local_dimension(const ufc::cell& c) const
{
    return 4;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsedualmomentum3d_dofmap_1::max_local_dimension() const
{
    return 4;
}
#else

/// Return the dimension of the local finite element function space for a cell
unsigned int nsedualmomentum3d_dofmap_1::local_dimension() const
{
    return 4;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsedualmomentum3d_dofmap_1::geometric_dimension() const
{
    return 3;
}

#endif
/// Return the number of dofs on each cell facet
unsigned int nsedualmomentum3d_dofmap_1::num_facet_dofs() const
{
    return 3;
}

/// Return the number of dofs associated with each cell entity of dimension d
unsigned int nsedualmomentum3d_dofmap_1::num_entity_dofs(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

/// Tabulate the local-to-global mapping of dofs on a cell
void nsedualmomentum3d_dofmap_1::tabulate_dofs(unsigned int* dofs,
                                  const ufc::mesh& m,
                                  const ufc::cell& c) const
{
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
}

/// Tabulate the local-to-local mapping from facet dofs to cell dofs
void nsedualmomentum3d_dofmap_1::tabulate_facet_dofs(unsigned int* dofs,
                                        unsigned int facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
        break;
      }
    }
    
}

/// Tabulate the local-to-local mapping of dofs on entity (d, i)
void nsedualmomentum3d_dofmap_1::tabulate_entity_dofs(unsigned int* dofs,
                                  unsigned int d, unsigned int i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
}

/// Tabulate the coordinates of all dofs on a cell
void nsedualmomentum3d_dofmap_1::tabulate_coordinates(double** coordinates,
                                         const ufc::cell& c) const
{
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsedualmomentum3d_dofmap_1::num_sub_dofmaps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dofmap* nsedualmomentum3d_dofmap_1::create_sub_dofmap(unsigned int i) const
{
    return 0;
}

/// Create a new class instance
ufc::dofmap* nsedualmomentum3d_dofmap_1::create() const
{
    return new nsedualmomentum3d_dofmap_1();
}
#else

/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsedualmomentum3d_dofmap_1::num_sub_dof_maps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dof_map* nsedualmomentum3d_dofmap_1::create_sub_dof_map(unsigned int i) const
{
    return 0;
}

#endif

/// Constructor


#ifndef UFC_BACKWARD_COMPATIBILITY
nsedualmomentum3d_dofmap_2::nsedualmomentum3d_dofmap_2() : ufc::dofmap()
#else
nsedualmomentum3d_dofmap_2::nsedualmomentum3d_dofmap_2() : ufc::dof_map()
#endif
{
    _global_dimension = 0;
}

/// Destructor
nsedualmomentum3d_dofmap_2::~nsedualmomentum3d_dofmap_2()
{
    // Do nothing
}

/// Return a string identifying the dofmap
const char* nsedualmomentum3d_dofmap_2::signature() const
{
    return "FFC dofmap for VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None)";
}

/// Return true iff mesh entities of topological dimension d are needed
bool nsedualmomentum3d_dofmap_2::needs_mesh_entities(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
}

/// Initialize dofmap for mesh (return true iff init_cell() is needed)
bool nsedualmomentum3d_dofmap_2::init_mesh(const ufc::mesh& m)
{
    _global_dimension = 3*m.num_entities[0];
    return false;
}

/// Initialize dofmap for given cell
void nsedualmomentum3d_dofmap_2::init_cell(const ufc::mesh& m,
                              const ufc::cell& c)
{
    // Do nothing
}

/// Finish initialization of dofmap for cells
void nsedualmomentum3d_dofmap_2::init_cell_finalize()
{
    // Do nothing
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the associated cell shape
unsigned int nsedualmomentum3d_dofmap_2::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the associated cell shape
unsigned int nsedualmomentum3d_dofmap_2::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the global finite element function space
unsigned int nsedualmomentum3d_dofmap_2::global_dimension() const
{
    return _global_dimension;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the dimension of the local finite element function space for a cell
unsigned int nsedualmomentum3d_dofmap_2::local_dimension(const ufc::cell& c) const
{
    return 12;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsedualmomentum3d_dofmap_2::max_local_dimension() const
{
    return 12;
}
#else

/// Return the dimension of the local finite element function space for a cell
unsigned int nsedualmomentum3d_dofmap_2::local_dimension() const
{
    return 12;
}

/// Return the maximum dimension of the local finite element function space
unsigned int nsedualmomentum3d_dofmap_2::geometric_dimension() const
{
    return 3;
}

#endif
/// Return the number of dofs on each cell facet
unsigned int nsedualmomentum3d_dofmap_2::num_facet_dofs() const
{
    return 9;
}

/// Return the number of dofs associated with each cell entity of dimension d
unsigned int nsedualmomentum3d_dofmap_2::num_entity_dofs(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

/// Tabulate the local-to-global mapping of dofs on a cell
void nsedualmomentum3d_dofmap_2::tabulate_dofs(unsigned int* dofs,
                                  const ufc::mesh& m,
                                  const ufc::cell& c) const
{
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    dofs[3] = offset + c.entity_indices[0][3];
    offset += m.num_entities[0];
    dofs[4] = offset + c.entity_indices[0][0];
    dofs[5] = offset + c.entity_indices[0][1];
    dofs[6] = offset + c.entity_indices[0][2];
    dofs[7] = offset + c.entity_indices[0][3];
    offset += m.num_entities[0];
    dofs[8] = offset + c.entity_indices[0][0];
    dofs[9] = offset + c.entity_indices[0][1];
    dofs[10] = offset + c.entity_indices[0][2];
    dofs[11] = offset + c.entity_indices[0][3];
    offset += m.num_entities[0];
}

/// Tabulate the local-to-local mapping from facet dofs to cell dofs
void nsedualmomentum3d_dofmap_2::tabulate_facet_dofs(unsigned int* dofs,
                                        unsigned int facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
        break;
      }
    }
    
}

/// Tabulate the local-to-local mapping of dofs on entity (d, i)
void nsedualmomentum3d_dofmap_2::tabulate_entity_dofs(unsigned int* dofs,
                                  unsigned int d, unsigned int i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
}

/// Tabulate the coordinates of all dofs on a cell
void nsedualmomentum3d_dofmap_2::tabulate_coordinates(double** coordinates,
                                         const ufc::cell& c) const
{
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = x[0][0];
    coordinates[4][1] = x[0][1];
    coordinates[4][2] = x[0][2];
    coordinates[5][0] = x[1][0];
    coordinates[5][1] = x[1][1];
    coordinates[5][2] = x[1][2];
    coordinates[6][0] = x[2][0];
    coordinates[6][1] = x[2][1];
    coordinates[6][2] = x[2][2];
    coordinates[7][0] = x[3][0];
    coordinates[7][1] = x[3][1];
    coordinates[7][2] = x[3][2];
    coordinates[8][0] = x[0][0];
    coordinates[8][1] = x[0][1];
    coordinates[8][2] = x[0][2];
    coordinates[9][0] = x[1][0];
    coordinates[9][1] = x[1][1];
    coordinates[9][2] = x[1][2];
    coordinates[10][0] = x[2][0];
    coordinates[10][1] = x[2][1];
    coordinates[10][2] = x[2][2];
    coordinates[11][0] = x[3][0];
    coordinates[11][1] = x[3][1];
    coordinates[11][2] = x[3][2];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsedualmomentum3d_dofmap_2::num_sub_dofmaps() const
{
    return 3;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dofmap* nsedualmomentum3d_dofmap_2::create_sub_dofmap(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsedualmomentum3d_dofmap_1();
        break;
      }
    case 1:
      {
        return new nsedualmomentum3d_dofmap_1();
        break;
      }
    case 2:
      {
        return new nsedualmomentum3d_dofmap_1();
        break;
      }
    }
    
    return 0;
}

/// Create a new class instance
ufc::dofmap* nsedualmomentum3d_dofmap_2::create() const
{
    return new nsedualmomentum3d_dofmap_2();
}
#else

/// Return the number of sub dofmaps (for a mixed element)
unsigned int nsedualmomentum3d_dofmap_2::num_sub_dof_maps() const
{
    return 3;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dof_map* nsedualmomentum3d_dofmap_2::create_sub_dof_map(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsedualmomentum3d_dofmap_1();
        break;
      }
    case 1:
      {
        return new nsedualmomentum3d_dofmap_1();
        break;
      }
    case 2:
      {
        return new nsedualmomentum3d_dofmap_1();
        break;
      }
    }
    
    return 0;
}

#endif

/// Constructor
nsedualmomentum3d_cell_integral_0_0::nsedualmomentum3d_cell_integral_0_0() : ufc::cell_integral()
{
    // Do nothing
}

/// Destructor
nsedualmomentum3d_cell_integral_0_0::~nsedualmomentum3d_cell_integral_0_0()
{
    // Do nothing
}

/// Tabulate the tensor for the contribution from a local cell
void nsedualmomentum3d_cell_integral_0_0::tabulate_tensor(double* A,
                                    const double * const * w,
                                    const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Cell Volume.
    
    // Compute circumradius.
    
    
    // Facet Area (divide by two because 'det' is scaled by area of reference triangle).
    
    // Array of quadrature weights.
    static const double W14[14] = {0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.0147649707904968, 0.0147649707904968, 0.0147649707904968, 0.0147649707904968, 0.0221397911142651, 0.0221397911142651, 0.0221397911142651, 0.0221397911142651};
    // Quadrature points on the UFC reference element: (0.0, 0.5, 0.5), (0.5, 0.0, 0.5), (0.5, 0.5, 0.0), (0.5, 0.0, 0.0), (0.0, 0.5, 0.0), (0.0, 0.0, 0.5), (0.698419704324387, 0.100526765225204, 0.100526765225204), (0.100526765225204, 0.100526765225204, 0.100526765225204), (0.100526765225204, 0.100526765225204, 0.698419704324387), (0.100526765225204, 0.698419704324387, 0.100526765225204), (0.0568813795204234, 0.314372873493192, 0.314372873493192), (0.314372873493192, 0.314372873493192, 0.314372873493192), (0.314372873493192, 0.314372873493192, 0.0568813795204234), (0.314372873493192, 0.0568813795204234, 0.314372873493192)
    
    // Value of basis functions at quadrature points.
    static const double FE0[14][4] = \
    {{0.0, 0.0, 0.5, 0.5},
    {0.0, 0.5, 0.0, 0.5},
    {0.0, 0.5, 0.5, 0.0},
    {0.5, 0.5, 0.0, 0.0},
    {0.5, 0.0, 0.5, 0.0},
    {0.5, 0.0, 0.0, 0.5},
    {0.100526765225205, 0.698419704324386, 0.100526765225205, 0.100526765225205},
    {0.698419704324387, 0.100526765225204, 0.100526765225205, 0.100526765225205},
    {0.100526765225205, 0.100526765225204, 0.100526765225205, 0.698419704324386},
    {0.100526765225205, 0.100526765225204, 0.698419704324386, 0.100526765225205},
    {0.314372873493192, 0.0568813795204234, 0.314372873493192, 0.314372873493192},
    {0.0568813795204235, 0.314372873493192, 0.314372873493192, 0.314372873493192},
    {0.314372873493192, 0.314372873493192, 0.314372873493192, 0.0568813795204234},
    {0.314372873493192, 0.314372873493192, 0.0568813795204235, 0.314372873493192}};
    
    // Array of non-zero columns
    static const unsigned int nzc7[4] = {4, 5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc3[4] = {0, 1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc11[4] = {8, 9, 10, 11};
    
    static const double FE0_D001[14][2] = \
    {{-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc10[2] = {4, 5};
    
    // Array of non-zero columns
    static const unsigned int nzc5[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc6[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc2[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc14[2] = {8, 9};
    
    // Array of non-zero columns
    static const unsigned int nzc4[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc0[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc12[2] = {8, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc13[2] = {8, 10};
    
    // Array of non-zero columns
    static const unsigned int nzc8[2] = {4, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc9[2] = {4, 6};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 144; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    // Number of operations to compute geometry constants: 1558.
    double G[220];
    G[0] = 0.5*std::pow(w[3][0], 0.5)*K_01*K_01*det*w[3][0]*w[5][0];
    G[1] = 0.5*det*w[3][0]*(std::pow(w[3][0], 0.5)*w[7][0]*(K_00*K_00 + K_01*K_01 + K_02*K_02) + w[11][0]*w[3][0]*w[6][0]*(K_00*K_00 + K_01*K_01 + K_02*K_02));
    G[2] = 0.03125*std::pow(w[3][0], 0.5)*K_02*K_02*det*w[3][0]*w[5][0];
    G[3] = 0.0625*std::pow(w[3][0], 0.5)*K_02*K_02*det*w[3][0]*w[5][0];
    G[4] = 0.0625*std::pow(w[3][0], 0.5)*K_00*K_02*det*w[3][0]*w[5][0];
    G[5] = 0.125*std::pow(w[3][0], 0.5)*K_00*K_02*det*w[3][0]*w[5][0];
    G[6] = 0.0625*std::pow(w[3][0], 0.5)*K_01*K_02*det*w[3][0]*w[5][0];
    G[7] = 0.125*std::pow(w[3][0], 0.5)*K_01*K_02*det*w[3][0]*w[5][0];
    G[8] = 0.125*std::pow(w[3][0], 0.5)*K_02*K_02*det*w[3][0]*w[5][0];
    G[9] = 0.03125*std::pow(w[3][0], 0.5)*K_00*K_00*det*w[3][0]*w[5][0];
    G[10] = 0.0625*std::pow(w[3][0], 0.5)*K_00*K_00*det*w[3][0]*w[5][0];
    G[11] = 0.0625*std::pow(w[3][0], 0.5)*K_00*K_01*det*w[3][0]*w[5][0];
    G[12] = 0.125*std::pow(w[3][0], 0.5)*K_00*K_01*det*w[3][0]*w[5][0];
    G[13] = 0.125*std::pow(w[3][0], 0.5)*K_00*K_00*det*w[3][0]*w[5][0];
    G[14] = 0.03125*std::pow(w[3][0], 0.5)*K_01*K_01*det*w[3][0]*w[5][0];
    G[15] = 0.0625*std::pow(w[3][0], 0.5)*K_01*K_01*det*w[3][0]*w[5][0];
    G[16] = 0.125*std::pow(w[3][0], 0.5)*K_01*K_01*det*w[3][0]*w[5][0];
    G[17] = 0.5*det*(K_00*K_00 + K_01*K_01 + K_02*K_02);
    G[18] = 0.5*std::pow(w[3][0], 0.5)*K_01*K_22*det*w[3][0]*w[5][0];
    G[19] = 0.5*std::pow(w[3][0], 0.5)*K_01*K_12*det*w[3][0]*w[5][0];
    G[20] = 0.5*std::pow(w[3][0], 0.5)*K_01*K_02*det*w[3][0]*w[5][0];
    G[21] = 0.5*std::pow(w[3][0], 0.5)*K_01*K_20*det*w[3][0]*w[5][0];
    G[22] = 0.5*std::pow(w[3][0], 0.5)*K_01*K_10*det*w[3][0]*w[5][0];
    G[23] = 0.5*std::pow(w[3][0], 0.5)*K_00*K_01*det*w[3][0]*w[5][0];
    G[24] = 0.5*std::pow(w[3][0], 0.5)*K_01*K_21*det*w[3][0]*w[5][0];
    G[25] = 0.5*det*w[3][0]*(std::pow(w[3][0], 0.5)*w[7][0]*(K_00*K_20 + K_01*K_21 + K_02*K_22) + w[11][0]*w[3][0]*w[6][0]*(K_00*K_20 + K_01*K_21 + K_02*K_22));
    G[26] = 0.03125*std::pow(w[3][0], 0.5)*K_02*K_22*det*w[3][0]*w[5][0];
    G[27] = 0.0625*std::pow(w[3][0], 0.5)*K_02*K_22*det*w[3][0]*w[5][0];
    G[28] = 0.03125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_00*K_22 + K_02*K_20);
    G[29] = 0.0625*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_00*K_22 + K_02*K_20);
    G[30] = 0.03125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_01*K_22 + K_02*K_21);
    G[31] = 0.0625*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_01*K_22 + K_02*K_21);
    G[32] = 0.125*std::pow(w[3][0], 0.5)*K_02*K_22*det*w[3][0]*w[5][0];
    G[33] = 0.03125*std::pow(w[3][0], 0.5)*K_00*K_20*det*w[3][0]*w[5][0];
    G[34] = 0.0625*std::pow(w[3][0], 0.5)*K_00*K_20*det*w[3][0]*w[5][0];
    G[35] = 0.03125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_00*K_21 + K_01*K_20);
    G[36] = 0.0625*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_00*K_21 + K_01*K_20);
    G[37] = 0.125*std::pow(w[3][0], 0.5)*K_00*K_20*det*w[3][0]*w[5][0];
    G[38] = 0.03125*std::pow(w[3][0], 0.5)*K_01*K_21*det*w[3][0]*w[5][0];
    G[39] = 0.0625*std::pow(w[3][0], 0.5)*K_01*K_21*det*w[3][0]*w[5][0];
    G[40] = 0.125*std::pow(w[3][0], 0.5)*K_01*K_21*det*w[3][0]*w[5][0];
    G[41] = 0.5*det*(K_00*K_20 + K_01*K_21 + K_02*K_22);
    G[42] = 0.5*std::pow(w[3][0], 0.5)*K_01*K_11*det*w[3][0]*w[5][0];
    G[43] = 0.5*det*w[3][0]*(std::pow(w[3][0], 0.5)*w[7][0]*(K_00*K_10 + K_01*K_11 + K_02*K_12) + w[11][0]*w[3][0]*w[6][0]*(K_00*K_10 + K_01*K_11 + K_02*K_12));
    G[44] = 0.03125*std::pow(w[3][0], 0.5)*K_02*K_12*det*w[3][0]*w[5][0];
    G[45] = 0.0625*std::pow(w[3][0], 0.5)*K_02*K_12*det*w[3][0]*w[5][0];
    G[46] = 0.03125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_00*K_12 + K_02*K_10);
    G[47] = 0.0625*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_00*K_12 + K_02*K_10);
    G[48] = 0.03125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_01*K_12 + K_02*K_11);
    G[49] = 0.0625*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_01*K_12 + K_02*K_11);
    G[50] = 0.125*std::pow(w[3][0], 0.5)*K_02*K_12*det*w[3][0]*w[5][0];
    G[51] = 0.03125*std::pow(w[3][0], 0.5)*K_00*K_10*det*w[3][0]*w[5][0];
    G[52] = 0.0625*std::pow(w[3][0], 0.5)*K_00*K_10*det*w[3][0]*w[5][0];
    G[53] = 0.03125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_00*K_11 + K_01*K_10);
    G[54] = 0.0625*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_00*K_11 + K_01*K_10);
    G[55] = 0.125*std::pow(w[3][0], 0.5)*K_00*K_10*det*w[3][0]*w[5][0];
    G[56] = 0.03125*std::pow(w[3][0], 0.5)*K_01*K_11*det*w[3][0]*w[5][0];
    G[57] = 0.0625*std::pow(w[3][0], 0.5)*K_01*K_11*det*w[3][0]*w[5][0];
    G[58] = 0.125*std::pow(w[3][0], 0.5)*K_01*K_11*det*w[3][0]*w[5][0];
    G[59] = 0.5*det*(K_00*K_10 + K_01*K_11 + K_02*K_12);
    G[60] = 0.5*std::pow(w[3][0], 0.5)*K_22*K_22*det*w[3][0]*w[5][0];
    G[61] = 0.5*det*w[3][0]*(std::pow(w[3][0], 0.5)*w[7][0]*(K_20*K_20 + K_21*K_21 + K_22*K_22) + w[11][0]*w[3][0]*w[6][0]*(K_20*K_20 + K_21*K_21 + K_22*K_22));
    G[62] = 0.03125*std::pow(w[3][0], 0.5)*K_22*K_22*det*w[3][0]*w[5][0];
    G[63] = 0.0625*std::pow(w[3][0], 0.5)*K_22*K_22*det*w[3][0]*w[5][0];
    G[64] = 0.0625*std::pow(w[3][0], 0.5)*K_20*K_22*det*w[3][0]*w[5][0];
    G[65] = 0.125*std::pow(w[3][0], 0.5)*K_20*K_22*det*w[3][0]*w[5][0];
    G[66] = 0.0625*std::pow(w[3][0], 0.5)*K_21*K_22*det*w[3][0]*w[5][0];
    G[67] = 0.125*std::pow(w[3][0], 0.5)*K_21*K_22*det*w[3][0]*w[5][0];
    G[68] = 0.125*std::pow(w[3][0], 0.5)*K_22*K_22*det*w[3][0]*w[5][0];
    G[69] = 0.03125*std::pow(w[3][0], 0.5)*K_20*K_20*det*w[3][0]*w[5][0];
    G[70] = 0.0625*std::pow(w[3][0], 0.5)*K_20*K_20*det*w[3][0]*w[5][0];
    G[71] = 0.0625*std::pow(w[3][0], 0.5)*K_20*K_21*det*w[3][0]*w[5][0];
    G[72] = 0.125*std::pow(w[3][0], 0.5)*K_20*K_21*det*w[3][0]*w[5][0];
    G[73] = 0.125*std::pow(w[3][0], 0.5)*K_20*K_20*det*w[3][0]*w[5][0];
    G[74] = 0.03125*std::pow(w[3][0], 0.5)*K_21*K_21*det*w[3][0]*w[5][0];
    G[75] = 0.0625*std::pow(w[3][0], 0.5)*K_21*K_21*det*w[3][0]*w[5][0];
    G[76] = 0.125*std::pow(w[3][0], 0.5)*K_21*K_21*det*w[3][0]*w[5][0];
    G[77] = 0.5*det*(K_20*K_20 + K_21*K_21 + K_22*K_22);
    G[78] = 0.5*std::pow(w[3][0], 0.5)*K_12*K_22*det*w[3][0]*w[5][0];
    G[79] = 0.5*det*w[3][0]*(std::pow(w[3][0], 0.5)*w[7][0]*(K_10*K_20 + K_11*K_21 + K_12*K_22) + w[11][0]*w[3][0]*w[6][0]*(K_10*K_20 + K_11*K_21 + K_12*K_22));
    G[80] = 0.03125*std::pow(w[3][0], 0.5)*K_12*K_22*det*w[3][0]*w[5][0];
    G[81] = 0.0625*std::pow(w[3][0], 0.5)*K_12*K_22*det*w[3][0]*w[5][0];
    G[82] = 0.03125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_10*K_22 + K_12*K_20);
    G[83] = 0.0625*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_10*K_22 + K_12*K_20);
    G[84] = 0.03125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_11*K_22 + K_12*K_21);
    G[85] = 0.0625*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_11*K_22 + K_12*K_21);
    G[86] = 0.125*std::pow(w[3][0], 0.5)*K_12*K_22*det*w[3][0]*w[5][0];
    G[87] = 0.03125*std::pow(w[3][0], 0.5)*K_10*K_20*det*w[3][0]*w[5][0];
    G[88] = 0.0625*std::pow(w[3][0], 0.5)*K_10*K_20*det*w[3][0]*w[5][0];
    G[89] = 0.03125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_10*K_21 + K_11*K_20);
    G[90] = 0.0625*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_10*K_21 + K_11*K_20);
    G[91] = 0.125*std::pow(w[3][0], 0.5)*K_10*K_20*det*w[3][0]*w[5][0];
    G[92] = 0.03125*std::pow(w[3][0], 0.5)*K_11*K_21*det*w[3][0]*w[5][0];
    G[93] = 0.0625*std::pow(w[3][0], 0.5)*K_11*K_21*det*w[3][0]*w[5][0];
    G[94] = 0.125*std::pow(w[3][0], 0.5)*K_11*K_21*det*w[3][0]*w[5][0];
    G[95] = 0.5*det*(K_10*K_20 + K_11*K_21 + K_12*K_22);
    G[96] = 0.5*std::pow(w[3][0], 0.5)*K_02*K_22*det*w[3][0]*w[5][0];
    G[97] = 0.5*std::pow(w[3][0], 0.5)*K_20*K_22*det*w[3][0]*w[5][0];
    G[98] = 0.5*std::pow(w[3][0], 0.5)*K_10*K_22*det*w[3][0]*w[5][0];
    G[99] = 0.5*std::pow(w[3][0], 0.5)*K_00*K_22*det*w[3][0]*w[5][0];
    G[100] = 0.5*std::pow(w[3][0], 0.5)*K_21*K_22*det*w[3][0]*w[5][0];
    G[101] = 0.5*std::pow(w[3][0], 0.5)*K_11*K_22*det*w[3][0]*w[5][0];
    G[102] = 0.5*std::pow(w[3][0], 0.5)*K_12*K_12*det*w[3][0]*w[5][0];
    G[103] = 0.5*det*w[3][0]*(std::pow(w[3][0], 0.5)*w[7][0]*(K_10*K_10 + K_11*K_11 + K_12*K_12) + w[11][0]*w[3][0]*w[6][0]*(K_10*K_10 + K_11*K_11 + K_12*K_12));
    G[104] = 0.03125*std::pow(w[3][0], 0.5)*K_12*K_12*det*w[3][0]*w[5][0];
    G[105] = 0.0625*std::pow(w[3][0], 0.5)*K_12*K_12*det*w[3][0]*w[5][0];
    G[106] = 0.0625*std::pow(w[3][0], 0.5)*K_10*K_12*det*w[3][0]*w[5][0];
    G[107] = 0.125*std::pow(w[3][0], 0.5)*K_10*K_12*det*w[3][0]*w[5][0];
    G[108] = 0.0625*std::pow(w[3][0], 0.5)*K_11*K_12*det*w[3][0]*w[5][0];
    G[109] = 0.125*std::pow(w[3][0], 0.5)*K_11*K_12*det*w[3][0]*w[5][0];
    G[110] = 0.125*std::pow(w[3][0], 0.5)*K_12*K_12*det*w[3][0]*w[5][0];
    G[111] = 0.03125*std::pow(w[3][0], 0.5)*K_10*K_10*det*w[3][0]*w[5][0];
    G[112] = 0.0625*std::pow(w[3][0], 0.5)*K_10*K_10*det*w[3][0]*w[5][0];
    G[113] = 0.0625*std::pow(w[3][0], 0.5)*K_10*K_11*det*w[3][0]*w[5][0];
    G[114] = 0.125*std::pow(w[3][0], 0.5)*K_10*K_11*det*w[3][0]*w[5][0];
    G[115] = 0.125*std::pow(w[3][0], 0.5)*K_10*K_10*det*w[3][0]*w[5][0];
    G[116] = 0.03125*std::pow(w[3][0], 0.5)*K_11*K_11*det*w[3][0]*w[5][0];
    G[117] = 0.0625*std::pow(w[3][0], 0.5)*K_11*K_11*det*w[3][0]*w[5][0];
    G[118] = 0.125*std::pow(w[3][0], 0.5)*K_11*K_11*det*w[3][0]*w[5][0];
    G[119] = 0.5*det*(K_10*K_10 + K_11*K_11 + K_12*K_12);
    G[120] = 0.5*std::pow(w[3][0], 0.5)*K_02*K_12*det*w[3][0]*w[5][0];
    G[121] = 0.5*std::pow(w[3][0], 0.5)*K_12*K_20*det*w[3][0]*w[5][0];
    G[122] = 0.5*std::pow(w[3][0], 0.5)*K_10*K_12*det*w[3][0]*w[5][0];
    G[123] = 0.5*std::pow(w[3][0], 0.5)*K_00*K_12*det*w[3][0]*w[5][0];
    G[124] = 0.5*std::pow(w[3][0], 0.5)*K_12*K_21*det*w[3][0]*w[5][0];
    G[125] = 0.5*std::pow(w[3][0], 0.5)*K_11*K_12*det*w[3][0]*w[5][0];
    G[126] = 0.5*std::pow(w[3][0], 0.5)*K_02*K_02*det*w[3][0]*w[5][0];
    G[127] = 0.5*std::pow(w[3][0], 0.5)*K_02*K_20*det*w[3][0]*w[5][0];
    G[128] = 0.5*std::pow(w[3][0], 0.5)*K_02*K_10*det*w[3][0]*w[5][0];
    G[129] = 0.5*std::pow(w[3][0], 0.5)*K_00*K_02*det*w[3][0]*w[5][0];
    G[130] = 0.5*std::pow(w[3][0], 0.5)*K_02*K_21*det*w[3][0]*w[5][0];
    G[131] = 0.5*std::pow(w[3][0], 0.5)*K_02*K_11*det*w[3][0]*w[5][0];
    G[132] = 0.5*std::pow(w[3][0], 0.5)*K_20*K_20*det*w[3][0]*w[5][0];
    G[133] = 0.5*std::pow(w[3][0], 0.5)*K_10*K_20*det*w[3][0]*w[5][0];
    G[134] = 0.5*std::pow(w[3][0], 0.5)*K_00*K_20*det*w[3][0]*w[5][0];
    G[135] = 0.5*std::pow(w[3][0], 0.5)*K_20*K_21*det*w[3][0]*w[5][0];
    G[136] = 0.5*std::pow(w[3][0], 0.5)*K_11*K_20*det*w[3][0]*w[5][0];
    G[137] = 0.5*std::pow(w[3][0], 0.5)*K_10*K_10*det*w[3][0]*w[5][0];
    G[138] = 0.5*std::pow(w[3][0], 0.5)*K_00*K_10*det*w[3][0]*w[5][0];
    G[139] = 0.5*std::pow(w[3][0], 0.5)*K_10*K_21*det*w[3][0]*w[5][0];
    G[140] = 0.5*std::pow(w[3][0], 0.5)*K_10*K_11*det*w[3][0]*w[5][0];
    G[141] = 0.5*std::pow(w[3][0], 0.5)*K_00*K_00*det*w[3][0]*w[5][0];
    G[142] = 0.5*std::pow(w[3][0], 0.5)*K_00*K_21*det*w[3][0]*w[5][0];
    G[143] = 0.5*std::pow(w[3][0], 0.5)*K_00*K_11*det*w[3][0]*w[5][0];
    G[144] = 0.5*std::pow(w[3][0], 0.5)*K_21*K_21*det*w[3][0]*w[5][0];
    G[145] = 0.5*std::pow(w[3][0], 0.5)*K_11*K_21*det*w[3][0]*w[5][0];
    G[146] = 0.5*std::pow(w[3][0], 0.5)*K_11*K_11*det*w[3][0]*w[5][0];
    G[147] = 0.125*K_02*det;
    G[148] = 0.125*K_00*det;
    G[149] = 0.125*K_01*det;
    G[150] = -0.125*K_00*det;
    G[151] = -0.125*K_01*det;
    G[152] = -0.125*K_02*det;
    G[153] = 0.125*K_22*det;
    G[154] = 0.125*K_20*det;
    G[155] = 0.125*K_21*det;
    G[156] = -0.125*K_20*det;
    G[157] = -0.125*K_21*det;
    G[158] = -0.125*K_22*det;
    G[159] = 0.125*K_12*det;
    G[160] = 0.125*K_10*det;
    G[161] = 0.125*K_11*det;
    G[162] = -0.125*K_10*det;
    G[163] = -0.125*K_11*det;
    G[164] = -0.125*K_12*det;
    G[165] = -0.125*std::pow(w[3][0], 0.5)*K_02*det*w[3][0]*w[5][0];
    G[166] = -0.25*std::pow(w[3][0], 0.5)*K_02*det*w[3][0]*w[5][0];
    G[167] = -0.125*std::pow(w[3][0], 0.5)*K_22*det*w[3][0]*w[5][0];
    G[168] = -0.25*std::pow(w[3][0], 0.5)*K_22*det*w[3][0]*w[5][0];
    G[169] = -0.125*std::pow(w[3][0], 0.5)*K_12*det*w[3][0]*w[5][0];
    G[170] = -0.25*std::pow(w[3][0], 0.5)*K_12*det*w[3][0]*w[5][0];
    G[171] = -0.125*std::pow(w[3][0], 0.5)*K_00*det*w[3][0]*w[5][0];
    G[172] = -0.25*std::pow(w[3][0], 0.5)*K_00*det*w[3][0]*w[5][0];
    G[173] = -0.125*std::pow(w[3][0], 0.5)*K_20*det*w[3][0]*w[5][0];
    G[174] = -0.25*std::pow(w[3][0], 0.5)*K_20*det*w[3][0]*w[5][0];
    G[175] = -0.125*std::pow(w[3][0], 0.5)*K_10*det*w[3][0]*w[5][0];
    G[176] = -0.25*std::pow(w[3][0], 0.5)*K_10*det*w[3][0]*w[5][0];
    G[177] = -0.125*std::pow(w[3][0], 0.5)*K_01*det*w[3][0]*w[5][0];
    G[178] = -0.25*std::pow(w[3][0], 0.5)*K_01*det*w[3][0]*w[5][0];
    G[179] = -0.125*std::pow(w[3][0], 0.5)*K_21*det*w[3][0]*w[5][0];
    G[180] = -0.25*std::pow(w[3][0], 0.5)*K_21*det*w[3][0]*w[5][0];
    G[181] = -0.125*std::pow(w[3][0], 0.5)*K_11*det*w[3][0]*w[5][0];
    G[182] = -0.25*std::pow(w[3][0], 0.5)*K_11*det*w[3][0]*w[5][0];
    G[183] = det/w[4][0];
    G[184] = 0.25*std::pow(w[3][0], 0.5)*K_02*K_12*det*w[3][0]*w[5][0];
    G[185] = 0.25*std::pow(w[3][0], 0.5)*K_02*K_22*det*w[3][0]*w[5][0];
    G[186] = 0.25*std::pow(w[3][0], 0.5)*K_02*K_02*det*w[3][0]*w[5][0];
    G[187] = 0.25*std::pow(w[3][0], 0.5)*K_12*K_22*det*w[3][0]*w[5][0];
    G[188] = 0.25*std::pow(w[3][0], 0.5)*K_12*K_12*det*w[3][0]*w[5][0];
    G[189] = 0.25*std::pow(w[3][0], 0.5)*K_22*K_22*det*w[3][0]*w[5][0];
    G[190] = 0.125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_00*K_12 + K_02*K_10);
    G[191] = 0.125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_00*K_22 + K_02*K_20);
    G[192] = 0.25*std::pow(w[3][0], 0.5)*K_00*K_02*det*w[3][0]*w[5][0];
    G[193] = 0.125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_10*K_22 + K_12*K_20);
    G[194] = 0.25*std::pow(w[3][0], 0.5)*K_10*K_12*det*w[3][0]*w[5][0];
    G[195] = 0.25*std::pow(w[3][0], 0.5)*K_20*K_22*det*w[3][0]*w[5][0];
    G[196] = 0.125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_01*K_12 + K_02*K_11);
    G[197] = 0.125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_01*K_22 + K_02*K_21);
    G[198] = 0.25*std::pow(w[3][0], 0.5)*K_01*K_02*det*w[3][0]*w[5][0];
    G[199] = 0.125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_11*K_22 + K_12*K_21);
    G[200] = 0.25*std::pow(w[3][0], 0.5)*K_11*K_12*det*w[3][0]*w[5][0];
    G[201] = 0.25*std::pow(w[3][0], 0.5)*K_21*K_22*det*w[3][0]*w[5][0];
    G[202] = 0.25*std::pow(w[3][0], 0.5)*K_00*K_10*det*w[3][0]*w[5][0];
    G[203] = 0.25*std::pow(w[3][0], 0.5)*K_00*K_20*det*w[3][0]*w[5][0];
    G[204] = 0.25*std::pow(w[3][0], 0.5)*K_00*K_00*det*w[3][0]*w[5][0];
    G[205] = 0.25*std::pow(w[3][0], 0.5)*K_10*K_20*det*w[3][0]*w[5][0];
    G[206] = 0.25*std::pow(w[3][0], 0.5)*K_10*K_10*det*w[3][0]*w[5][0];
    G[207] = 0.25*std::pow(w[3][0], 0.5)*K_20*K_20*det*w[3][0]*w[5][0];
    G[208] = 0.125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_00*K_11 + K_01*K_10);
    G[209] = 0.125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_00*K_21 + K_01*K_20);
    G[210] = 0.25*std::pow(w[3][0], 0.5)*K_00*K_01*det*w[3][0]*w[5][0];
    G[211] = 0.125*std::pow(w[3][0], 0.5)*det*w[3][0]*w[5][0]*(K_10*K_21 + K_11*K_20);
    G[212] = 0.25*std::pow(w[3][0], 0.5)*K_10*K_11*det*w[3][0]*w[5][0];
    G[213] = 0.25*std::pow(w[3][0], 0.5)*K_20*K_21*det*w[3][0]*w[5][0];
    G[214] = 0.25*std::pow(w[3][0], 0.5)*K_01*K_11*det*w[3][0]*w[5][0];
    G[215] = 0.25*std::pow(w[3][0], 0.5)*K_01*K_21*det*w[3][0]*w[5][0];
    G[216] = 0.25*std::pow(w[3][0], 0.5)*K_01*K_01*det*w[3][0]*w[5][0];
    G[217] = 0.25*std::pow(w[3][0], 0.5)*K_11*K_21*det*w[3][0]*w[5][0];
    G[218] = 0.25*std::pow(w[3][0], 0.5)*K_11*K_11*det*w[3][0]*w[5][0];
    G[219] = 0.25*std::pow(w[3][0], 0.5)*K_21*K_21*det*w[3][0]*w[5][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 159348
    for (unsigned int ip = 0; ip < 14; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      double F13 = 0.0;
      double F14 = 0.0;
      double F15 = 0.0;
      double F16 = 0.0;
      double F17 = 0.0;
      double F18 = 0.0;
      double F19 = 0.0;
      double F20 = 0.0;
      double F21 = 0.0;
      double F22 = 0.0;
      double F23 = 0.0;
      double F24 = 0.0;
      double F25 = 0.0;
      double F26 = 0.0;
      double F27 = 0.0;
      double F28 = 0.0;
      double F29 = 0.0;
      double F30 = 0.0;
      double F31 = 0.0;
      double F32 = 0.0;
      double F33 = 0.0;
      double F34 = 0.0;
      double F35 = 0.0;
      double F36 = 0.0;
      double F37 = 0.0;
      double F38 = 0.0;
      double F39 = 0.0;
      double F40 = 0.0;
      double F41 = 0.0;
      
      // Total number of operations to compute function values = 96
      for (unsigned int r = 0; r < 2; r++)
      {
        F3 += FE0_D001[ip][r]*w[0][nzc6[r]];
        F4 += FE0_D001[ip][r]*w[0][nzc5[r]];
        F5 += FE0_D001[ip][r]*w[0][nzc4[r]];
        F6 += FE0_D001[ip][r]*w[8][nzc6[r]];
        F7 += FE0_D001[ip][r]*w[8][nzc5[r]];
        F8 += FE0_D001[ip][r]*w[8][nzc4[r]];
        F9 += FE0_D001[ip][r]*w[0][nzc10[r]];
        F10 += FE0_D001[ip][r]*w[0][nzc9[r]];
        F11 += FE0_D001[ip][r]*w[0][nzc8[r]];
        F12 += FE0_D001[ip][r]*w[8][nzc10[r]];
        F13 += FE0_D001[ip][r]*w[8][nzc9[r]];
        F14 += FE0_D001[ip][r]*w[8][nzc8[r]];
        F15 += FE0_D001[ip][r]*w[0][nzc14[r]];
        F16 += FE0_D001[ip][r]*w[0][nzc13[r]];
        F17 += FE0_D001[ip][r]*w[0][nzc12[r]];
        F18 += FE0_D001[ip][r]*w[8][nzc14[r]];
        F19 += FE0_D001[ip][r]*w[8][nzc13[r]];
        F20 += FE0_D001[ip][r]*w[8][nzc12[r]];
        F29 += FE0_D001[ip][r]*w[1][nzc2[r]];
        F30 += FE0_D001[ip][r]*w[1][nzc1[r]];
        F31 += FE0_D001[ip][r]*w[1][nzc0[r]];
        F32 += FE0_D001[ip][r]*w[9][nzc2[r]];
        F33 += FE0_D001[ip][r]*w[9][nzc1[r]];
        F34 += FE0_D001[ip][r]*w[9][nzc0[r]];
      }// end loop over 'r'
      
      // Total number of operations to compute function values = 144
      for (unsigned int r = 0; r < 4; r++)
      {
        F0 += FE0[ip][r]*w[0][nzc11[r]];
        F1 += FE0[ip][r]*w[0][nzc3[r]];
        F2 += FE0[ip][r]*w[0][nzc7[r]];
        F21 += FE0[ip][r]*w[1][r];
        F22 += FE0[ip][r]*w[9][r];
        F23 += FE0[ip][r]*w[8][nzc3[r]];
        F24 += FE0[ip][r]*w[8][nzc7[r]];
        F25 += FE0[ip][r]*w[8][nzc11[r]];
        F26 += FE0[ip][r]*w[10][nzc3[r]];
        F27 += FE0[ip][r]*w[10][nzc7[r]];
        F28 += FE0[ip][r]*w[10][nzc11[r]];
        F35 += FE0[ip][r]*w[12][nzc3[r]];
        F36 += FE0[ip][r]*w[13][nzc3[r]];
        F37 += FE0[ip][r]*w[12][nzc7[r]];
        F38 += FE0[ip][r]*w[13][nzc7[r]];
        F39 += FE0[ip][r]*w[12][nzc11[r]];
        F40 += FE0[ip][r]*w[13][nzc11[r]];
        F41 += FE0[ip][r]*w[2][r];
      }// end loop over 'r'
      double C[6];
      // Compute conditional, operations: 1.
      C[0] = (F0 < 0.0) ? -1.0 : 1.0;
      // Compute conditional, operations: 1.
      C[1] = (F0 == 0.0) ? 0.0 : C[0];
      // Compute conditional, operations: 1.
      C[2] = (F1 < 0.0) ? -1.0 : 1.0;
      // Compute conditional, operations: 1.
      C[3] = (F1 == 0.0) ? 0.0 : C[2];
      // Compute conditional, operations: 1.
      C[4] = (F2 < 0.0) ? -1.0 : 1.0;
      // Compute conditional, operations: 1.
      C[5] = (F2 == 0.0) ? 0.0 : C[4];
      
      // Number of operations to compute ip constants: 8868
      double I[84];
      // Number of operations: 150
      I[0] = W14[ip]*(G[0] + F21*F21*(F0*F0*G[2] + F1*(F0*G[4] + F1*G[9]) + F2*(F0*G[6] + F1*G[11] + F2*G[14]) + F23*(F0*G[4] + F1*G[10] + F2*G[11] + F23*G[9]) + F24*(F0*G[6] + F2*G[15] + F24*G[14] + G[11]*(F1 + F23)) + F25*(F0*G[3] + F25*G[2] + G[4]*(F1 + F23) + G[6]*(F2 + F24))) + F22*(F21*(F0*F0*G[3] + F1*(F0*G[5] + F1*G[10]) + F2*(F0*G[7] + F1*G[12] + F2*G[15]) + F23*(F0*G[5] + F1*G[13] + F2*G[12] + F23*G[10]) + F24*(F0*G[7] + F2*G[16] + F24*G[15] + G[12]*(F1 + F23)) + F25*(F0*G[8] + F25*G[3] + G[5]*(F1 + F23) + G[7]*(F2 + F24))) + F22*(F0*F0*G[2] + F1*(F0*G[4] + F1*G[9]) + F2*(F0*G[6] + F1*G[11] + F2*G[14]) + F23*(F0*G[4] + F1*G[10] + F2*G[11] + F23*G[9]) + F24*(F0*G[6] + F2*G[15] + F24*G[14] + G[11]*(F1 + F23)) + F25*(F0*G[3] + F25*G[2] + G[4]*(F1 + F23) + G[6]*(F2 + F24)))) + F41*G[17] + G[1]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 1
      I[1] = G[18]*W14[ip];
      
      // Number of operations: 1
      I[2] = G[19]*W14[ip];
      
      // Number of operations: 1
      I[3] = G[20]*W14[ip];
      
      // Number of operations: 1
      I[4] = G[21]*W14[ip];
      
      // Number of operations: 1
      I[5] = G[22]*W14[ip];
      
      // Number of operations: 1
      I[6] = G[23]*W14[ip];
      
      // Number of operations: 150
      I[7] = W14[ip]*(G[24] + F21*F21*(F0*F0*G[26] + F1*(F0*G[28] + F1*G[33]) + F2*(F0*G[30] + F1*G[35] + F2*G[38]) + F23*(F0*G[28] + F1*G[34] + F2*G[35] + F23*G[33]) + F24*(F0*G[30] + F2*G[39] + F24*G[38] + G[35]*(F1 + F23)) + F25*(F0*G[27] + F25*G[26] + G[28]*(F1 + F23) + G[30]*(F2 + F24))) + F22*(F21*(F0*F0*G[27] + F1*(F0*G[29] + F1*G[34]) + F2*(F0*G[31] + F1*G[36] + F2*G[39]) + F23*(F0*G[29] + F1*G[37] + F2*G[36] + F23*G[34]) + F24*(F0*G[31] + F2*G[40] + F24*G[39] + G[36]*(F1 + F23)) + F25*(F0*G[32] + F25*G[27] + G[29]*(F1 + F23) + G[31]*(F2 + F24))) + F22*(F0*F0*G[26] + F1*(F0*G[28] + F1*G[33]) + F2*(F0*G[30] + F1*G[35] + F2*G[38]) + F23*(F0*G[28] + F1*G[34] + F2*G[35] + F23*G[33]) + F24*(F0*G[30] + F2*G[39] + F24*G[38] + G[35]*(F1 + F23)) + F25*(F0*G[27] + F25*G[26] + G[28]*(F1 + F23) + G[30]*(F2 + F24)))) + F41*G[41] + G[25]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 150
      I[8] = W14[ip]*(G[42] + F21*F21*(F0*F0*G[44] + F1*(F0*G[46] + F1*G[51]) + F2*(F0*G[48] + F1*G[53] + F2*G[56]) + F23*(F0*G[46] + F1*G[52] + F2*G[53] + F23*G[51]) + F24*(F0*G[48] + F2*G[57] + F24*G[56] + G[53]*(F1 + F23)) + F25*(F0*G[45] + F25*G[44] + G[46]*(F1 + F23) + G[48]*(F2 + F24))) + F22*(F21*(F0*F0*G[45] + F1*(F0*G[47] + F1*G[52]) + F2*(F0*G[49] + F1*G[54] + F2*G[57]) + F23*(F0*G[47] + F1*G[55] + F2*G[54] + F23*G[52]) + F24*(F0*G[49] + F2*G[58] + F24*G[57] + G[54]*(F1 + F23)) + F25*(F0*G[50] + F25*G[45] + G[47]*(F1 + F23) + G[49]*(F2 + F24))) + F22*(F0*F0*G[44] + F1*(F0*G[46] + F1*G[51]) + F2*(F0*G[48] + F1*G[53] + F2*G[56]) + F23*(F0*G[46] + F1*G[52] + F2*G[53] + F23*G[51]) + F24*(F0*G[48] + F2*G[57] + F24*G[56] + G[53]*(F1 + F23)) + F25*(F0*G[45] + F25*G[44] + G[46]*(F1 + F23) + G[48]*(F2 + F24)))) + F41*G[59] + G[43]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 150
      I[9] = W14[ip]*(G[60] + F21*F21*(F0*F0*G[62] + F1*(F0*G[64] + F1*G[69]) + F2*(F0*G[66] + F1*G[71] + F2*G[74]) + F23*(F0*G[64] + F1*G[70] + F2*G[71] + F23*G[69]) + F24*(F0*G[66] + F2*G[75] + F24*G[74] + G[71]*(F1 + F23)) + F25*(F0*G[63] + F25*G[62] + G[64]*(F1 + F23) + G[66]*(F2 + F24))) + F22*(F21*(F0*F0*G[63] + F1*(F0*G[65] + F1*G[70]) + F2*(F0*G[67] + F1*G[72] + F2*G[75]) + F23*(F0*G[65] + F1*G[73] + F2*G[72] + F23*G[70]) + F24*(F0*G[67] + F2*G[76] + F24*G[75] + G[72]*(F1 + F23)) + F25*(F0*G[68] + F25*G[63] + G[65]*(F1 + F23) + G[67]*(F2 + F24))) + F22*(F0*F0*G[62] + F1*(F0*G[64] + F1*G[69]) + F2*(F0*G[66] + F1*G[71] + F2*G[74]) + F23*(F0*G[64] + F1*G[70] + F2*G[71] + F23*G[69]) + F24*(F0*G[66] + F2*G[75] + F24*G[74] + G[71]*(F1 + F23)) + F25*(F0*G[63] + F25*G[62] + G[64]*(F1 + F23) + G[66]*(F2 + F24)))) + F41*G[77] + G[61]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 150
      I[10] = W14[ip]*(G[78] + F21*F21*(F0*F0*G[80] + F1*(F0*G[82] + F1*G[87]) + F2*(F0*G[84] + F1*G[89] + F2*G[92]) + F23*(F0*G[82] + F1*G[88] + F2*G[89] + F23*G[87]) + F24*(F0*G[84] + F2*G[93] + F24*G[92] + G[89]*(F1 + F23)) + F25*(F0*G[81] + F25*G[80] + G[82]*(F1 + F23) + G[84]*(F2 + F24))) + F22*(F21*(F0*F0*G[81] + F1*(F0*G[83] + F1*G[88]) + F2*(F0*G[85] + F1*G[90] + F2*G[93]) + F23*(F0*G[83] + F1*G[91] + F2*G[90] + F23*G[88]) + F24*(F0*G[85] + F2*G[94] + F24*G[93] + G[90]*(F1 + F23)) + F25*(F0*G[86] + F25*G[81] + G[83]*(F1 + F23) + G[85]*(F2 + F24))) + F22*(F0*F0*G[80] + F1*(F0*G[82] + F1*G[87]) + F2*(F0*G[84] + F1*G[89] + F2*G[92]) + F23*(F0*G[82] + F1*G[88] + F2*G[89] + F23*G[87]) + F24*(F0*G[84] + F2*G[93] + F24*G[92] + G[89]*(F1 + F23)) + F25*(F0*G[81] + F25*G[80] + G[82]*(F1 + F23) + G[84]*(F2 + F24)))) + F41*G[95] + G[79]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 150
      I[11] = W14[ip]*(G[96] + F21*F21*(F0*F0*G[26] + F1*(F0*G[28] + F1*G[33]) + F2*(F0*G[30] + F1*G[35] + F2*G[38]) + F23*(F0*G[28] + F1*G[34] + F2*G[35] + F23*G[33]) + F24*(F0*G[30] + F2*G[39] + F24*G[38] + G[35]*(F1 + F23)) + F25*(F0*G[27] + F25*G[26] + G[28]*(F1 + F23) + G[30]*(F2 + F24))) + F22*(F21*(F0*F0*G[27] + F1*(F0*G[29] + F1*G[34]) + F2*(F0*G[31] + F1*G[36] + F2*G[39]) + F23*(F0*G[29] + F1*G[37] + F2*G[36] + F23*G[34]) + F24*(F0*G[31] + F2*G[40] + F24*G[39] + G[36]*(F1 + F23)) + F25*(F0*G[32] + F25*G[27] + G[29]*(F1 + F23) + G[31]*(F2 + F24))) + F22*(F0*F0*G[26] + F1*(F0*G[28] + F1*G[33]) + F2*(F0*G[30] + F1*G[35] + F2*G[38]) + F23*(F0*G[28] + F1*G[34] + F2*G[35] + F23*G[33]) + F24*(F0*G[30] + F2*G[39] + F24*G[38] + G[35]*(F1 + F23)) + F25*(F0*G[27] + F25*G[26] + G[28]*(F1 + F23) + G[30]*(F2 + F24)))) + F41*G[41] + G[25]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 1
      I[12] = G[97]*W14[ip];
      
      // Number of operations: 1
      I[13] = G[98]*W14[ip];
      
      // Number of operations: 1
      I[14] = G[99]*W14[ip];
      
      // Number of operations: 1
      I[15] = G[100]*W14[ip];
      
      // Number of operations: 1
      I[16] = G[101]*W14[ip];
      
      // Number of operations: 150
      I[17] = W14[ip]*(G[102] + F21*F21*(F0*F0*G[104] + F1*(F0*G[106] + F1*G[111]) + F2*(F0*G[108] + F1*G[113] + F2*G[116]) + F23*(F0*G[106] + F1*G[112] + F2*G[113] + F23*G[111]) + F24*(F0*G[108] + F2*G[117] + F24*G[116] + G[113]*(F1 + F23)) + F25*(F0*G[105] + F25*G[104] + G[106]*(F1 + F23) + G[108]*(F2 + F24))) + F22*(F21*(F0*F0*G[105] + F1*(F0*G[107] + F1*G[112]) + F2*(F0*G[109] + F1*G[114] + F2*G[117]) + F23*(F0*G[107] + F1*G[115] + F2*G[114] + F23*G[112]) + F24*(F0*G[109] + F2*G[118] + F24*G[117] + G[114]*(F1 + F23)) + F25*(F0*G[110] + F25*G[105] + G[107]*(F1 + F23) + G[109]*(F2 + F24))) + F22*(F0*F0*G[104] + F1*(F0*G[106] + F1*G[111]) + F2*(F0*G[108] + F1*G[113] + F2*G[116]) + F23*(F0*G[106] + F1*G[112] + F2*G[113] + F23*G[111]) + F24*(F0*G[108] + F2*G[117] + F24*G[116] + G[113]*(F1 + F23)) + F25*(F0*G[105] + F25*G[104] + G[106]*(F1 + F23) + G[108]*(F2 + F24)))) + F41*G[119] + G[103]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 150
      I[18] = W14[ip]*(G[120] + F21*F21*(F0*F0*G[44] + F1*(F0*G[46] + F1*G[51]) + F2*(F0*G[48] + F1*G[53] + F2*G[56]) + F23*(F0*G[46] + F1*G[52] + F2*G[53] + F23*G[51]) + F24*(F0*G[48] + F2*G[57] + F24*G[56] + G[53]*(F1 + F23)) + F25*(F0*G[45] + F25*G[44] + G[46]*(F1 + F23) + G[48]*(F2 + F24))) + F22*(F21*(F0*F0*G[45] + F1*(F0*G[47] + F1*G[52]) + F2*(F0*G[49] + F1*G[54] + F2*G[57]) + F23*(F0*G[47] + F1*G[55] + F2*G[54] + F23*G[52]) + F24*(F0*G[49] + F2*G[58] + F24*G[57] + G[54]*(F1 + F23)) + F25*(F0*G[50] + F25*G[45] + G[47]*(F1 + F23) + G[49]*(F2 + F24))) + F22*(F0*F0*G[44] + F1*(F0*G[46] + F1*G[51]) + F2*(F0*G[48] + F1*G[53] + F2*G[56]) + F23*(F0*G[46] + F1*G[52] + F2*G[53] + F23*G[51]) + F24*(F0*G[48] + F2*G[57] + F24*G[56] + G[53]*(F1 + F23)) + F25*(F0*G[45] + F25*G[44] + G[46]*(F1 + F23) + G[48]*(F2 + F24)))) + F41*G[59] + G[43]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 1
      I[19] = G[121]*W14[ip];
      
      // Number of operations: 1
      I[20] = G[122]*W14[ip];
      
      // Number of operations: 1
      I[21] = G[123]*W14[ip];
      
      // Number of operations: 1
      I[22] = G[124]*W14[ip];
      
      // Number of operations: 1
      I[23] = G[125]*W14[ip];
      
      // Number of operations: 150
      I[24] = W14[ip]*(G[126] + F21*F21*(F0*F0*G[2] + F1*(F0*G[4] + F1*G[9]) + F2*(F0*G[6] + F1*G[11] + F2*G[14]) + F23*(F0*G[4] + F1*G[10] + F2*G[11] + F23*G[9]) + F24*(F0*G[6] + F2*G[15] + F24*G[14] + G[11]*(F1 + F23)) + F25*(F0*G[3] + F25*G[2] + G[4]*(F1 + F23) + G[6]*(F2 + F24))) + F22*(F21*(F0*F0*G[3] + F1*(F0*G[5] + F1*G[10]) + F2*(F0*G[7] + F1*G[12] + F2*G[15]) + F23*(F0*G[5] + F1*G[13] + F2*G[12] + F23*G[10]) + F24*(F0*G[7] + F2*G[16] + F24*G[15] + G[12]*(F1 + F23)) + F25*(F0*G[8] + F25*G[3] + G[5]*(F1 + F23) + G[7]*(F2 + F24))) + F22*(F0*F0*G[2] + F1*(F0*G[4] + F1*G[9]) + F2*(F0*G[6] + F1*G[11] + F2*G[14]) + F23*(F0*G[4] + F1*G[10] + F2*G[11] + F23*G[9]) + F24*(F0*G[6] + F2*G[15] + F24*G[14] + G[11]*(F1 + F23)) + F25*(F0*G[3] + F25*G[2] + G[4]*(F1 + F23) + G[6]*(F2 + F24)))) + F41*G[17] + G[1]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 1
      I[25] = G[127]*W14[ip];
      
      // Number of operations: 1
      I[26] = G[128]*W14[ip];
      
      // Number of operations: 1
      I[27] = G[129]*W14[ip];
      
      // Number of operations: 1
      I[28] = G[130]*W14[ip];
      
      // Number of operations: 1
      I[29] = G[131]*W14[ip];
      
      // Number of operations: 150
      I[30] = W14[ip]*(G[132] + F21*F21*(F0*F0*G[62] + F1*(F0*G[64] + F1*G[69]) + F2*(F0*G[66] + F1*G[71] + F2*G[74]) + F23*(F0*G[64] + F1*G[70] + F2*G[71] + F23*G[69]) + F24*(F0*G[66] + F2*G[75] + F24*G[74] + G[71]*(F1 + F23)) + F25*(F0*G[63] + F25*G[62] + G[64]*(F1 + F23) + G[66]*(F2 + F24))) + F22*(F21*(F0*F0*G[63] + F1*(F0*G[65] + F1*G[70]) + F2*(F0*G[67] + F1*G[72] + F2*G[75]) + F23*(F0*G[65] + F1*G[73] + F2*G[72] + F23*G[70]) + F24*(F0*G[67] + F2*G[76] + F24*G[75] + G[72]*(F1 + F23)) + F25*(F0*G[68] + F25*G[63] + G[65]*(F1 + F23) + G[67]*(F2 + F24))) + F22*(F0*F0*G[62] + F1*(F0*G[64] + F1*G[69]) + F2*(F0*G[66] + F1*G[71] + F2*G[74]) + F23*(F0*G[64] + F1*G[70] + F2*G[71] + F23*G[69]) + F24*(F0*G[66] + F2*G[75] + F24*G[74] + G[71]*(F1 + F23)) + F25*(F0*G[63] + F25*G[62] + G[64]*(F1 + F23) + G[66]*(F2 + F24)))) + F41*G[77] + G[61]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 150
      I[31] = W14[ip]*(G[133] + F21*F21*(F0*F0*G[80] + F1*(F0*G[82] + F1*G[87]) + F2*(F0*G[84] + F1*G[89] + F2*G[92]) + F23*(F0*G[82] + F1*G[88] + F2*G[89] + F23*G[87]) + F24*(F0*G[84] + F2*G[93] + F24*G[92] + G[89]*(F1 + F23)) + F25*(F0*G[81] + F25*G[80] + G[82]*(F1 + F23) + G[84]*(F2 + F24))) + F22*(F21*(F0*F0*G[81] + F1*(F0*G[83] + F1*G[88]) + F2*(F0*G[85] + F1*G[90] + F2*G[93]) + F23*(F0*G[83] + F1*G[91] + F2*G[90] + F23*G[88]) + F24*(F0*G[85] + F2*G[94] + F24*G[93] + G[90]*(F1 + F23)) + F25*(F0*G[86] + F25*G[81] + G[83]*(F1 + F23) + G[85]*(F2 + F24))) + F22*(F0*F0*G[80] + F1*(F0*G[82] + F1*G[87]) + F2*(F0*G[84] + F1*G[89] + F2*G[92]) + F23*(F0*G[82] + F1*G[88] + F2*G[89] + F23*G[87]) + F24*(F0*G[84] + F2*G[93] + F24*G[92] + G[89]*(F1 + F23)) + F25*(F0*G[81] + F25*G[80] + G[82]*(F1 + F23) + G[84]*(F2 + F24)))) + F41*G[95] + G[79]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 150
      I[32] = W14[ip]*(G[134] + F21*F21*(F0*F0*G[26] + F1*(F0*G[28] + F1*G[33]) + F2*(F0*G[30] + F1*G[35] + F2*G[38]) + F23*(F0*G[28] + F1*G[34] + F2*G[35] + F23*G[33]) + F24*(F0*G[30] + F2*G[39] + F24*G[38] + G[35]*(F1 + F23)) + F25*(F0*G[27] + F25*G[26] + G[28]*(F1 + F23) + G[30]*(F2 + F24))) + F22*(F21*(F0*F0*G[27] + F1*(F0*G[29] + F1*G[34]) + F2*(F0*G[31] + F1*G[36] + F2*G[39]) + F23*(F0*G[29] + F1*G[37] + F2*G[36] + F23*G[34]) + F24*(F0*G[31] + F2*G[40] + F24*G[39] + G[36]*(F1 + F23)) + F25*(F0*G[32] + F25*G[27] + G[29]*(F1 + F23) + G[31]*(F2 + F24))) + F22*(F0*F0*G[26] + F1*(F0*G[28] + F1*G[33]) + F2*(F0*G[30] + F1*G[35] + F2*G[38]) + F23*(F0*G[28] + F1*G[34] + F2*G[35] + F23*G[33]) + F24*(F0*G[30] + F2*G[39] + F24*G[38] + G[35]*(F1 + F23)) + F25*(F0*G[27] + F25*G[26] + G[28]*(F1 + F23) + G[30]*(F2 + F24)))) + F41*G[41] + G[25]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 1
      I[33] = G[135]*W14[ip];
      
      // Number of operations: 1
      I[34] = G[136]*W14[ip];
      
      // Number of operations: 150
      I[35] = W14[ip]*(G[137] + F21*F21*(F0*F0*G[104] + F1*(F0*G[106] + F1*G[111]) + F2*(F0*G[108] + F1*G[113] + F2*G[116]) + F23*(F0*G[106] + F1*G[112] + F2*G[113] + F23*G[111]) + F24*(F0*G[108] + F2*G[117] + F24*G[116] + G[113]*(F1 + F23)) + F25*(F0*G[105] + F25*G[104] + G[106]*(F1 + F23) + G[108]*(F2 + F24))) + F22*(F21*(F0*F0*G[105] + F1*(F0*G[107] + F1*G[112]) + F2*(F0*G[109] + F1*G[114] + F2*G[117]) + F23*(F0*G[107] + F1*G[115] + F2*G[114] + F23*G[112]) + F24*(F0*G[109] + F2*G[118] + F24*G[117] + G[114]*(F1 + F23)) + F25*(F0*G[110] + F25*G[105] + G[107]*(F1 + F23) + G[109]*(F2 + F24))) + F22*(F0*F0*G[104] + F1*(F0*G[106] + F1*G[111]) + F2*(F0*G[108] + F1*G[113] + F2*G[116]) + F23*(F0*G[106] + F1*G[112] + F2*G[113] + F23*G[111]) + F24*(F0*G[108] + F2*G[117] + F24*G[116] + G[113]*(F1 + F23)) + F25*(F0*G[105] + F25*G[104] + G[106]*(F1 + F23) + G[108]*(F2 + F24)))) + F41*G[119] + G[103]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 150
      I[36] = W14[ip]*(G[138] + F21*F21*(F0*F0*G[44] + F1*(F0*G[46] + F1*G[51]) + F2*(F0*G[48] + F1*G[53] + F2*G[56]) + F23*(F0*G[46] + F1*G[52] + F2*G[53] + F23*G[51]) + F24*(F0*G[48] + F2*G[57] + F24*G[56] + G[53]*(F1 + F23)) + F25*(F0*G[45] + F25*G[44] + G[46]*(F1 + F23) + G[48]*(F2 + F24))) + F22*(F21*(F0*F0*G[45] + F1*(F0*G[47] + F1*G[52]) + F2*(F0*G[49] + F1*G[54] + F2*G[57]) + F23*(F0*G[47] + F1*G[55] + F2*G[54] + F23*G[52]) + F24*(F0*G[49] + F2*G[58] + F24*G[57] + G[54]*(F1 + F23)) + F25*(F0*G[50] + F25*G[45] + G[47]*(F1 + F23) + G[49]*(F2 + F24))) + F22*(F0*F0*G[44] + F1*(F0*G[46] + F1*G[51]) + F2*(F0*G[48] + F1*G[53] + F2*G[56]) + F23*(F0*G[46] + F1*G[52] + F2*G[53] + F23*G[51]) + F24*(F0*G[48] + F2*G[57] + F24*G[56] + G[53]*(F1 + F23)) + F25*(F0*G[45] + F25*G[44] + G[46]*(F1 + F23) + G[48]*(F2 + F24)))) + F41*G[59] + G[43]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 1
      I[37] = G[139]*W14[ip];
      
      // Number of operations: 1
      I[38] = G[140]*W14[ip];
      
      // Number of operations: 150
      I[39] = W14[ip]*(G[141] + F21*F21*(F0*F0*G[2] + F1*(F0*G[4] + F1*G[9]) + F2*(F0*G[6] + F1*G[11] + F2*G[14]) + F23*(F0*G[4] + F1*G[10] + F2*G[11] + F23*G[9]) + F24*(F0*G[6] + F2*G[15] + F24*G[14] + G[11]*(F1 + F23)) + F25*(F0*G[3] + F25*G[2] + G[4]*(F1 + F23) + G[6]*(F2 + F24))) + F22*(F21*(F0*F0*G[3] + F1*(F0*G[5] + F1*G[10]) + F2*(F0*G[7] + F1*G[12] + F2*G[15]) + F23*(F0*G[5] + F1*G[13] + F2*G[12] + F23*G[10]) + F24*(F0*G[7] + F2*G[16] + F24*G[15] + G[12]*(F1 + F23)) + F25*(F0*G[8] + F25*G[3] + G[5]*(F1 + F23) + G[7]*(F2 + F24))) + F22*(F0*F0*G[2] + F1*(F0*G[4] + F1*G[9]) + F2*(F0*G[6] + F1*G[11] + F2*G[14]) + F23*(F0*G[4] + F1*G[10] + F2*G[11] + F23*G[9]) + F24*(F0*G[6] + F2*G[15] + F24*G[14] + G[11]*(F1 + F23)) + F25*(F0*G[3] + F25*G[2] + G[4]*(F1 + F23) + G[6]*(F2 + F24)))) + F41*G[17] + G[1]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 1
      I[40] = G[142]*W14[ip];
      
      // Number of operations: 1
      I[41] = G[143]*W14[ip];
      
      // Number of operations: 150
      I[42] = W14[ip]*(G[144] + F21*F21*(F0*F0*G[62] + F1*(F0*G[64] + F1*G[69]) + F2*(F0*G[66] + F1*G[71] + F2*G[74]) + F23*(F0*G[64] + F1*G[70] + F2*G[71] + F23*G[69]) + F24*(F0*G[66] + F2*G[75] + F24*G[74] + G[71]*(F1 + F23)) + F25*(F0*G[63] + F25*G[62] + G[64]*(F1 + F23) + G[66]*(F2 + F24))) + F22*(F21*(F0*F0*G[63] + F1*(F0*G[65] + F1*G[70]) + F2*(F0*G[67] + F1*G[72] + F2*G[75]) + F23*(F0*G[65] + F1*G[73] + F2*G[72] + F23*G[70]) + F24*(F0*G[67] + F2*G[76] + F24*G[75] + G[72]*(F1 + F23)) + F25*(F0*G[68] + F25*G[63] + G[65]*(F1 + F23) + G[67]*(F2 + F24))) + F22*(F0*F0*G[62] + F1*(F0*G[64] + F1*G[69]) + F2*(F0*G[66] + F1*G[71] + F2*G[74]) + F23*(F0*G[64] + F1*G[70] + F2*G[71] + F23*G[69]) + F24*(F0*G[66] + F2*G[75] + F24*G[74] + G[71]*(F1 + F23)) + F25*(F0*G[63] + F25*G[62] + G[64]*(F1 + F23) + G[66]*(F2 + F24)))) + F41*G[77] + G[61]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 150
      I[43] = W14[ip]*(G[145] + F21*F21*(F0*F0*G[80] + F1*(F0*G[82] + F1*G[87]) + F2*(F0*G[84] + F1*G[89] + F2*G[92]) + F23*(F0*G[82] + F1*G[88] + F2*G[89] + F23*G[87]) + F24*(F0*G[84] + F2*G[93] + F24*G[92] + G[89]*(F1 + F23)) + F25*(F0*G[81] + F25*G[80] + G[82]*(F1 + F23) + G[84]*(F2 + F24))) + F22*(F21*(F0*F0*G[81] + F1*(F0*G[83] + F1*G[88]) + F2*(F0*G[85] + F1*G[90] + F2*G[93]) + F23*(F0*G[83] + F1*G[91] + F2*G[90] + F23*G[88]) + F24*(F0*G[85] + F2*G[94] + F24*G[93] + G[90]*(F1 + F23)) + F25*(F0*G[86] + F25*G[81] + G[83]*(F1 + F23) + G[85]*(F2 + F24))) + F22*(F0*F0*G[80] + F1*(F0*G[82] + F1*G[87]) + F2*(F0*G[84] + F1*G[89] + F2*G[92]) + F23*(F0*G[82] + F1*G[88] + F2*G[89] + F23*G[87]) + F24*(F0*G[84] + F2*G[93] + F24*G[92] + G[89]*(F1 + F23)) + F25*(F0*G[81] + F25*G[80] + G[82]*(F1 + F23) + G[84]*(F2 + F24)))) + F41*G[95] + G[79]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 150
      I[44] = W14[ip]*(G[146] + F21*F21*(F0*F0*G[104] + F1*(F0*G[106] + F1*G[111]) + F2*(F0*G[108] + F1*G[113] + F2*G[116]) + F23*(F0*G[106] + F1*G[112] + F2*G[113] + F23*G[111]) + F24*(F0*G[108] + F2*G[117] + F24*G[116] + G[113]*(F1 + F23)) + F25*(F0*G[105] + F25*G[104] + G[106]*(F1 + F23) + G[108]*(F2 + F24))) + F22*(F21*(F0*F0*G[105] + F1*(F0*G[107] + F1*G[112]) + F2*(F0*G[109] + F1*G[114] + F2*G[117]) + F23*(F0*G[107] + F1*G[115] + F2*G[114] + F23*G[112]) + F24*(F0*G[109] + F2*G[118] + F24*G[117] + G[114]*(F1 + F23)) + F25*(F0*G[110] + F25*G[105] + G[107]*(F1 + F23) + G[109]*(F2 + F24))) + F22*(F0*F0*G[104] + F1*(F0*G[106] + F1*G[111]) + F2*(F0*G[108] + F1*G[113] + F2*G[116]) + F23*(F0*G[106] + F1*G[112] + F2*G[113] + F23*G[111]) + F24*(F0*G[108] + F2*G[117] + F24*G[116] + G[113]*(F1 + F23)) + F25*(F0*G[105] + F25*G[104] + G[106]*(F1 + F23) + G[108]*(F2 + F24)))) + F41*G[119] + G[103]*(std::abs(F0) + std::abs(F1) + std::abs(F2)));
      
      // Number of operations: 38
      I[45] = W14[ip]*(F21*(G[147]*(F0 + F25) + G[148]*(F1 + F23) + G[149]*(F2 + F24) + G[150]*(F35 + F36) + G[151]*(F37 + F38) + G[152]*(F39 + F40)) + F22*(G[147]*(F0 + F25) + G[148]*(F1 + F23) + G[149]*(F2 + F24) + G[150]*(F35 + F36) + G[151]*(F37 + F38) + G[152]*(F39 + F40)));
      
      // Number of operations: 38
      I[46] = W14[ip]*(F21*(G[153]*(F0 + F25) + G[154]*(F1 + F23) + G[155]*(F2 + F24) + G[156]*(F35 + F36) + G[157]*(F37 + F38) + G[158]*(F39 + F40)) + F22*(G[153]*(F0 + F25) + G[154]*(F1 + F23) + G[155]*(F2 + F24) + G[156]*(F35 + F36) + G[157]*(F37 + F38) + G[158]*(F39 + F40)));
      
      // Number of operations: 38
      I[47] = W14[ip]*(F21*(G[159]*(F0 + F25) + G[160]*(F1 + F23) + G[161]*(F2 + F24) + G[162]*(F35 + F36) + G[163]*(F37 + F38) + G[164]*(F39 + F40)) + F22*(G[159]*(F0 + F25) + G[160]*(F1 + F23) + G[161]*(F2 + F24) + G[162]*(F35 + F36) + G[163]*(F37 + F38) + G[164]*(F39 + F40)));
      
      // Number of operations: 201
      I[48] = W14[ip]*(C[1]*(G[1]*(F12 + F9) + G[25]*(F11 + F14) + G[43]*(F10 + F13)) + F21*F21*(F10*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F11*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)) + F12*(G[3]*(F0 + F25) + G[4]*(F1 + F23) + G[6]*(F2 + F24)) + F13*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F14*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)) + F27*G[165] + F9*(G[3]*(F0 + F25) + G[4]*(F1 + F23) + G[6]*(F2 + F24))) + F22*(F21*(F10*(G[47]*(F1 + F23) + G[49]*(F2 + F24) + G[50]*(F0 + F25)) + F11*(G[29]*(F1 + F23) + G[31]*(F2 + F24) + G[32]*(F0 + F25)) + F12*(G[5]*(F1 + F23) + G[7]*(F2 + F24) + G[8]*(F0 + F25)) + F13*(G[47]*(F1 + F23) + G[49]*(F2 + F24) + G[50]*(F0 + F25)) + F14*(G[29]*(F1 + F23) + G[31]*(F2 + F24) + G[32]*(F0 + F25)) + F27*G[166] + F9*(G[5]*(F1 + F23) + G[7]*(F2 + F24) + G[8]*(F0 + F25))) + F22*(F10*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F11*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)) + F12*(G[3]*(F0 + F25) + G[4]*(F1 + F23) + G[6]*(F2 + F24)) + F13*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F14*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)) + F27*G[165] + F9*(G[3]*(F0 + F25) + G[4]*(F1 + F23) + G[6]*(F2 + F24)))));
      
      // Number of operations: 201
      I[49] = W14[ip]*(C[1]*(G[25]*(F15 + F18) + G[61]*(F17 + F20) + G[79]*(F16 + F19)) + F21*F21*(F0*(G[27]*(F15 + F18) + G[63]*(F17 + F20) + G[81]*(F16 + F19)) + F1*(G[28]*(F15 + F18) + G[64]*(F17 + F20) + G[82]*(F16 + F19)) + F2*(G[30]*(F15 + F18) + G[66]*(F17 + F20) + G[84]*(F16 + F19)) + F23*(G[28]*(F15 + F18) + G[64]*(F17 + F20) + G[82]*(F16 + F19)) + F24*(G[30]*(F15 + F18) + G[66]*(F17 + F20) + G[84]*(F16 + F19)) + F25*(G[27]*(F15 + F18) + G[63]*(F17 + F20) + G[81]*(F16 + F19)) + F28*G[167]) + F22*(F21*(F0*(G[32]*(F15 + F18) + G[68]*(F17 + F20) + G[86]*(F16 + F19)) + F1*(G[29]*(F15 + F18) + G[65]*(F17 + F20) + G[83]*(F16 + F19)) + F2*(G[31]*(F15 + F18) + G[67]*(F17 + F20) + G[85]*(F16 + F19)) + F23*(G[29]*(F15 + F18) + G[65]*(F17 + F20) + G[83]*(F16 + F19)) + F24*(G[31]*(F15 + F18) + G[67]*(F17 + F20) + G[85]*(F16 + F19)) + F25*(G[32]*(F15 + F18) + G[68]*(F17 + F20) + G[86]*(F16 + F19)) + F28*G[168]) + F22*(F0*(G[27]*(F15 + F18) + G[63]*(F17 + F20) + G[81]*(F16 + F19)) + F1*(G[28]*(F15 + F18) + G[64]*(F17 + F20) + G[82]*(F16 + F19)) + F2*(G[30]*(F15 + F18) + G[66]*(F17 + F20) + G[84]*(F16 + F19)) + F23*(G[28]*(F15 + F18) + G[64]*(F17 + F20) + G[82]*(F16 + F19)) + F24*(G[30]*(F15 + F18) + G[66]*(F17 + F20) + G[84]*(F16 + F19)) + F25*(G[27]*(F15 + F18) + G[63]*(F17 + F20) + G[81]*(F16 + F19)) + F28*G[167])));
      
      // Number of operations: 201
      I[50] = W14[ip]*(C[1]*(G[103]*(F16 + F19) + G[43]*(F15 + F18) + G[79]*(F17 + F20)) + F21*F21*(F0*(G[105]*(F16 + F19) + G[45]*(F15 + F18) + G[81]*(F17 + F20)) + F1*(G[106]*(F16 + F19) + G[46]*(F15 + F18) + G[82]*(F17 + F20)) + F2*(G[108]*(F16 + F19) + G[48]*(F15 + F18) + G[84]*(F17 + F20)) + F23*(G[106]*(F16 + F19) + G[46]*(F15 + F18) + G[82]*(F17 + F20)) + F24*(G[108]*(F16 + F19) + G[48]*(F15 + F18) + G[84]*(F17 + F20)) + F25*(G[105]*(F16 + F19) + G[45]*(F15 + F18) + G[81]*(F17 + F20)) + F28*G[169]) + F22*(F21*(F0*(G[110]*(F16 + F19) + G[50]*(F15 + F18) + G[86]*(F17 + F20)) + F1*(G[107]*(F16 + F19) + G[47]*(F15 + F18) + G[83]*(F17 + F20)) + F2*(G[109]*(F16 + F19) + G[49]*(F15 + F18) + G[85]*(F17 + F20)) + F23*(G[107]*(F16 + F19) + G[47]*(F15 + F18) + G[83]*(F17 + F20)) + F24*(G[109]*(F16 + F19) + G[49]*(F15 + F18) + G[85]*(F17 + F20)) + F25*(G[110]*(F16 + F19) + G[50]*(F15 + F18) + G[86]*(F17 + F20)) + F28*G[170]) + F22*(F0*(G[105]*(F16 + F19) + G[45]*(F15 + F18) + G[81]*(F17 + F20)) + F1*(G[106]*(F16 + F19) + G[46]*(F15 + F18) + G[82]*(F17 + F20)) + F2*(G[108]*(F16 + F19) + G[48]*(F15 + F18) + G[84]*(F17 + F20)) + F23*(G[106]*(F16 + F19) + G[46]*(F15 + F18) + G[82]*(F17 + F20)) + F24*(G[108]*(F16 + F19) + G[48]*(F15 + F18) + G[84]*(F17 + F20)) + F25*(G[105]*(F16 + F19) + G[45]*(F15 + F18) + G[81]*(F17 + F20)) + F28*G[169])));
      
      // Number of operations: 201
      I[51] = W14[ip]*(C[1]*(G[1]*(F15 + F18) + G[25]*(F17 + F20) + G[43]*(F16 + F19)) + F21*F21*(F0*(G[27]*(F17 + F20) + G[3]*(F15 + F18) + G[45]*(F16 + F19)) + F1*(G[28]*(F17 + F20) + G[46]*(F16 + F19) + G[4]*(F15 + F18)) + F2*(G[30]*(F17 + F20) + G[48]*(F16 + F19) + G[6]*(F15 + F18)) + F23*(G[28]*(F17 + F20) + G[46]*(F16 + F19) + G[4]*(F15 + F18)) + F24*(G[30]*(F17 + F20) + G[48]*(F16 + F19) + G[6]*(F15 + F18)) + F25*(G[27]*(F17 + F20) + G[3]*(F15 + F18) + G[45]*(F16 + F19)) + F28*G[165]) + F22*(F21*(F0*(G[32]*(F17 + F20) + G[50]*(F16 + F19) + G[8]*(F15 + F18)) + F1*(G[29]*(F17 + F20) + G[47]*(F16 + F19) + G[5]*(F15 + F18)) + F2*(G[31]*(F17 + F20) + G[49]*(F16 + F19) + G[7]*(F15 + F18)) + F23*(G[29]*(F17 + F20) + G[47]*(F16 + F19) + G[5]*(F15 + F18)) + F24*(G[31]*(F17 + F20) + G[49]*(F16 + F19) + G[7]*(F15 + F18)) + F25*(G[32]*(F17 + F20) + G[50]*(F16 + F19) + G[8]*(F15 + F18)) + F28*G[166]) + F22*(F0*(G[27]*(F17 + F20) + G[3]*(F15 + F18) + G[45]*(F16 + F19)) + F1*(G[28]*(F17 + F20) + G[46]*(F16 + F19) + G[4]*(F15 + F18)) + F2*(G[30]*(F17 + F20) + G[48]*(F16 + F19) + G[6]*(F15 + F18)) + F23*(G[28]*(F17 + F20) + G[46]*(F16 + F19) + G[4]*(F15 + F18)) + F24*(G[30]*(F17 + F20) + G[48]*(F16 + F19) + G[6]*(F15 + F18)) + F25*(G[27]*(F17 + F20) + G[3]*(F15 + F18) + G[45]*(F16 + F19)) + F28*G[165])));
      
      // Number of operations: 201
      I[52] = W14[ip]*(C[1]*(G[25]*(F3 + F6) + G[61]*(F5 + F8) + G[79]*(F4 + F7)) + F21*F21*(F26*G[167] + F3*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)) + F4*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F5*(G[63]*(F0 + F25) + G[64]*(F1 + F23) + G[66]*(F2 + F24)) + F6*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)) + F7*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F8*(G[63]*(F0 + F25) + G[64]*(F1 + F23) + G[66]*(F2 + F24))) + F22*(F21*(F26*G[168] + F3*(G[29]*(F1 + F23) + G[31]*(F2 + F24) + G[32]*(F0 + F25)) + F4*(G[83]*(F1 + F23) + G[85]*(F2 + F24) + G[86]*(F0 + F25)) + F5*(G[65]*(F1 + F23) + G[67]*(F2 + F24) + G[68]*(F0 + F25)) + F6*(G[29]*(F1 + F23) + G[31]*(F2 + F24) + G[32]*(F0 + F25)) + F7*(G[83]*(F1 + F23) + G[85]*(F2 + F24) + G[86]*(F0 + F25)) + F8*(G[65]*(F1 + F23) + G[67]*(F2 + F24) + G[68]*(F0 + F25))) + F22*(F26*G[167] + F3*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)) + F4*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F5*(G[63]*(F0 + F25) + G[64]*(F1 + F23) + G[66]*(F2 + F24)) + F6*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)) + F7*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F8*(G[63]*(F0 + F25) + G[64]*(F1 + F23) + G[66]*(F2 + F24)))));
      
      // Number of operations: 201
      I[53] = W14[ip]*(C[1]*(G[103]*(F4 + F7) + G[43]*(F3 + F6) + G[79]*(F5 + F8)) + F21*F21*(F26*G[169] + F3*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F4*(G[105]*(F0 + F25) + G[106]*(F1 + F23) + G[108]*(F2 + F24)) + F5*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F6*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F7*(G[105]*(F0 + F25) + G[106]*(F1 + F23) + G[108]*(F2 + F24)) + F8*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24))) + F22*(F21*(F26*G[170] + F3*(G[47]*(F1 + F23) + G[49]*(F2 + F24) + G[50]*(F0 + F25)) + F4*(G[107]*(F1 + F23) + G[109]*(F2 + F24) + G[110]*(F0 + F25)) + F5*(G[83]*(F1 + F23) + G[85]*(F2 + F24) + G[86]*(F0 + F25)) + F6*(G[47]*(F1 + F23) + G[49]*(F2 + F24) + G[50]*(F0 + F25)) + F7*(G[107]*(F1 + F23) + G[109]*(F2 + F24) + G[110]*(F0 + F25)) + F8*(G[83]*(F1 + F23) + G[85]*(F2 + F24) + G[86]*(F0 + F25))) + F22*(F26*G[169] + F3*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F4*(G[105]*(F0 + F25) + G[106]*(F1 + F23) + G[108]*(F2 + F24)) + F5*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F6*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F7*(G[105]*(F0 + F25) + G[106]*(F1 + F23) + G[108]*(F2 + F24)) + F8*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)))));
      
      // Number of operations: 201
      I[54] = W14[ip]*(C[1]*(G[1]*(F3 + F6) + G[25]*(F5 + F8) + G[43]*(F4 + F7)) + F21*F21*(F26*G[165] + F3*(G[3]*(F0 + F25) + G[4]*(F1 + F23) + G[6]*(F2 + F24)) + F4*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F5*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)) + F6*(G[3]*(F0 + F25) + G[4]*(F1 + F23) + G[6]*(F2 + F24)) + F7*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F8*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24))) + F22*(F21*(F26*G[166] + F3*(G[5]*(F1 + F23) + G[7]*(F2 + F24) + G[8]*(F0 + F25)) + F4*(G[47]*(F1 + F23) + G[49]*(F2 + F24) + G[50]*(F0 + F25)) + F5*(G[29]*(F1 + F23) + G[31]*(F2 + F24) + G[32]*(F0 + F25)) + F6*(G[5]*(F1 + F23) + G[7]*(F2 + F24) + G[8]*(F0 + F25)) + F7*(G[47]*(F1 + F23) + G[49]*(F2 + F24) + G[50]*(F0 + F25)) + F8*(G[29]*(F1 + F23) + G[31]*(F2 + F24) + G[32]*(F0 + F25))) + F22*(F26*G[165] + F3*(G[3]*(F0 + F25) + G[4]*(F1 + F23) + G[6]*(F2 + F24)) + F4*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F5*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)) + F6*(G[3]*(F0 + F25) + G[4]*(F1 + F23) + G[6]*(F2 + F24)) + F7*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F8*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)))));
      
      // Number of operations: 201
      I[55] = W14[ip]*(C[1]*(G[25]*(F12 + F9) + G[61]*(F11 + F14) + G[79]*(F10 + F13)) + F21*F21*(F10*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F11*(G[63]*(F0 + F25) + G[64]*(F1 + F23) + G[66]*(F2 + F24)) + F12*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)) + F13*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F14*(G[63]*(F0 + F25) + G[64]*(F1 + F23) + G[66]*(F2 + F24)) + F27*G[167] + F9*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24))) + F22*(F21*(F10*(G[83]*(F1 + F23) + G[85]*(F2 + F24) + G[86]*(F0 + F25)) + F11*(G[65]*(F1 + F23) + G[67]*(F2 + F24) + G[68]*(F0 + F25)) + F12*(G[29]*(F1 + F23) + G[31]*(F2 + F24) + G[32]*(F0 + F25)) + F13*(G[83]*(F1 + F23) + G[85]*(F2 + F24) + G[86]*(F0 + F25)) + F14*(G[65]*(F1 + F23) + G[67]*(F2 + F24) + G[68]*(F0 + F25)) + F27*G[168] + F9*(G[29]*(F1 + F23) + G[31]*(F2 + F24) + G[32]*(F0 + F25))) + F22*(F10*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F11*(G[63]*(F0 + F25) + G[64]*(F1 + F23) + G[66]*(F2 + F24)) + F12*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)) + F13*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F14*(G[63]*(F0 + F25) + G[64]*(F1 + F23) + G[66]*(F2 + F24)) + F27*G[167] + F9*(G[27]*(F0 + F25) + G[28]*(F1 + F23) + G[30]*(F2 + F24)))));
      
      // Number of operations: 201
      I[56] = W14[ip]*(C[1]*(G[103]*(F10 + F13) + G[43]*(F12 + F9) + G[79]*(F11 + F14)) + F21*F21*(F10*(G[105]*(F0 + F25) + G[106]*(F1 + F23) + G[108]*(F2 + F24)) + F11*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F12*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F13*(G[105]*(F0 + F25) + G[106]*(F1 + F23) + G[108]*(F2 + F24)) + F14*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F27*G[169] + F9*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24))) + F22*(F21*(F10*(G[107]*(F1 + F23) + G[109]*(F2 + F24) + G[110]*(F0 + F25)) + F11*(G[83]*(F1 + F23) + G[85]*(F2 + F24) + G[86]*(F0 + F25)) + F12*(G[47]*(F1 + F23) + G[49]*(F2 + F24) + G[50]*(F0 + F25)) + F13*(G[107]*(F1 + F23) + G[109]*(F2 + F24) + G[110]*(F0 + F25)) + F14*(G[83]*(F1 + F23) + G[85]*(F2 + F24) + G[86]*(F0 + F25)) + F27*G[170] + F9*(G[47]*(F1 + F23) + G[49]*(F2 + F24) + G[50]*(F0 + F25))) + F22*(F10*(G[105]*(F0 + F25) + G[106]*(F1 + F23) + G[108]*(F2 + F24)) + F11*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F12*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)) + F13*(G[105]*(F0 + F25) + G[106]*(F1 + F23) + G[108]*(F2 + F24)) + F14*(G[81]*(F0 + F25) + G[82]*(F1 + F23) + G[84]*(F2 + F24)) + F27*G[169] + F9*(G[45]*(F0 + F25) + G[46]*(F1 + F23) + G[48]*(F2 + F24)))));
      
      // Number of operations: 201
      I[57] = W14[ip]*(C[3]*(G[1]*(F12 + F9) + G[25]*(F11 + F14) + G[43]*(F10 + F13)) + F21*F21*(F10*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F11*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)) + F12*(G[10]*(F1 + F23) + G[11]*(F2 + F24) + G[4]*(F0 + F25)) + F13*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F14*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)) + F27*G[171] + F9*(G[10]*(F1 + F23) + G[11]*(F2 + F24) + G[4]*(F0 + F25))) + F22*(F21*(F10*(G[47]*(F0 + F25) + G[54]*(F2 + F24) + G[55]*(F1 + F23)) + F11*(G[29]*(F0 + F25) + G[36]*(F2 + F24) + G[37]*(F1 + F23)) + F12*(G[12]*(F2 + F24) + G[13]*(F1 + F23) + G[5]*(F0 + F25)) + F13*(G[47]*(F0 + F25) + G[54]*(F2 + F24) + G[55]*(F1 + F23)) + F14*(G[29]*(F0 + F25) + G[36]*(F2 + F24) + G[37]*(F1 + F23)) + F27*G[172] + F9*(G[12]*(F2 + F24) + G[13]*(F1 + F23) + G[5]*(F0 + F25))) + F22*(F10*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F11*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)) + F12*(G[10]*(F1 + F23) + G[11]*(F2 + F24) + G[4]*(F0 + F25)) + F13*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F14*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)) + F27*G[171] + F9*(G[10]*(F1 + F23) + G[11]*(F2 + F24) + G[4]*(F0 + F25)))));
      
      // Number of operations: 201
      I[58] = W14[ip]*(C[3]*(G[25]*(F15 + F18) + G[61]*(F17 + F20) + G[79]*(F16 + F19)) + F21*F21*(F0*(G[28]*(F15 + F18) + G[64]*(F17 + F20) + G[82]*(F16 + F19)) + F1*(G[34]*(F15 + F18) + G[70]*(F17 + F20) + G[88]*(F16 + F19)) + F2*(G[35]*(F15 + F18) + G[71]*(F17 + F20) + G[89]*(F16 + F19)) + F23*(G[34]*(F15 + F18) + G[70]*(F17 + F20) + G[88]*(F16 + F19)) + F24*(G[35]*(F15 + F18) + G[71]*(F17 + F20) + G[89]*(F16 + F19)) + F25*(G[28]*(F15 + F18) + G[64]*(F17 + F20) + G[82]*(F16 + F19)) + F28*G[173]) + F22*(F21*(F0*(G[29]*(F15 + F18) + G[65]*(F17 + F20) + G[83]*(F16 + F19)) + F1*(G[37]*(F15 + F18) + G[73]*(F17 + F20) + G[91]*(F16 + F19)) + F2*(G[36]*(F15 + F18) + G[72]*(F17 + F20) + G[90]*(F16 + F19)) + F23*(G[37]*(F15 + F18) + G[73]*(F17 + F20) + G[91]*(F16 + F19)) + F24*(G[36]*(F15 + F18) + G[72]*(F17 + F20) + G[90]*(F16 + F19)) + F25*(G[29]*(F15 + F18) + G[65]*(F17 + F20) + G[83]*(F16 + F19)) + F28*G[174]) + F22*(F0*(G[28]*(F15 + F18) + G[64]*(F17 + F20) + G[82]*(F16 + F19)) + F1*(G[34]*(F15 + F18) + G[70]*(F17 + F20) + G[88]*(F16 + F19)) + F2*(G[35]*(F15 + F18) + G[71]*(F17 + F20) + G[89]*(F16 + F19)) + F23*(G[34]*(F15 + F18) + G[70]*(F17 + F20) + G[88]*(F16 + F19)) + F24*(G[35]*(F15 + F18) + G[71]*(F17 + F20) + G[89]*(F16 + F19)) + F25*(G[28]*(F15 + F18) + G[64]*(F17 + F20) + G[82]*(F16 + F19)) + F28*G[173])));
      
      // Number of operations: 201
      I[59] = W14[ip]*(C[3]*(G[103]*(F16 + F19) + G[43]*(F15 + F18) + G[79]*(F17 + F20)) + F21*F21*(F0*(G[106]*(F16 + F19) + G[46]*(F15 + F18) + G[82]*(F17 + F20)) + F1*(G[112]*(F16 + F19) + G[52]*(F15 + F18) + G[88]*(F17 + F20)) + F2*(G[113]*(F16 + F19) + G[53]*(F15 + F18) + G[89]*(F17 + F20)) + F23*(G[112]*(F16 + F19) + G[52]*(F15 + F18) + G[88]*(F17 + F20)) + F24*(G[113]*(F16 + F19) + G[53]*(F15 + F18) + G[89]*(F17 + F20)) + F25*(G[106]*(F16 + F19) + G[46]*(F15 + F18) + G[82]*(F17 + F20)) + F28*G[175]) + F22*(F21*(F0*(G[107]*(F16 + F19) + G[47]*(F15 + F18) + G[83]*(F17 + F20)) + F1*(G[115]*(F16 + F19) + G[55]*(F15 + F18) + G[91]*(F17 + F20)) + F2*(G[114]*(F16 + F19) + G[54]*(F15 + F18) + G[90]*(F17 + F20)) + F23*(G[115]*(F16 + F19) + G[55]*(F15 + F18) + G[91]*(F17 + F20)) + F24*(G[114]*(F16 + F19) + G[54]*(F15 + F18) + G[90]*(F17 + F20)) + F25*(G[107]*(F16 + F19) + G[47]*(F15 + F18) + G[83]*(F17 + F20)) + F28*G[176]) + F22*(F0*(G[106]*(F16 + F19) + G[46]*(F15 + F18) + G[82]*(F17 + F20)) + F1*(G[112]*(F16 + F19) + G[52]*(F15 + F18) + G[88]*(F17 + F20)) + F2*(G[113]*(F16 + F19) + G[53]*(F15 + F18) + G[89]*(F17 + F20)) + F23*(G[112]*(F16 + F19) + G[52]*(F15 + F18) + G[88]*(F17 + F20)) + F24*(G[113]*(F16 + F19) + G[53]*(F15 + F18) + G[89]*(F17 + F20)) + F25*(G[106]*(F16 + F19) + G[46]*(F15 + F18) + G[82]*(F17 + F20)) + F28*G[175])));
      
      // Number of operations: 201
      I[60] = W14[ip]*(C[3]*(G[1]*(F15 + F18) + G[25]*(F17 + F20) + G[43]*(F16 + F19)) + F21*F21*(F0*(G[28]*(F17 + F20) + G[46]*(F16 + F19) + G[4]*(F15 + F18)) + F1*(G[10]*(F15 + F18) + G[34]*(F17 + F20) + G[52]*(F16 + F19)) + F2*(G[11]*(F15 + F18) + G[35]*(F17 + F20) + G[53]*(F16 + F19)) + F23*(G[10]*(F15 + F18) + G[34]*(F17 + F20) + G[52]*(F16 + F19)) + F24*(G[11]*(F15 + F18) + G[35]*(F17 + F20) + G[53]*(F16 + F19)) + F25*(G[28]*(F17 + F20) + G[46]*(F16 + F19) + G[4]*(F15 + F18)) + F28*G[171]) + F22*(F21*(F0*(G[29]*(F17 + F20) + G[47]*(F16 + F19) + G[5]*(F15 + F18)) + F1*(G[13]*(F15 + F18) + G[37]*(F17 + F20) + G[55]*(F16 + F19)) + F2*(G[12]*(F15 + F18) + G[36]*(F17 + F20) + G[54]*(F16 + F19)) + F23*(G[13]*(F15 + F18) + G[37]*(F17 + F20) + G[55]*(F16 + F19)) + F24*(G[12]*(F15 + F18) + G[36]*(F17 + F20) + G[54]*(F16 + F19)) + F25*(G[29]*(F17 + F20) + G[47]*(F16 + F19) + G[5]*(F15 + F18)) + F28*G[172]) + F22*(F0*(G[28]*(F17 + F20) + G[46]*(F16 + F19) + G[4]*(F15 + F18)) + F1*(G[10]*(F15 + F18) + G[34]*(F17 + F20) + G[52]*(F16 + F19)) + F2*(G[11]*(F15 + F18) + G[35]*(F17 + F20) + G[53]*(F16 + F19)) + F23*(G[10]*(F15 + F18) + G[34]*(F17 + F20) + G[52]*(F16 + F19)) + F24*(G[11]*(F15 + F18) + G[35]*(F17 + F20) + G[53]*(F16 + F19)) + F25*(G[28]*(F17 + F20) + G[46]*(F16 + F19) + G[4]*(F15 + F18)) + F28*G[171])));
      
      // Number of operations: 201
      I[61] = W14[ip]*(C[3]*(G[25]*(F3 + F6) + G[61]*(F5 + F8) + G[79]*(F4 + F7)) + F21*F21*(F26*G[173] + F3*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)) + F4*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F5*(G[64]*(F0 + F25) + G[70]*(F1 + F23) + G[71]*(F2 + F24)) + F6*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)) + F7*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F8*(G[64]*(F0 + F25) + G[70]*(F1 + F23) + G[71]*(F2 + F24))) + F22*(F21*(F26*G[174] + F3*(G[29]*(F0 + F25) + G[36]*(F2 + F24) + G[37]*(F1 + F23)) + F4*(G[83]*(F0 + F25) + G[90]*(F2 + F24) + G[91]*(F1 + F23)) + F5*(G[65]*(F0 + F25) + G[72]*(F2 + F24) + G[73]*(F1 + F23)) + F6*(G[29]*(F0 + F25) + G[36]*(F2 + F24) + G[37]*(F1 + F23)) + F7*(G[83]*(F0 + F25) + G[90]*(F2 + F24) + G[91]*(F1 + F23)) + F8*(G[65]*(F0 + F25) + G[72]*(F2 + F24) + G[73]*(F1 + F23))) + F22*(F26*G[173] + F3*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)) + F4*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F5*(G[64]*(F0 + F25) + G[70]*(F1 + F23) + G[71]*(F2 + F24)) + F6*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)) + F7*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F8*(G[64]*(F0 + F25) + G[70]*(F1 + F23) + G[71]*(F2 + F24)))));
      
      // Number of operations: 201
      I[62] = W14[ip]*(C[3]*(G[103]*(F4 + F7) + G[43]*(F3 + F6) + G[79]*(F5 + F8)) + F21*F21*(F26*G[175] + F3*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F4*(G[106]*(F0 + F25) + G[112]*(F1 + F23) + G[113]*(F2 + F24)) + F5*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F6*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F7*(G[106]*(F0 + F25) + G[112]*(F1 + F23) + G[113]*(F2 + F24)) + F8*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24))) + F22*(F21*(F26*G[176] + F3*(G[47]*(F0 + F25) + G[54]*(F2 + F24) + G[55]*(F1 + F23)) + F4*(G[107]*(F0 + F25) + G[114]*(F2 + F24) + G[115]*(F1 + F23)) + F5*(G[83]*(F0 + F25) + G[90]*(F2 + F24) + G[91]*(F1 + F23)) + F6*(G[47]*(F0 + F25) + G[54]*(F2 + F24) + G[55]*(F1 + F23)) + F7*(G[107]*(F0 + F25) + G[114]*(F2 + F24) + G[115]*(F1 + F23)) + F8*(G[83]*(F0 + F25) + G[90]*(F2 + F24) + G[91]*(F1 + F23))) + F22*(F26*G[175] + F3*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F4*(G[106]*(F0 + F25) + G[112]*(F1 + F23) + G[113]*(F2 + F24)) + F5*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F6*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F7*(G[106]*(F0 + F25) + G[112]*(F1 + F23) + G[113]*(F2 + F24)) + F8*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)))));
      
      // Number of operations: 201
      I[63] = W14[ip]*(C[3]*(G[1]*(F3 + F6) + G[25]*(F5 + F8) + G[43]*(F4 + F7)) + F21*F21*(F26*G[171] + F3*(G[10]*(F1 + F23) + G[11]*(F2 + F24) + G[4]*(F0 + F25)) + F4*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F5*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)) + F6*(G[10]*(F1 + F23) + G[11]*(F2 + F24) + G[4]*(F0 + F25)) + F7*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F8*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24))) + F22*(F21*(F26*G[172] + F3*(G[12]*(F2 + F24) + G[13]*(F1 + F23) + G[5]*(F0 + F25)) + F4*(G[47]*(F0 + F25) + G[54]*(F2 + F24) + G[55]*(F1 + F23)) + F5*(G[29]*(F0 + F25) + G[36]*(F2 + F24) + G[37]*(F1 + F23)) + F6*(G[12]*(F2 + F24) + G[13]*(F1 + F23) + G[5]*(F0 + F25)) + F7*(G[47]*(F0 + F25) + G[54]*(F2 + F24) + G[55]*(F1 + F23)) + F8*(G[29]*(F0 + F25) + G[36]*(F2 + F24) + G[37]*(F1 + F23))) + F22*(F26*G[171] + F3*(G[10]*(F1 + F23) + G[11]*(F2 + F24) + G[4]*(F0 + F25)) + F4*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F5*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)) + F6*(G[10]*(F1 + F23) + G[11]*(F2 + F24) + G[4]*(F0 + F25)) + F7*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F8*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)))));
      
      // Number of operations: 201
      I[64] = W14[ip]*(C[3]*(G[25]*(F12 + F9) + G[61]*(F11 + F14) + G[79]*(F10 + F13)) + F21*F21*(F10*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F11*(G[64]*(F0 + F25) + G[70]*(F1 + F23) + G[71]*(F2 + F24)) + F12*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)) + F13*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F14*(G[64]*(F0 + F25) + G[70]*(F1 + F23) + G[71]*(F2 + F24)) + F27*G[173] + F9*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24))) + F22*(F21*(F10*(G[83]*(F0 + F25) + G[90]*(F2 + F24) + G[91]*(F1 + F23)) + F11*(G[65]*(F0 + F25) + G[72]*(F2 + F24) + G[73]*(F1 + F23)) + F12*(G[29]*(F0 + F25) + G[36]*(F2 + F24) + G[37]*(F1 + F23)) + F13*(G[83]*(F0 + F25) + G[90]*(F2 + F24) + G[91]*(F1 + F23)) + F14*(G[65]*(F0 + F25) + G[72]*(F2 + F24) + G[73]*(F1 + F23)) + F27*G[174] + F9*(G[29]*(F0 + F25) + G[36]*(F2 + F24) + G[37]*(F1 + F23))) + F22*(F10*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F11*(G[64]*(F0 + F25) + G[70]*(F1 + F23) + G[71]*(F2 + F24)) + F12*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)) + F13*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F14*(G[64]*(F0 + F25) + G[70]*(F1 + F23) + G[71]*(F2 + F24)) + F27*G[173] + F9*(G[28]*(F0 + F25) + G[34]*(F1 + F23) + G[35]*(F2 + F24)))));
      
      // Number of operations: 201
      I[65] = W14[ip]*(C[3]*(G[103]*(F10 + F13) + G[43]*(F12 + F9) + G[79]*(F11 + F14)) + F21*F21*(F10*(G[106]*(F0 + F25) + G[112]*(F1 + F23) + G[113]*(F2 + F24)) + F11*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F12*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F13*(G[106]*(F0 + F25) + G[112]*(F1 + F23) + G[113]*(F2 + F24)) + F14*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F27*G[175] + F9*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24))) + F22*(F21*(F10*(G[107]*(F0 + F25) + G[114]*(F2 + F24) + G[115]*(F1 + F23)) + F11*(G[83]*(F0 + F25) + G[90]*(F2 + F24) + G[91]*(F1 + F23)) + F12*(G[47]*(F0 + F25) + G[54]*(F2 + F24) + G[55]*(F1 + F23)) + F13*(G[107]*(F0 + F25) + G[114]*(F2 + F24) + G[115]*(F1 + F23)) + F14*(G[83]*(F0 + F25) + G[90]*(F2 + F24) + G[91]*(F1 + F23)) + F27*G[176] + F9*(G[47]*(F0 + F25) + G[54]*(F2 + F24) + G[55]*(F1 + F23))) + F22*(F10*(G[106]*(F0 + F25) + G[112]*(F1 + F23) + G[113]*(F2 + F24)) + F11*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F12*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)) + F13*(G[106]*(F0 + F25) + G[112]*(F1 + F23) + G[113]*(F2 + F24)) + F14*(G[82]*(F0 + F25) + G[88]*(F1 + F23) + G[89]*(F2 + F24)) + F27*G[175] + F9*(G[46]*(F0 + F25) + G[52]*(F1 + F23) + G[53]*(F2 + F24)))));
      
      // Number of operations: 201
      I[66] = W14[ip]*(C[5]*(G[1]*(F12 + F9) + G[25]*(F11 + F14) + G[43]*(F10 + F13)) + F21*F21*(F10*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F11*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)) + F12*(G[11]*(F1 + F23) + G[15]*(F2 + F24) + G[6]*(F0 + F25)) + F13*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F14*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)) + F27*G[177] + F9*(G[11]*(F1 + F23) + G[15]*(F2 + F24) + G[6]*(F0 + F25))) + F22*(F21*(F10*(G[49]*(F0 + F25) + G[54]*(F1 + F23) + G[58]*(F2 + F24)) + F11*(G[31]*(F0 + F25) + G[36]*(F1 + F23) + G[40]*(F2 + F24)) + F12*(G[12]*(F1 + F23) + G[16]*(F2 + F24) + G[7]*(F0 + F25)) + F13*(G[49]*(F0 + F25) + G[54]*(F1 + F23) + G[58]*(F2 + F24)) + F14*(G[31]*(F0 + F25) + G[36]*(F1 + F23) + G[40]*(F2 + F24)) + F27*G[178] + F9*(G[12]*(F1 + F23) + G[16]*(F2 + F24) + G[7]*(F0 + F25))) + F22*(F10*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F11*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)) + F12*(G[11]*(F1 + F23) + G[15]*(F2 + F24) + G[6]*(F0 + F25)) + F13*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F14*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)) + F27*G[177] + F9*(G[11]*(F1 + F23) + G[15]*(F2 + F24) + G[6]*(F0 + F25)))));
      
      // Number of operations: 201
      I[67] = W14[ip]*(C[5]*(G[25]*(F15 + F18) + G[61]*(F17 + F20) + G[79]*(F16 + F19)) + F21*F21*(F0*(G[30]*(F15 + F18) + G[66]*(F17 + F20) + G[84]*(F16 + F19)) + F1*(G[35]*(F15 + F18) + G[71]*(F17 + F20) + G[89]*(F16 + F19)) + F2*(G[39]*(F15 + F18) + G[75]*(F17 + F20) + G[93]*(F16 + F19)) + F23*(G[35]*(F15 + F18) + G[71]*(F17 + F20) + G[89]*(F16 + F19)) + F24*(G[39]*(F15 + F18) + G[75]*(F17 + F20) + G[93]*(F16 + F19)) + F25*(G[30]*(F15 + F18) + G[66]*(F17 + F20) + G[84]*(F16 + F19)) + F28*G[179]) + F22*(F21*(F0*(G[31]*(F15 + F18) + G[67]*(F17 + F20) + G[85]*(F16 + F19)) + F1*(G[36]*(F15 + F18) + G[72]*(F17 + F20) + G[90]*(F16 + F19)) + F2*(G[40]*(F15 + F18) + G[76]*(F17 + F20) + G[94]*(F16 + F19)) + F23*(G[36]*(F15 + F18) + G[72]*(F17 + F20) + G[90]*(F16 + F19)) + F24*(G[40]*(F15 + F18) + G[76]*(F17 + F20) + G[94]*(F16 + F19)) + F25*(G[31]*(F15 + F18) + G[67]*(F17 + F20) + G[85]*(F16 + F19)) + F28*G[180]) + F22*(F0*(G[30]*(F15 + F18) + G[66]*(F17 + F20) + G[84]*(F16 + F19)) + F1*(G[35]*(F15 + F18) + G[71]*(F17 + F20) + G[89]*(F16 + F19)) + F2*(G[39]*(F15 + F18) + G[75]*(F17 + F20) + G[93]*(F16 + F19)) + F23*(G[35]*(F15 + F18) + G[71]*(F17 + F20) + G[89]*(F16 + F19)) + F24*(G[39]*(F15 + F18) + G[75]*(F17 + F20) + G[93]*(F16 + F19)) + F25*(G[30]*(F15 + F18) + G[66]*(F17 + F20) + G[84]*(F16 + F19)) + F28*G[179])));
      
      // Number of operations: 201
      I[68] = W14[ip]*(C[5]*(G[103]*(F16 + F19) + G[43]*(F15 + F18) + G[79]*(F17 + F20)) + F21*F21*(F0*(G[108]*(F16 + F19) + G[48]*(F15 + F18) + G[84]*(F17 + F20)) + F1*(G[113]*(F16 + F19) + G[53]*(F15 + F18) + G[89]*(F17 + F20)) + F2*(G[117]*(F16 + F19) + G[57]*(F15 + F18) + G[93]*(F17 + F20)) + F23*(G[113]*(F16 + F19) + G[53]*(F15 + F18) + G[89]*(F17 + F20)) + F24*(G[117]*(F16 + F19) + G[57]*(F15 + F18) + G[93]*(F17 + F20)) + F25*(G[108]*(F16 + F19) + G[48]*(F15 + F18) + G[84]*(F17 + F20)) + F28*G[181]) + F22*(F21*(F0*(G[109]*(F16 + F19) + G[49]*(F15 + F18) + G[85]*(F17 + F20)) + F1*(G[114]*(F16 + F19) + G[54]*(F15 + F18) + G[90]*(F17 + F20)) + F2*(G[118]*(F16 + F19) + G[58]*(F15 + F18) + G[94]*(F17 + F20)) + F23*(G[114]*(F16 + F19) + G[54]*(F15 + F18) + G[90]*(F17 + F20)) + F24*(G[118]*(F16 + F19) + G[58]*(F15 + F18) + G[94]*(F17 + F20)) + F25*(G[109]*(F16 + F19) + G[49]*(F15 + F18) + G[85]*(F17 + F20)) + F28*G[182]) + F22*(F0*(G[108]*(F16 + F19) + G[48]*(F15 + F18) + G[84]*(F17 + F20)) + F1*(G[113]*(F16 + F19) + G[53]*(F15 + F18) + G[89]*(F17 + F20)) + F2*(G[117]*(F16 + F19) + G[57]*(F15 + F18) + G[93]*(F17 + F20)) + F23*(G[113]*(F16 + F19) + G[53]*(F15 + F18) + G[89]*(F17 + F20)) + F24*(G[117]*(F16 + F19) + G[57]*(F15 + F18) + G[93]*(F17 + F20)) + F25*(G[108]*(F16 + F19) + G[48]*(F15 + F18) + G[84]*(F17 + F20)) + F28*G[181])));
      
      // Number of operations: 201
      I[69] = W14[ip]*(C[5]*(G[1]*(F15 + F18) + G[25]*(F17 + F20) + G[43]*(F16 + F19)) + F21*F21*(F0*(G[30]*(F17 + F20) + G[48]*(F16 + F19) + G[6]*(F15 + F18)) + F1*(G[11]*(F15 + F18) + G[35]*(F17 + F20) + G[53]*(F16 + F19)) + F2*(G[15]*(F15 + F18) + G[39]*(F17 + F20) + G[57]*(F16 + F19)) + F23*(G[11]*(F15 + F18) + G[35]*(F17 + F20) + G[53]*(F16 + F19)) + F24*(G[15]*(F15 + F18) + G[39]*(F17 + F20) + G[57]*(F16 + F19)) + F25*(G[30]*(F17 + F20) + G[48]*(F16 + F19) + G[6]*(F15 + F18)) + F28*G[177]) + F22*(F21*(F0*(G[31]*(F17 + F20) + G[49]*(F16 + F19) + G[7]*(F15 + F18)) + F1*(G[12]*(F15 + F18) + G[36]*(F17 + F20) + G[54]*(F16 + F19)) + F2*(G[16]*(F15 + F18) + G[40]*(F17 + F20) + G[58]*(F16 + F19)) + F23*(G[12]*(F15 + F18) + G[36]*(F17 + F20) + G[54]*(F16 + F19)) + F24*(G[16]*(F15 + F18) + G[40]*(F17 + F20) + G[58]*(F16 + F19)) + F25*(G[31]*(F17 + F20) + G[49]*(F16 + F19) + G[7]*(F15 + F18)) + F28*G[178]) + F22*(F0*(G[30]*(F17 + F20) + G[48]*(F16 + F19) + G[6]*(F15 + F18)) + F1*(G[11]*(F15 + F18) + G[35]*(F17 + F20) + G[53]*(F16 + F19)) + F2*(G[15]*(F15 + F18) + G[39]*(F17 + F20) + G[57]*(F16 + F19)) + F23*(G[11]*(F15 + F18) + G[35]*(F17 + F20) + G[53]*(F16 + F19)) + F24*(G[15]*(F15 + F18) + G[39]*(F17 + F20) + G[57]*(F16 + F19)) + F25*(G[30]*(F17 + F20) + G[48]*(F16 + F19) + G[6]*(F15 + F18)) + F28*G[177])));
      
      // Number of operations: 201
      I[70] = W14[ip]*(C[5]*(G[25]*(F3 + F6) + G[61]*(F5 + F8) + G[79]*(F4 + F7)) + F21*F21*(F26*G[179] + F3*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)) + F4*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F5*(G[66]*(F0 + F25) + G[71]*(F1 + F23) + G[75]*(F2 + F24)) + F6*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)) + F7*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F8*(G[66]*(F0 + F25) + G[71]*(F1 + F23) + G[75]*(F2 + F24))) + F22*(F21*(F26*G[180] + F3*(G[31]*(F0 + F25) + G[36]*(F1 + F23) + G[40]*(F2 + F24)) + F4*(G[85]*(F0 + F25) + G[90]*(F1 + F23) + G[94]*(F2 + F24)) + F5*(G[67]*(F0 + F25) + G[72]*(F1 + F23) + G[76]*(F2 + F24)) + F6*(G[31]*(F0 + F25) + G[36]*(F1 + F23) + G[40]*(F2 + F24)) + F7*(G[85]*(F0 + F25) + G[90]*(F1 + F23) + G[94]*(F2 + F24)) + F8*(G[67]*(F0 + F25) + G[72]*(F1 + F23) + G[76]*(F2 + F24))) + F22*(F26*G[179] + F3*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)) + F4*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F5*(G[66]*(F0 + F25) + G[71]*(F1 + F23) + G[75]*(F2 + F24)) + F6*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)) + F7*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F8*(G[66]*(F0 + F25) + G[71]*(F1 + F23) + G[75]*(F2 + F24)))));
      
      // Number of operations: 201
      I[71] = W14[ip]*(C[5]*(G[103]*(F4 + F7) + G[43]*(F3 + F6) + G[79]*(F5 + F8)) + F21*F21*(F26*G[181] + F3*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F4*(G[108]*(F0 + F25) + G[113]*(F1 + F23) + G[117]*(F2 + F24)) + F5*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F6*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F7*(G[108]*(F0 + F25) + G[113]*(F1 + F23) + G[117]*(F2 + F24)) + F8*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24))) + F22*(F21*(F26*G[182] + F3*(G[49]*(F0 + F25) + G[54]*(F1 + F23) + G[58]*(F2 + F24)) + F4*(G[109]*(F0 + F25) + G[114]*(F1 + F23) + G[118]*(F2 + F24)) + F5*(G[85]*(F0 + F25) + G[90]*(F1 + F23) + G[94]*(F2 + F24)) + F6*(G[49]*(F0 + F25) + G[54]*(F1 + F23) + G[58]*(F2 + F24)) + F7*(G[109]*(F0 + F25) + G[114]*(F1 + F23) + G[118]*(F2 + F24)) + F8*(G[85]*(F0 + F25) + G[90]*(F1 + F23) + G[94]*(F2 + F24))) + F22*(F26*G[181] + F3*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F4*(G[108]*(F0 + F25) + G[113]*(F1 + F23) + G[117]*(F2 + F24)) + F5*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F6*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F7*(G[108]*(F0 + F25) + G[113]*(F1 + F23) + G[117]*(F2 + F24)) + F8*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)))));
      
      // Number of operations: 201
      I[72] = W14[ip]*(C[5]*(G[1]*(F3 + F6) + G[25]*(F5 + F8) + G[43]*(F4 + F7)) + F21*F21*(F26*G[177] + F3*(G[11]*(F1 + F23) + G[15]*(F2 + F24) + G[6]*(F0 + F25)) + F4*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F5*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)) + F6*(G[11]*(F1 + F23) + G[15]*(F2 + F24) + G[6]*(F0 + F25)) + F7*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F8*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24))) + F22*(F21*(F26*G[178] + F3*(G[12]*(F1 + F23) + G[16]*(F2 + F24) + G[7]*(F0 + F25)) + F4*(G[49]*(F0 + F25) + G[54]*(F1 + F23) + G[58]*(F2 + F24)) + F5*(G[31]*(F0 + F25) + G[36]*(F1 + F23) + G[40]*(F2 + F24)) + F6*(G[12]*(F1 + F23) + G[16]*(F2 + F24) + G[7]*(F0 + F25)) + F7*(G[49]*(F0 + F25) + G[54]*(F1 + F23) + G[58]*(F2 + F24)) + F8*(G[31]*(F0 + F25) + G[36]*(F1 + F23) + G[40]*(F2 + F24))) + F22*(F26*G[177] + F3*(G[11]*(F1 + F23) + G[15]*(F2 + F24) + G[6]*(F0 + F25)) + F4*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F5*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)) + F6*(G[11]*(F1 + F23) + G[15]*(F2 + F24) + G[6]*(F0 + F25)) + F7*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F8*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)))));
      
      // Number of operations: 201
      I[73] = W14[ip]*(C[5]*(G[25]*(F12 + F9) + G[61]*(F11 + F14) + G[79]*(F10 + F13)) + F21*F21*(F10*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F11*(G[66]*(F0 + F25) + G[71]*(F1 + F23) + G[75]*(F2 + F24)) + F12*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)) + F13*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F14*(G[66]*(F0 + F25) + G[71]*(F1 + F23) + G[75]*(F2 + F24)) + F27*G[179] + F9*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24))) + F22*(F21*(F10*(G[85]*(F0 + F25) + G[90]*(F1 + F23) + G[94]*(F2 + F24)) + F11*(G[67]*(F0 + F25) + G[72]*(F1 + F23) + G[76]*(F2 + F24)) + F12*(G[31]*(F0 + F25) + G[36]*(F1 + F23) + G[40]*(F2 + F24)) + F13*(G[85]*(F0 + F25) + G[90]*(F1 + F23) + G[94]*(F2 + F24)) + F14*(G[67]*(F0 + F25) + G[72]*(F1 + F23) + G[76]*(F2 + F24)) + F27*G[180] + F9*(G[31]*(F0 + F25) + G[36]*(F1 + F23) + G[40]*(F2 + F24))) + F22*(F10*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F11*(G[66]*(F0 + F25) + G[71]*(F1 + F23) + G[75]*(F2 + F24)) + F12*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)) + F13*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F14*(G[66]*(F0 + F25) + G[71]*(F1 + F23) + G[75]*(F2 + F24)) + F27*G[179] + F9*(G[30]*(F0 + F25) + G[35]*(F1 + F23) + G[39]*(F2 + F24)))));
      
      // Number of operations: 201
      I[74] = W14[ip]*(C[5]*(G[103]*(F10 + F13) + G[43]*(F12 + F9) + G[79]*(F11 + F14)) + F21*F21*(F10*(G[108]*(F0 + F25) + G[113]*(F1 + F23) + G[117]*(F2 + F24)) + F11*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F12*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F13*(G[108]*(F0 + F25) + G[113]*(F1 + F23) + G[117]*(F2 + F24)) + F14*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F27*G[181] + F9*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24))) + F22*(F21*(F10*(G[109]*(F0 + F25) + G[114]*(F1 + F23) + G[118]*(F2 + F24)) + F11*(G[85]*(F0 + F25) + G[90]*(F1 + F23) + G[94]*(F2 + F24)) + F12*(G[49]*(F0 + F25) + G[54]*(F1 + F23) + G[58]*(F2 + F24)) + F13*(G[109]*(F0 + F25) + G[114]*(F1 + F23) + G[118]*(F2 + F24)) + F14*(G[85]*(F0 + F25) + G[90]*(F1 + F23) + G[94]*(F2 + F24)) + F27*G[182] + F9*(G[49]*(F0 + F25) + G[54]*(F1 + F23) + G[58]*(F2 + F24))) + F22*(F10*(G[108]*(F0 + F25) + G[113]*(F1 + F23) + G[117]*(F2 + F24)) + F11*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F12*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)) + F13*(G[108]*(F0 + F25) + G[113]*(F1 + F23) + G[117]*(F2 + F24)) + F14*(G[84]*(F0 + F25) + G[89]*(F1 + F23) + G[93]*(F2 + F24)) + F27*G[181] + F9*(G[48]*(F0 + F25) + G[53]*(F1 + F23) + G[57]*(F2 + F24)))));
      
      // Number of operations: 70
      I[75] = W14[ip]*(std::abs(0.5*(F21 + F22))*G[183] + F21*(G[147]*(F15 + F18) + G[153]*(F17 + F20) + G[159]*(F16 + F19)) + F22*(G[147]*(F15 + F18) + G[153]*(F17 + F20) + G[159]*(F16 + F19)) + F29*F29*G[8] + F30*(F29*G[184] + F30*G[110]) + F31*(F29*G[185] + F30*G[187] + F31*G[68]) + F32*(F29*G[186] + F30*G[184] + F31*G[185] + F32*G[8]) + F33*(F30*G[188] + F31*G[187] + F33*G[110] + G[184]*(F29 + F32)) + F34*(F31*G[189] + F34*G[68] + G[185]*(F29 + F32) + G[187]*(F30 + F33)));
      
      // Number of operations: 65
      I[76] = W14[ip]*(F21*(G[147]*(F3 + F6) + G[153]*(F5 + F8) + G[159]*(F4 + F7)) + F22*(G[147]*(F3 + F6) + G[153]*(F5 + F8) + G[159]*(F4 + F7)) + F29*F29*G[5] + F30*(F29*G[190] + F30*G[107]) + F31*(F29*G[191] + F30*G[193] + F31*G[65]) + F32*(F29*G[192] + F30*G[190] + F31*G[191] + F32*G[5]) + F33*(F30*G[194] + F31*G[193] + F33*G[107] + G[190]*(F29 + F32)) + F34*(F31*G[195] + F34*G[65] + G[191]*(F29 + F32) + G[193]*(F30 + F33)));
      
      // Number of operations: 65
      I[77] = W14[ip]*(F21*(G[147]*(F12 + F9) + G[153]*(F11 + F14) + G[159]*(F10 + F13)) + F22*(G[147]*(F12 + F9) + G[153]*(F11 + F14) + G[159]*(F10 + F13)) + F29*F29*G[7] + F30*(F29*G[196] + F30*G[109]) + F31*(F29*G[197] + F30*G[199] + F31*G[67]) + F32*(F29*G[198] + F30*G[196] + F31*G[197] + F32*G[7]) + F33*(F30*G[200] + F31*G[199] + F33*G[109] + G[196]*(F29 + F32)) + F34*(F31*G[201] + F34*G[67] + G[197]*(F29 + F32) + G[199]*(F30 + F33)));
      
      // Number of operations: 65
      I[78] = W14[ip]*(F21*(G[148]*(F15 + F18) + G[154]*(F17 + F20) + G[160]*(F16 + F19)) + F22*(G[148]*(F15 + F18) + G[154]*(F17 + F20) + G[160]*(F16 + F19)) + F29*F29*G[5] + F30*(F29*G[190] + F30*G[107]) + F31*(F29*G[191] + F30*G[193] + F31*G[65]) + F32*(F29*G[192] + F30*G[190] + F31*G[191] + F32*G[5]) + F33*(F30*G[194] + F31*G[193] + F33*G[107] + G[190]*(F29 + F32)) + F34*(F31*G[195] + F34*G[65] + G[191]*(F29 + F32) + G[193]*(F30 + F33)));
      
      // Number of operations: 70
      I[79] = W14[ip]*(std::abs(0.5*(F21 + F22))*G[183] + F21*(G[148]*(F3 + F6) + G[154]*(F5 + F8) + G[160]*(F4 + F7)) + F22*(G[148]*(F3 + F6) + G[154]*(F5 + F8) + G[160]*(F4 + F7)) + F29*F29*G[13] + F30*(F29*G[202] + F30*G[115]) + F31*(F29*G[203] + F30*G[205] + F31*G[73]) + F32*(F29*G[204] + F30*G[202] + F31*G[203] + F32*G[13]) + F33*(F30*G[206] + F31*G[205] + F33*G[115] + G[202]*(F29 + F32)) + F34*(F31*G[207] + F34*G[73] + G[203]*(F29 + F32) + G[205]*(F30 + F33)));
      
      // Number of operations: 65
      I[80] = W14[ip]*(F21*(G[148]*(F12 + F9) + G[154]*(F11 + F14) + G[160]*(F10 + F13)) + F22*(G[148]*(F12 + F9) + G[154]*(F11 + F14) + G[160]*(F10 + F13)) + F29*F29*G[12] + F30*(F29*G[208] + F30*G[114]) + F31*(F29*G[209] + F30*G[211] + F31*G[72]) + F32*(F29*G[210] + F30*G[208] + F31*G[209] + F32*G[12]) + F33*(F30*G[212] + F31*G[211] + F33*G[114] + G[208]*(F29 + F32)) + F34*(F31*G[213] + F34*G[72] + G[209]*(F29 + F32) + G[211]*(F30 + F33)));
      
      // Number of operations: 65
      I[81] = W14[ip]*(F21*(G[149]*(F15 + F18) + G[155]*(F17 + F20) + G[161]*(F16 + F19)) + F22*(G[149]*(F15 + F18) + G[155]*(F17 + F20) + G[161]*(F16 + F19)) + F29*F29*G[7] + F30*(F29*G[196] + F30*G[109]) + F31*(F29*G[197] + F30*G[199] + F31*G[67]) + F32*(F29*G[198] + F30*G[196] + F31*G[197] + F32*G[7]) + F33*(F30*G[200] + F31*G[199] + F33*G[109] + G[196]*(F29 + F32)) + F34*(F31*G[201] + F34*G[67] + G[197]*(F29 + F32) + G[199]*(F30 + F33)));
      
      // Number of operations: 65
      I[82] = W14[ip]*(F21*(G[149]*(F3 + F6) + G[155]*(F5 + F8) + G[161]*(F4 + F7)) + F22*(G[149]*(F3 + F6) + G[155]*(F5 + F8) + G[161]*(F4 + F7)) + F29*F29*G[12] + F30*(F29*G[208] + F30*G[114]) + F31*(F29*G[209] + F30*G[211] + F31*G[72]) + F32*(F29*G[210] + F30*G[208] + F31*G[209] + F32*G[12]) + F33*(F30*G[212] + F31*G[211] + F33*G[114] + G[208]*(F29 + F32)) + F34*(F31*G[213] + F34*G[72] + G[209]*(F29 + F32) + G[211]*(F30 + F33)));
      
      // Number of operations: 70
      I[83] = W14[ip]*(std::abs(0.5*(F21 + F22))*G[183] + F21*(G[149]*(F12 + F9) + G[155]*(F11 + F14) + G[161]*(F10 + F13)) + F22*(G[149]*(F12 + F9) + G[155]*(F11 + F14) + G[161]*(F10 + F13)) + F29*F29*G[16] + F30*(F29*G[214] + F30*G[118]) + F31*(F29*G[215] + F30*G[217] + F31*G[76]) + F32*(F29*G[216] + F30*G[214] + F31*G[215] + F32*G[16]) + F33*(F30*G[218] + F31*G[217] + F33*G[118] + G[214]*(F29 + F32)) + F34*(F31*G[219] + F34*G[76] + G[215]*(F29 + F32) + G[217]*(F30 + F33)));
      
      
      // Number of operations for primary indices: 648
      for (unsigned int j = 0; j < 4; j++)
      {
        for (unsigned int k = 0; k < 2; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc10[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[48];
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc12[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[49];
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc13[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[50];
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc14[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[51];
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc4[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[52];
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc5[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[53];
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc6[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[54];
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc8[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[55];
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc9[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[56];
          // Number of operations to compute entry: 3
          A[nzc3[j]*12 + nzc10[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[57];
          // Number of operations to compute entry: 3
          A[nzc3[j]*12 + nzc12[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[58];
          // Number of operations to compute entry: 3
          A[nzc3[j]*12 + nzc13[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[59];
          // Number of operations to compute entry: 3
          A[nzc3[j]*12 + nzc14[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[60];
          // Number of operations to compute entry: 3
          A[nzc3[j]*12 + nzc4[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[61];
          // Number of operations to compute entry: 3
          A[nzc3[j]*12 + nzc5[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[62];
          // Number of operations to compute entry: 3
          A[nzc3[j]*12 + nzc6[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[63];
          // Number of operations to compute entry: 3
          A[nzc3[j]*12 + nzc8[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[64];
          // Number of operations to compute entry: 3
          A[nzc3[j]*12 + nzc9[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[65];
          // Number of operations to compute entry: 3
          A[nzc7[j]*12 + nzc10[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[66];
          // Number of operations to compute entry: 3
          A[nzc7[j]*12 + nzc12[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[67];
          // Number of operations to compute entry: 3
          A[nzc7[j]*12 + nzc13[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[68];
          // Number of operations to compute entry: 3
          A[nzc7[j]*12 + nzc14[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[69];
          // Number of operations to compute entry: 3
          A[nzc7[j]*12 + nzc4[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[70];
          // Number of operations to compute entry: 3
          A[nzc7[j]*12 + nzc5[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[71];
          // Number of operations to compute entry: 3
          A[nzc7[j]*12 + nzc6[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[72];
          // Number of operations to compute entry: 3
          A[nzc7[j]*12 + nzc8[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[73];
          // Number of operations to compute entry: 3
          A[nzc7[j]*12 + nzc9[k]] += FE0[ip][j]*FE0_D001[ip][k]*I[74];
        }// end loop over 'k'
      }// end loop over 'j'
      
      // Number of operations for primary indices: 216
      for (unsigned int j = 0; j < 2; j++)
      {
        for (unsigned int k = 0; k < 4; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[45];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc11[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[46];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc11[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[47];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc11[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[45];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[46];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[47];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[45];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[46];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[47];
        }// end loop over 'k'
      }// end loop over 'j'
      
      // Number of operations for primary indices: 972
      for (unsigned int j = 0; j < 2; j++)
      {
        for (unsigned int k = 0; k < 2; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[0];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[1];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[2];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[3];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[4];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[5];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[6];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[7];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[8];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[1];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[9];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[10];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[11];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[12];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[13];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[14];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[15];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[16];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[2];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[10];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[17];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[18];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[19];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[20];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[21];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[22];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[23];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[3];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[11];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[18];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[24];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[25];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[26];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[27];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[28];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[29];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[4];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[12];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[19];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[25];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[30];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[31];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[32];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[33];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[34];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[5];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[13];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[20];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[26];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[31];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[35];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[36];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[37];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[38];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[6];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[14];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[21];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[27];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[32];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[36];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[39];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[40];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[41];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[7];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[15];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[22];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[28];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[33];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[37];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[40];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[42];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[43];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[8];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[16];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[23];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[29];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[34];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[38];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[41];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[43];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[44];
        }// end loop over 'k'
      }// end loop over 'j'
      
      // Number of operations for primary indices: 432
      for (unsigned int j = 0; j < 4; j++)
      {
        for (unsigned int k = 0; k < 4; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc11[k]] += FE0[ip][j]*FE0[ip][k]*I[75];
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc3[k]] += FE0[ip][j]*FE0[ip][k]*I[76];
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc7[k]] += FE0[ip][j]*FE0[ip][k]*I[77];
          // Number of operations to compute entry: 3
          A[nzc3[j]*12 + nzc11[k]] += FE0[ip][j]*FE0[ip][k]*I[78];
          // Number of operations to compute entry: 3
          A[nzc3[j]*12 + nzc3[k]] += FE0[ip][j]*FE0[ip][k]*I[79];
          // Number of operations to compute entry: 3
          A[nzc3[j]*12 + nzc7[k]] += FE0[ip][j]*FE0[ip][k]*I[80];
          // Number of operations to compute entry: 3
          A[nzc7[j]*12 + nzc11[k]] += FE0[ip][j]*FE0[ip][k]*I[81];
          // Number of operations to compute entry: 3
          A[nzc7[j]*12 + nzc3[k]] += FE0[ip][j]*FE0[ip][k]*I[82];
          // Number of operations to compute entry: 3
          A[nzc7[j]*12 + nzc7[k]] += FE0[ip][j]*FE0[ip][k]*I[83];
        }// end loop over 'k'
      }// end loop over 'j'
    }// end loop over 'ip'
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Tabulate the tensor for the contribution from a local cell
/// using the specified reference cell quadrature points/weights
void nsedualmomentum3d_cell_integral_0_0::tabulate_tensor(double* A,
                     const double * const * w,
                     const ufc::cell& c,
                     unsigned int num_quadrature_points,
                     const double * const * quadrature_points,
                     const double* quadrature_weights) const
{
    throw std::runtime_error("Quadrature version of tabulate_tensor not yet implemented (introduced in UFC 2.0).");
}
#endif

/// Constructor
nsedualmomentum3d_exterior_facet_integral_0_0::nsedualmomentum3d_exterior_facet_integral_0_0() : ufc::exterior_facet_integral()
{
    // Do nothing
}

/// Destructor
nsedualmomentum3d_exterior_facet_integral_0_0::~nsedualmomentum3d_exterior_facet_integral_0_0()
{
    // Do nothing
}

/// Tabulate the tensor for the contribution from a local exterior facet
void nsedualmomentum3d_exterior_facet_integral_0_0::tabulate_tensor(double* A,
                                    const double * const * w,
                                    const ufc::cell& c,
                                    unsigned int facet) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    
    // Compute sub determinants
    
    // Compute determinant of Jacobian
    
    // Compute inverse of Jacobian
    
    // Get vertices on face
    static unsigned int face_vertices[4][3] = {{1, 2, 3}, {0, 2, 3}, {0, 1, 3}, {0, 1, 2}};
    const unsigned int v0 = face_vertices[facet][0];
    const unsigned int v1 = face_vertices[facet][1];
    const unsigned int v2 = face_vertices[facet][2];
    
    // Compute scale factor (area of face scaled by area of reference triangle)
    const double a0 = (x[v0][1]*x[v1][2] + x[v0][2]*x[v2][1] + x[v1][1]*x[v2][2]) - (x[v2][1]*x[v1][2] + x[v2][2]*x[v0][1] + x[v1][1]*x[v0][2]);
    
    const double a1 = (x[v0][2]*x[v1][0] + x[v0][0]*x[v2][2] + x[v1][2]*x[v2][0]) - (x[v2][2]*x[v1][0] + x[v2][0]*x[v0][2] + x[v1][2]*x[v0][0]);
    
    const double a2 = (x[v0][0]*x[v1][1] + x[v0][1]*x[v2][0] + x[v1][0]*x[v2][1]) - (x[v2][0]*x[v1][1] + x[v2][1]*x[v0][0] + x[v1][0]*x[v0][1]);
    
    const double det = std::sqrt(a0*a0 + a1*a1 + a2*a2);
    
    
    // Cell Volume.
    
    // Compute circumradius.
    
    
    // Facet Area (divide by two because 'det' is scaled by area of reference triangle).
    
    // Array of quadrature weights.
    static const double W6[6] = {0.054975871827661, 0.054975871827661, 0.054975871827661, 0.111690794839005, 0.111690794839005, 0.111690794839005};
    // Quadrature points on the UFC reference element: (0.816847572980459, 0.091576213509771), (0.091576213509771, 0.816847572980459), (0.091576213509771, 0.091576213509771), (0.10810301816807, 0.445948490915965), (0.445948490915965, 0.10810301816807), (0.445948490915965, 0.445948490915965)
    
    // Value of basis functions at quadrature points.
    static const double FE1_f0_C0[6][3] = \
    {{0.09157621350977, 0.816847572980459, 0.091576213509771},
    {0.0915762135097701, 0.091576213509771, 0.816847572980459},
    {0.816847572980458, 0.091576213509771, 0.091576213509771},
    {0.445948490915965, 0.10810301816807, 0.445948490915965},
    {0.445948490915965, 0.445948490915965, 0.10810301816807},
    {0.10810301816807, 0.445948490915965, 0.445948490915965}};
    
    // Array of non-zero columns
    static const unsigned int nzc0[3] = {1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc1[3] = {5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc2[3] = {9, 10, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc5[3] = {8, 10, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc8[3] = {8, 9, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc6[3] = {0, 1, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc7[3] = {4, 5, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc3[3] = {0, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc10[3] = {4, 5, 6};
    
    // Array of non-zero columns
    static const unsigned int nzc9[3] = {0, 1, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc4[3] = {4, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc11[3] = {8, 9, 10};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 144; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    // Number of operations to compute geometry constants: 3.
    double G[1];
    G[0] = 0.5*det*w[14][0]/w[3][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (facet)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 1674
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 1674
      for (unsigned int ip = 0; ip < 6; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        double F2 = 0.0;
        
        // Total number of operations to compute function values = 18
        for (unsigned int r = 0; r < 3; r++)
        {
          F0 += FE1_f0_C0[ip][r]*w[15][nzc0[r]];
          F1 += FE1_f0_C0[ip][r]*w[15][nzc1[r]];
          F2 += FE1_f0_C0[ip][r]*w[15][nzc2[r]];
        }// end loop over 'r'
        
        // Number of operations to compute ip constants: 18
        double I[6];
        // Number of operations: 3
        I[0] = F0*F0*G[0]*W6[ip];
        
        // Number of operations: 3
        I[1] = F0*F1*G[0]*W6[ip];
        
        // Number of operations: 3
        I[2] = F0*F2*G[0]*W6[ip];
        
        // Number of operations: 3
        I[3] = F1*F1*G[0]*W6[ip];
        
        // Number of operations: 3
        I[4] = F1*F2*G[0]*W6[ip];
        
        // Number of operations: 3
        I[5] = F2*F2*G[0]*W6[ip];
        
        
        // Number of operations for primary indices: 243
        for (unsigned int j = 0; j < 3; j++)
        {
          for (unsigned int k = 0; k < 3; k++)
          {
            // Number of operations to compute entry: 3
            A[nzc0[j]*12 + nzc0[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[0];
            // Number of operations to compute entry: 3
            A[nzc0[j]*12 + nzc1[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[1];
            // Number of operations to compute entry: 3
            A[nzc0[j]*12 + nzc2[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[2];
            // Number of operations to compute entry: 3
            A[nzc1[j]*12 + nzc0[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[1];
            // Number of operations to compute entry: 3
            A[nzc1[j]*12 + nzc1[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[3];
            // Number of operations to compute entry: 3
            A[nzc1[j]*12 + nzc2[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc2[j]*12 + nzc0[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[2];
            // Number of operations to compute entry: 3
            A[nzc2[j]*12 + nzc1[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc2[j]*12 + nzc2[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[5];
          }// end loop over 'k'
        }// end loop over 'j'
      }// end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 1674
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 1674
      for (unsigned int ip = 0; ip < 6; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        double F2 = 0.0;
        
        // Total number of operations to compute function values = 18
        for (unsigned int r = 0; r < 3; r++)
        {
          F0 += FE1_f0_C0[ip][r]*w[15][nzc3[r]];
          F1 += FE1_f0_C0[ip][r]*w[15][nzc4[r]];
          F2 += FE1_f0_C0[ip][r]*w[15][nzc5[r]];
        }// end loop over 'r'
        
        // Number of operations to compute ip constants: 18
        double I[6];
        // Number of operations: 3
        I[0] = F0*F0*G[0]*W6[ip];
        
        // Number of operations: 3
        I[1] = F0*F1*G[0]*W6[ip];
        
        // Number of operations: 3
        I[2] = F0*F2*G[0]*W6[ip];
        
        // Number of operations: 3
        I[3] = F1*F1*G[0]*W6[ip];
        
        // Number of operations: 3
        I[4] = F1*F2*G[0]*W6[ip];
        
        // Number of operations: 3
        I[5] = F2*F2*G[0]*W6[ip];
        
        
        // Number of operations for primary indices: 243
        for (unsigned int j = 0; j < 3; j++)
        {
          for (unsigned int k = 0; k < 3; k++)
          {
            // Number of operations to compute entry: 3
            A[nzc3[j]*12 + nzc3[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[0];
            // Number of operations to compute entry: 3
            A[nzc3[j]*12 + nzc4[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[1];
            // Number of operations to compute entry: 3
            A[nzc3[j]*12 + nzc5[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[2];
            // Number of operations to compute entry: 3
            A[nzc4[j]*12 + nzc3[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[1];
            // Number of operations to compute entry: 3
            A[nzc4[j]*12 + nzc4[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[3];
            // Number of operations to compute entry: 3
            A[nzc4[j]*12 + nzc5[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc5[j]*12 + nzc3[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[2];
            // Number of operations to compute entry: 3
            A[nzc5[j]*12 + nzc4[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc5[j]*12 + nzc5[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[5];
          }// end loop over 'k'
        }// end loop over 'j'
      }// end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 1674
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 1674
      for (unsigned int ip = 0; ip < 6; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        double F2 = 0.0;
        
        // Total number of operations to compute function values = 18
        for (unsigned int r = 0; r < 3; r++)
        {
          F0 += FE1_f0_C0[ip][r]*w[15][nzc6[r]];
          F1 += FE1_f0_C0[ip][r]*w[15][nzc7[r]];
          F2 += FE1_f0_C0[ip][r]*w[15][nzc8[r]];
        }// end loop over 'r'
        
        // Number of operations to compute ip constants: 18
        double I[6];
        // Number of operations: 3
        I[0] = F0*F0*G[0]*W6[ip];
        
        // Number of operations: 3
        I[1] = F0*F1*G[0]*W6[ip];
        
        // Number of operations: 3
        I[2] = F0*F2*G[0]*W6[ip];
        
        // Number of operations: 3
        I[3] = F1*F1*G[0]*W6[ip];
        
        // Number of operations: 3
        I[4] = F1*F2*G[0]*W6[ip];
        
        // Number of operations: 3
        I[5] = F2*F2*G[0]*W6[ip];
        
        
        // Number of operations for primary indices: 243
        for (unsigned int j = 0; j < 3; j++)
        {
          for (unsigned int k = 0; k < 3; k++)
          {
            // Number of operations to compute entry: 3
            A[nzc6[j]*12 + nzc6[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[0];
            // Number of operations to compute entry: 3
            A[nzc6[j]*12 + nzc7[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[1];
            // Number of operations to compute entry: 3
            A[nzc6[j]*12 + nzc8[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[2];
            // Number of operations to compute entry: 3
            A[nzc7[j]*12 + nzc6[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[1];
            // Number of operations to compute entry: 3
            A[nzc7[j]*12 + nzc7[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[3];
            // Number of operations to compute entry: 3
            A[nzc7[j]*12 + nzc8[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc8[j]*12 + nzc6[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[2];
            // Number of operations to compute entry: 3
            A[nzc8[j]*12 + nzc7[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc8[j]*12 + nzc8[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[5];
          }// end loop over 'k'
        }// end loop over 'j'
      }// end loop over 'ip'
        break;
      }
    case 3:
      {
        // Total number of operations to compute element tensor (from this point): 1674
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 1674
      for (unsigned int ip = 0; ip < 6; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        double F2 = 0.0;
        
        // Total number of operations to compute function values = 18
        for (unsigned int r = 0; r < 3; r++)
        {
          F0 += FE1_f0_C0[ip][r]*w[15][nzc9[r]];
          F1 += FE1_f0_C0[ip][r]*w[15][nzc10[r]];
          F2 += FE1_f0_C0[ip][r]*w[15][nzc11[r]];
        }// end loop over 'r'
        
        // Number of operations to compute ip constants: 18
        double I[6];
        // Number of operations: 3
        I[0] = F1*F1*G[0]*W6[ip];
        
        // Number of operations: 3
        I[1] = F1*F2*G[0]*W6[ip];
        
        // Number of operations: 3
        I[2] = F0*F1*G[0]*W6[ip];
        
        // Number of operations: 3
        I[3] = F2*F2*G[0]*W6[ip];
        
        // Number of operations: 3
        I[4] = F0*F2*G[0]*W6[ip];
        
        // Number of operations: 3
        I[5] = F0*F0*G[0]*W6[ip];
        
        
        // Number of operations for primary indices: 243
        for (unsigned int j = 0; j < 3; j++)
        {
          for (unsigned int k = 0; k < 3; k++)
          {
            // Number of operations to compute entry: 3
            A[nzc10[j]*12 + nzc10[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[0];
            // Number of operations to compute entry: 3
            A[nzc10[j]*12 + nzc11[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[1];
            // Number of operations to compute entry: 3
            A[nzc10[j]*12 + nzc9[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[2];
            // Number of operations to compute entry: 3
            A[nzc11[j]*12 + nzc10[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[1];
            // Number of operations to compute entry: 3
            A[nzc11[j]*12 + nzc11[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[3];
            // Number of operations to compute entry: 3
            A[nzc11[j]*12 + nzc9[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc9[j]*12 + nzc10[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[2];
            // Number of operations to compute entry: 3
            A[nzc9[j]*12 + nzc11[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc9[j]*12 + nzc9[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[5];
          }// end loop over 'k'
        }// end loop over 'j'
      }// end loop over 'ip'
        break;
      }
    }
    
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Tabulate the tensor for the contribution from a local exterior facet
/// using the specified reference cell quadrature points/weights
void nsedualmomentum3d_exterior_facet_integral_0_0::tabulate_tensor(double* A,
                     const double * const * w,
                     const ufc::cell& c,
                     unsigned int num_quadrature_points,
                     const double * const * quadrature_points,
                     const double* quadrature_weights) const
{
    throw std::runtime_error("Quadrature version of tabulate_tensor not yet implemented (introduced in UFC 2.0).");
}
#endif

/// Constructor
nsedualmomentum3d_cell_integral_1_0::nsedualmomentum3d_cell_integral_1_0() : ufc::cell_integral()
{
    // Do nothing
}

/// Destructor
nsedualmomentum3d_cell_integral_1_0::~nsedualmomentum3d_cell_integral_1_0()
{
    // Do nothing
}

/// Tabulate the tensor for the contribution from a local cell
void nsedualmomentum3d_cell_integral_1_0::tabulate_tensor(double* A,
                                    const double * const * w,
                                    const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Cell Volume.
    
    // Compute circumradius.
    
    
    // Facet Area (divide by two because 'det' is scaled by area of reference triangle).
    
    // Array of quadrature weights.
    static const double W4[4] = {0.0416666666666667, 0.0416666666666667, 0.0416666666666667, 0.0416666666666667};
    // Quadrature points on the UFC reference element: (0.585410196624969, 0.138196601125011, 0.138196601125011), (0.138196601125011, 0.585410196624969, 0.138196601125011), (0.138196601125011, 0.138196601125011, 0.585410196624969), (0.138196601125011, 0.138196601125011, 0.138196601125011)
    
    // Value of basis functions at quadrature points.
    static const double FE0[4][4] = \
    {{0.138196601125009, 0.585410196624969, 0.138196601125011, 0.138196601125011},
    {0.138196601125009, 0.138196601125011, 0.585410196624969, 0.138196601125011},
    {0.138196601125009, 0.138196601125011, 0.138196601125011, 0.585410196624969},
    {0.585410196624967, 0.138196601125011, 0.138196601125011, 0.138196601125011}};
    
    // Array of non-zero columns
    static const unsigned int nzc7[4] = {4, 5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc3[4] = {0, 1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc11[4] = {8, 9, 10, 11};
    
    static const double FE0_D001[4][2] = \
    {{-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc10[2] = {4, 5};
    
    // Array of non-zero columns
    static const unsigned int nzc5[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc6[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc2[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc14[2] = {8, 9};
    
    // Array of non-zero columns
    static const unsigned int nzc4[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc0[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc12[2] = {8, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc13[2] = {8, 10};
    
    // Array of non-zero columns
    static const unsigned int nzc8[2] = {4, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc9[2] = {4, 6};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 12; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    // Number of operations to compute geometry constants: 820.
    double G[100];
    G[0] = -0.25*std::pow(w[3][0], -1.5)*K_00*K_01*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[1] = -0.25*std::pow(w[3][0], -1.5)*K_00*K_11*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[2] = -0.25*std::pow(w[3][0], -1.5)*K_00*K_21*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[3] = -0.25*std::pow(w[3][0], -1.5)*K_01*K_01*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[4] = -0.25*std::pow(w[3][0], -1.5)*K_01*K_11*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[5] = -0.25*std::pow(w[3][0], -1.5)*K_01*K_21*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[6] = -0.25*std::pow(w[3][0], -1.5)*K_01*K_02*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[7] = -0.25*std::pow(w[3][0], -1.5)*K_02*K_11*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[8] = -0.25*std::pow(w[3][0], -1.5)*K_02*K_21*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[9] = -0.125*std::pow(w[3][0], -1.5)*K_00*K_01*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[10] = -0.125*std::pow(w[3][0], -1.5)*K_01*K_01*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[11] = -0.125*std::pow(w[3][0], -1.5)*K_01*K_02*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[12] = -0.125*std::pow(w[3][0], -1.5)*K_00*K_11*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[13] = -0.125*std::pow(w[3][0], -1.5)*K_01*K_11*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[14] = -0.125*std::pow(w[3][0], -1.5)*K_02*K_11*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[15] = -0.125*std::pow(w[3][0], -1.5)*K_00*K_21*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[16] = -0.125*std::pow(w[3][0], -1.5)*K_01*K_21*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[17] = -0.125*std::pow(w[3][0], -1.5)*K_02*K_21*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[18] =  - K_01*det;
    G[19] = -0.25*std::pow(w[3][0], -1.5)*K_02*K_20*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[20] = -0.25*std::pow(w[3][0], -1.5)*K_12*K_20*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[21] = -0.25*std::pow(w[3][0], -1.5)*K_20*K_22*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[22] = -0.25*std::pow(w[3][0], -1.5)*K_12*K_21*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[23] = -0.25*std::pow(w[3][0], -1.5)*K_21*K_22*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[24] = -0.25*std::pow(w[3][0], -1.5)*K_02*K_22*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[25] = -0.25*std::pow(w[3][0], -1.5)*K_12*K_22*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[26] = -0.25*std::pow(w[3][0], -1.5)*K_22*K_22*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[27] = -0.125*std::pow(w[3][0], -1.5)*K_02*K_20*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[28] = -0.125*std::pow(w[3][0], -1.5)*K_02*K_22*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[29] = -0.125*std::pow(w[3][0], -1.5)*K_12*K_20*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[30] = -0.125*std::pow(w[3][0], -1.5)*K_12*K_21*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[31] = -0.125*std::pow(w[3][0], -1.5)*K_12*K_22*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[32] = -0.125*std::pow(w[3][0], -1.5)*K_20*K_22*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[33] = -0.125*std::pow(w[3][0], -1.5)*K_21*K_22*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[34] = -0.125*std::pow(w[3][0], -1.5)*K_22*K_22*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[35] =  - K_22*det;
    G[36] = -0.25*std::pow(w[3][0], -1.5)*K_02*K_10*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[37] = -0.25*std::pow(w[3][0], -1.5)*K_10*K_12*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[38] = -0.25*std::pow(w[3][0], -1.5)*K_10*K_22*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[39] = -0.25*std::pow(w[3][0], -1.5)*K_11*K_12*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[40] = -0.25*std::pow(w[3][0], -1.5)*K_11*K_22*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[41] = -0.25*std::pow(w[3][0], -1.5)*K_02*K_12*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[42] = -0.25*std::pow(w[3][0], -1.5)*K_12*K_12*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[43] = -0.125*std::pow(w[3][0], -1.5)*K_02*K_10*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[44] = -0.125*std::pow(w[3][0], -1.5)*K_02*K_12*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[45] = -0.125*std::pow(w[3][0], -1.5)*K_10*K_12*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[46] = -0.125*std::pow(w[3][0], -1.5)*K_11*K_12*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[47] = -0.125*std::pow(w[3][0], -1.5)*K_12*K_12*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[48] = -0.125*std::pow(w[3][0], -1.5)*K_10*K_22*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[49] = -0.125*std::pow(w[3][0], -1.5)*K_11*K_22*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[50] =  - K_12*det;
    G[51] = -0.25*std::pow(w[3][0], -1.5)*K_00*K_02*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[52] = -0.25*std::pow(w[3][0], -1.5)*K_00*K_12*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[53] = -0.25*std::pow(w[3][0], -1.5)*K_00*K_22*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[54] = -0.25*std::pow(w[3][0], -1.5)*K_01*K_12*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[55] = -0.25*std::pow(w[3][0], -1.5)*K_01*K_22*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[56] = -0.25*std::pow(w[3][0], -1.5)*K_02*K_02*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[57] = -0.125*std::pow(w[3][0], -1.5)*K_00*K_02*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[58] = -0.125*std::pow(w[3][0], -1.5)*K_02*K_02*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[59] = -0.125*std::pow(w[3][0], -1.5)*K_00*K_12*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[60] = -0.125*std::pow(w[3][0], -1.5)*K_01*K_12*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[61] = -0.125*std::pow(w[3][0], -1.5)*K_00*K_22*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[62] = -0.125*std::pow(w[3][0], -1.5)*K_01*K_22*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[63] =  - K_02*det;
    G[64] = -0.25*std::pow(w[3][0], -1.5)*K_00*K_20*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[65] = -0.25*std::pow(w[3][0], -1.5)*K_10*K_20*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[66] = -0.25*std::pow(w[3][0], -1.5)*K_20*K_20*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[67] = -0.25*std::pow(w[3][0], -1.5)*K_10*K_21*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[68] = -0.25*std::pow(w[3][0], -1.5)*K_20*K_21*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[69] = -0.125*std::pow(w[3][0], -1.5)*K_00*K_20*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[70] = -0.125*std::pow(w[3][0], -1.5)*K_10*K_20*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[71] = -0.125*std::pow(w[3][0], -1.5)*K_10*K_21*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[72] = -0.125*std::pow(w[3][0], -1.5)*K_20*K_20*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[73] = -0.125*std::pow(w[3][0], -1.5)*K_20*K_21*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[74] =  - K_20*det;
    G[75] = -0.25*std::pow(w[3][0], -1.5)*K_00*K_10*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[76] = -0.25*std::pow(w[3][0], -1.5)*K_10*K_10*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[77] = -0.25*std::pow(w[3][0], -1.5)*K_10*K_11*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[78] = -0.25*std::pow(w[3][0], -1.5)*K_11*K_20*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[79] = -0.125*std::pow(w[3][0], -1.5)*K_00*K_10*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[80] = -0.125*std::pow(w[3][0], -1.5)*K_10*K_10*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[81] = -0.125*std::pow(w[3][0], -1.5)*K_10*K_11*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[82] = -0.125*std::pow(w[3][0], -1.5)*K_11*K_20*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[83] =  - K_10*det;
    G[84] = -0.25*std::pow(w[3][0], -1.5)*K_00*K_00*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[85] = -0.25*std::pow(w[3][0], -1.5)*K_01*K_10*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[86] = -0.25*std::pow(w[3][0], -1.5)*K_01*K_20*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[87] = -0.125*std::pow(w[3][0], -1.5)*K_00*K_00*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[88] = -0.125*std::pow(w[3][0], -1.5)*K_01*K_10*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[89] = -0.125*std::pow(w[3][0], -1.5)*K_01*K_20*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[90] =  - K_00*det;
    G[91] = -0.25*std::pow(w[3][0], -1.5)*K_11*K_21*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[92] = -0.25*std::pow(w[3][0], -1.5)*K_21*K_21*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[93] = -0.125*std::pow(w[3][0], -1.5)*K_11*K_21*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[94] = -0.125*std::pow(w[3][0], -1.5)*K_21*K_21*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[95] =  - K_21*det;
    G[96] = -0.25*std::pow(w[3][0], -1.5)*K_11*K_11*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[97] = -0.125*std::pow(w[3][0], -1.5)*K_11*K_11*det*w[3][0]*w[3][0]*w[3][0]*w[5][0];
    G[98] =  - K_11*det;
    G[99] = det*w[4][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 6648
    for (unsigned int ip = 0; ip < 4; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      double F13 = 0.0;
      double F14 = 0.0;
      double F15 = 0.0;
      double F16 = 0.0;
      double F17 = 0.0;
      double F18 = 0.0;
      double F19 = 0.0;
      double F20 = 0.0;
      double F21 = 0.0;
      double F22 = 0.0;
      double F23 = 0.0;
      double F24 = 0.0;
      double F25 = 0.0;
      double F26 = 0.0;
      double F27 = 0.0;
      double F28 = 0.0;
      double F29 = 0.0;
      double F30 = 0.0;
      double F31 = 0.0;
      double F32 = 0.0;
      
      // Total number of operations to compute function values = 84
      for (unsigned int r = 0; r < 2; r++)
      {
        F7 += FE0_D001[ip][r]*w[0][nzc6[r]];
        F8 += FE0_D001[ip][r]*w[0][nzc5[r]];
        F9 += FE0_D001[ip][r]*w[0][nzc4[r]];
        F13 += FE0_D001[ip][r]*w[6][nzc6[r]];
        F14 += FE0_D001[ip][r]*w[6][nzc5[r]];
        F15 += FE0_D001[ip][r]*w[6][nzc4[r]];
        F18 += FE0_D001[ip][r]*w[2][nzc2[r]];
        F19 += FE0_D001[ip][r]*w[2][nzc1[r]];
        F20 += FE0_D001[ip][r]*w[2][nzc0[r]];
        F21 += FE0_D001[ip][r]*w[0][nzc10[r]];
        F22 += FE0_D001[ip][r]*w[0][nzc9[r]];
        F23 += FE0_D001[ip][r]*w[0][nzc8[r]];
        F24 += FE0_D001[ip][r]*w[6][nzc10[r]];
        F25 += FE0_D001[ip][r]*w[6][nzc9[r]];
        F26 += FE0_D001[ip][r]*w[6][nzc8[r]];
        F27 += FE0_D001[ip][r]*w[0][nzc14[r]];
        F28 += FE0_D001[ip][r]*w[0][nzc13[r]];
        F29 += FE0_D001[ip][r]*w[0][nzc12[r]];
        F30 += FE0_D001[ip][r]*w[6][nzc14[r]];
        F31 += FE0_D001[ip][r]*w[6][nzc13[r]];
        F32 += FE0_D001[ip][r]*w[6][nzc12[r]];
      }// end loop over 'r'
      
      // Total number of operations to compute function values = 96
      for (unsigned int r = 0; r < 4; r++)
      {
        F0 += FE0[ip][r]*w[8][nzc3[r]];
        F1 += FE0[ip][r]*w[8][nzc7[r]];
        F2 += FE0[ip][r]*w[8][nzc11[r]];
        F3 += FE0[ip][r]*w[6][nzc3[r]];
        F4 += FE0[ip][r]*w[6][nzc7[r]];
        F5 += FE0[ip][r]*w[6][nzc11[r]];
        F6 += FE0[ip][r]*w[2][r];
        F10 += FE0[ip][r]*w[1][r];
        F11 += FE0[ip][r]*w[7][r];
        F12 += FE0[ip][r]*w[0][nzc3[r]];
        F16 += FE0[ip][r]*w[0][nzc7[r]];
        F17 += FE0[ip][r]*w[0][nzc11[r]];
      }// end loop over 'r'
      
      // Number of operations to compute ip constants: 1422
      double I[12];
      // Number of operations: 82
      I[0] = W4[ip]*(F10*(F18*(F12*G[0] + F16*G[3] + F17*G[6] + F3*G[9] + F4*G[10] + F5*G[11]) + F19*(F12*G[1] + F16*G[4] + F17*G[7] + F3*G[12] + F4*G[13] + F5*G[14]) + F20*(F12*G[2] + F16*G[5] + F17*G[8] + F3*G[15] + F4*G[16] + F5*G[17])) + F11*(F18*(F12*G[0] + F16*G[3] + F17*G[6] + F3*G[9] + F4*G[10] + F5*G[11]) + F19*(F12*G[1] + F16*G[4] + F17*G[7] + F3*G[12] + F4*G[13] + F5*G[14]) + F20*(F12*G[2] + F16*G[5] + F17*G[8] + F3*G[15] + F4*G[16] + F5*G[17])) + F6*G[18]);
      
      // Number of operations: 82
      I[1] = W4[ip]*(F10*(F18*(F12*G[19] + F16*G[8] + F17*G[24] + F3*G[27] + F4*G[17] + F5*G[28]) + F19*(F12*G[20] + F16*G[22] + F17*G[25] + F3*G[29] + F4*G[30] + F5*G[31]) + F20*(F12*G[21] + F16*G[23] + F17*G[26] + F3*G[32] + F4*G[33] + F5*G[34])) + F11*(F18*(F12*G[19] + F16*G[8] + F17*G[24] + F3*G[27] + F4*G[17] + F5*G[28]) + F19*(F12*G[20] + F16*G[22] + F17*G[25] + F3*G[29] + F4*G[30] + F5*G[31]) + F20*(F12*G[21] + F16*G[23] + F17*G[26] + F3*G[32] + F4*G[33] + F5*G[34])) + F6*G[35]);
      
      // Number of operations: 82
      I[2] = W4[ip]*(F10*(F18*(F12*G[36] + F16*G[7] + F17*G[41] + F3*G[43] + F4*G[14] + F5*G[44]) + F19*(F12*G[37] + F16*G[39] + F17*G[42] + F3*G[45] + F4*G[46] + F5*G[47]) + F20*(F12*G[38] + F16*G[40] + F17*G[25] + F3*G[48] + F4*G[49] + F5*G[31])) + F11*(F18*(F12*G[36] + F16*G[7] + F17*G[41] + F3*G[43] + F4*G[14] + F5*G[44]) + F19*(F12*G[37] + F16*G[39] + F17*G[42] + F3*G[45] + F4*G[46] + F5*G[47]) + F20*(F12*G[38] + F16*G[40] + F17*G[25] + F3*G[48] + F4*G[49] + F5*G[31])) + F6*G[50]);
      
      // Number of operations: 82
      I[3] = W4[ip]*(F10*(F18*(F12*G[51] + F16*G[6] + F17*G[56] + F3*G[57] + F4*G[11] + F5*G[58]) + F19*(F12*G[52] + F16*G[54] + F17*G[41] + F3*G[59] + F4*G[60] + F5*G[44]) + F20*(F12*G[53] + F16*G[55] + F17*G[24] + F3*G[61] + F4*G[62] + F5*G[28])) + F11*(F18*(F12*G[51] + F16*G[6] + F17*G[56] + F3*G[57] + F4*G[11] + F5*G[58]) + F19*(F12*G[52] + F16*G[54] + F17*G[41] + F3*G[59] + F4*G[60] + F5*G[44]) + F20*(F12*G[53] + F16*G[55] + F17*G[24] + F3*G[61] + F4*G[62] + F5*G[28])) + F6*G[63]);
      
      // Number of operations: 82
      I[4] = W4[ip]*(F10*(F18*(F12*G[64] + F16*G[2] + F17*G[53] + F3*G[69] + F4*G[15] + F5*G[61]) + F19*(F12*G[65] + F16*G[67] + F17*G[38] + F3*G[70] + F4*G[71] + F5*G[48]) + F20*(F12*G[66] + F16*G[68] + F17*G[21] + F3*G[72] + F4*G[73] + F5*G[32])) + F11*(F18*(F12*G[64] + F16*G[2] + F17*G[53] + F3*G[69] + F4*G[15] + F5*G[61]) + F19*(F12*G[65] + F16*G[67] + F17*G[38] + F3*G[70] + F4*G[71] + F5*G[48]) + F20*(F12*G[66] + F16*G[68] + F17*G[21] + F3*G[72] + F4*G[73] + F5*G[32])) + F6*G[74]);
      
      // Number of operations: 82
      I[5] = W4[ip]*(F10*(F18*(F12*G[75] + F16*G[1] + F17*G[52] + F3*G[79] + F4*G[12] + F5*G[59]) + F19*(F12*G[76] + F16*G[77] + F17*G[37] + F3*G[80] + F4*G[81] + F5*G[45]) + F20*(F12*G[65] + F16*G[78] + F17*G[20] + F3*G[70] + F4*G[82] + F5*G[29])) + F11*(F18*(F12*G[75] + F16*G[1] + F17*G[52] + F3*G[79] + F4*G[12] + F5*G[59]) + F19*(F12*G[76] + F16*G[77] + F17*G[37] + F3*G[80] + F4*G[81] + F5*G[45]) + F20*(F12*G[65] + F16*G[78] + F17*G[20] + F3*G[70] + F4*G[82] + F5*G[29])) + F6*G[83]);
      
      // Number of operations: 82
      I[6] = W4[ip]*(F10*(F18*(F12*G[84] + F16*G[0] + F17*G[51] + F3*G[87] + F4*G[9] + F5*G[57]) + F19*(F12*G[75] + F16*G[85] + F17*G[36] + F3*G[79] + F4*G[88] + F5*G[43]) + F20*(F12*G[64] + F16*G[86] + F17*G[19] + F3*G[69] + F4*G[89] + F5*G[27])) + F11*(F18*(F12*G[84] + F16*G[0] + F17*G[51] + F3*G[87] + F4*G[9] + F5*G[57]) + F19*(F12*G[75] + F16*G[85] + F17*G[36] + F3*G[79] + F4*G[88] + F5*G[43]) + F20*(F12*G[64] + F16*G[86] + F17*G[19] + F3*G[69] + F4*G[89] + F5*G[27])) + F6*G[90]);
      
      // Number of operations: 82
      I[7] = W4[ip]*(F10*(F18*(F12*G[86] + F16*G[5] + F17*G[55] + F3*G[89] + F4*G[16] + F5*G[62]) + F19*(F12*G[78] + F16*G[91] + F17*G[40] + F3*G[82] + F4*G[93] + F5*G[49]) + F20*(F12*G[68] + F16*G[92] + F17*G[23] + F3*G[73] + F4*G[94] + F5*G[33])) + F11*(F18*(F12*G[86] + F16*G[5] + F17*G[55] + F3*G[89] + F4*G[16] + F5*G[62]) + F19*(F12*G[78] + F16*G[91] + F17*G[40] + F3*G[82] + F4*G[93] + F5*G[49]) + F20*(F12*G[68] + F16*G[92] + F17*G[23] + F3*G[73] + F4*G[94] + F5*G[33])) + F6*G[95]);
      
      // Number of operations: 82
      I[8] = W4[ip]*(F10*(F18*(F12*G[85] + F16*G[4] + F17*G[54] + F3*G[88] + F4*G[13] + F5*G[60]) + F19*(F12*G[77] + F16*G[96] + F17*G[39] + F3*G[81] + F4*G[97] + F5*G[46]) + F20*(F12*G[67] + F16*G[91] + F17*G[22] + F3*G[71] + F4*G[93] + F5*G[30])) + F11*(F18*(F12*G[85] + F16*G[4] + F17*G[54] + F3*G[88] + F4*G[13] + F5*G[60]) + F19*(F12*G[77] + F16*G[96] + F17*G[39] + F3*G[81] + F4*G[97] + F5*G[46]) + F20*(F12*G[67] + F16*G[91] + F17*G[22] + F3*G[71] + F4*G[93] + F5*G[30])) + F6*G[98]);
      
      // Number of operations: 228
      I[9] = W4[ip]*(F10*(F18*(F13*G[57] + F14*G[59] + F15*G[61] + F21*G[6] + F22*G[54] + F23*G[55] + F24*G[11] + F25*G[60] + F26*G[62] + F27*G[56] + F28*G[41] + F29*G[24] + F30*G[58] + F31*G[44] + F32*G[28] + F7*G[51] + F8*G[52] + F9*G[53]) + F19*(F13*G[43] + F14*G[45] + F15*G[48] + F21*G[7] + F22*G[39] + F23*G[40] + F24*G[14] + F25*G[46] + F26*G[49] + F27*G[41] + F28*G[42] + F29*G[25] + F30*G[44] + F31*G[47] + F32*G[31] + F7*G[36] + F8*G[37] + F9*G[38]) + F20*(F13*G[27] + F14*G[29] + F15*G[32] + F21*G[8] + F22*G[22] + F23*G[23] + F24*G[17] + F25*G[30] + F26*G[33] + F27*G[24] + F28*G[25] + F29*G[26] + F30*G[28] + F31*G[31] + F32*G[34] + F7*G[19] + F8*G[20] + F9*G[21])) + F11*(F18*(F13*G[57] + F14*G[59] + F15*G[61] + F21*G[6] + F22*G[54] + F23*G[55] + F24*G[11] + F25*G[60] + F26*G[62] + F27*G[56] + F28*G[41] + F29*G[24] + F30*G[58] + F31*G[44] + F32*G[28] + F7*G[51] + F8*G[52] + F9*G[53]) + F19*(F13*G[43] + F14*G[45] + F15*G[48] + F21*G[7] + F22*G[39] + F23*G[40] + F24*G[14] + F25*G[46] + F26*G[49] + F27*G[41] + F28*G[42] + F29*G[25] + F30*G[44] + F31*G[47] + F32*G[31] + F7*G[36] + F8*G[37] + F9*G[38]) + F20*(F13*G[27] + F14*G[29] + F15*G[32] + F21*G[8] + F22*G[22] + F23*G[23] + F24*G[17] + F25*G[30] + F26*G[33] + F27*G[24] + F28*G[25] + F29*G[26] + F30*G[28] + F31*G[31] + F32*G[34] + F7*G[19] + F8*G[20] + F9*G[21])) + F2*G[99] + F5*det);
      
      // Number of operations: 228
      I[10] = W4[ip]*(F0*G[99] + F10*(F18*(F13*G[87] + F14*G[79] + F15*G[69] + F21*G[0] + F22*G[85] + F23*G[86] + F24*G[9] + F25*G[88] + F26*G[89] + F27*G[51] + F28*G[36] + F29*G[19] + F30*G[57] + F31*G[43] + F32*G[27] + F7*G[84] + F8*G[75] + F9*G[64]) + F19*(F13*G[79] + F14*G[80] + F15*G[70] + F21*G[1] + F22*G[77] + F23*G[78] + F24*G[12] + F25*G[81] + F26*G[82] + F27*G[52] + F28*G[37] + F29*G[20] + F30*G[59] + F31*G[45] + F32*G[29] + F7*G[75] + F8*G[76] + F9*G[65]) + F20*(F13*G[69] + F14*G[70] + F15*G[72] + F21*G[2] + F22*G[67] + F23*G[68] + F24*G[15] + F25*G[71] + F26*G[73] + F27*G[53] + F28*G[38] + F29*G[21] + F30*G[61] + F31*G[48] + F32*G[32] + F7*G[64] + F8*G[65] + F9*G[66])) + F11*(F18*(F13*G[87] + F14*G[79] + F15*G[69] + F21*G[0] + F22*G[85] + F23*G[86] + F24*G[9] + F25*G[88] + F26*G[89] + F27*G[51] + F28*G[36] + F29*G[19] + F30*G[57] + F31*G[43] + F32*G[27] + F7*G[84] + F8*G[75] + F9*G[64]) + F19*(F13*G[79] + F14*G[80] + F15*G[70] + F21*G[1] + F22*G[77] + F23*G[78] + F24*G[12] + F25*G[81] + F26*G[82] + F27*G[52] + F28*G[37] + F29*G[20] + F30*G[59] + F31*G[45] + F32*G[29] + F7*G[75] + F8*G[76] + F9*G[65]) + F20*(F13*G[69] + F14*G[70] + F15*G[72] + F21*G[2] + F22*G[67] + F23*G[68] + F24*G[15] + F25*G[71] + F26*G[73] + F27*G[53] + F28*G[38] + F29*G[21] + F30*G[61] + F31*G[48] + F32*G[32] + F7*G[64] + F8*G[65] + F9*G[66])) + F3*det);
      
      // Number of operations: 228
      I[11] = W4[ip]*(F1*G[99] + F10*(F18*(F13*G[9] + F14*G[12] + F15*G[15] + F21*G[3] + F22*G[4] + F23*G[5] + F24*G[10] + F25*G[13] + F26*G[16] + F27*G[6] + F28*G[7] + F29*G[8] + F30*G[11] + F31*G[14] + F32*G[17] + F7*G[0] + F8*G[1] + F9*G[2]) + F19*(F13*G[88] + F14*G[81] + F15*G[71] + F21*G[4] + F22*G[96] + F23*G[91] + F24*G[13] + F25*G[97] + F26*G[93] + F27*G[54] + F28*G[39] + F29*G[22] + F30*G[60] + F31*G[46] + F32*G[30] + F7*G[85] + F8*G[77] + F9*G[67]) + F20*(F13*G[89] + F14*G[82] + F15*G[73] + F21*G[5] + F22*G[91] + F23*G[92] + F24*G[16] + F25*G[93] + F26*G[94] + F27*G[55] + F28*G[40] + F29*G[23] + F30*G[62] + F31*G[49] + F32*G[33] + F7*G[86] + F8*G[78] + F9*G[68])) + F11*(F18*(F13*G[9] + F14*G[12] + F15*G[15] + F21*G[3] + F22*G[4] + F23*G[5] + F24*G[10] + F25*G[13] + F26*G[16] + F27*G[6] + F28*G[7] + F29*G[8] + F30*G[11] + F31*G[14] + F32*G[17] + F7*G[0] + F8*G[1] + F9*G[2]) + F19*(F13*G[88] + F14*G[81] + F15*G[71] + F21*G[4] + F22*G[96] + F23*G[91] + F24*G[13] + F25*G[97] + F26*G[93] + F27*G[54] + F28*G[39] + F29*G[22] + F30*G[60] + F31*G[46] + F32*G[30] + F7*G[85] + F8*G[77] + F9*G[67]) + F20*(F13*G[89] + F14*G[82] + F15*G[73] + F21*G[5] + F22*G[91] + F23*G[92] + F24*G[16] + F25*G[93] + F26*G[94] + F27*G[55] + F28*G[40] + F29*G[23] + F30*G[62] + F31*G[49] + F32*G[33] + F7*G[86] + F8*G[78] + F9*G[68])) + F4*det);
      
      
      // Number of operations for primary indices: 36
      for (unsigned int j = 0; j < 2; j++)
      {
        // Number of operations to compute entry: 2
        A[nzc10[j]] += FE0_D001[ip][j]*I[0];
        // Number of operations to compute entry: 2
        A[nzc12[j]] += FE0_D001[ip][j]*I[1];
        // Number of operations to compute entry: 2
        A[nzc13[j]] += FE0_D001[ip][j]*I[2];
        // Number of operations to compute entry: 2
        A[nzc14[j]] += FE0_D001[ip][j]*I[3];
        // Number of operations to compute entry: 2
        A[nzc4[j]] += FE0_D001[ip][j]*I[4];
        // Number of operations to compute entry: 2
        A[nzc5[j]] += FE0_D001[ip][j]*I[5];
        // Number of operations to compute entry: 2
        A[nzc6[j]] += FE0_D001[ip][j]*I[6];
        // Number of operations to compute entry: 2
        A[nzc8[j]] += FE0_D001[ip][j]*I[7];
        // Number of operations to compute entry: 2
        A[nzc9[j]] += FE0_D001[ip][j]*I[8];
      }// end loop over 'j'
      
      // Number of operations for primary indices: 24
      for (unsigned int j = 0; j < 4; j++)
      {
        // Number of operations to compute entry: 2
        A[nzc11[j]] += FE0[ip][j]*I[9];
        // Number of operations to compute entry: 2
        A[nzc3[j]] += FE0[ip][j]*I[10];
        // Number of operations to compute entry: 2
        A[nzc7[j]] += FE0[ip][j]*I[11];
      }// end loop over 'j'
    }// end loop over 'ip'
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Tabulate the tensor for the contribution from a local cell
/// using the specified reference cell quadrature points/weights
void nsedualmomentum3d_cell_integral_1_0::tabulate_tensor(double* A,
                     const double * const * w,
                     const ufc::cell& c,
                     unsigned int num_quadrature_points,
                     const double * const * quadrature_points,
                     const double* quadrature_weights) const
{
    throw std::runtime_error("Quadrature version of tabulate_tensor not yet implemented (introduced in UFC 2.0).");
}
#endif

/// Constructor
nsedualmomentum3d_form_0::nsedualmomentum3d_form_0() : ufc::form()
{
    // Do nothing
}

/// Destructor
nsedualmomentum3d_form_0::~nsedualmomentum3d_form_0()
{
    // Do nothing
}

/// Return a string identifying the form
const char* nsedualmomentum3d_form_0::signature() const
{
    return "Form([Integral(Sum(Sum(Product(IndexSum(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(0),), {Index(0): 3})), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(2),), {Index(2): 3})), MultiIndex((Index(2), Index(0)), {Index(2): 3, Index(0): 3})), MultiIndex((Index(3), Index(4)), {Index(4): 3, Index(3): 3})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(5),), {Index(5): 3})), MultiIndex((Index(6),), {Index(6): 3})), MultiIndex((Index(6), Index(5)), {Index(5): 3, Index(6): 3})), MultiIndex((Index(3), Index(4)), {Index(4): 3, Index(3): 3}))), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((Index(4),), {Index(4): 3})), Product(Sum(Abs(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(2),), {}))), Sum(Abs(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(0),), {}))), Abs(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(1),), {}))))), Sum(Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 7), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3), FloatValue(0.5, (), (), {})))), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 11), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 6), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3), IntValue(2, (), (), {}))))))), Product(IndexSum(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(0),), {Index(0): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 8), MultiIndex((Index(0),), {Index(0): 3}))), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(2),), {Index(2): 3})), MultiIndex((Index(2), Index(0)), {Index(2): 3, Index(0): 3})), MultiIndex((Index(3), Index(4)), {Index(4): 3, Index(3): 3})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(5),), {Index(5): 3})), MultiIndex((Index(6),), {Index(6): 3})), MultiIndex((Index(6), Index(5)), {Index(5): 3, Index(6): 3})), MultiIndex((Index(3), Index(4)), {Index(4): 3, Index(3): 3}))), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((Index(4),), {Index(4): 3})), Product(Sum(Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 7), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3), FloatValue(0.5, (), (), {})))), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 11), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 6), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3), IntValue(2, (), (), {}))))), Sum(Product(Conditional(EQ(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(2),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(2),), {}))), Sum(Product(Conditional(EQ(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(0),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(0),), {}))), Product(Conditional(EQ(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), Zero((), (), {}), Conditional(LT(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(1),), {})), Zero((), (), {})), IntValue(-1, (), (), {}), IntValue(1, (), (), {}))), Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((FixedIndex(1),), {})))))))), Sum(Product(Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 5), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3), FloatValue(0.5, (), (), {})))), Sum(Product(IndexSum(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(7),), {Index(7): 3})), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(7),), {Index(7): 3})), MultiIndex((Index(7),), {Index(7): 3})), IndexSum(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(8),), {Index(8): 3})), MultiIndex((Index(8),), {Index(8): 3})), MultiIndex((Index(8),), {Index(8): 3}))), Sum(IndexSum(Sum(Product(Indexed(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(9),), {Index(9): 3})), Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(10),), {Index(10): 3})), MultiIndex((Index(11),), {Index(11): 3})), MultiIndex((Index(11), Index(10)), {Index(11): 3, Index(10): 3})), MultiIndex((Index(12), Index(13)), {Index(13): 3, Index(12): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 9)))), MultiIndex((Index(12), Index(13)), {Index(13): 3, Index(12): 3})), MultiIndex((Index(14), Index(9)), {Index(14): 3, Index(9): 3}))), MultiIndex((Index(9),), {Index(9): 3})), MultiIndex((Index(14),), {Index(14): 3})), MultiIndex((Index(15),), {Index(15): 3})), Indexed(Sum(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 8)), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(16),), {Index(16): 3})), Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(17),), {Index(17): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 8), MultiIndex((Index(17),), {Index(17): 3}))), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(18),), {Index(18): 3})), MultiIndex((Index(18), Index(17)), {Index(17): 3, Index(18): 3})), MultiIndex((Index(19), Index(20)), {Index(19): 3, Index(20): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 9)))), MultiIndex((Index(19), Index(20)), {Index(19): 3, Index(20): 3})), MultiIndex((Index(21), Index(16)), {Index(21): 3, Index(16): 3}))), MultiIndex((Index(16),), {Index(16): 3})), MultiIndex((Index(21),), {Index(21): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(ComponentTensor(Product(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 10), MultiIndex((Index(22),), {Index(22): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 9)))), MultiIndex((Index(22),), {Index(22): 3})), MultiIndex((Index(23),), {Index(23): 3}))), MultiIndex((Index(23),), {Index(23): 3}))), MultiIndex((Index(15),), {Index(15): 3}))), Product(Indexed(ComponentTensor(IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 8)), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(9),), {Index(9): 3})), Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(10),), {Index(10): 3})), MultiIndex((Index(11),), {Index(11): 3})), MultiIndex((Index(11), Index(10)), {Index(11): 3, Index(10): 3})), MultiIndex((Index(12), Index(13)), {Index(13): 3, Index(12): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 9)))), MultiIndex((Index(12), Index(13)), {Index(13): 3, Index(12): 3})), MultiIndex((Index(14), Index(9)), {Index(14): 3, Index(9): 3}))), MultiIndex((Index(9),), {Index(9): 3})), MultiIndex((Index(14),), {Index(14): 3})), MultiIndex((Index(15),), {Index(15): 3})), Indexed(ComponentTensor(IndexSum(Sum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(16),), {Index(16): 3})), Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(17),), {Index(17): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 8), MultiIndex((Index(17),), {Index(17): 3}))), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(18),), {Index(18): 3})), MultiIndex((Index(18), Index(17)), {Index(17): 3, Index(18): 3})), MultiIndex((Index(19), Index(20)), {Index(19): 3, Index(20): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 9)))), MultiIndex((Index(19), Index(20)), {Index(19): 3, Index(20): 3})), MultiIndex((Index(21), Index(16)), {Index(21): 3, Index(16): 3}))), Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 8)), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(16),), {Index(16): 3})), Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(17),), {Index(17): 3})), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(18),), {Index(18): 3})), MultiIndex((Index(18), Index(17)), {Index(17): 3, Index(18): 3})), MultiIndex((Index(19), Index(20)), {Index(19): 3, Index(20): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 9)))), MultiIndex((Index(19), Index(20)), {Index(19): 3, Index(20): 3})), MultiIndex((Index(21), Index(16)), {Index(21): 3, Index(16): 3})))), MultiIndex((Index(16),), {Index(16): 3})), MultiIndex((Index(21),), {Index(21): 3})), MultiIndex((Index(15),), {Index(15): 3})))), MultiIndex((Index(15),), {Index(15): 3})), Product(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(24),), {Index(24): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(25),), {Index(25): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 9), MultiIndex((Index(25),), {Index(25): 3})))), MultiIndex((Index(25),), {Index(25): 3})), MultiIndex((Index(24),), {Index(24): 3}))), MultiIndex((Index(24),), {Index(24): 3})), IndexSum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(26),), {Index(26): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Sum(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), MultiIndex((Index(27),), {Index(27): 3})), SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 9), MultiIndex((Index(27),), {Index(27): 3})))), MultiIndex((Index(27),), {Index(27): 3})), MultiIndex((Index(26),), {Index(26): 3}))), MultiIndex((Index(26),), {Index(26): 3})))))), Sum(Division(Product(Abs(Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 9)))), IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(28),), {Index(28): 3})), Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(28),), {Index(28): 3}))), MultiIndex((Index(28),), {Index(28): 3}))), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 4)), Sum(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(29),), {Index(29): 3})), Indexed(ComponentTensor(IndexSum(Sum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(30),), {Index(30): 3})), Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(31),), {Index(31): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 8), MultiIndex((Index(31),), {Index(31): 3}))), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(32),), {Index(32): 3})), MultiIndex((Index(32), Index(31)), {Index(31): 3, Index(32): 3})), MultiIndex((Index(33), Index(34)), {Index(33): 3, Index(34): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 9)))), MultiIndex((Index(33), Index(34)), {Index(33): 3, Index(34): 3})), MultiIndex((Index(35), Index(30)), {Index(35): 3, Index(30): 3}))), Product(Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(31),), {Index(31): 3})), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(32),), {Index(32): 3})), MultiIndex((Index(32), Index(31)), {Index(31): 3, Index(32): 3})), MultiIndex((Index(33), Index(34)), {Index(33): 3, Index(34): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 9)))), MultiIndex((Index(33), Index(34)), {Index(33): 3, Index(34): 3})), MultiIndex((Index(35), Index(30)), {Index(35): 3, Index(30): 3})), Indexed(Sum(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 8)), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), ComponentTensor(Product(IntValue(-1, (), (), {}), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 12), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 13)), MultiIndex((Index(36),), {Index(36): 3}))), MultiIndex((Index(36),), {Index(36): 3})), MultiIndex((Index(37),), {Index(37): 3}))), MultiIndex((Index(37),), {Index(37): 3}))), MultiIndex((Index(30),), {Index(30): 3})))), MultiIndex((Index(30),), {Index(30): 3})), MultiIndex((Index(35),), {Index(35): 3})), MultiIndex((Index(29),), {Index(29): 3}))), MultiIndex((Index(29),), {Index(29): 3})), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 2), IndexSum(IndexSum(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(38),), {Index(38): 3})), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(39),), {Index(39): 3})), MultiIndex((Index(39), Index(38)), {Index(39): 3, Index(38): 3})), MultiIndex((Index(40), Index(41)), {Index(40): 3, Index(41): 3})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(42),), {Index(42): 3})), MultiIndex((Index(43),), {Index(43): 3})), MultiIndex((Index(43), Index(42)), {Index(43): 3, Index(42): 3})), MultiIndex((Index(40), Index(41)), {Index(40): 3, Index(41): 3}))), MultiIndex((Index(40),), {Index(40): 3})), MultiIndex((Index(41),), {Index(41): 3}))))))), Measure('cell', 0, None)), Integral(Product(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 1), MultiIndex((Index(44),), {Index(44): 3})), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 15), MultiIndex((Index(44),), {Index(44): 3}))), MultiIndex((Index(44),), {Index(44): 3})), Product(IndexSum(Product(Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 15), MultiIndex((Index(45),), {Index(45): 3})), Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), MultiIndex((Index(45),), {Index(45): 3}))), MultiIndex((Index(45),), {Index(45): 3})), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 14), Division(FloatValue(1, (), (), {}), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3))))), Measure('exterior_facet', 0, None))])";
}

/// Return the rank of the global tensor (r)
unsigned int nsedualmomentum3d_form_0::rank() const
{
    return 2;
}

/// Return the number of coefficients (n)
unsigned int nsedualmomentum3d_form_0::num_coefficients() const
{
    return 16;
}
 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Return the number of cell domains
unsigned int nsedualmomentum3d_form_0::num_cell_domains() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int nsedualmomentum3d_form_0::num_exterior_facet_domains() const
{
    return 1;
}

/// Return the number of interior facet domains
unsigned int nsedualmomentum3d_form_0::num_interior_facet_domains() const
{
    return 0;
}
#else

/// Return the number of cell domains
unsigned int nsedualmomentum3d_form_0::num_cell_integrals() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int nsedualmomentum3d_form_0::num_exterior_facet_integrals() const
{
    return 1;
}

/// Return the number of interior facet domains
unsigned int nsedualmomentum3d_form_0::num_interior_facet_integrals() const
{
    return 0;
}

#endif

/// Create a new finite element for argument function i
ufc::finite_element* nsedualmomentum3d_form_0::create_finite_element(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsedualmomentum3d_finite_element_2();
        break;
      }
    case 1:
      {
        return new nsedualmomentum3d_finite_element_2();
        break;
      }
    case 2:
      {
        return new nsedualmomentum3d_finite_element_2();
        break;
      }
    case 3:
      {
        return new nsedualmomentum3d_finite_element_1();
        break;
      }
    case 4:
      {
        return new nsedualmomentum3d_finite_element_1();
        break;
      }
    case 5:
      {
        return new nsedualmomentum3d_finite_element_0();
        break;
      }
    case 6:
      {
        return new nsedualmomentum3d_finite_element_0();
        break;
      }
    case 7:
      {
        return new nsedualmomentum3d_finite_element_0();
        break;
      }
    case 8:
      {
        return new nsedualmomentum3d_finite_element_0();
        break;
      }
    case 9:
      {
        return new nsedualmomentum3d_finite_element_0();
        break;
      }
    case 10:
      {
        return new nsedualmomentum3d_finite_element_2();
        break;
      }
    case 11:
      {
        return new nsedualmomentum3d_finite_element_1();
        break;
      }
    case 12:
      {
        return new nsedualmomentum3d_finite_element_2();
        break;
      }
    case 13:
      {
        return new nsedualmomentum3d_finite_element_0();
        break;
      }
    case 14:
      {
        return new nsedualmomentum3d_finite_element_2();
        break;
      }
    case 15:
      {
        return new nsedualmomentum3d_finite_element_2();
        break;
      }
    case 16:
      {
        return new nsedualmomentum3d_finite_element_0();
        break;
      }
    case 17:
      {
        return new nsedualmomentum3d_finite_element_2();
        break;
      }
    }
    
    return 0;
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Create a new dofmap for argument function i
ufc::dofmap* nsedualmomentum3d_form_0::create_dofmap(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsedualmomentum3d_dofmap_2();
        break;
      }
    case 1:
      {
        return new nsedualmomentum3d_dofmap_2();
        break;
      }
    case 2:
      {
        return new nsedualmomentum3d_dofmap_2();
        break;
      }
    case 3:
      {
        return new nsedualmomentum3d_dofmap_1();
        break;
      }
    case 4:
      {
        return new nsedualmomentum3d_dofmap_1();
        break;
      }
    case 5:
      {
        return new nsedualmomentum3d_dofmap_0();
        break;
      }
    case 6:
      {
        return new nsedualmomentum3d_dofmap_0();
        break;
      }
    case 7:
      {
        return new nsedualmomentum3d_dofmap_0();
        break;
      }
    case 8:
      {
        return new nsedualmomentum3d_dofmap_0();
        break;
      }
    case 9:
      {
        return new nsedualmomentum3d_dofmap_0();
        break;
      }
    case 10:
      {
        return new nsedualmomentum3d_dofmap_2();
        break;
      }
    case 11:
      {
        return new nsedualmomentum3d_dofmap_1();
        break;
      }
    case 12:
      {
        return new nsedualmomentum3d_dofmap_2();
        break;
      }
    case 13:
      {
        return new nsedualmomentum3d_dofmap_0();
        break;
      }
    case 14:
      {
        return new nsedualmomentum3d_dofmap_2();
        break;
      }
    case 15:
      {
        return new nsedualmomentum3d_dofmap_2();
        break;
      }
    case 16:
      {
        return new nsedualmomentum3d_dofmap_0();
        break;
      }
    case 17:
      {
        return new nsedualmomentum3d_dofmap_2();
        break;
      }
    }
    
    return 0;
}
#else

/// Create a new dofmap for argument function i
ufc::dof_map* nsedualmomentum3d_form_0::create_dof_map(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsedualmomentum3d_dofmap_2();
        break;
      }
    case 1:
      {
        return new nsedualmomentum3d_dofmap_2();
        break;
      }
    case 2:
      {
        return new nsedualmomentum3d_dofmap_2();
        break;
      }
    case 3:
      {
        return new nsedualmomentum3d_dofmap_1();
        break;
      }
    case 4:
      {
        return new nsedualmomentum3d_dofmap_1();
        break;
      }
    case 5:
      {
        return new nsedualmomentum3d_dofmap_0();
        break;
      }
    case 6:
      {
        return new nsedualmomentum3d_dofmap_0();
        break;
      }
    case 7:
      {
        return new nsedualmomentum3d_dofmap_0();
        break;
      }
    case 8:
      {
        return new nsedualmomentum3d_dofmap_0();
        break;
      }
    case 9:
      {
        return new nsedualmomentum3d_dofmap_0();
        break;
      }
    case 10:
      {
        return new nsedualmomentum3d_dofmap_2();
        break;
      }
    case 11:
      {
        return new nsedualmomentum3d_dofmap_1();
        break;
      }
    case 12:
      {
        return new nsedualmomentum3d_dofmap_2();
        break;
      }
    case 13:
      {
        return new nsedualmomentum3d_dofmap_0();
        break;
      }
    case 14:
      {
        return new nsedualmomentum3d_dofmap_2();
        break;
      }
    case 15:
      {
        return new nsedualmomentum3d_dofmap_2();
        break;
      }
    case 16:
      {
        return new nsedualmomentum3d_dofmap_0();
        break;
      }
    case 17:
      {
        return new nsedualmomentum3d_dofmap_2();
        break;
      }
    }
    
    return 0;
}
#endif
/// Create a new cell integral on sub domain i
ufc::cell_integral* nsedualmomentum3d_form_0::create_cell_integral(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsedualmomentum3d_cell_integral_0_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new exterior facet integral on sub domain i
ufc::exterior_facet_integral* nsedualmomentum3d_form_0::create_exterior_facet_integral(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsedualmomentum3d_exterior_facet_integral_0_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new interior facet integral on sub domain i
ufc::interior_facet_integral* nsedualmomentum3d_form_0::create_interior_facet_integral(unsigned int i) const
{
    return 0;
}

/// Constructor
nsedualmomentum3d_form_1::nsedualmomentum3d_form_1() : ufc::form()
{
    // Do nothing
}

/// Destructor
nsedualmomentum3d_form_1::~nsedualmomentum3d_form_1()
{
    // Do nothing
}

/// Return a string identifying the form
const char* nsedualmomentum3d_form_1::signature() const
{
    return "Form([Integral(Sum(Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 4), IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(0),), {Index(0): 3})), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 8), MultiIndex((Index(0),), {Index(0): 3}))), MultiIndex((Index(0),), {Index(0): 3}))), Sum(IndexSum(Product(Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(1),), {Index(1): 3})), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 6), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3})), Product(IntValue(-1, (), (), {}), Sum(Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 2), IndexSum(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(2),), {Index(2): 3})), MultiIndex((Index(2),), {Index(2): 3})), MultiIndex((Index(2),), {Index(2): 3}))), Product(IndexSum(Product(Indexed(ComponentTensor(IndexSum(Sum(Sum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(3),), {Index(3): 3}))), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((Index(4),), {Index(4): 3})), Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(5),), {Index(5): 3})), MultiIndex((Index(3),), {Index(3): 3}))), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((Index(6),), {Index(6): 3})), MultiIndex((Index(6), Index(5)), {Index(5): 3, Index(6): 3})), MultiIndex((Index(7), Index(8)), {Index(7): 3, Index(8): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 7)))), MultiIndex((Index(7), Index(8)), {Index(7): 3, Index(8): 3})), MultiIndex((Index(9), Index(4)), {Index(4): 3, Index(9): 3}))), Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 6)), MultiIndex((Index(3),), {Index(3): 3}))), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((Index(4),), {Index(4): 3})), Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(5),), {Index(5): 3})), MultiIndex((Index(3),), {Index(3): 3}))), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((Index(6),), {Index(6): 3})), MultiIndex((Index(6), Index(5)), {Index(5): 3, Index(6): 3})), MultiIndex((Index(7), Index(8)), {Index(7): 3, Index(8): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 7)))), MultiIndex((Index(7), Index(8)), {Index(7): 3, Index(8): 3})), MultiIndex((Index(9), Index(4)), {Index(4): 3, Index(9): 3})))), Sum(Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(3),), {Index(3): 3}))), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((Index(4),), {Index(4): 3})), Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Sum(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(5),), {Index(5): 3})), SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 6), MultiIndex((Index(5),), {Index(5): 3}))), MultiIndex((Index(3),), {Index(3): 3}))), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((Index(6),), {Index(6): 3})), MultiIndex((Index(6), Index(5)), {Index(5): 3, Index(6): 3})), MultiIndex((Index(7), Index(8)), {Index(7): 3, Index(8): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 7)))), MultiIndex((Index(7), Index(8)), {Index(7): 3, Index(8): 3})), MultiIndex((Index(9), Index(4)), {Index(4): 3, Index(9): 3}))), Product(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(Coefficient(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(3),), {Index(3): 3}))), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((Index(4),), {Index(4): 3})), Indexed(ComponentTensor(Product(Indexed(ComponentTensor(Indexed(ComponentTensor(Product(FloatValue(0.5, (), (), {}), Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('tetrahedron', Space(3)), 1, 3, None), 0), MultiIndex((Index(5),), {Index(5): 3})), MultiIndex((Index(3),), {Index(3): 3}))), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((Index(6),), {Index(6): 3})), MultiIndex((Index(6), Index(5)), {Index(5): 3, Index(6): 3})), MultiIndex((Index(7), Index(8)), {Index(7): 3, Index(8): 3})), Product(FloatValue(0.5, (), (), {}), Sum(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 7)))), MultiIndex((Index(7), Index(8)), {Index(7): 3, Index(8): 3})), MultiIndex((Index(9), Index(4)), {Index(4): 3, Index(9): 3}))))), MultiIndex((Index(4),), {Index(4): 3})), MultiIndex((Index(9),), {Index(9): 3})), MultiIndex((Index(10),), {Index(10): 3})), Indexed(ComponentTensor(SpatialDerivative(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 2), MultiIndex((Index(11),), {Index(11): 3})), MultiIndex((Index(11),), {Index(11): 3})), MultiIndex((Index(10),), {Index(10): 3}))), MultiIndex((Index(10),), {Index(10): 3})), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 5), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3), Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3), Power(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 3), FloatValue(-1.5, (), (), {}))))))))))), Measure('cell', 0, None))])";
}

/// Return the rank of the global tensor (r)
unsigned int nsedualmomentum3d_form_1::rank() const
{
    return 1;
}

/// Return the number of coefficients (n)
unsigned int nsedualmomentum3d_form_1::num_coefficients() const
{
    return 9;
}
 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Return the number of cell domains
unsigned int nsedualmomentum3d_form_1::num_cell_domains() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int nsedualmomentum3d_form_1::num_exterior_facet_domains() const
{
    return 0;
}

/// Return the number of interior facet domains
unsigned int nsedualmomentum3d_form_1::num_interior_facet_domains() const
{
    return 0;
}
#else

/// Return the number of cell domains
unsigned int nsedualmomentum3d_form_1::num_cell_integrals() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int nsedualmomentum3d_form_1::num_exterior_facet_integrals() const
{
    return 0;
}

/// Return the number of interior facet domains
unsigned int nsedualmomentum3d_form_1::num_interior_facet_integrals() const
{
    return 0;
}

#endif

/// Create a new finite element for argument function i
ufc::finite_element* nsedualmomentum3d_form_1::create_finite_element(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsedualmomentum3d_finite_element_2();
        break;
      }
    case 1:
      {
        return new nsedualmomentum3d_finite_element_2();
        break;
      }
    case 2:
      {
        return new nsedualmomentum3d_finite_element_1();
        break;
      }
    case 3:
      {
        return new nsedualmomentum3d_finite_element_1();
        break;
      }
    case 4:
      {
        return new nsedualmomentum3d_finite_element_0();
        break;
      }
    case 5:
      {
        return new nsedualmomentum3d_finite_element_0();
        break;
      }
    case 6:
      {
        return new nsedualmomentum3d_finite_element_0();
        break;
      }
    case 7:
      {
        return new nsedualmomentum3d_finite_element_2();
        break;
      }
    case 8:
      {
        return new nsedualmomentum3d_finite_element_1();
        break;
      }
    case 9:
      {
        return new nsedualmomentum3d_finite_element_2();
        break;
      }
    }
    
    return 0;
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Create a new dofmap for argument function i
ufc::dofmap* nsedualmomentum3d_form_1::create_dofmap(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsedualmomentum3d_dofmap_2();
        break;
      }
    case 1:
      {
        return new nsedualmomentum3d_dofmap_2();
        break;
      }
    case 2:
      {
        return new nsedualmomentum3d_dofmap_1();
        break;
      }
    case 3:
      {
        return new nsedualmomentum3d_dofmap_1();
        break;
      }
    case 4:
      {
        return new nsedualmomentum3d_dofmap_0();
        break;
      }
    case 5:
      {
        return new nsedualmomentum3d_dofmap_0();
        break;
      }
    case 6:
      {
        return new nsedualmomentum3d_dofmap_0();
        break;
      }
    case 7:
      {
        return new nsedualmomentum3d_dofmap_2();
        break;
      }
    case 8:
      {
        return new nsedualmomentum3d_dofmap_1();
        break;
      }
    case 9:
      {
        return new nsedualmomentum3d_dofmap_2();
        break;
      }
    }
    
    return 0;
}
#else

/// Create a new dofmap for argument function i
ufc::dof_map* nsedualmomentum3d_form_1::create_dof_map(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsedualmomentum3d_dofmap_2();
        break;
      }
    case 1:
      {
        return new nsedualmomentum3d_dofmap_2();
        break;
      }
    case 2:
      {
        return new nsedualmomentum3d_dofmap_1();
        break;
      }
    case 3:
      {
        return new nsedualmomentum3d_dofmap_1();
        break;
      }
    case 4:
      {
        return new nsedualmomentum3d_dofmap_0();
        break;
      }
    case 5:
      {
        return new nsedualmomentum3d_dofmap_0();
        break;
      }
    case 6:
      {
        return new nsedualmomentum3d_dofmap_0();
        break;
      }
    case 7:
      {
        return new nsedualmomentum3d_dofmap_2();
        break;
      }
    case 8:
      {
        return new nsedualmomentum3d_dofmap_1();
        break;
      }
    case 9:
      {
        return new nsedualmomentum3d_dofmap_2();
        break;
      }
    }
    
    return 0;
}
#endif
/// Create a new cell integral on sub domain i
ufc::cell_integral* nsedualmomentum3d_form_1::create_cell_integral(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new nsedualmomentum3d_cell_integral_1_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new exterior facet integral on sub domain i
ufc::exterior_facet_integral* nsedualmomentum3d_form_1::create_exterior_facet_integral(unsigned int i) const
{
    return 0;
}

/// Create a new interior facet integral on sub domain i
ufc::interior_facet_integral* nsedualmomentum3d_form_1::create_interior_facet_integral(unsigned int i) const
{
    return 0;
}

